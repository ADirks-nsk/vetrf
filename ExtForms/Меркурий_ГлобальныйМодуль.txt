Перем Компонента;
//Перем Филиал;
//Перем ВыбРеквизит; //для выбора площадки
Перем КаталогОбработки, ИмяФайлаНастроек;
Перем Филиал;

Перем ЭтоSQL; 
Перем базаДанных;

Процедура УдалитьXML(ИмяФайла)
	Если ОтладкаЗапросовXML=0 Тогда 
		Попытка
			ФС.УдалитьФайл(ИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьПараметрыСписок(ИмяФайлаНастроек)
	Если фс.СуществуетФайл(ИмяФайлаНастроек)=0 Тогда
		Сообщить("Файл с константами ["+ИмяФайлаНастроек+"] не найден","!");
		Возврат;
	Иначе
		СписокКонстант=СоздатьОбъект("СписокЗначений");
		ЗначениеИзФайла(ИмяФайлаНастроек,СписокКонстант);
	КонецЕсли;

	param_username = СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
	param_password = СписокКонстант.Получить("param_password");
	param_issuer_id = СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id = СписокКонстант.Получить("param_service_id") ;
	param_api_key = СписокКонстант.Получить("param_api_key") ;

	param_intiator_login = СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
	param_vetdoctor_fio = СписокКонстант.Получить("param_vetdoctor_fio");
	param_vetdoctor_post = СписокКонстант.Получить("param_vetdoctor_post");
	
	Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
	Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка");

	Страна 	= СписокКонстант.Получить("Страна");
	Регион 	= СписокКонстант.Получить("Регион");
	Город 	= СписокКонстант.Получить("Город");
	
	ВСД_Экспертиза 	= СписокКонстант.Получить("ВСД_Экспертиза");	
	Если ПустоеЗначение(ВСД_Экспертиза)=1 Тогда		
		ВСД_Экспертиза 	= "Произ.лабор ";
	КонецЕсли;
	
	ВСД_Местность 	= СписокКонстант.Получить("ВСД_Местность");
	Если ПустоеЗначение(ВСД_Местность)=1  Тогда 
		ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	КонецЕсли;

	ВСД_ОсобыеОтметки = СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	
	КаталогЛогов = КаталогИБ()+"logs\";
	Если ФС.СуществуетФайл(КаталогЛогов)=0 Тогда 
		ФС.СоздатьКаталог(КаталогЛогов);
	КонецЕсли;
	
	ПаузаСек = СписокКонстант.Получить("ПаузаСек");
	Если ПустоеЗначение(ПаузаСек)=1 Тогда
		ПаузаСек=10;
	КонецЕсли;
	
	НазваниеРеквизитаГрузополучатель  = СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
	Если ПустоеЗначение(НазваниеРеквизитаГрузополучатель)=1 Тогда
		НазваниеРеквизитаГрузополучатель="Контрагент";
	КонецЕсли;
	
	ОтладкаЗапросовXML  = СписокКонстант.Получить("ОтладкаЗапросовXML");
	
	//СпрВидСв = СоздатьОбъект("Справочник.ВидыСвойств");	
	//Если СпрВидСв.НайтиПоНаименованию("Тип продукции ВСД (Охл / Зам / Колбаса)",0,1)=0 Тогда
	//	Сообщить("Тип св-в [Тип продукции ВСД (Охл / Зам / Колбаса)] не найдено");	
	//	//Возврат;
	//Иначе
	//	ВыбВидСвойств = СпрВидСв.ТекущийЭлемент();	
	//КонецЕсли;
	ВСД_Продукция_Свойство = СписокКонстант.Получить("ВСД_Продукция_Свойство");
	Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
		
	НазваниеРеквизитаКоличествоМест  = СписокКонстант.Получить("НазваниеРеквизитаКоличествоМест");
	Если ПустоеЗначение(НазваниеРеквизитаКоличествоМест)=1 Тогда
		НазваниеРеквизитаКоличествоМест="КоличествоМест";
	КонецЕсли;
	
	ПропускатьПустыеСвойства = СписокКонстант.Получить("ПропускатьПустыеСвойства");
	
	НазваниеВидаДокументаРеализация = СписокКонстант.Получить("НазваниеВидаДокументаРеализация");
	Если ПустоеЗначение(НазваниеВидаДокументаРеализация)=1 Тогда 
		НазваниеВидаДокументаРеализация = "Реализация";
	КонецЕсли;	
	
	НазваниеРеквизитаКоличество = СписокКонстант.Получить("НазваниеРеквизитаКоличество");
	Если ПустоеЗначение(НазваниеРеквизитаКоличество)=1 Тогда 
		НазваниеРеквизитаКоличество = "Количество";
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
 // предопределенная процедура
 //
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;        
	
КонецПроцедуры 

Процедура Пауза(ЗадержкаСекунд)
	//Состояние("Пауза "+ПаузаСек+" сек");
	//scr = СоздатьОбъект("WScript.Shell");
	//scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ЗадержкаСекунд) ),0,1); 
	Компонента.Pause(ЗадержкаСекунд*1000); // в ms
КонецПроцедуры


Функция НайтиФормуУпаковки(guid, name)	
	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Форма упаковки не определена "+guid+" = "+name,"!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	
	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			//Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Единица измерения не определена ["+guid+"]","!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции


////****************** Площадки **********************************


Функция НайтиХСпоGUID(Guid)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗагрузитьПлощадкуПоGUID(GUID, ХС="")
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise = objDom.selectSingleNode("//enterprise") ;
						
	guid = enterprise.selectSingleNode("guid").text;
	uuid = enterprise.selectSingleNode("uuid").text;
		
	//updateDate = unit.selectSingleNode("updateDate").text;
	//createDate = unit.selectSingleNode("createDate").text;		
	name = enterprise.selectSingleNode("name").text;
	active = enterprise.selectSingleNode("active").text;
		
	address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
	
	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=0 Тогда 
		Спр.Новый();
		Спр.УстановитьНовыйКод("00");
		
	КонецЕсли;
	
	Спр.Наименование = name;
	Спр.Адрес = address;
	Спр.GUID = guid;
	Спр.UUID = uuid;	
	
	Если ПустоеЗначение(ХС)=1 Тогда
		Сообщить("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ","!!");
		//Возврат;
	Иначе 
		Спр.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;	
	
	спр.Записать();
	Сообщить("Записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+Спр.Наименование+"] GUID = "+ Guid);		
	
КонецПроцедуры

Процедура ЗагрузитьПлощадки(ХС)	

	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    activityLocationList = objDom.selectNodes("//activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
						
		guid = activityLocation.selectSingleNode("enterprise").selectSingleNode("guid").text;
		
    	ЗагрузитьПлощадкуПоGUID(guid, ХС);
					
	КонецЦикла;
	
	Сообщить("Загрузка площадок завершена","i");
КонецПроцедуры

Процедура ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС="", тзПлощадки)
	
	Сообщить("Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise = objDom.selectSingleNode("//enterprise") ;
						
	guid = enterprise.selectSingleNode("guid").text;
	uuid = enterprise.selectSingleNode("uuid").text;
		
	updateDate = enterprise.selectSingleNode("updateDate").text;
	createDate = enterprise.selectSingleNode("createDate").text;		
	name = enterprise.selectSingleNode("name").text;
	active = enterprise.selectSingleNode("active").text;
		
	address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
	
	Попытка
		owner = enterprise.selectSingleNode("owner").selectSingleNode("guid").text;
		ownerName = enterprise.selectSingleNode("owner").selectSingleNode("name").text;
	Исключение
		owner="";
	КонецПопытки;
	
	Если owner<>СокрЛП(ХС.GUID) Тогда 
		Сообщить("Площадка пропущена ["+name+"] принадлежит другому ХозСубъекту ["+ownerName+"] ","!");
		//Возврат;
	КонецЕсли;
	
	тзПлощадки.НоваяСтрока();
	
	тзПлощадки.Наименование = name;
	тзПлощадки.Адрес = address;
	тзПлощадки.Активна = active;
	тзПлощадки.GUID = guid;
	тзПлощадки.UUID = uuid;
	тзПлощадки.ДатаСоздания = createDate;
	тзПлощадки.ДатаИзменения = updateDate;
	Если ПустоеЗначение(owner)=0 тогда 
		тзПлощадки.ХозСубъект = НайтиХСпоGUID(owner);
		//тзПлощадки.ХозСубъектНаименование = ownerName;
	Иначе
		тзПлощадки.ХозСубъект = ХС;
		//тзПлощадки.ХозСубъектНаименование = ХС.Наименование;
	КонецЕсли;
		
	Сообщить("Загружена информация о площадке ["+name+"] GUID = "+ guid,"i");		
	
	УдалитьXML( Компонента.LogFilename );
КонецПроцедуры

Процедура ЗагрузитьПлощадкиТЗ(ХС)	

	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");	
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");
	
    activityLocationList = objDom.selectNodes("//activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
						
		guid = activityLocation.selectSingleNode("enterprise").selectSingleNode("guid").text;
		
    	ЗагрузитьПлощадкуПоGuidТЗ(guid, ХС, тзПлощадки);
					
	КонецЦикла;
	
	Сообщить("Загрузка информации о площадках завершена","i");
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");	

	ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");	
	
	УдалитьXML( Компонента.LogFilename );
КонецПроцедуры


Функция НайтиПлощадку(Guid)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
			//создать площадку

			ЗагрузитьПлощадкуПоGUID(guid);
			
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("ВСД_Площадка не найдена ["+Guid+"]","!");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

//*******************************************
Функция НайтиПлощадкуПоКонтрагенту(ВыбКлиент)
	результат = "";
	
	Если ЭтоSQL=1 Тогда 	
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "select 
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	$СпрПл.GUID,
		|	$СпрПл.Контрагент
		|from $Справочник.ВСД_Площадка as СпрПл 
		|where 
		|	$СпрПл.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	  	
	Иначе	
		Запрос = базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "select 
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	СпрПл.GUID,
		|	СпрПл.Контрагент
		|from [Справочник.ВСД_Площадка] as СпрПл 
		|where 
		|	СпрПл.Контрагент=:ВыбКлиент
		|";
		
		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
	
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;
	
	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	КонецЕсли;
	
	Возврат результат;
КонецФункции


Функция НайтиПлощадкуПоСкладу(ВыбСклад)
	Рез = "";
	если ПустоеЗначение(ВыбСклад)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("Склад",ВыбСклад,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка со складом ["+ВыбСклад+"] не найдена: ","!");
			//создать площадку

			//ЗагрузитьПлощадкуПоGUID(guid);
			
		КонецЕсли;
	Иначе
		Сообщить("не указан склад Площадки","!");
	КонецЕсли;
		
	Возврат рез;
КонецФункции


//****************** ХозСубъкты **********************************
Функция ПолучитьИНН(ВыбКлиент)
	
	Попытка		
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);

	КонецЕсли;
КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьКПП(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение КПП юр лица.
//  
// Описание:
//  Функция возращает КПП из переданной строки 
//
Функция ПолучитьКПП(ВыбКлиент)
	
	//Если ПустоеЗначение(ВыбКлиент.КПП)=0 Тогда 
	//	Возврат СокрЛП(ВыбКлиент.КПП);		
	//Иначе
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

		Если Найти(ИННКПП, "\") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);
	
		ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
		Иначе
			Возврат "";
	
		КонецЕсли;
	//КонецЕсли;
КонецФункции // ПолучитьКПП()

Функция ПолучитьОГРН(ХС)
	возврат ХС.ОГРН;
КонецФункции

Процедура ПолучитьОтветХС( applicationID, ХС)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("base:guid").text;
	uuid = enterprise.selectSingleNode("base:uuid").text;
	active = enterprise.selectSingleNode("base:active").text;
						
	если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьGuidХС(ХС)

	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат "ERROR";
	КонецЕсли;	
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");		
	Результат = Компонента.GetBusinessEntityByINN( ИНН );	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда

	  	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(Компонента.LogFilename);    
	    	
		Попытка			
		    enterprise=objDom.selectSingleNode("//businessEntity") ;
			guid = enterprise.selectSingleNode("guid").text;
			uuid = enterprise.selectSingleNode("uuid").text;
			active = enterprise.selectSingleNode("active").text;
		
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ХС);
			спр.GUID = GUID;
			спр.UUID = uuid;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);			
		Исключение			
			Сообщить("Получен пустой ответ GetBusinessEntityByINN","!");
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

Функция НайтиПродукцию(Guid)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена. Выполните загрузку справочника Продукция");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Guid;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция Найти_Продукция_Элемент(Название, Uuid="", ВСД_Продукция, ВСД_ВидПродукции)
	Рез = "";
	Uuid = СокрЛП(Uuid);
	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
	если ПустоеЗначение(Uuid)=0 Тогда			
		
		Если Спр.НайтиПоРеквизиту("Uuid",Uuid,1)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент UUID ["+Uuid+"] не найдена. Создан новый элемент. ");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.Записать();
			
		КонецЕсли;
	Иначе
		Если Спр.НайтиПоНаименованию(Название,0,0)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент название ["+Название+"] не найдена. Создан новый элемент.");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			//Спр.Uuid = Uuid;
			Спр.Записать();
		КонецЕсли;
	КонецЕсли;
	рез = Спр.ТекущийЭлемент();
	
	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(Guid)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена. Выполните инициализацию", "!");
			//создать 
			//Спр.Новый();
			////Спр.Код = ;
			//Спр.Наименование = Guid;
			//Спр.GUID = guid;
			//Спр.Записать();
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid Вида продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции


Функция НайтиСтрануПоGUID(GUID, name)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Страна");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Страна "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиРегионПоGUID(GUID, name)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Регион");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Регион "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиГородПоGUID(GUID, name)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Город");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			//Сообщить("Guid "+Guid+" не найден, создайте ВСД_Город, выполните синхронизацию");
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Город "+GUID);
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции


Процедура ЗагрузитьXML_ЕдиницыИзмерения(имяФайла)
		
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    unitList = objDom.selectNodes("//unit") ;
    Для i1 = 0 По unitList.length - 1 Цикл
        unit=unitList.item(i1);
		
		uuid = unit.selectSingleNode("uuid").text;
		guid = unit.selectSingleNode("guid").text;
		//updateDate = unit.selectSingleNode("updateDate").text;
		//createDate = unit.selectSingleNode("createDate").text;		
		name = unit.selectSingleNode("name").text;
		factor = unit.selectSingleNode("factor").text;
		//commonUnitGuid = unit.selectSingleNode("commonUnitGuid").text;
		
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Коэффициент = factor;
			Спр.Записать();

    КонецЦикла;
КонецПроцедуры

Процедура Загрузить_ВидПродукции(guid, Владелец)

	Если ПустоеЗначение(Владелец)=1 Тогда 
		Сообщить("Не указан владелец "+guid,"!");
		Возврат;
	КонецЕсли;

	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetSubProductByProductList( guid );
	
	//Отладка();
	
	//Если Результат="SUCCESS" Тогда
		
		//ЗагрузитьXML_Номенклатура( Компонента.LogFilename );
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		objDom=СоздатьОбъект("MSXML2.DOMDocument");
		objDom.load(Компонента.LogFilename);    
		
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		
		List = objDom.selectNodes("//subProduct") ;
		Для i1 = 0 По List.length - 1 Цикл
		    item = List.item(i1);

			uuid = item.selectSingleNode("uuid").text;
			guid = item.selectSingleNode("guid").text;
			st = item.selectSingleNode("status").text;
			updateDate = item.selectSingleNode("updateDate").text;
			createDate = item.selectSingleNode("createDate").text;		
			name = item.selectSingleNode("name").text;
			Попытка 
				code = item.selectSingleNode("code").text;
			Исключение
				code ="";
			КонецПопытки;
			
			Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
				//Рез = Спр.ТекущийЭлемент();
			Иначе
				Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
				Спр.Новый();
				//рез = Спр.ТекущийЭлемент();
			КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.КодТНВЭД = code;
			Спр.Владелец = Владелец.ТекущийЭлемент();
			Спр.Записать();
			
		КонецЦикла;
	//КонецЕсли;


КонецПроцедуры


//Процедура ПолучитьТовары(Тип)
Процедура Получить_Продукцию(Тип)
	
	// http://help.vetrf.ru/wiki/ProductType
	
	
	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetProductList( Тип );
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		//ЗагрузитьXML_Номенклатура( Компонента.LogFilename );		
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		objDom=СоздатьОбъект("MSXML2.DOMDocument");
		objDom.load(Компонента.LogFilename);    

		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		
		productList = objDom.selectNodes("//product") ;
		Для i1 = 0 По productList.length - 1 Цикл
		    product=productList.item(i1);
			
			uuid = product.selectSingleNode("uuid").text;
			guid = product.selectSingleNode("guid").text;
			st = product.selectSingleNode("status").text;
			updateDate = product.selectSingleNode("updateDate").text;
			createDate = product.selectSingleNode("createDate").text;		
			name = product.selectSingleNode("name").text;
			Попытка
				code = product.selectSingleNode("code").text;
			Исключение
				code ="";
			КонецПопытки;
			productType = product.selectSingleNode("productType").text;
			
			Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
				//Рез = Спр.ТекущийЭлемент();
			Иначе
				Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
				Спр.Новый();
				//рез = Спр.ТекущийЭлемент();
				Спр.Наименование = name;
				Спр.GUID = guid;
				Спр.UUID = UUID;
				Спр.КодТНВЭД = code;
				Спр.Тип = ProductType;
				Спр.Записать();
				
			КонецЕсли;		
			
			Сообщить("Загрузка [Видов продукции] "+name);
			Загрузить_ВидПродукции(guid, Спр.ТекущийЭлемент());
		КонецЦикла;
		
	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецПроцедуры

Процедура ПолучитьЕдиницыИзмерения()
	
	Сообщить(" Запрос GetUnitList ","i");		
	Результат = Компонента.GetUnitList();
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		ЗагрузитьXML_ЕдиницыИзмерения( Компонента.LogFilename );

	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецПроцедуры

Процедура ЗаполнитьФормыУпаковки()
	//http://help.vetrf.ru/wiki/PackingForm
	
	НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8",	"банки");
	НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8",	"биг бэги");
	НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8",	"бочки");
	НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8",	"жестяные банки");
	НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8",	"картонные коробки");
	НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8",	"крафтмешки");
	НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8",	"мешки");
	НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8",	"мешки полипропиленовые");
	НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8",	"навалом");
	НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8",	"насыпью");
	НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8",	"пакеты");
	НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8",	"полиблоки");
	НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые ящики");
	НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8",	"паллеты");
	НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8",	"полиэтилен");
	НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8",	"картон");
	НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8",	"стокинеты");
	НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8",	"коробки");
	НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8",	"прицеп");
	НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8",	"корзины");
	НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8",	"автоцистерна");
	НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8",	"мешки бумажные");
	НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые коробки");
	НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8",	"контейнер");
	НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8",	"поддоны");
	НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8",	"на подвесе");
	НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8",	"кипы");
	НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660",	"гофроящики");
	НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660",	"пластмассовые ящики");
КонецПроцедуры


Процедура ПриСменеВерсииСистемы()
	
	ИмяФайла="";
	КаталогОбработки="";
	ИмяФайлаНастроек = "";
	
	РасположениеФайла(КаталогОбработки, ИмяФайла);
	Если Найти(ВРЕГ(ИмяФайла),"ТЕСТ")=0 Тогда 	
		// РАБОЧАЯ		
		ИмяФайлаНастроек=КаталогОбработки+"Меркурий_Константы_"+СокрЛП(глПользователь.Код)+".tx8";
		ИмяDLL = "SoapDLL_work";
		ОбработкаОбмена = "Меркурий_Обмен.ert";		
		Форма.Заголовок("Меркурий - РАБОЧАЯ [!!!]");
	Иначе		
		// ТЕСТ
		ИмяФайлаНастроек=КаталогОбработки+"Меркурий_Константы_ТЕСТ_"+СокрЛП(глПользователь.Код)+".tx8";		
		ИмяDLL = "SoapDLL_test";
		ОбработкаОбмена = "Меркурий_Обмен_ТЕСТ.ert";	
		Форма.Заголовок("Меркурий - ТЕСТ");		
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);			
		Компонента = СоздатьОбъект("AddIn."+ИмяDLL); 		
	Исключение
		//Попытка 
		//	Если Вопрос("зарегистрировать dll ?",4)=6 Тогда 
		//		ЗарегистрироватьDLL();
		//	КонецЕсли;;			
		//Исключение
			Сообщить("Библиотека не зарегистрирована","!");
			Сообщить(ОписаниеОшибки());
			Возврат;
		//КонецПопытки;
		//ЗарегистрироватьDLL();
	КонецПопытки;	
	
	Если фс.СуществуетФайл(ИмяФайлаНастроек)=0 Тогда
		Сообщить("Файл с константами ["+ИмяФайлаНастроек+"] не найден.
		|Сохраните параметры ","!");			
	КонецЕсли;			
	ЗаполнитьПараметрыСписок(ИмяФайлаНастроек);
	
	Компонента.Init(      
		param_username,  	//string USERNAME 
        param_password, 	//string PASSWORD = 
        param_issuer_id, 	//string ISSUER_ID 
        param_service_id, 	// string SERVICE_ID = 
        param_api_key, 		//string API_KEY = 
        param_intiator_login, 	//string USER_LOGIN = 
        param_vetdoctor_login, //string VETDOCTOR_LOGIN = 
		КаталогЛогов,  // для логов
		ОтладкаЗапросовXML,
		param_vetdoctor_fio,
		param_vetdoctor_post
		);
		
КонецПроцедуры


Процедура ЗагрузитьСтраны()
	
	Сообщить(" Запрос GetCountryList ","i");		
	Результат = Компонента.GetCountryList( );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Спр = СоздатьОбъект("Справочник.ВСД_Страна");
    countryList = objDom.selectNodes("//country") ;
    Для i1 = 0 По countryList.length - 1 Цикл
        country=countryList.item(i1);
		
		uuid = country.selectSingleNode("uuid").text;
		guid = country.selectSingleNode("guid").text;
		st = country.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = country.selectSingleNode("name").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Страна ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Страна ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка стран завершена");
КонецПроцедуры

Процедура ЗагрузитьРегионы()
	
	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]","i");		
	Результат = Компонента.GetRegionList( СокрЛП(Страна.GUID) );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Спр = СоздатьОбъект("Справочник.ВСД_Регион");
    regionList = objDom.selectNodes("//region") ;
    Для i1 = 0 По regionList.length - 1 Цикл
        region=regionList.item(i1);
		
		uuid = region.selectSingleNode("uuid").text;
		guid = region.selectSingleNode("guid").text;
		st = region.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = region.selectSingleNode("name").text;
		view = region.selectSingleNode("view").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Регион ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Регион ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецПроцедуры

Функция ВыбратьВсеПлощадкиХС(ХС)
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";
	
	ВыбGuidХозСубъекта = (ХС.GUID);
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	//ТЗ.ВыбратьСтроку();	
	
	Возврат тз;
	
КонецФункции

Процедура ОткрытьПлощадкиПоХС(ВыбХС)
						
		тз = ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Процедура Инициализация()
	
	Если ПустоеЗначение(param_username)=1 Тогда 
		Предупреждение("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_password)=1 Тогда 
		Предупреждение("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_issuer_id)=1 Тогда 
		Предупреждение("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьФормыУпаковки();
	
	ЗагрузитьСтраны();

	ЗагрузитьРегионы();	
	
	ПолучитьЕдиницыИзмерения();
	
	Для А=1 По 8 Цикл
		Получить_Продукцию(А);
	КонецЦикла;
	
	Если ПустоеЗначение(Отправитель_ХозСубъект)=1 Тогда
		
		СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрКонтрагенты.Выбрать("Выберите фирму-отправитель вет справок",)=1 Тогда 
			ВыбКонтрагент = СпрКонтрагенты.ТекущийЭлемент();
			СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Если СпрХС.НайтиПоРеквизиту("Контрагент", ВыбКонтрагент ,1)=0 Тогда
				СпрХС.Новый();
				СпрХС.Наименование = ВыбКонтрагент .Наименование;
				СпрХС.Контрагент = ВыбКонтрагент ;
				СпрХС.ИНН = ПолучитьИНН(ВыбКонтрагент);
				СпрХС.Записать();
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			Иначе
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			КонецЕсли;			
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Результат = ПолучитьGuidХС(Отправитель_ХозСубъект);
	
	ИмяФайла = Компонента.LogFilename;
	Если Результат="SUCCESS" Тогда
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(ИмяФайла);    
		Попытка
			be = objDom.selectSingleNode("//businessEntity");
		Исключение
			Сообщить("Получен пустой ответ сервера. Заполните параметры подключения.","!");
			Возврат;
		КонецПопытки;
		guid = be.selectSingleNode("guid").text;
		Попытка 
			name = be.selectSingleNode("name").text;
		Исключение 
			name = be.selectSingleNode("fio").text;
		КонецПопытки;
		country = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("guid").text;
		countryName = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("name").text;
		region = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("guid").text;
		regionName = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("name").text;
		locality = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("guid").text;
		localityName = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("name").text;

		Если ПустоеЗначение(param_issuer_id)=1 Тогда 
			param_issuer_id = guid;
		Иначе
			Если НЕ(param_issuer_id = guid) Тогда 
				Сообщить("Ошибка в param_issuer_id, должно быть "+guid,"!");
			Иначе
				Сообщить("param_issuer_id - правильно "+name,"i");
			КонецЕсли;
		КонецЕсли;

		Страна 	= НайтиСтрануПоGUID(country, countryName);
		Регион 	= НайтиРегионПоGUID(region, regionName);			
		Город 	= НайтиГородПоGUID(locality, localityName);
		
		ЗагрузитьПлощадки( Отправитель_ХозСубъект );
				
		ВыбРеквизит = "Отправитель_Площадка";
		ОткрытьПлощадкиПоХС(Отправитель_ХозСубъект);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриОткрытии()
	ПриСменеВерсииСистемы();	

	ЭтоSQL = ФС.СуществуетФайл(КаталогИБ()+"1cv7.dba");	
	Если ЭтоSQL=1 Тогда 
		Попытка
			RS = СоздатьОбъект("ODBCRecordset");
			RS.УстБД1С();     
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	Иначе		
		Попытка
			базаДанных = СоздатьОбъект("SQLiteBase");
		Исключение
			ЗагрузитьВнешнююКомпоненту("1sqlite.dll");
			базаДанных = СоздатьОбъект("SQLiteBase");
		КонецПопытки;	
		базаДанных.Открыть(":memory:");	
	КонецЕсли;	
		
КонецПроцедуры

Процедура НайтиПлощадкиПоНазванию( ХС, УточнитьНазвание=1)
	
	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		Сообщить("Не указан ХозСубъект GUID ","!");
		Возврат;
	КонецЕсли;
			
	
	Стр = СокрЛП(ХС.Контрагент.ЮрФизЛицо.ПолнНаименование);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ЮрФизЛицо.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ]","i");		
	Результат = Компонента.GetRussianEnterpriseListByName( стр, СокрЛП(Регион.GUID) );
	//Отладка();
	
	Если Результат="SUCCESS" Тогда		
			  
	   Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");	
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");
	
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
	
    enterpriseList = objDom.selectNodes("//enterprise") ;
    Для i1 = 0 По enterpriseList.length - 1 Цикл
        enterprise=enterpriseList.item(i1);
									
		guid = enterprise.selectSingleNode("guid").text;
		uuid = enterprise.selectSingleNode("uuid").text;
		name = enterprise.selectSingleNode("name").text;
		active = enterprise.selectSingleNode("active").text;
			
		address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;			

		тзПлощадки.НоваяСтрока();
		тзПлощадки.Наименование = name;
		тзПлощадки.адрес = address;
		//тз.Регион = region;
		тзПлощадки.guid = guid;
		тзПлощадки.uuid = uuid;
		тзПлощадки.активна = active;
		тзПлощадки.ХозСубъект = ХС;
		
	КонецЦикла;
		
	Сообщить("Загрузка площадок завершена","i");
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");	

	ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");	
	
	УдалитьXML( Компонента.LogFilename );
	   
	КонецЕсли;
	
	УдалитьXML( Компонента.LogFilename );
КонецПроцедуры

Функция НайтиПартиюПоGUID(GUID)
	
	//Запрос = СоздатьОбъект("Запрос");
	//ТекстЗапроса = "
	//|id = Документ.ВСД_Партия.ТекущийДокумент;
	//|ДокGuid = Документ.ВСД_Партия.GUID;
	//|Условие (ДокGuid = GUID);
	//|Группировка id;
	//|Без Итогов;
	//|";
	//Запрос.Выполнить(ТекстЗапроса);
	//тз =СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(тз);
	
	Спр = СоздатьОбъект("Справочник.ВСД_Партия");	
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from $Справочник.ВСД_Партия as Партия  
	  	|where 
	  	|	$Партия.GUID= :GUID
	  	|";
		RS.УстановитьТекстовыйПараметр("GUID", GUID);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
			
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from [Справочник.ВСД_Партия] as Партия  
	  	|where 
	  	|	Партия.GUID= :GUID
	  	|";	
		Запрос.Подставлять("GUID", GUID);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	Если ПустоеЗначение(тз)=1 Тогда 
		Спр.Новый();
		//Док.ДокОснование = ДокОснование;
	Иначе
		Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,1));
		//Спр.СделатьНеПроведенным();
		Спр.СнятьПометкуУдаления();
	конецЕсли;
  	
	Возврат  Спр;
КонецФункции

Функция НайтиВсд(applicationId, uuid, ВидДокумента)
	// в запросе  не работает сравнение строк !!!
	//Запрос = СоздатьОбъект("Запрос");	
	//ТекстЗапроса = "
	//|id = Документ.ВСД_исходящий.ТекущийДокумент;
	//|ДокUuid = Документ.ВСД_исходящий.UUID;
	//|appID = Документ.ВСД_исходящий.applicationID;
	//|
	//|Условие (appID = applicationId) ;
	//|Группировка id;
	//|Без Итогов;
	//|";
	////И ((СокрП(ДокUuid) = UUID) или (СокрП(ДокUuid)=''))
	//Запрос.Выполнить(ТекстЗапроса);
	//тз =СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(тз);

	
	//
	// В первую очередь ищем UUID
	// если не находим - тогда по 	applicationId
	//
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		Если ПустоеЗначение(UUID)=0 Тогда 
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from $Документ."+ВидДокумента+" as ДокВСД  
		  	|where 
		  	|	( $ДокВСД.UUID = :uuid)
		  	|";
			RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
			RS.УстановитьТекстовыйПараметр("uuid", uuid);  
			//RS.Отладка(1);
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			
			Если тз.КоличествоСтрок()=0 Тогда 
				ТекстЗапроса = "
				|select 	              
			    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
			    |from $Документ."+ВидДокумента+" as ДокВСД  
			  	|where 
			  	|($ДокВСД.applicationId = :applicationId) 
			  	|";
				RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
				RS.УстановитьТекстовыйПараметр("uuid", uuid);  
				//RS.Отладка(1);
				тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
			КонецЕсли;
		Иначе
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from $Документ."+ВидДокумента+" as ДокВСД  
		  	|where 
		  	|($ДокВСД.applicationId = :applicationId) 
		  	|";
			RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
			RS.УстановитьТекстовыйПараметр("uuid", uuid);  
			//RS.Отладка(1);
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
		КонецЕсли;
	Иначе
		Если ПустоеЗначение(UUID)=0 Тогда 	
			Запрос = базаДанных.НовыйЗапрос();
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from [Документ."+ВидДокумента+"] as ДокВСД  
		  	|where 
		  	|	( ДокВСД.UUID = :uuid)
		  	|";	
			Запрос.Подставлять("applicationId", applicationId);
			Запрос.Подставлять("uuid", uuid);
			//тз.Отладка();
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			Если тз.КоличествоСтрок()=0 Тогда 
				ТекстЗапроса = "
				|select 	              
			    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
			    |from [Документ."+ВидДокумента+"] as ДокВСД  
			  	|where 
			  	|	(ДокВСД.applicationId= :applicationId) 
			  	|";	
				Запрос.Подставлять("applicationId", applicationId);
				Запрос.Подставлять("uuid", uuid);
				//тз.Отладка();
				ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			КонецЕсли;			
		Иначе
			Запрос = базаДанных.НовыйЗапрос();
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from [Документ."+ВидДокумента+"] as ДокВСД  
		  	|where 
		  	|	(ДокВСД.applicationId= :applicationId) 
		  	|";	
			Запрос.Подставлять("applicationId", applicationId);
			Запрос.Подставлять("uuid", uuid);
			//тз.Отладка();
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	//тз.ВыбратьСтроку();
	
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
		Док.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
	Иначе		
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));		
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;	
	
	Возврат Док;
КонецФункции

// ================= Групповая обработка документов =================================
//*******************************************
Функция НайтиХозСубъект(ВыбКлиент)
	
	Попытка		
		Если ПустоеЗначение(ВыбКлиент.Плательщик) = 0 Тогда 
			ВыбКлиент = ВыбКлиент.Плательщик;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	
	Если ЭтоSQL=1 Тогда 	
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "select 
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	$СпрХС.GUID,
		|	$СпрХС.Контрагент
		|from $Справочник.ВСД_ХозСубъект as СпрХС 
		|where 
		|	$СпрХС.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	  	
	Иначе	
	
		Запрос = базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "select 
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	СпрХС.GUID,
		|	СпрХС.Контрагент
		|from [Справочник.ВСД_ХозСубъект] as СпрХС 
		|where 
		|	СпрХС.Контрагент=:ВыбКлиент
		|";

		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
	
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;
	
	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	Иначе
		СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		СпрХС.Новый();
		СпрХС.Наименование = ВыбКлиент.Наименование;
		СпрХС.Контрагент = ВыбКлиент;
		СпрХС.Записать();
		Сообщить("Создан новый элемент справочника ВСД_ХозСубъект: "+ВыбКлиент);
		
		результат = спрХС.ТекущийЭлемент();
	КонецЕсли;
	
	Возврат результат;
КонецФункции
