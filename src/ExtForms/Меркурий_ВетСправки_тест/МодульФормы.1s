Перем Компонента;
Перем КаталогОбработки, ИмяФайлаНастроек;
Перем Филиал;
Перем ВерсияСистемы;
Перем ВыбРеквизит;

Перем ЭтоSQL; 
Перем базаДанных;

Процедура ЗагрузитьXML_ВсеПартииОтвет( имяФайла ) Далее
Процедура ЗагрузитьXML_ПартииВСД(имяФайла, докОснование="") Далее
Процедура ЗагрузитьXML_vetDocument( имяФайла, докОснование ) Далее
Функция ПолучитьРезультат_ИсхВСД(докСсылка) Далее
Функция ПолучитьРезультат_ВходВСД( докСсылка ) далее
	
//******************************************************************************
 // предопределенная процедура
 //
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;        
	
КонецПроцедуры 

Процедура Пауза(ЗадержкаСекунд)
	//Состояние("Пауза "+ПаузаСек+" сек");
	//scr = СоздатьОбъект("WScript.Shell");
	//scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ЗадержкаСекунд) ),0,1); 
	Компонента.Pause(ЗадержкаСекунд*1000); // в ms
КонецПроцедуры


Функция НайтиФормуУпаковки(guid, name)	
	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Форма упаковки не определена "+guid+" = "+name,"!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	
	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			//Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Единица измерения не определена ["+guid+"]","!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Процедура СохранитьПараметры()
	
	СписокКонстант=СоздатьОбъект("СписокЗначений");
	СписокКонстант.ДобавитьЗначение(param_username, "param_username");
	СписокКонстант.ДобавитьЗначение(param_password ,"param_password");
	СписокКонстант.ДобавитьЗначение(param_issuer_id, "param_issuer_id");
	СписокКонстант.ДобавитьЗначение(param_service_id, "param_service_id");
	СписокКонстант.ДобавитьЗначение(param_api_key, "param_api_key");
	СписокКонстант.ДобавитьЗначение(param_intiator_login, "param_intiator_login");
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_login, "param_vetdoctor_login");	
	СписокКонстант.ДобавитьЗначение(Отправитель_Площадка, "Отправитель_Площадка");
	СписокКонстант.ДобавитьЗначение(Отправитель_ХозСубъект, "Отправитель_ХозСубъект");
	
	СписокКонстант.ДобавитьЗначение(Страна, "Страна");
	СписокКонстант.ДобавитьЗначение(Регион, "Регион");
	СписокКонстант.ДобавитьЗначение(Город, "Город");
	СписокКонстант.ДобавитьЗначение(ВСД_Экспертиза, "ВСД_Экспертиза");
	СписокКонстант.ДобавитьЗначение(ВСД_Местность, "ВСД_Местность");
	СписокКонстант.ДобавитьЗначение(ВСД_ОсобыеОтметки, "ВСД_ОсобыеОтметки");
	
	СписокКонстант.ДобавитьЗначение(ПаузаСек, "ПаузаСек");	
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаГрузополучатель, "НазваниеРеквизитаГрузополучатель");	
			
	//СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	//СпрХС.НайтиПоРеквизиту("GUID",param_issuer_id,1);
	//Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();	
	//
	//СпрПлощадка = СоздатьОбъект("Справочник.ВСД_Площадка");
	//Если СпрПлощадка.НайтиПоРеквизиту("Guid",GUID_ОтправительПлощадка,1)=1 Тогда
	//	Отправитель_Площадка = СпрПлощадка.ТекущийЭлемент();
	//Иначе
	//	Сообщить("Отправитель_Площадка не определена проверьте [GUID_ОтправительПлощадка]");
	//КонецЕсли;	
	
	ЗначениеВФайл(ИмяФайлаНастроек,СписокКонстант);
	Предупреждение("Настройки сохранены!",3);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСписок()
	Если фс.СуществуетФайл(ИмяФайлаНастроек)=0 Тогда
		Сообщить("Файл с константами ["+ИмяФайлаНастроек+"] не найден","!");
		Возврат;
	Иначе
		СписокКонстант=СоздатьОбъект("СписокЗначений");
		ЗначениеИзФайла(ИмяФайлаНастроек,СписокКонстант);
	КонецЕсли;

	param_username = СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
	param_password = СписокКонстант.Получить("param_password");
	param_issuer_id = СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id = СписокКонстант.Получить("param_service_id") ;
	param_api_key = СписокКонстант.Получить("param_api_key") ;

	param_intiator_login = СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
	
	Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
	Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка");

	Страна 	= СписокКонстант.Получить("Страна");
	Регион 	= СписокКонстант.Получить("Регион");
	Город 	= СписокКонстант.Получить("Город");
	
	ВСД_Экспертиза 	= СписокКонстант.Получить("ВСД_Экспертиза");	
	Если ПустоеЗначение(ВСД_Экспертиза)=1 Тогда		
		ВСД_Экспертиза 	= "Произ.лабор ";
	КонецЕсли;
	
	ВСД_Местность 	= СписокКонстант.Получить("ВСД_Местность");
	Если ПустоеЗначение(ВСД_Местность)=1  Тогда 
		ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	КонецЕсли;

	ВСД_ОсобыеОтметки = СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	
	КаталогЛогов = КаталогИБ()+"logs\";
	Если ФС.СуществуетФайл(КаталогЛогов)=0 Тогда 
		ФС.СоздатьКаталог(КаталогЛогов);
	КонецЕсли;
	
	ПаузаСек = СписокКонстант.Получить("ПаузаСек");
	Если ПустоеЗначение(ПаузаСек)=1 Тогда
		ПаузаСек=10;
	КонецЕсли;
	
	НазваниеРеквизитаГрузополучатель  = СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
	Если ПустоеЗначение(НазваниеРеквизитаГрузополучатель)=1 Тогда
		НазваниеРеквизитаГрузополучатель="Контрагент";
	КонецЕсли;
	
КонецПроцедуры

Процедура Отладка();
	Сообщить("ApplicationId = "+Компонента.ApplicationId);
	Сообщить("Status = "+Компонента.Status);
	Если ПустоеЗначение(Компонента.ErrorMessage)=0 Тогда 
		Сообщить("ErrorMessage = "+Компонента.ErrorMessage);
	КонецЕсли;
	Если ПустоеЗначение(Компонента.ResultString)=0 Тогда 
		Сообщить("ResultString = 
		|"+Компонента.ResultString);
	КонецЕсли;

	appID = Компонента.ApplicationId; 	
КонецПроцедуры

Функция ПроверкаВходВСД(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
	//	Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(док.ВсдНомер)=1 Тогда 
		Сообщить("Не указан ВсдНомер ","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.ВсдДата)=1 Тогда 
		Сообщить("Не указан ВсдДата ","!");
		результат = 0;
	КонецЕсли;
		
	Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда 
		Сообщить("Не указана ЕдиницаИзмерения ","!");
		результат = 0;
	КонецЕсли;	
	Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
		Сообщить("Не указана ФормаУпаковки ","!");
		результат = 0;
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Процедура Отправить_ВходВСД(док) Экспорт
	
	Если ПроверкаВходВСД(док)=0 Тогда 
		Возврат;
	КонецЕсли;
	
//                    TransportationStorageType.FROZEN == 0 
//                    TransportationStorageType.CHILLED == 1 
//                    TransportationStorageType.COOLED == 2
//                    TransportationStorageType.VENTILATED ==3
	
	Сообщить("Отправляем запрос ВСД_Входящий ["+док+"]" ,"i");
	
	Результат = Компонента.Send_VSD_IN( Док );
			
	//Отладка();
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент( док );				
		ДокОб.applicationId = Компонента.ApplicationId;
		ДокОб.Статус = СокрЛП(Компонента.Status);
		ДокОб.Комментарий = Компонента.ErrorMessage;		
		ДокОб.Записать();
		Сообщить(" статус = "+ДокОб.Статус );
		Сообщить(ДокОб.Комментарий);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ВходВСД( ДокОб.ТекущийДокумент() );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROGRESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ВходВСД( ДокОб.ТекущийДокумент() );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

Функция ПроверкаИсхВСД(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда 
		Сообщить("Не указан Партия.ФормаУпаковки","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
		Сообщить("Не указан ФормаУпаковки","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.applicationID)=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		Сообщить("не указано Количество "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если док.КоличествоКор =0 Тогда 
		Сообщить("не указано Количество коробов"+док,"!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда 
		Сообщить("Не указан Партия.Продукция.Тип","!");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция Отправить_ИсхВСД(док) 
	
	Если ПроверкаИсхВСД(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
// Форма ВСД
//VetDocumentForm {
//Список возможных значений.
//Значение	Описание
//CERTCU1	0 Форма 1 ветеринарного сертификата ТС.
//LIC1		1 Форма 1 ветеринарного свидетельства. Оформляется на живых животных, биологические объекты (генетически материал).
//CERTCU2	2 Форма 2 ветеринарного сертификата ТС.
//LIC2		3 Форма 2 ветеринарного свидетельства. Оформляется на сырьё животного происхождения.
//CERTCU3	4 Форма 3 ветеринарного сертификата ТС.
//LIC3		5 Форма 3 ветеринарного свидетельства. Оформляется на техническое сырьё; корма; биологические отходы (шкуры, шерсть, пушнина, кость, кровь,отходы молочного производства, субпродукты непищевые; рогокопытное сырье невыделанное; щетина, очесы, линька; мездра и обрезки кожсырья; альбумин, казеин и желатин технические; желчь; сырье для биологической промышленности).
//NOTE4		6 Форма 4 ветеринарной справки. При перевозке кожевенно-мехового сырья ветеринарная справка формы N 4 оформляется без учета наличия клейма, но при условии обязательного биркования шкур. Также оформляется при перевозке любого вида продукции внутри одного района.
//CERT5I	7 Форма 5i ветеринарного сертификата.
//CERT61	8 Форма 6.1 ветеринарного сертификата.
//CERT62	9 Форма 6.2 ветеринарного сертификата.
//CERT63	10 Форма 6.3 ветеринарного сертификата.
//PRODUCTIVE	Производственный сертификат

Если док.ФормаВСД=1 Тогда 
		//Форма 2
		ФормаВСД = 3; 
	Иначе
		//Форма 4
		ФормаВСД = 6;
	КонецЕсли;
	
// 	TransportationStorageType.FROZEN == 0 
//  TransportationStorageType.CHILLED == 1 
//  TransportationStorageType.COOLED == 2
//  TransportationStorageType.VENTILATED ==3
	
	Сообщить("Отправляем запрос ВСД_Исходящий ["+док+"]" ,"i");
	Результат = Компонента.Send_VSD_OUT( док );
	
	//Отладка();
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);

		ДокОб.applicationID = СокрЛП(Компонента.ApplicationId);
		ДокОб.Статус 		= СокрЛП(Компонента.Status);
		ДокОб.Комментарий = СокрЛП(Компонента.ErrorMessage);		
		ДокОб.Записать();
		Сообщить(" статус = "+ДокОб.Статус );
		Если ПустоеЗначение(СокрЛП(ДокОб.Комментарий))=0 Тогда
			Сообщить("Ошибка: "+ДокОб.Комментарий);
		КонецЕсли;
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ИсхВСД( ДокОб.ТекущийДокумент() );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROGRESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ИсхВСД( ДокОб.ТекущийДокумент() );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции

Функция Отправить_ВСД_транзакция(док) 
	
	//Если ПроверкаИсхВСД_ТЧ(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	
	
	Если док.ФормаВСД=1 Тогда 
		//Форма 2
		ФормаВСД = 3; 
	Иначе
		//Форма 4
		ФормаВСД = 6;
	КонецЕсли;
	
	Сообщить("Отправляем запрос Send_VSD_OUT_2 ["+док+"]" ,"i");
	Результат = Компонента.Send_VSD_OUT_2( док );
	
	// 1
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
		партия = док.партия;
	КонецЦикла;

	// 2
	тз = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тз);
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		
	КонецЦикла;

	//Отладка();
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);

		ДокОб.applicationID = СокрЛП(Компонента.ApplicationId);
		ДокОб.Статус 		= СокрЛП(Компонента.Status);
		ДокОб.Комментарий = СокрЛП(Компонента.ErrorMessage);		
		ДокОб.Записать();
		Сообщить(" статус = "+ДокОб.Статус );
		Если ПустоеЗначение(СокрЛП(ДокОб.Комментарий))=0 Тогда
			Сообщить("Ошибка: "+ДокОб.Комментарий);
		КонецЕсли;
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ИсхВСД( ДокОб.ТекущийДокумент() );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROGRESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ИсхВСД( ДокОб.ТекущийДокумент() );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции

//******************************** Партии ******************************************************************


Функция  ПолучитьПартииОтветXML()

	Результат = Компонента.GetStockListResult(СокрЛП(appID));

	//Отладка();
	
	Если Результат="COMPLETED" Тогда

		//ДокПартия = СоздатьОбъект("Документ.ВСД_Партия");
		//ДокПартия.ВыбратьДокументы();
		//Попытка
		//	Пока ДокПартия.ПолучитьДокумент() = 1 Цикл
		//		ДокПартия.СделатьНеПроведенным();
		//	КонецЦикла;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
		
		СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
		СпрПартия.ВыбратьЭлементы();
		Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
			СпрПартия.Удалить(0);
		КонецЦикла;
		
		//тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		ЗагрузитьXML_ВсеПартииОтвет( Компонента.LogFilename );
				
	КонецЕсли;		
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	Результат = Компонента.GetStockList(СокрЛП(Отправитель_Площадка.GUID), Смещение);

	Отладка();
			
	Если Результат="ACCEPTED" Тогда 
		Пауза( ПаузаСек );			
			
		Результат = ПолучитьПартииОтветXML();
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROGRESS") Тогда 
			//Если ((Результат<>"COMPLETED") И (Результат<>"REJECTED")) Тогда 
				Пауза( ПаузаСек );				
				Результат = ПолучитьПартииОтветXML();
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьПоследнююВерсиюПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("У Площадки пустой GUID");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбПартия.GUID)=1 Тогда 
		Сообщить("В выбранной партии пустой GUID");
		Возврат;
	КонецЕсли;	

	Результат = Компонента.GetStockEntryVersionList(
		СокрЛП(ВыбПартия.GUID),
		СокрЛП(Отправитель_Площадка.GUID)
		);

	Отладка();
			
КонецПроцедуры

Процедура ПолучитьПоследнююВерсиюПартииОтвет()

	Результат = Компонента.GetStockEntryVersionListResult(СокрЛП(appID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		//тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		//ЗаписатьПартии(тз);
				
	КонецЕсли;		
		
	
КонецПроцедуры

//******************************** ******************************************************************

Функция ПолучитьРезультат_ВходВСД( докСсылка ) 
	
	Сообщить("Отправляем запрос ВСД_Входящий_Результат ["+докСсылка+"]" );
	Результат = Компонента.Send_VSD_IN_Result( СокрЛП(докСсылка.applicationID));

	//Отладка();
	
	Попытка		
		Док = СоздатьОбъект("Документ");
		док.НайтиДокумент( докСсылка );		
		док.Статус = СокрЛП(Компонента.Status);
		Док.RequestResult = Компонента.ErrorMessage;		
		док.Записать();
		Сообщить(" статус = "+Док.Статус );
		Сообщить(Док.RequestResult);		
		
		Если Результат="COMPLETED" Тогда
			
			Док.Провести();		

			ЗагрузитьXML_ПартииВСД( Компонента.LogFilename , докСсылка );
		КонецЕсли;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьРезультат_ИсхВСД( докСсылка ) 
	

	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(докСсылка);
	applicationID = СокрЛП(ДокОб.applicationID);
	Если ПустоеЗначение(applicationID)=1 Тогда
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Отправляем запрос ВСД_Исходящий_Результат ["+докСсылка+"]" );
	Результат = Компонента.Send_VSD_OUT_Result( applicationID );

	//Отладка();
	
	Попытка

		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент( докСсылка );		
		Док.Статус = СокрЛП(Компонента.Status);
		Док.Комментарий = Компонента.ErrorMessage;		
		Док.Записать();
		
		Сообщить("статус = "+Док.Статус );
		//Сообщить(Док.RequestResult);
		
		док.Записать();
		Если Результат="COMPLETED" Тогда

			ЗагрузитьXML_ПартииВСД( Компонента.LogFilename );
			
			ЗагрузитьXML_vetDocument( Компонента.LogFilename, докСсылка);
			
		Иначе
			Сообщить(Док.Комментарий);		
		КонецЕсли;

		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Результат;
КонецФункции

Процедура ОтправитьВсеИсходящиеВСД(СписокВСД="")
		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_исходящий");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	КонецЕсли;
	
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
			Продолжить;
		КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ИсхВСД( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецПроцедуры

Процедура ОтправитьВсеВсдТранзакции(СписокВСД="")
		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_исходящий");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	КонецЕсли;
	
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
			Продолжить;
		КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД_транзакция( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецПроцедуры

Процедура ПолучитьОтветВсеИсходящиеВСД()
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Док.ВыбратьДокументы(НачДата, КонДата);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен()=0 Тогда 
			ПолучитьРезультат_ИсхВСД(док);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////*******************************************
//Функция НайтиПлощадкуПоGUID(GUID)
//	тз = "";
//	
//	Если ЭтоSQL=1 Тогда		
//		RS = СоздатьОбъект("ODBCRecordset");
//		RS.УстБД1С();     
//
//		ТекстЗапроса = "
//		|select 	              
//	    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
//	    |   СпрПл.descr, 
//	    |   $СпрПл.GUID, 
//	    |   $СпрПл.Контрагент as Контрагент 
//	    |from $Справочник.ВСД_Площадка as СпрПл  
//	  	|where 
////			  	|	СпрПл.ParentExt = :ВыбХС and
//	  	|	$СпрПл.GUID= :GUID
//	  	|";
//		
//		//RS.УстановитьТекстовыйПараметр("ВыбХС", ХС);  
//		RS.УстановитьТекстовыйПараметр("GUID", GUID);  
//		//RS.Отладка(1);
//		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
//	Иначе
//		Запрос = базаДанных.НовыйЗапрос();
//		ТекстЗапроса = "
//		|select 	              
//	    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
//	    |   СпрПл.descr, 
//	    |   СпрПл.GUID, 
//	    |   СпрПл.Контрагент as Контрагент 
//	    |from [Справочник.ВСД_Площадка] as СпрПл  
//	  	|where 
////			  	|	СпрПл.ParentExt = :ВыбХС and
//	  	|	СпрПл.GUID= :GUID
//	  	|";
//		
//		//Запрос.Подставлять("ВыбХС", ХС);
//		Запрос.Подставлять("GUID", GUID);
//		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
//	КонецЕсли;
//	
//	//Тз.ВыбратьСтроки();
//	//Если ТЗ.ПолучитьСТроку()=1 Тогда
//	//	результат = тз.id;
//	//КонецЕсли;
//	
//	Возврат тз;
//КонецФункции

////****************** Площадки **********************************

Процедура ЗагрузитьПлощадкуПоGUID(GUID, ХС="")
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	
	Если ПустоеЗначение(ХС)=1 Тогда
		Сообщить("Не указан ХозСубъект для площпдки "+GUID,"!!");
		Возврат;
	КонецЕсли;


    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise = objDom.selectSingleNode("//enterprise") ;
						
	guid = enterprise.selectSingleNode("guid").text;
	uuid = enterprise.selectSingleNode("uuid").text;
		
	//updateDate = unit.selectSingleNode("updateDate").text;
	//createDate = unit.selectSingleNode("createDate").text;		
	name = enterprise.selectSingleNode("name").text;
	active = enterprise.selectSingleNode("active").text;
		
	address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
	
	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=0 Тогда 
		Спр.Новый();
		Спр.УстановитьНовыйКод("00");
		
	КонецЕсли;
	
	Спр.Наименование = name;
	Спр.Адрес = address;
	Спр.GUIDХозСубъекта = ХС.GUID;
	Спр.GUID = guid;
	Спр.UUID = uuid;	
	Спр.GUIDХозСубъекта = ХС.GUID;
	
	спр.Записать();
	Сообщить("Записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+Спр.Наименование+"] GUID = "+ Guid);		
	
КонецПроцедуры

Процедура ЗагрузитьПлощадки(ХС)	

	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    activityLocationList = objDom.selectNodes("//activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
						
		guid = activityLocation.selectSingleNode("enterprise").selectSingleNode("guid").text;
		
    	ЗагрузитьПлощадкуПоGUID(guid, ХС);
					
	КонецЦикла;
	
	Сообщить("Загрузка площадок завершена","i");
КонецПроцедуры

Функция НайтиПлощадку(Guid)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
			//создать площадку

			//ЗагрузитьПлощадкуПоGUID(guid);
			
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("ВСД_Площадка не найдена ["+Guid+"]","!");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Процедура ПолучитьПлощадкиПоНазванию( ХС, УточнитьНазвание=1)
	
	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		Сообщить("Не указан ХозСубъект GUID ","!");
		Возврат;
	КонецЕсли;
			
	
	Стр = СокрЛП(ХС.Контрагент.ЮрФизЛицо.ПолнНаименование);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ЮрФизЛицо.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ]","i");		
	Результат = Компонента.GetRussianEnterpriseListByName( стр, СокрЛП(Регион.GUID) );
	//Отладка();
	
	Если Результат="SUCCESS" Тогда		
			  
	   Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
	   тз = СоздатьОбъект("ТаблицаЗначений");
	   тз.НоваяКолонка("Пометка");
	   тз.НоваяКолонка("Имя");
	   тз.НоваяКолонка("адрес");
	   тз.НоваяКолонка("Регион");
	   тз.НоваяКолонка("guid");
	   тз.НоваяКолонка("uuid");
	   тз.НоваяКолонка("актив");	   
	   
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(Компонента.LogFilename);    
		
	    enterpriseList = objDom.selectNodes("//enterprise") ;
	    Для i1 = 0 По enterpriseList.length - 1 Цикл
	        enterprise=enterpriseList.item(i1);
										
			guid = enterprise.selectSingleNode("guid").text;
			uuid = enterprise.selectSingleNode("uuid").text;
			name = enterprise.selectSingleNode("name").text;
			active = enterprise.selectSingleNode("active").text;
				
			address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;			

			тз.НоваяСтрока();
			тз.Имя = name;
			тз.адрес = address;
			//тз.Регион = region;
			тз.guid = guid;
			тз.uuid = uuid;
			тз.актив = active;
			
		КонецЦикла;
		
		тз.ВыводитьПиктограммы("Пометка",1);
		Если тз.ВыбратьСтроку()=1 Тогда 
		
			Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
			
			тз.ВыбратьСтроки();
			Пока тз.ПолучитьСтроку() = 1 Цикл
				
				Если тз.Пометка=0 Тогда 
					Продолжить;
				КонецЕсли;

				Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=0 Тогда 
					Спр.Новый();
				КонецЕсли;
				
				Спр.Наименование = name;
				Спр.Адрес = address;
				Спр.GUIDХозСубъекта = ХС.GUID;
				Спр.GUID = guid;
				Спр.UUID = uuid;	
				
				спр.Записать();
				Сообщить("Записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+ Guid);		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНовуюПлощадку(ВыбХС)
	Если ПустоеЗначение(ВыбХС)=1 Тогда
		Предупреждение("Выберите Хоз субъект");
	КонецЕсли;
	СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");
	СпрПл.Новый();
	//СпрПл.Код = ;
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент;
	//СпрПл.GUID = ;
	//СпрПл.UUID = ;
	СпрПл.Адрес = ВыбХС.Контрагент.ЮрФизЛицо.ФактАдрес;;
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	СпрПл.Записать();
	Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());
	
	ВыбПлощадка = СпрПл.ТекущийЭлемент();
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	//Отладка();
	
	Если Результат="COMPLETED" Тогда			
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(Компонента.LogFilename);    	        
        businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
		guid = businessEntity.selectSingleNode("base:guid").text;
		uuid = businessEntity.selectSingleNode("base:uuid").text;			
		active = businessEntity.selectSingleNode("base:active").text;		
		enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("base:guid").text;		
		Сообщить("Успешно установлена связь ВСД_Площадка ["+enterprise+"] ВСД_ХозСубъект ["+guid+"]","i");
		рез = Компонента.ResultString;				
	КонецЕсли;	
КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка)
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда 
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустоеЗначение(Площадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]","i");		
	Результат = Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	Отладка();	
	
	Если Результат="ACCEPTED" Тогда
		Пауза(ПаузаСек);
		
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( Компонента.ApplicationId)
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучитьОтветПлощадка( applicationID , Площадка)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = Компонента.CreateEnterpriseResult( СокрЛП(applicationID));

	//Отладка();
	
	Если Результат="COMPLETED" Тогда
			
	   Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(Компонента.LogFilename);        
    
        enterprise=objDom.selectSingleNode("//merc:enterprise") ;
									
		guid = enterprise.selectSingleNode("base:guid").text;
		uuid = enterprise.selectSingleNode("base:uuid").text;
		name = enterprise.selectSingleNode("ent:name").text;
		active = enterprise.selectSingleNode("base:active").text;
					
		если ПустоеЗначение(GUID)=0 Тогда			
			Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
			Спр.НайтиЭлемент(Площадка);
			спр.GUID = GUID;
			спр.uuid = uuid;
			спр.Записать();
			Сообщить("Успешно записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
			
			Площадка = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Пустой GUID Площадки");
		КонецЕсли;
			
		Пауза(ПаузаСек);
		
		СоздатьСвязьХозсубъектПлощадка(Площадка);
		
	КонецЕсли;	

		
КонецПроцедуры

Процедура СоздатьПлощадку(Площадка)
	
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;

	Адрес = Площадка.Контрагент.ЮрФизЛицо.ФактАдрес;
	
	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]","i");		
	Результат = Компонента.CreateEnterprise(
			СокрЛП(Площадка.Контрагент.Наименование),
			Адрес, 
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID), 
			СокрЛП(Площадка.GuidХозСубъекта)
	);	
	Отладка();	
		
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза(ПаузаСек);
		
		ПолучитьОтветПлощадка( Компонента.ApplicationId, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

//****************** ХозСубъкты **********************************
Функция ПолучитьИНН(ВыбКлиент)
	
	Попытка		
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);

	КонецЕсли;
КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьКПП(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение КПП юр лица.
//  
// Описание:
//  Функция возращает КПП из переданной строки 
//
Функция ПолучитьКПП(ВыбКлиент)
	
	//Если ПустоеЗначение(ВыбКлиент.КПП)=0 Тогда 
	//	Возврат СокрЛП(ВыбКлиент.КПП);		
	//Иначе
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

		Если Найти(ИННКПП, "\") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);
	
		ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
		Иначе
			Возврат "";
	
		КонецЕсли;
	//КонецЕсли;
КонецФункции // ПолучитьКПП()

Функция ПолучитьОГРН(ХС)
	возврат ХС.ОГРН;
КонецФункции

Процедура ПолучитьОтветХС( applicationID, ХС)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("base:guid").text;
	uuid = enterprise.selectSingleNode("base:uuid").text;
	active = enterprise.selectSingleNode("base:active").text;
						
	если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьХС(ХС)

	ИНН = ПолучитьИНН(ХС.Контрагент);	
	КПП = ПолучитьКПП(ХС.Контрагент);	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ПолучитьОГРН(ХС);

	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда 
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;
	
	Адрес = ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	
	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]","i");		
	Результат = Компонента.CreateBusinessEntity(
			хс.Контрагент.Наименование, 
			хс.Контрагент.ЮрФизЛицо.ПолнНаименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	Отладка();	
		
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза(ПаузаСек);
		
		ПолучитьОтветХС( Компонента.ApplicationId, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьGuidХС(ХС)

	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат "ERROR";
	КонецЕсли;	
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");		
	Результат = Компонента.GetBusinessEntityByINN( ИНН );	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда

	  	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(Компонента.LogFilename);    
	    	
		Попытка			
		    enterprise=objDom.selectSingleNode("//businessEntity") ;
			guid = enterprise.selectSingleNode("guid").text;
			uuid = enterprise.selectSingleNode("uuid").text;
			active = enterprise.selectSingleNode("active").text;
		
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ХС);
			спр.GUID = GUID;
			спр.UUID = uuid;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);			
		Исключение			
			Сообщить("Получен пустой ответ GetBusinessEntityByINN","!");
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

Процедура СинхронизацияСпрХС()
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда 
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;
  	
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	
	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда 
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда 
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;		
	  	
		ПолучитьGuidХС(тз.id);
		
		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			ПолучитьПлощадкиПоНазванию(тз.id, 0 );
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры


Функция НайтиХСпоGUID(Guid)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


Функция НайтиПродукцию(Guid, Название)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(Guid, Название)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.Записать();
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid Вида продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции


//Функция НайтиПартиюПоGUID_док(GUID)
//	Док = СоздатьОбъект("Документ.ВСД_Партия");	
//	
//	//Запрос = СоздатьОбъект("Запрос");
//	//ТекстЗапроса = "
//	//|id = Документ.ВСД_Партия.ТекущийДокумент;
//	//|ДокGuid = Документ.ВСД_Партия.GUID;
//	//|Условие (ДокGuid = GUID);
//	//|Группировка id;
//	//|Без Итогов;
//	//|";
//	//Запрос.Выполнить(ТекстЗапроса);
//	//тз =СоздатьОбъект("ТаблицаЗначений");
//	//Запрос.Выгрузить(тз);
//	
//	Док = СоздатьОбъект("Документ.ВСД_Партия");	
//	Если ЭтоSQL=1 ТОгда 
//		RS = СоздатьОбъект("ODBCRecordset");
//		RS.УстБД1С();     	
//	
//		ТекстЗапроса = "
//		|select 	              
//	    |   ДокВ.iddoc [id $Документ.ВСД_Партия]
//	    |from $Документ.ВСД_Партия as ДокВ  
//	  	|where 
//	  	|	$ДокВ.GUID= :GUID
//	  	|";
//		RS.УстановитьТекстовыйПараметр("GUID", GUID);  
//		//RS.Отладка(1);
//		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
//	Иначе
//			
//		Запрос = базаДанных.НовыйЗапрос();
//		ТекстЗапроса = "
//		|select 	              
//	    |   ДокВ.iddoc [id $Документ.ВСД_Партия]
//	    |from [Документ.ВСД_Партия] as ДокВ  
//	  	|where 
//	  	|	ДокВ.GUID= :GUID
//	  	|";	
//		Запрос.Подставлять("GUID", GUID);
//		//тз.Отладка();
//		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
//	КонецЕсли;
//	
//	Если ПустоеЗначение(тз)=1 Тогда 
//		Док.Новый();
//		//Док.ДокОснование = ДокОснование;
//	Иначе
//		док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
//		док.СделатьНеПроведенным();
//		док.СнятьПометкуУдаления();
//	конецЕсли;
//  	
//	Возврат  Док;
//КонецФункции

Функция НайтиПартиюПоGUID(GUID)
	Партия = СоздатьОбъект("Справочник.ВСД_Партия");	
	
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Партия");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Партия = Спр;
			Партия.СнятьПометкуУдаления();
		Иначе
			Партия.Новый();
			//Спр.Новый();
			//Спр.GUID = GUID;
			//Спр.Наименование = name;
			//Спр.Записать();
			//Сообщить("Создан ВСД_Страна "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;
		  	
	Возврат  Партия;
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Страна");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Страна "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиРегионПоGUID(GUID, name)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Регион");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Регион "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиГородПоGUID(GUID, name)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Город");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			//Сообщить("Guid "+Guid+" не найден, создайте ВСД_Город, выполните синхронизацию");
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Город "+GUID);
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

Функция ЗаписатьПартию(stockEntry)
		t = stockEntry.text;	
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("vetd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		batch = stockEntry.selectSingleNode("vetd:batch");
		
		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;
		productItem = batch.selectSingleNode("vetd:productItem").text;
		volume 		= batch.selectSingleNode("vetd:volume").text;
		unit		= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;

		Попытка
			unitGuid	= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;			
		Исключение
			unitGuid = "";			
		КонецПопытки;
		Попытка
			unitUuid	= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:uuid").text;			
		Исключение
			unitUuid = "";			
		КонецПопытки;
		
		Попытка
			packingFormUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("bs:uuid").text;			
		Исключение
			Попытка
				packingFormUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("com:packingForm").selectSingleNode("bs:uuid").text;			
			Исключение
				packingFormUuid = "";			
			КонецПопытки;			
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("argc:name").text;			
		Исключение
			Попытка
				packingFormName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("com:packingForm").selectSingleNode("argc:name").text;
			Исключение
				packingFormName="";
			КонецПопытки;
		КонецПопытки;

		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
				
		попытка
			dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:firstDate").text;
		Исключение
			Попытка
				dateOfProduction = ""+batch.selectSingleNode("vetd:dateOfProduction").text;
			Исключение
				dateOfProduction = "";
			КонецПопытки;
		КонецПопытки;
		dateOfProduction = СтрЗаменить(dateOfProduction," ",".");
		попытка
			dateOfProduction2 	= batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:secondDate").text;;
			dateOfProduction2 = СтрЗаменить(dateOfProduction2," ",".");
			dateOfProduction = dateOfProduction +  " - "+ dateOfProduction2;
		Исключение			
		КонецПопытки;
		Попытка
			expiryDate 	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:firstDate").text;
		Исключение
			Попытка				
				expiryDate 	= batch.selectSingleNode("vetd:expiryDate").text;
			Исключение
				expiryDate 	="";
			КонецПопытки;
		КонецПопытки;
		expiryDate = СтрЗаменить(expiryDate," ",".");
		Попытка
			expiryDate2	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:secondDate").text;
			expiryDate2 = СтрЗаменить(expiryDate2," ",".");
			expiryDate  = expiryDate +" - "+ expiryDate2; 
		Исключение			
		КонецПопытки;
		
		Попытка			
			producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		
		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);

		Партия = НайтиПартиюПоGUID(guid);
		
		Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);
		
		//Партия.ДатаДок = СтрокаВДату(createDate);
		Партия.ДатаИзменения = СтрокаВДату( updateDate );
						
		//ДокПартия.Отправитель_ХозСубъект = ;
		//ДокПартия.Отправитель_Площадка = ;
		Партия.Получатель_ХозСубъект = ВладелецХС;
		Партия.Получатель_Площадка = Отправитель_Площадка;
		Партия.Производитель_Площадка = НайтиПлощадку(producer);
		Попытка
			Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		//ДокПартия.Перевозчик_ХозСубъект = ;
		//ДокПартия.applicationID = ;
		Партия.Продукция = НайтиПродукцию(product, productItem);
		Партия.ВидПродукции = НайтиВидПродукции(subProduct, productItem);
		Партия.Количество = Число(volume);
		Партия.КоличествоКор = Число(packingAmount);
		Партия.ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);;

		Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid, unitUUID );;
		
		Партия.ДатаИзготовления = dateOfProduction;
		Партия.ДатаСрокГодности = expiryDate;
		Партия.Статус = st;		
		Партия.GUID = guid;
		Партия.UUID = uuid;
		Партия.ДатаИзменения = updateDate;
		Партия.НомерЗаписи = entryNumber;
		Партия.НаименованиеПродукции = productItem;
		Партия.Наименование = productItem;
		Партия.Фирма = глПользователь.ОсновнаяФирма;
		//ДокПартия.ЮрЛицо = ;
		//ДокПартия.Проект = ;
		Партия.Автор = глПользователь;
		Если ПустоеЗначение(Филиал)=0 Тогда 
			Партия.Филиал = глПользователь.Филиал;
		КонецЕсли;
		//ДокПартия.Комментарий = ;
		
		Партия.ВсдДата = СтрокаВДату(createDate);
		//ДокПартия.ВсдЭкспертиза = ВСД_Экспертиза;
		//ДокПартия.ВсдМестность = ВСД_Местность;
		//ДокПартия.ОсобыеОтметки = ;
		
		//ДокПартия.Комментарий = ДокПартия.Комментарий + ТекущаяДата()+" "+ТекущееВремя();
		
		Партия.Записать();
//		ДокПартия.Провести();

		Возврат Партия;
КонецФункции

//*********** работа с XML ********************************
Процедура ЗагрузитьXML_ПартииВСД(имяФайла, докОснование="")
    
    //tt1=_GetPerformanceCounter();
    
	Если ПустоеЗначение(имяФайла)=1 Тогда
		
	    ИмяФайла="C:\C#\logs\1.xml";
		
		Каталог = "";
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "XML (*.xml)|*.xml", , ) = 1 Тогда
		    ИмяФайла = Каталог + ИмяФайла;
		КонецЕсли;
	КонецЕсли;	

    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    //stockEntry = objDom.selectSingleNode("//merc:stockEntry") ;
    stockEntryList = objDom.selectNodes("//vetd:stockEntry") ;
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
					
		Партия = ЗаписатьПартию(stockEntry);
		
		Если ПустоеЗначение(докОснование)=0 Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;
	
    //tt2=_GetPerformanceCounter();
    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");     

КонецПроцедуры

Функция НайтиВсдИсходящий(applicationId, uuid)
	// в запросе  не работает сравнение строк !!!
	//Запрос = СоздатьОбъект("Запрос");	
	//ТекстЗапроса = "
	//|id = Документ.ВСД_исходящий.ТекущийДокумент;
	//|ДокUuid = Документ.ВСД_исходящий.UUID;
	//|appID = Документ.ВСД_исходящий.applicationID;
	//|
	//|Условие (appID = applicationId) ;
	//|Группировка id;
	//|Без Итогов;
	//|";
	////И ((СокрП(ДокUuid) = UUID) или (СокрП(ДокUuid)=''))
	//Запрос.Выполнить(ТекстЗапроса);
	//тз =СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(тз);

	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ.ВСД_исходящий]
	    |from $Документ.ВСД_исходящий as ДокВСД  
	  	|where 
	  	|	$ДокВСД.applicationId= :applicationId AND
	  	|	(($ДокВСД.UUID = '') OR ( $ДокВСД.UUID = :uuid))
	  	|";
		RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
		RS.УстановитьТекстовыйПараметр("uuid", uuid);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
			
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ.ВСД_исходящий]
	    |from [Документ.ВСД_исходящий] as ДокВСД  
	  	|where 
	  	|	ДокВСД.applicationId= :applicationId AND
	  	|	((ДокВСД.UUID = '') OR ( ДокВСД.UUID = :uuid))
	  	|";	
		Запрос.Подставлять("applicationId", applicationId);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	//тз.ВыбратьСтроку();
	
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
		Док.applicationId = applicationId;

		Сообщить("Создан новый ВСД_исходящий "+Док.НомерДок);
	Иначе		
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));		
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;	
	
	Возврат Док;
КонецФункции

Процедура ЗагрузитьXML_vetDocument(имяФайла, докОснование)
	
	objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(имяФайла);    		    	

	applicationId = objDom.selectSingleNode("//applicationId").text ;
	
	//vetDocument = objDom.selectSingleNode("//merc:vetDocument") ;
	vetDocumentList = objDom.selectNodes("//merc:vetDocument") ;    
    Для i1 = 0 По vetDocumentList.length - 1 Цикл
        vetDocument=vetDocumentList.item(i1);
		uuid = vetDocument.selectSingleNode("bs:uuid").text;
		
		докОбъект = НайтиВсдИсходящий(applicationId, uuid);
		докОбъект.UUID = uuid;
		докОбъект.ДокОснование = докОснование;
		//док.UUID = Компонента.DocUUID;	
		
		uuid = vetDocument.selectSingleNode("bs:uuid").text;
		//guid = vetDocument.selectSingleNode("bs:guid").text;
		st 	= vetDocument.selectSingleNode("vetd:status").text;
		//forma = vetDocument.selectSingleNode("vetd:form").text;
		//updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = vetDocument.selectSingleNode("vetd:issueDate").text;
		
		consignorBusinessEntity = vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		consignorEnterprise 	= vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		consigneeBusinessEntity = vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		consigneeEnterprise 	= vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		
		batch = vetDocument.selectSingleNode("vetd:batch");
		
		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;
		productItem = batch.selectSingleNode("vetd:productItem").text;
		volume 		= batch.selectSingleNode("vetd:volume").text;
		unitGuid	= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
		
		Попытка
			packingFormUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("bs:uuid").text;			
		Исключение
			Попытка
				packingFormUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("com:packingForm").selectSingleNode("bs:uuid").text;			
			Исключение
				packingFormUuid = "";			
			КонецПопытки;			
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("argc:name").text;			
		Исключение
			Попытка
				packingFormName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("com:packingForm").selectSingleNode("argc:name").text;
			Исключение
				packingFormName="";
			КонецПопытки;
		КонецПопытки;

		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
				
		//попытка
		//	dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:firstDate").text;
		//Исключение
		//	Попытка
		//		dateOfProduction = ""+batch.selectSingleNode("vetd:dateOfProduction").text;
		//	Исключение
		//		dateOfProduction = "";
		//	КонецПопытки;
		//КонецПопытки;
		//dateOfProduction = СтрЗаменить(dateOfProduction," ",".");
		//попытка
		//	dateOfProduction2 	= batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:secondDate").text;;
		//	dateOfProduction2 = СтрЗаменить(dateOfProduction2," ",".");
		//	dateOfProduction = dateOfProduction +  " - "+ dateOfProduction2;
		//Исключение			
		//КонецПопытки;
		//Попытка
		//	expiryDate 	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:firstDate").text;
		//Исключение
		//	Попытка				
		//		expiryDate 	= batch.selectSingleNode("vetd:expiryDate").text;
		//	Исключение
		//		expiryDate 	="";
		//	КонецПопытки;
		//КонецПопытки;
		//expiryDate = СтрЗаменить(expiryDate," ",".");
		//Попытка
		//	expiryDate2	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:secondDate").text;
		//	expiryDate2 = СтрЗаменить(expiryDate2," ",".");
		//	expiryDate  = expiryDate +" - "+ expiryDate2; 
		//Исключение			
		//КонецПопытки;
		
		Попытка			
			producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		
		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
				
				
		докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity);
		докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise);
		докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity);
		докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise);
		докОбъект.Производитель_Площадка 	= НайтиПлощадку(producer);
		//Попытка
		//	докОбъект.Производитель_ХозСубъект = докОбъект.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;		
		//ДокПартия.Перевозчик_ХозСубъект = ;
		докОбъект.Продукция = НайтиПродукцию(product, productItem);
		докОбъект.ВидПродукции = НайтиВидПродукции(subProduct, productItem);
		докОбъект.Количество = Число(volume);
		докОбъект.КоличествоКор = Число(packingAmount);
		ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;	

		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );;
		
		докОбъект.Статус = st;		
		докОбъект.НаименованиеПродукции = productItem;
		докОбъект.Фирма = глПользователь.ОсновнаяФирма;
		докОбъект.Автор = глПользователь;
		Если ПустоеЗначение(Филиал)=0 Тогда 
			докОбъект.Филиал = глПользователь.Филиал;
		КонецЕсли;
		
		докОбъект.ДатаДок = СтрокаВДату(createDate);
				
		докОбъект.Записать();
		докОбъект.Провести();

		Сообщить("Записан ВСД_исходящий от "+докОбъект.ДатаДок+" ["+uuid+"]");
	КонецЦикла;

		
КонецПроцедуры


Процедура ЗагрузитьXML_ВсеПартииОтвет(имяФайла)
    
    //tt1=_GetPerformanceCounter();
    
	Если ПустоеЗначение(имяФайла)=1 Тогда
		
	    ИмяФайла="C:\C#\logs\1.xml";
		
		Каталог = "";
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "XML (*.xml)|*.xml", , ) = 1 Тогда
		    ИмяФайла = Каталог + ИмяФайла;
		КонецЕсли;
	КонецЕсли;	

	//имяф=КаталогИБ()+"tovar3.xml";
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    stockEntryList = objDom.selectNodes("//vetd:stockEntry") ;
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
		
		ЗаписатьПартию(stockEntry);
			
    КонецЦикла;
    
    //tt2=_GetPerformanceCounter();
    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");     

КонецПроцедуры

Процедура ЗагрузитьXML_Номенклатура(имяФайла)
		
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    productList = objDom.selectNodes("//product") ;
    Для i1 = 0 По productList.length - 1 Цикл
        product=productList.item(i1);
		
		uuid = product.selectSingleNode("uuid").text;
		guid = product.selectSingleNode("guid").text;
		st = product.selectSingleNode("status").text;
		updateDate = product.selectSingleNode("updateDate").text;
		createDate = product.selectSingleNode("createDate").text;		
		name = product.selectSingleNode("name").text;
		Попытка
			code = product.selectSingleNode("code").text;
		Исключение
			code ="";
		КонецПопытки;
		productType = product.selectSingleNode("productType").text;
		
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.КодМеркурий = code;
			Спр.Тип = ProductType;
			Спр.Записать();

    КонецЦикла;
КонецПроцедуры


Процедура ЗагрузитьXML_ЕдиницыИзмерения(имяФайла)
		
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    unitList = objDom.selectNodes("//unit") ;
    Для i1 = 0 По unitList.length - 1 Цикл
        unit=unitList.item(i1);
		
		uuid = unit.selectSingleNode("uuid").text;
		guid = unit.selectSingleNode("guid").text;
		//updateDate = unit.selectSingleNode("updateDate").text;
		//createDate = unit.selectSingleNode("createDate").text;		
		name = unit.selectSingleNode("name").text;
		factor = unit.selectSingleNode("factor").text;
		//commonUnitGuid = unit.selectSingleNode("commonUnitGuid").text;
		
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Коэффициент = factor;
			Спр.Записать();

    КонецЦикла;
КонецПроцедуры

Процедура ПолучитьТовары()
	
	// http://help.vetrf.ru/wiki/ProductType
	
	
	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetProductList( productType );
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		ЗагрузитьXML_Номенклатура( Компонента.LogFilename );

	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецПроцедуры

Процедура ПолучитьЕдиницыИзмерения()
	
	Сообщить(" Запрос GetUnitList ","i");		
	Результат = Компонента.GetUnitList();
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		ЗагрузитьXML_ЕдиницыИзмерения( Компонента.LogFilename );

	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецПроцедуры

Процедура ЗаполнитьФормыУпаковки()
	//http://help.vetrf.ru/wiki/PackingForm
	
	НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8",	"банки");
	НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8",	"биг бэги");
	НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8",	"бочки");
	НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8",	"жестяные банки");
	НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8",	"картонные коробки");
	НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8",	"крафтмешки");
	НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8",	"мешки");
	НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8",	"мешки полипропиленовые");
	НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8",	"навалом");
	НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8",	"насыпью");
	НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8",	"пакеты");
	НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8",	"полиблоки");
	НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые ящики");
	НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8",	"паллеты");
	НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8",	"полиэтилен");
	НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8",	"картон");
	НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8",	"стокинеты");
	НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8",	"коробки");
	НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8",	"прицеп");
	НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8",	"корзины");
	НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8",	"автоцистерна");
	НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8",	"мешки бумажные");
	НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые коробки");
	НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8",	"контейнер");
	НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8",	"поддоны");
	НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8",	"на подвесе");
	НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8",	"кипы");
	НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660",	"гофроящики");
	НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660",	"пластмассовые ящики");
КонецПроцедуры

Процедура ПриСменеВерсииСистемы()
	
	РасположениеФайла(КаталогОбработки, ИмяФайлаНастроек);
	Если ВерсияСистемы=2 Тогда
		// РАБОЧАЯ
		//настройки модуля хранятся в файле				
		ИмяФайлаНастроек=КаталогОбработки+"Меркурий_Константы_"+СокрЛП(глПользователь.Код)+".tx8";
		ПодключитьВнешнююКомпоненту("AddIn.SoapDLL_work");
		Компонента = СоздатьОбъект("AddIn.SoapDLL_work"); 		
		
		Форма.Заголовок("Меркурий - РАБОЧАЯ");
	Иначе	
		ВерсияСистемы = 1;
		// ТЕСТ
		//настройки модуля хранятся в файле		
		ИмяФайлаНастроек=КаталогОбработки+"Меркурий_Константы_ТЕСТ_"+СокрЛП(глПользователь.Код)+".tx8";
	
		ПодключитьВнешнююКомпоненту("AddIn.SoapDLL_test");
		Компонента = СоздатьОбъект("AddIn.SoapDLL_test"); 
			
		
		Форма.Заголовок("Меркурий - ТЕСТ [!!!]");		
	КонецЕсли;
	СохранитьЗначение("ВСД_ВерсияСистемы", ВерсияСистемы);
	
	ЗаполнитьПараметрыСписок();
	
	Компонента.Init(      
		param_username,  	//string USERNAME 
        param_password, 	//string PASSWORD = 
        param_issuer_id, 	//string ISSUER_ID 
        param_service_id, 	// string SERVICE_ID = 
        param_api_key, 		//string API_KEY = 
        param_intiator_login, 	//string USER_LOGIN = 
        param_vetdoctor_login, //string VETDOCTOR_LOGIN = 
		КаталогЛогов // для логов
		);
		
КонецПроцедуры

Процедура ИзменитьВерсиюСистемы()
	Если ВерсияСистемы = 1 Тогда
		ВерсияСистемы =2;
	Иначе
		ВерсияСистемы =1;
	КонецЕсли;
	
	ПриСменеВерсииСистемы();
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
	
	ВерсияСистемы = ВосстановитьЗначение("ВСД_ВерсияСистемы");	
	ВерсияСистемы = 1; // test
	//ВерсияСистемы = 2; // рабочая
	ПриСменеВерсииСистемы();	
	
	ЭтоSQL = ФС.СуществуетФайл(КаталогИБ()+"1cv7.dba");	
	Если ЭтоSQL=1 Тогда 
		Попытка
			RS = СоздатьОбъект("ODBCRecordset");
			RS.УстБД1С();     
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	Иначе		
		Попытка
			базаДанных = СоздатьОбъект("SQLiteBase");
		Исключение
			ЗагрузитьВнешнююКомпоненту("1sqlite.dll");
			базаДанных = СоздатьОбъект("SQLiteBase");
		КонецПопытки;	
		базаДанных.Открыть(":memory:");	
	КонецЕсли;	

	//Сообщить("Логи сохраняются в "+КаталогЛогов);
		
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Партии");
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты");
	Форма.Закладки.ДобавитьЗначение("Площадки");
	Форма.Закладки.ДобавитьЗначение("ВСД");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	          
	Форма.ИспользоватьСлой("Основной, Партии");	
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда  
		
		Команда = Парам.Получить("Команда");
		
		Если Команда="ОтправитьВсдИсходящие" Тогда
			
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда 
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД исходящие за период "+ПериодСтр(НачДата, КонДата));
			
			СписокВСД = Парам.Получить("СписокВСД");
			ОтправитьВсеИсходящиеВСД(СписокВСД);
						
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдТранзакции" Тогда
			
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда 
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД транзакции за период "+ПериодСтр(НачДата, КонДата));
			
			СписокВСД = Парам.Получить("СписокВСД");
			ОтправитьВсеВсдТранзакции(СписокВСД);
						
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ПолучитьПартии" Тогда
			Состояние("Меркурий: получение партий...");
			ПолучитьПартии();
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ЗагрузитьПлощадки" Тогда
			
			выбХС = Парам.Получить("ХозСубъект");
			//Если ПустоеЗначение(НачДата)=1 Тогда
			//	НачДата = ТекущаяДата();
			//КонецЕсли;
			//Если ПустоеЗначение(КонДата)=1 Тогда 
			//	КонДата = ТекущаяДата();
			//КонецЕсли;
			Сообщить("загрузка площадок "+ выбХС);
	
			ПолучитьGuidХС(ВыбХС);

			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ВыбХС);
						
			ЗагрузитьПлощадки(Спр.ТекущийЭлемент());			
						
			СтатусВозврата(0);
			Возврат;

		КонецЕсли;
	КонецЕсли;   

	ЗаполнитьФормыУпаковки();
		
КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда 
		
		Отправитель_Площадка = Элемент;
		//Если ПустоеЗначение(GUID_ОтправительПлощадка)=1 Тогда 
		//	GUID_ОтправительПлощадка = Элемент.GUID;
		//Иначе
		//	Если НЕ(СокрЛП(GUID_ОтправительПлощадка) = СокрЛП(Элемент.GUID)) Тогда 
		//		Сообщить("Ошибка в GUID_ОтправительПлощадка, должно быть "+Элемент.GUID,"!");
		//	Иначе
		//		Сообщить("GUID_ОтправительПлощадка - правильно "+Элемент.Адрес,"i");
		//	КонецЕсли;
		//КонецЕсли;
		
		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьВсеПлощадкиХС(ХС)
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";
	
	ВыбGuidХозСубъекта = (ХС.GUID);
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	//ТЗ.ВыбратьСтроку();	
	
	Возврат тз;
	
КонецФункции

Процедура ОткрытьПлощадкиПоХС()
						
		тз = ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры


Процедура ЗагрузитьСтраны()
	
	Сообщить(" Запрос GetCountryList ","i");		
	Результат = Компонента.GetCountryList( );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Спр = СоздатьОбъект("Справочник.ВСД_Страна");
    countryList = objDom.selectNodes("//country") ;
    Для i1 = 0 По countryList.length - 1 Цикл
        country=countryList.item(i1);
		
		uuid = country.selectSingleNode("uuid").text;
		guid = country.selectSingleNode("guid").text;
		st = country.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = country.selectSingleNode("name").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Страна ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Страна ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецПроцедуры


Процедура ЗагрузитьРегионы()
	
	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]","i");		
	Результат = Компонента.GetRegionList( СокрЛП(Страна.GUID) );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Спр = СоздатьОбъект("Справочник.ВСД_Регион");
    regionList = objDom.selectNodes("//region") ;
    Для i1 = 0 По regionList.length - 1 Цикл
        region=regionList.item(i1);
		
		uuid = region.selectSingleNode("uuid").text;
		guid = region.selectSingleNode("guid").text;
		st = region.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = region.selectSingleNode("name").text;
		view = region.selectSingleNode("view").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Регион ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Регион ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецПроцедуры

Процедура Инициализация()
	
	ЗагрузитьСтраны();

	ЗагрузитьРегионы();	
	
	Если ПустоеЗначение(Отправитель_ХозСубъект)=1 Тогда
		
		СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрКонтрагенты.Выбрать("Выберите фирму-отправитель вет справок",)=1 Тогда 
			ВыбКонтрагент = СпрКонтрагенты.ТекущийЭлемент();
			СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Если СпрХС.НайтиПоРеквизиту("Контрагент", ВыбКонтрагент ,1)=0 Тогда
				СпрХС.Новый();
				СпрХС.Наименование = ВыбКонтрагент .Наименование;
				СпрХС.Контрагент = ВыбКонтрагент ;
				СпрХС.ИНН = ПолучитьИНН(ВыбКонтрагент.ЮрФизЛицо.ИНН);
				СпрХС.Записать();
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			Иначе
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			КонецЕсли;			
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
			
	Результат = ПолучитьGuidХС(Отправитель_ХозСубъект);

	ИмяФайла = Компонента.LogFilename;
	Если Результат="SUCCESS" Тогда
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(ИмяФайла);    
		be = objDom.selectSingleNode("//businessEntity");
		guid = be.selectSingleNode("guid").text;
		name = be.selectSingleNode("name").text;
		country = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("guid").text;
		countryName = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("name").text;
		region = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("guid").text;
		regionName = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("name").text;
		locality = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("guid").text;
		localityName = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("name").text;

		Если ПустоеЗначение(param_issuer_id)=1 Тогда 
			param_issuer_id = guid;
		Иначе
			Если НЕ(param_issuer_id = guid) Тогда 
				Сообщить("Ошибка в param_issuer_id, должно быть "+guid,"!");
			Иначе
				Сообщить("param_issuer_id - правильно "+name,"i");
			КонецЕсли;
		КонецЕсли;

		Страна 	= НайтиСтрануПоGUID(country, countryName);
		Регион 	= НайтиРегионПоGUID(region, regionName);			
		Город 	= НайтиГородПоGUID(locality, localityName);
		
		ЗагрузитьПлощадки( Отправитель_ХозСубъект );
		
		ВыбХС = Отправитель_ХозСубъект;
		ВыбРеквизит = "Отправитель_Площадка";
		ОткрытьПлощадкиПоХС();
		
	КонецЕсли;
		
КонецПроцедуры


НачДата = ТекущаяДата();
КонДата = НачДата;
попытка
	Филиал = глПользователь.Филиал;
Исключение
	Филиал="";
КонецПопытки;

ПаузаСек = 10;
productType = 1; //мясо 
