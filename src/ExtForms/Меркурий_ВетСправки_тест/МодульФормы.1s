Перем Компонента;

Перем ВыпМодуль;
Перем ПутьМодульПараметры;

Перем НашХозСубъект, НашаПлощадка;
Перем Филиал;

Перем базаДанных;

Процедура ЗагрузитьXML_getStockEntryListResponse(имяФайла) Далее
Процедура ЗагрузитьПартииXML( имяФайла, докПартия="" ) Далее
	
//******************************************************************************
 // предопределенная процедура
 //
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;        
	
КонецПроцедуры 

Процедура ЗаполнитьПараметры()
	ГлобМодуль=СоздатьОбъект("Текст");
	
	Если ФС.СуществуетФайл( КаталогИБ()+ПутьМодульПараметры  )=0 Тогда 
		Сообщить("Параметры не загружены. Проверьте файл "+КаталогИБ()+ПутьМодульПараметры ,"!");
		Возврат;
	КонецЕсли;
	
	ГлобМодуль.Открыть(КаталогИБ()+ПутьМодульПараметры );
    Н=1; ТекстМодуля="";
	Для Н=1 по ГлобМодуль.КоличествоСтрок() Цикл
		Стр=ГлобМодуль.ПолучитьСтроку(Н); 
		ТекстМодуля=ТекстМодуля+Стр+РазделительСтрок;
	КонецЦикла;
	
	ВыпМодуль = СоздатьОбъект("ВыполняемыйМодуль");
	ВыпМодуль.УстановитьМодуль(ТекстМодуля);
	ВыпМодуль.НазначитьКонтекст(Контекст);
	ВыпМодуль.КомпилироватьМодуль();
	ВыпМодуль.ВыполнитьМодуль();
	
	ВыпМодуль.ЗаполнитьПараметры();

	param_username = ВыпМодуль.param_username;  // для базовой авторизации
	param_password = ВыпМодуль.param_password;
	param_issuer_id = ВыпМодуль.param_issuer_id; // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id = ВыпМодуль.param_service_id ;
	param_api_key = ВыпМодуль.param_api_key ;

	param_intiator_login = ВыпМодуль.param_intiator_login; // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = ВыпМодуль.param_vetdoctor_login;
	
	СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	СпрХС.НайтиПоРеквизиту("GUID",param_issuer_id,1);
	НашХозСубъект = СпрХС.ТекущийЭлемент();
	
	GUID_НашаПлощадка = ВыпМодуль.GUID_НашаПлощадка;
	СпрПлощадка = СоздатьОбъект("Справочник.ВСД_Площадка");
	СпрПлощадка.НайтиПоРеквизиту("Guid",GUID_НашаПлощадка,1);
	НашаПлощадка = СпрПлощадка.ТекущийЭлемент();
		
	GUID_Страна	= ВыпМодуль.GUID_Страна; //страна
	GUID_Регион = ВыпМодуль.GUID_Регион; //регион = обл		
	GUID_Город  = ВыпМодуль.GUID_Город; // city 
		
	GUID_Упаковка = ВыпМодуль.GUID_Упаковка; //гофроящик
	
	ВСД_Экспертиза = "Произ.лабор Приосколье";
	ВСД_Местность = "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	
	КаталогЛогов = КаталогИБ()+"logs\";
	Если ФС.СуществуетФайл(КаталогЛогов)=0 Тогда 
		ФС.СоздатьКаталог(КаталогЛогов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
	
	ЗаполнитьПараметры();
		
	//боевая версия
	//ЗагрузитьВнешнююКомпоненту("SoapDLL_work.dll");
	ЗагрузитьВнешнююКомпоненту("SoapDLL_test.dll");
	//Компонента = СоздатьОбъект("SoapDLL.WorkClass"); 		
	Компонента = СоздатьОбъект("SoapDLL.TestClass"); 		
	Компонента.Init(      
		param_username,  	//string USERNAME 
        param_password, 	//string PASSWORD = 
        param_issuer_id, 	//string ISSUER_ID 
        param_service_id, 	// string SERVICE_ID = 
        param_api_key, 		//string API_KEY = 
        param_intiator_login, 	//string USER_LOGIN = 
        param_vetdoctor_login, //string VETDOCTOR_LOGIN = 
		КаталогЛогов // для логов
		);

	//Сообщить("Логи сохраняются в "+КаталогЛогов);
		
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Справочники");
	Форма.Закладки.ДобавитьЗначение("ВСД");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	          
	Форма.ИспользоватьСлой("Основной, Справочники");
	
	Попытка
		базаДанных = СоздатьОбъект("SQLiteBase");
	Исключение
		ЗагрузитьВнешнююКомпоненту("1sqlite.dll");
		базаДанных = СоздатьОбъект("SQLiteBase");
	КонецПопытки;	
	базаДанных.Открыть(":memory:");	
	

КонецПроцедуры

Функция ЗагрузитьТЗ(Запрос)
	тз = СоздатьОбъект("ТаблицаЗначений");
	Таб = "|";
	
	КолСтр=СтрКоличествоСтрок(СокрЛП(Запрос));
	если КолСтр=0 Тогда
		Возврат тз;
	КонецЕсли;
	ТекСтр=СтрПолучитьСтроку(Запрос,1);
	КолПарам = СтрЧислоВхождений(ТекСтр,Таб);
	
	Если КолПарам=0 Тогда 
		Сообщить("Пустая таблица значений");
		Возврат тз;
	КонецЕсли;
	
	Для А=1 По КолПарам Цикл
		тз.НоваяКолонка();
	КонецЦикла;
	
	Для А=1 По КолСтр Цикл
		тз.НоваяСтрока();
		ТекСтр=СтрПолучитьСтроку(Запрос,А);
		
		НомПарам = 1;
		Пока НомПарам<=КолПарам Цикл
			Парам="";
			ПозРазд=Найти(ТекСтр,Таб);
			Если ПозРазд<>0 Тогда
				Парам=Лев(ТекСтр,ПозРазд-1);
				ТекСтр=Сред(ТекСтр,ПозРазд+1);
			Иначе
				Парам=ТекСтр;
				ТекСтр="";
			КонецЕсли;
			тз.УстановитьЗначение(А, НомПарам, Парам);
			
			НомПарам=НомПарам+1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тз;
КонецФункции

Процедура Отладка();
	Сообщить(Компонента.ApplicationId);
	Сообщить(Компонента.Status);
	Сообщить(Компонента.ErrorMessage);
	Сообщить(Компонента.ResultString);

	appID = Компонента.ApplicationId; 	
КонецПроцедуры

Функция ПроверкаВходВСД(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
	//	Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(док.ВсдНомер)=1 Тогда 
		Сообщить("Не указан ВсдНомер ","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.ВсдДата)=1 Тогда 
		Сообщить("Не указан ВсдДата ","!");
		результат = 0;
	КонецЕсли;
		
	Возврат результат;
КонецФункции

Процедура Отправить_ВходВСД(док) Экспорт
	
	Если ПроверкаВходВСД(док)=0 Тогда 
		Возврат;
	КонецЕсли;
	
	Сообщить("send_VSD_IN");
	Результат = Компонента.Send_VSD_IN(
		СокрЛП(док.Отправитель_ХозСубъект.GUID),  	//	отправитель_хозСубъект_guid,
		СокрЛП(док.Отправитель_Площадка.GUID),		//	отправитель_площадка_guid,
		СокрЛП(док.Получатель_ХозСубъект.GUID),		//	получатель_хозСубъект_guid,
		СокрЛП(док.Получатель_Площадка.GUID),		//	получатель_площадка_guid,
		СокрЛП(док.Производитель_Площадка.GUID),	//	производитель_площадка_guid,
		СокрЛП(док.Перевозчик_ХозСубъект.GUID),		//	перевозчик_хозСубъект_guid,
		СокрЛП(док.Продукция.GUID),					//	продукция_guid,
		СокрЛП(док.ВидПродукции.GUID),				//	видПродукции_guid,
		СокрЛП(док.Продукция.Наименование),			//	названиеПродукции,
		СокрЛП(док.ДатаИзготовления),				//  датаИзготовления,
		СокрЛП(док.ДатаСрокГодности),				//	датаСрокГодности,
		СокрЛП(док.Количество),						//	количествоКг,
		СокрЛП(док.КоличествоКор),					//	количествоКор,
		СокрЛП(док.ТтнСерия),						//	ТтнСерия,
		СокрЛП(док.ТтнНомер),						//	ТтнНомер,
		док.ТтнДата, //ТекущаяДата(),
		СокрЛП(док.номерАвто), 		//	номерАвто,
		СокрЛП(док.ВсдСерия), 		//	ВсдСерия,
		СокрЛП(док.ВсдНомер), 		//	ВсдНомер,
		док.ВсдДата,		//	ВсдДата, ТекущаяДата(), //
		СокрЛП(док.ВсдЭкспертиза), 	//	ВсдЭкспертиза,
		СокрЛП(док.ВсдМестность	),
		СокрЛП(док.ОсобыеОтметки ),
		док.ТермическоеСостояние,
		GUID_Упаковка
	);
			
	Отладка();
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент( док );				
		ДокОб.applicationId = Компонента.ApplicationId;
		ДокОб.Статус = Компонента.Status;
		ДокОб.RequestResult = Компонента.ErrorMessage;		
		ДокОб.Записать();
		Сообщить("Записан ApplicationID = "+ДокОб.applicationID+" статус = "+ДокОб.Статус );
		Сообщить(ДокОб.RequestResult);
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

Процедура Отправить_ИсхВСД(док) Экспорт
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата","!");
		Возврат;
	КонецЕсли;
	
	Сообщить("send_VSD_OUT");
	Результат = Компонента.send_VSD_OUT( 
		СокрЛП(док.Отправитель_ХозСубъект.GUID),  	//	отправитель_хозСубъект_guid,
		СокрЛП(док.Отправитель_Площадка.GUID),		//	отправитель_площадка_guid,
		СокрЛП(док.Получатель_ХозСубъект.GUID),		//	получатель_хозСубъект_guid,
		СокрЛП(док.Получатель_Площадка.GUID),		//	получатель_площадка_guid,
		СокрЛП(док.Партия.Производитель_Площадка.GUID), 	//СокрЛП(док.Производитель_Площадка.GUID),	//	производитель_площадка_guid,
		СокрЛП(док.Перевозчик_ХозСубъект.GUID),		//	перевозчик_хозСубъект_guid,		
		СокрЛП(док.Партия.Продукция.GUID), 		//СокрЛП(док.Продукция.GUID),					//	продукция_guid,
		СокрЛП(док.Партия.ВидПродукции.GUID), 	//СокрЛП(док.ВидПродукции.GUID),				//	видПродукции_guid,
		СокрЛП(док.Партия.Продукция.Наименование), //СокрЛП(док.Продукция.Наименование),			//	названиеПродукции,
		СокрЛП(док.Партия.ДатаИзготовления),	//СокрЛП(док.ДатаИзготовления),				//  датаИзготовления,
		СокрЛП(док.Партия.ДатаСрокГодности),	//СокрЛП(док.ДатаСрокГодности),				//	датаСрокГодности,		
		СокрЛП(док.Количество),						//	количествоКг,
		СокрЛП(док.КоличествоКор),					//	количествоКор,
		СокрЛП(док.ТтнСерия),						//	ТтнСерия,
		СокрЛП(док.ТтнНомер),						//	ТтнНомер,
		док.ТтнДата, //ТекущаяДата(),
		СокрЛП(док.номерАвто), 		//	номерАвто,		
		СокрЛП(док.Партия.ВсдСерия), //СокрЛП(док.ВсдСерия), 		//	ВсдСерия,
		СокрЛП(док.Партия.ВсдНомер), //СокрЛП(док.ВсдНомер), 		//	ВсдНомер,
		док.Партия.ВсдДата,//док.ВсдДата,		//	ВсдДата, ТекущаяДата(), //
		СокрЛП(док.Партия.ВсдЭкспертиза), //СокрЛП(док.ВсдЭкспертиза), 	//	ВсдЭкспертиза,
		СокрЛП(док.Партия.ВсдМестность), //СокрЛП(док.ВсдМестность	),
		СокрЛП(док.Партия.ОсобыеОтметки ),
		СокрЛП(док.Партия.GUID	),		
		док.Партия.ТермическоеСостояние,
		GUID_Упаковка // упаковка = гофроящик
		//должно быть тоже самое что и во входящем ВСД
		//"fedf5ad4-053c-11e1-99b4-d8d385fbc9e8" //упаковка = коробки 
	);

	Отладка();
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);

		ДокОб.applicationID = Компонента.ApplicationId;
		ДокОб.Статус = Компонента.Status;
		ДокОб.RequestResult = Компонента.ErrorMessage;		
		ДокОб.Записать();
		Сообщить("Записан ApplicationID = "+ДокОб.applicationID+" статус = "+ДокОб.Статус );
		Сообщить(ДокОб.RequestResult);
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

Функция ЗагрузитьМассив(Массив)
	тз = СоздатьОбъект("ТаблицаЗначений");
	
	Для Инд = Массив.GetLBound(1) По Массив.GetUBound(1) Цикл
		тз.НоваяСтрока();
		
		Зн="";
		Для Инд2 = Массив.GetLBound(2) По Массив.GetUBound(2) Цикл
			тз.НоваяКолонка();
			тз.УстановитьЗначение(инд+1,Инд2+1, Массив.GetValue(Инд,Инд2));
			
			зн = зн + Массив.GetValue(Инд,Инд2)+" ";
			
			//Массив.SetValue(Инд, Значение+1);
			//Сообщить("Тип "+Массив.GetType());			
		КонецЦикла;
		Сообщить(зн);	
	КонецЦикла;

	тз.ВыбратьСтроку();
КонецФункции

//******************************** Партии ******************************************************************

Процедура ЗаписатьПартии(тзПартии, докВходВСД="")
	
	//RS = СоздатьОбъект("ODBCRecordset");
	//RS.УстБД1С();     
	//ТекстЗапроса = "
	//|select
	//|	Док.idDOc [ID $Документ.ВСД_входящаяПартия]
	//|from $Документ.ВСД_входящаяПартия as Док 
	//|where 
	//|	$Док.GUID = :GUID or 
	//|	Док.IDDoc = :ВыбДок";
	
	Запрос = базаДанных.НовыйЗапрос();
	ТекстЗапроса = "
	|select
	|	Док.idDOc [ID $Документ.ВСД_входящаяПартия]
	|from [Документ.ВСД_входящаяПартия] as Док 
	|where 
	|	Док.GUID = :GUID 
	//|	or Док.IDDoc = :ВыбДок
	|";	
	
	ДокПартии = СоздатьОбъект("Документ.ВСД_входящаяПартия");
	
	тзПартии.ВыбратьСтроки();
	Пока тзПартии.ПолучитьСтроку() = 1 Цикл
		
		//RS.УстановитьТекстовыйПараметр("GUID", тзПартии._2);  
		//RS.УстановитьТекстовыйПараметр("ВыбДок", докВходВСД);  
		////RS.Отладка(1);
		//ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
		
		Запрос.Подставлять("GUID", тзПартии._2);
		//Запрос.Подставлять("ВыбДок", докВходВСД);
		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		
		//ТЗ.ВыбратьСтроку();
		Если тз.КоличествоСтрок()>0 Тогда 
			//изменяем существующую партию
			тз.ВыбратьСтроки();
			Пока тз.ПолучитьСтроку() = 1 Цикл
				ДокПартии.НайтиДокумент(тз.id);
				Если ДокПартии.Проведен()=1 Тогда
					ДокПартии.СделатьНеПроведенным();
				КонецЕсли;

				Если ВРЕГ(тзПартии._10) <>  "TRUE" Тогда 
					//пропускаем неактивные партии
					ДокПартии.Удалить();
					Продолжить;
				Иначе
				
					ДокПартии.НомерЗаписи 	= тзПартии._1;
					ДокПартии.GUID 			= тзПартии._2;
					ДокПартии.UUID 			= тзПартии._3;			
					ДокПартии.ДатаДок 		= тзПартии._6;
					ДокПартии.ДатаИзменения = тзПартии._7;
					ДокПартии.Количество 	= Число(тзПартии._5);
					ДокПартии.Статус 		= тзПартии._8;
					
					ДокПартии.Записать();
					
					Сообщить("Изменена партия "+ДокПартии.ТекущийДокумент());				
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если ВРЕГ(тзПартии._10) <>  "TRUE" Тогда 
				//пропускаем неактивные партии
				Продолжить;
			Иначе
				Если докВходВСД<>"" Тогда 
					ДокПартии = докВходВСД;
					ДокПартии.СделатьНеПроведенным();
					ДокПартии.СнятьПометкуУдаления();
				Иначе
					//создаем новую партию
					ДокПартии.Новый();
				КонецЕсли;
				ДокПартии.АвтоВремяТекущее();
				
				ДокПартии.НомерЗаписи 			= тзПартии._1;
				ДокПартии.GUID 					= тзПартии._2;
				ДокПартии.UUID 					= тзПартии._3;			
				ДокПартии.НаименованиеПродукции = тзПартии._4;
				ДокПартии.Количество 			= Число(тзПартии._5);
				ДокПартии.ДатаДок 				= тзПартии._6;			
				ДокПартии.ДатаИзменения 		= тзПартии._7;
				ДокПартии.Статус 				= тзПартии._8;
	
				ДокПартии.Записать();
				
				Сообщить("Записана партия "+ДокПартии.ТекущийДокумент());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(НашаПлощадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат;
	КонецЕсли;

	Результат = Компонента.GetStockList(СокрЛП(НашаПлощадка.GUID), Смещение);

	Отладка();
			
	
КонецПроцедуры

Процедура ПолучитьПартииОтвет()

	Результат = Компонента.GetStockListResult(СокрЛП(appID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		ЗаписатьПартии(тз);
				
	КонецЕсли;		
		
	
КонецПроцедуры

Процедура ПолучитьПартииОтветXML()

	Результат = Компонента.GetStockListResult(СокрЛП(appID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		ЗагрузитьXML_getStockEntryListResponse( Компонента.LogFilename );
				
	КонецЕсли;		
		
	
КонецПроцедуры

Процедура ПолучитьПоследнююВерсиюПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(НашаПлощадка.GUID)=1 Тогда 
		Сообщить("У Площадки пустой GUID");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбПартия.GUID)=1 Тогда 
		Сообщить("В выбранной партии пустой GUID");
		Возврат;
	КонецЕсли;	

	Результат = Компонента.GetStockEntryVersionList(
		СокрЛП(ВыбПартия.GUID),
		СокрЛП(НашаПлощадка.GUID)
		);

	Отладка();
			
КонецПроцедуры

Процедура ПолучитьПоследнююВерсиюПартииОтвет()

	Результат = Компонента.GetStockEntryVersionListResult(СокрЛП(appID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		тз = ЗагрузитьТЗ(Компонента.ResultString);
		тз.ВыбратьСтроку();
		//ЗаписатьПартии(тз);
				
	КонецЕсли;		
		
	
КонецПроцедуры

//******************************** ******************************************************************

Процедура ПолучитьРезультат_ВходВСД( докСсылка ) Экспорт
	
	Результат = Компонента.Send_VSD_IN_Result( СокрЛП(докСсылка.applicationID));

	Отладка();
	
	Попытка
		Ошибка = Компонента.ErrorMessage;
		//Сообщить(""+Результат+" "+Ошибка);
		
		Массив = Компонента.ResultString;
		//Сообщить(Массив);
		тз = ЗагрузитьТЗ(Массив);
		//тз.ВыбратьСтроку();
		
		Док = СоздатьОбъект("Документ");
		док.НайтиДокумент( докСсылка );		
		док.Статус = Компонента.Status;
		Док.RequestResult = Компонента.ErrorMessage;		
		док.Записать();
		Сообщить("Записан ApplicationID = "+док.applicationID+" статус = "+Док.Статус );
		Сообщить(Док.RequestResult);		
		
		Если Результат="COMPLETED" Тогда
			//ЗаписатьПартии(тз, док);
			ЗагрузитьПартииXML( Компонента.LogFilename , докСсылка);
		КонецЕсли;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

Функция ПолучитьРезультат_ИсхВСД( докСсылка ) Экспорт
	
	//Компонента. .message("test 1");
	
	Результат = Компонента.Send_VSD_OUT_Result( СокрЛП(докСсылка.applicationID) );

	Отладка();
	
	Попытка
		Ошибка = Компонента.ErrorMessage;
		//Сообщить(""+Результат+" "+Ошибка);
		
		//Массив = OLEExSup.ПолучитьСвойство(Компонента,"ResultStrings"); //для массивов
		//тз = ЗагрузитьМассив(Массив);
		//
		Массив = Компонента.ResultString;
		Сообщить(Массив);
		тз = ЗагрузитьТЗ(Массив);
		//тз.ВыбратьСтроку();

		Док = СоздатьОбъект("Документ");
		док.НайтиДокумент( докСсылка );		
		док.Статус = Компонента.Status;
		Док.RequestResult = Компонента.ErrorMessage;		
		
		Сообщить("Записан ApplicationID = "+док.applicationID+" статус = "+Док.Статус );
		Сообщить(Док.RequestResult);
		
		док.Записать();
		Если Результат="COMPLETED" Тогда
			//ЗаписатьПартии(тз);
			ЗагрузитьПартииXML( Компонента.LogFilename );
			
			док.UUID = Компонента.DocUUID;
			
			док.Записать();
			Док.Провести();
		КонецЕсли;

		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Результат;
КонецФункции

//*******************************************
Процедура СоздатьВходящийВСД()
	
	Отправить_ВходВСД(ВходящийВСД);
	
КонецПроцедуры

Процедура ПолучитьОтветВходящийВСД()

	ПолучитьРезультат_ВходВСД(ВходящийВСД);
	
КонецПроцедуры

//*******************************************
Процедура СоздатьИсходящийВСД()
	
	Отправить_ИсхВСД(ИсходящийВСД);
КонецПроцедуры

Процедура ПолучитьОтветИсходящийВСД()
	
	ПолучитьРезультат_ИсхВСД(ИсходящийВСД);
	
КонецПроцедуры

Процедура Пауза(ЗадержкаСекунд)
	scr = СоздатьОбъект("WScript.Shell");
	scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ЗадержкаСекунд) ),0,1); 
КонецПроцедуры

Процедура ОтправитьВсеИсходящиеВСД()
		
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Док.ВыбратьДокументы(НачДата, КонДата);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если ((Док.Проведен()=0) И (Док.ПометкаУдаления()=0)) Тогда 
			tt1=_GetPerformanceCounter();
			Сообщить(Док);
			Отправить_ИсхВСД(Док);
			
			Пауза(5);			
			tt2=_GetPerformanceCounter();			
			Сообщить("Пауза = "+(tt2 - tt1));
			Результат = ПолучитьРезультат_ИсхВСД(док);
			Для А=1 По 3 Цикл
				Если (Результат<>"COMPLETED") Тогда 
					Результат = ПолучитьРезультат_ИсхВСД(док);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьОтветВсеИсходящиеВСД()
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Док.ВыбратьДокументы(НачДата, КонДата);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен()=0 Тогда 
			ПолучитьРезультат_ИсхВСД(док);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПолучитьИНН(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение ИНН юр лица.
//  
// Описание:
//  Функция возращает ИНН из переданной строки 
//

//****************** Площадки **********************************
Процедура ПолучитьПощадки(ХС)
	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	//RS = СоздатьОбъект("ODBCRecordset");
	//RS.УстБД1С();     	


	//ТекстЗапроса = "
	//|select 	              
  //  |   СпрПл.id [id $Справочник.ВСД_Площадка], 
  //  |   СпрПл.descr, 
  //  |   $СпрПл.GUID, 
  //  |   $СпрПл.Контрагент as Контрагент 
  ////  |   $СпрПл.ИНН as ИНН
  //  |from $Справочник.ВСД_Площадка as СпрПл  
  //	|where 
  //	|	СпрПл.ParentExt = :ВыбХС and
  //	|	$СпрПл.GUID= :GUID
  //	|";
	Запрос = базаДанных.НовыйЗапрос();
	ТекстЗапроса = "
	|select 	              
    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
    |   СпрПл.descr, 
    |   СпрПл.GUID, 
    |   СпрПл.Контрагент as Контрагент 
    |from [Справочник.ВСД_Площадка] as СпрПл  
  	|where 
  	|	СпрПл.ParentExt = :ВыбХС and
  	|	СпрПл.GUID= :GUID
  	|";

	
	Результат = Компонента.GetEnterpriseList_Strings( СокрЛП(ХС.GUID) );
	
	Отладка();
	
	Если Результат="SUCCESS" Тогда
			
		рез = Компонента.ResultString;
		//Сообщить(рез);
		
		тзПлощадки = ЗагрузитьТЗ(рез);
		//тзПлощадки.ВыбратьСтроку();
		тзПлощадки.ВыбратьСтроки();
		Пока тзПлощадки.ПолучитьСтроку() = 1 Цикл
			
			//RS.УстановитьТекстовыйПараметр("ВыбХС", ХС);  
			//RS.УстановитьТекстовыйПараметр("GUID", тзПлощадки._3);  
			//RS.Отладка(1);
			//тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			
			Запрос.Подставлять("ВыбХС", ХС);
			Запрос.Подставлять("GUID", тзПлощадки._3);
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			
			//ТЗ.ВыбратьСтроку();
			Если ПустоеЗначение(тз)=0 Тогда 
				//Спр.НайтиЭлемент(тз.id);
				//спр.GUID = тз.GUID;
				//спр.Записать();
				Сообщить("Найден Эл ["+Спр.ТекущийЭлемент()+Спр.Наименование+"] GUID = "+ тзПлощадки._3);
				//КонецЦикла;	
			Иначе
				//создаем новый элемент
				Спр.Новый();
				//Спр.Код = ;
				//Спр.Наименование = тзПлощадки._1+" "+тзПлощадки._2;
				Спр.Наименование = тзПлощадки._1;
				Спр.Адрес = тзПлощадки._2;
				//Спр.Контрагент = ;
				Спр.GUID = тзПлощадки._3;
				Спр.UUID = тзПлощадки._4;
				Спр.Владелец = ХС;
				Спр.УстановитьНовыйКод("00");
				Спр.Записать();
				Сообщить("Создан Эл ["+тзПлощадки._1+ тзПлощадки._2 +"] GUID = "+ тзПлощадки._3);
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПощадкиПоНазванию( ХС, УточнитьНазвание=1)
	
	Стр = СокрЛП(ХС.Контрагент.ЮрФизЛицо.ПолнНаименование);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ЮрФизЛицо.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=1 Тогда 
			
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Сообщить(" Запрос GetRussianEnterpriseList_Name_Strings [ "+стр+" ]");		
	Результат = Компонента.GetRussianEnterpriseList_Name_Strings( стр, GUID_Регион );
	Отладка();
	
	Если Результат="SUCCESS" Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		//RS = СоздатьОбъект("ODBCRecordset");
		//RS.УстБД1С();     			
		//
		//ТекстЗапроса = "
		//|select 	              
	  //  |   СпрПл.id [id $Справочник.ВСД_Площадка], 
	  //  |   СпрПл.descr, 
	  //  |   $СпрПл.GUID, 
	  //  |   $СпрПл.Контрагент as Контрагент 
	  ////  |   $СпрПл.ИНН as ИНН
	  //  |from $Справочник.ВСД_Площадка as СпрПл  
	  //	|where 
	  //	|	СпрПл.ParentExt = :ВыбХС and
	  //	|	$СпрПл.GUID= :GUID
	  //	|";
	  
	  Запрос = базаДанных.НовыйЗапрос();
	  
	ТекстЗапроса = "
	|select 	              
    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
    |   СпрПл.descr, 
    |   СпрПл.GUID, 
    |   СпрПл.Контрагент as Контрагент 
    |from [Справочник.ВСД_Площадка] as СпрПл  
  	|where 
  	|	СпрПл.ParentExt = :ВыбХС and
  	|	СпрПл.GUID= :GUID
  	|";

		рез = Компонента.ResultString;
		//Сообщить(рез);
				
		тзПлощадки = ЗагрузитьТЗ(рез);
		//тзПлощадки.ВыбратьСтроку();
		тзПлощадки.ВыбратьСтроки();
		Пока тзПлощадки.ПолучитьСтроку() = 1 Цикл
			
			//RS.УстановитьТекстовыйПараметр("ВыбХС", ХС);  
			//RS.УстановитьТекстовыйПараметр("GUID", тзПлощадки._3);  
			////RS.Отладка(1);
			//тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			Запрос.Подставлять("ВыбХС", ХС);
			Запрос.Подставлять("GUID", тзПлощадки._3);
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			
			//ТЗ.ВыбратьСтроку();
			Если ПустоеЗначение(тз)=0 Тогда 
				//ссылка = тз.ПолучитьЗначение(1,"id");
				Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,"id"));
				//спр.GUID = тз.GUID;
				Спр.Наименование = тзПлощадки._1;
				Спр.Адрес = тзПлощадки._2;
				спр.Записать();
				Сообщить("Найден Эл ["+Спр.ТекущийЭлемент()+Спр.Наименование+"] GUID = "+ тзПлощадки._3);
				//КонецЦикла;	
			Иначе
				//создаем новый элемент
				Спр.Новый();
				//Спр.Код = ;
				//Спр.Наименование = тзПлощадки._1+" "+тзПлощадки._2;
				Спр.Наименование = тзПлощадки._1;
				Спр.Адрес = тзПлощадки._2;
				//Спр.Контрагент = ;
				Спр.GUID = тзПлощадки._3;
				Спр.UUID = тзПлощадки._4;
				Спр.Владелец = ХС;
				Спр.УстановитьНовыйКод("00");
				Спр.Записать();
				Сообщить("Создан Эл ["+тзПлощадки._1+ тзПлощадки._2 +"] GUID = "+ тзПлощадки._3);
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПлощадку(Площадка)

	Адрес = Площадка.Контрагент.ЮрФизЛицо.ФактАдрес;
	
	//GUID = GetBusinessEntity(ИНН);
	Результат = Компонента.CreateEnterprise(
			СокрЛП(Площадка.Контрагент.Наименование),
			Адрес, 
	        GUID_Страна, //страна
            GUID_Регион, //регион Самара
            GUID_город, // city
			СокрЛП(Площадка.Владелец.GUID)
	);
	
	Отладка();	
		
		//Сообщить("Хоз субъект с ИНН ["+ИНН+"] не найден");
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateEnterpriseResult( СокрЛП(applicationID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
			
		рез = Компонента.ResultString;
		
		тз = ЗагрузитьТЗ(рез);
		//тз.ВыбратьСтроку();
		
		GUID = тз.ПолучитьЗначение(1,3);
		uuid = тз.ПолучитьЗначение(1,4);
		
		если ПустоеЗначение(GUID)=0 Тогда			
			Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
			Спр.НайтиЭлемент(ВыбПлощадка);
			спр.GUID = GUID;
			спр.uuid = uuid;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
		Иначе
			Сообщить("Пустой GUID ");
		КонецЕсли;
			
	КонецЕсли;	

		
КонецПроцедуры


Процедура СоздатьСвязьХозсубъектПлощадка(ВыбХС, ВыбПлощадка)
	Если ПустоеЗначение(ВыбХС.GUID)=1 Тогда 
		Сообщить("Выб хозсбъект не указан GUID");
		Возврат;
	КонецЕсли;
		
	Если ПустоеЗначение(ВыбПлощадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateActivityLocationsOperation(
			СокрЛП(ВыбХС.GUID),
			СокрЛП(ВыбПлощадка.GUID) 
	);
	
	Отладка();	
	
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
			
		рез = Компонента.ResultString;
		
		тз = ЗагрузитьТЗ(рез);
		//тз.ВыбратьСтроку();
		
		GUID = тз.ПолучитьЗначение(1,3);
		uuid = тз.ПолучитьЗначение(1,4);
		
		//если ПустоеЗначение(GUID)=0 Тогда			
		//	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		//	Спр.НайтиЭлемент(ВыбПлощадка);
		//	спр.GUID = GUID;
		//	спр.uuid = uuid;
		//	спр.Записать();
		//	Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
		//Иначе
		//	Сообщить("Пустой GUID ");
		//КонецЕсли;
			
	КонецЕсли;	

		
КонецПроцедуры

//****************** ХозСубъкты **********************************
Функция ПолучитьИНН(ВыбКлиент)
	
	//Если ПустоеЗначение(ВыбКлиент.ИНН)=0 Тогда 
	//	Возврат СокрЛП(ВыбКлиент.ИНН);		
	//Иначе
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
		Если Найти(ИННКПП, "\") <> 0 Тогда
			// найден разделитель
			Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);
	
		ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
			// найден разделитель
			Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
		Иначе
			Возврат СокрЛП(ИННКПП);
	
		КонецЕсли;
	//КонецЕсли;
КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьКПП(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение КПП юр лица.
//  
// Описание:
//  Функция возращает КПП из переданной строки 
//
Функция ПолучитьКПП(ВыбКлиент)
	
	//Если ПустоеЗначение(ВыбКлиент.КПП)=0 Тогда 
	//	Возврат СокрЛП(ВыбКлиент.КПП);		
	//Иначе
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

		Если Найти(ИННКПП, "\") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);
	
		ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
		Иначе
			Возврат "";
	
		КонецЕсли;
	//КонецЕсли;
КонецФункции // ПолучитьКПП()

Функция ПолучитьОГРН(ВыбКонтрагент)
	
КонецФункции

Процедура СоздатьХС(ХС)

	ИНН = ПолучитьИНН(ХС.Контрагент);	
	КПП = ПолучитьКПП(ХС.Контрагент);	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ПолучитьОГРН(ХС.Контрагент);

	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда 
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;
	
	Адрес = ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	
	//GUID = GetBusinessEntity(ИНН);
	Результат = Компонента.CreateBusinessEntity(
			хс.Контрагент.Наименование, 
			хс.Контрагент.ЮрФизЛицо.ПолнНаименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        GUID_Страна, //страна
            GUID_Регион, //регион Самара
            GUID_Город, // city
			Адрес
	);
	
	Отладка();	
		
		//Сообщить("Хоз субъект с ИНН ["+ИНН+"] не найден");
	
КонецПроцедуры

Процедура ПолучитьGuidХС(ХС)

	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	
	//КПП = ПолучитьКПП(ХС.Контрагент.ЮрФизЛицо.ИНН);
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	//ОГРН = СокрЛП(ХС.Контрагент.ОГРН);
	//Адрес = ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	
	//GUID = GetBusinessEntity(ИНН);	
	Результат = Компонента.GetBusinessEntity_Strings( ИНН );
	
	Отладка();
	
	Если Результат="SUCCESS" Тогда
						
		тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		
		//GUID="";
		//тз.ВыбратьСтроки();
		//Пока тз.ПолучитьСтроку() = 1 Цикл
		//	GUID = тз._3;
		//	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		//	Спр.НайтиЭлемент(ВыбХС);
		//	спр.GUID = GUID;
		//	спр.Записать();
		//	Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);						
		//КонецЦикла;
		Если тз.КоличествоКолонок()>0 Тогда			
			GUID = тз.ПолучитьЗначение(1,3);
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ХС);
			спр.GUID = GUID;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);			
		Иначе
		//Если ПустоеЗначение(GUID)=1 Тогда
			Сообщить("Хоз субъект не найден по ИНН "+ИНН);
		КонецЕсли;
		
	КонецЕсли;	
		
		//Сообщить("Хоз субъект с ИНН ["+ИНН+"] не найден");
	
КонецПроцедуры

Процедура СинхронизацияСпрХС()
//	RS = СоздатьОбъект("ODBCRecordset");
//	RS.УстБД1С();     
//
//	ТекстЗапроса = "select 	              
//    |   СпрХС.id [id $Справочник.ВСД_ХозСубъект], 
//    |   СпрХС.descr, 
//    |   $СпрХС.GUID, 
//    |   $СпрХС.Контрагент [Контрагент $Справочник.Контрагенты]
//    //|   $СпрХС.ИНН as ИНН
//    |  from $Справочник.ВСД_ХозСубъект as СпрХС  
//  	|";

	Запрос = базаДанных.НовыйЗапрос();
	ТекстЗапроса = "select 	              
    |   СпрХС.id [id $Справочник.ВСД_ХозСубъект], 
    |   СпрХС.descr, 
    |   СпрХС.GUID, 
    |   СпрХС.Контрагент [Контрагент $Справочник.Контрагенты]
    |  from [Справочник.ВСД_ХозСубъект] as СпрХС  
  	|";

  	Если обновитьВсеХозСубъекты=0 Тогда 
  		//ТекстЗапроса=ТекстЗапроса+"  where $СпрХС.GUID=''";
  		ТекстЗапроса=ТекстЗапроса+"  where СпрХС.GUID=''";
  	КонецЕсли;
	//RS.Отладка(1);
	//ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	//ТЗ.ВыбратьСтроку();
	
	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		
		ПолучитьGuidХС(тз.id);
		
		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ПолучитьПощадки(тз.id);
			ПолучитьПощадкиПоНазванию(тз.id, 0 );
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПолучитьОтветХС( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));

	Отладка();
	
		рез = Компонента.ResultString;
		
		тз = ЗагрузитьТЗ(рез);
		//тз.ВыбратьСтроку();
		
		GUID = тз.ПолучитьЗначение(1,3);
		
		если ПустоеЗначение(GUID)=0 Тогда			
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ВыбХС);
			спр.GUID = GUID;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
		Иначе
			Сообщить("Пустой GUID ");
		КонецЕсли;

		
КонецПроцедуры


Функция НайтиХС(Guid)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Guid "+Guid+" не найден, создаем новый ХС");
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция НайтиПлощадку(Guid)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка GUID ["+guid+"] не найдена","!");
			//создать площадку

			Результат = Компонента.getEnterpriseByGuid(guid);	
			
			Отладка();	
			Если Результат="SUCCESS" Тогда
					
				рез = Компонента.ResultString;
				
				тз = ЗагрузитьТЗ(рез);
				//тз.ВыбратьСтроку();
				
				//Владелец = НайтиХС( тз.ПолучитьЗначение(1,5) ); //owner = XC
				
				//Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
				//Спр.Новый();
				//Спр.Наименование = тз.ПолучитьЗначение(1,1);
				//спр.Адрес = тз.ПолучитьЗначение(1,2);
				//спр.GUID = тз.ПолучитьЗначение(1,3); // = GUID
				//спр.uuid = тз.ПолучитьЗначение(1,4);
				//спр.Записать();
				//Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
				Сообщить("Не найдена площадка: 
				|name = "+тз.ПолучитьЗначение(1,1)+"
				|address = "+тз.ПолучитьЗначение(1,2)+"
				|guid = "+тз.ПолучитьЗначение(1,3));
					
			КонецЕсли;	
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиПродукцию(Guid, Название)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.Записать();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(Guid, Название)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.Записать();
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиВхПартиюПоНомеру(НомерЗаписи)
	Док = СоздатьОбъект("Документ.ВСД_входящаяПартия");	
	
//	RS = СоздатьОбъект("ODBCRecordset");
//	RS.УстБД1С();     	
//
//	ТекстЗапроса = "
//	|select 	              
//    |   ДокВ.iddoc [id $Документ.ВСД_входящаяПартия]
//    |from $Документ.ВСД_входящаяПартия as ДокВ  
//  	|where 
//  	|	$ДокВ.НомерЗаписи= :НомерЗаписи
//  	|";
//			RS.УстановитьТекстовыйПараметр("НомерЗаписи", НомерЗаписи);  
			//RS.Отладка(1);
	//		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Запрос = базаДанных.НовыйЗапрос();
	ТекстЗапроса = "
	|select 	              
    |   ДокВ.iddoc [id $Документ.ВСД_входящаяПартия]
    |from [Документ.ВСД_входящаяПартия] as ДокВ  
  	|where 
  	|	ДокВ.НомерЗаписи= :НомерЗаписи
  	|";	
	Запрос.Подставлять("НомерЗаписи", НомерЗаписи);
	//тз.Отладка();
	ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
  	
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
	Иначе
		док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
	конецЕсли;
  	
	Возврат  Док;
КонецФункции

Функция НайтиВхПартиюПоGUID(GUID)
	Док = СоздатьОбъект("Документ.ВСД_входящаяПартия");	
	
//	RS = СоздатьОбъект("ODBCRecordset");
//	RS.УстБД1С();     	
//
//	ТекстЗапроса = "
//	|select 	              
//    |   ДокВ.iddoc [id $Документ.ВСД_входящаяПартия]
//    |from $Документ.ВСД_входящаяПартия as ДокВ  
//  	|where 
//  	|	$ДокВ.НомерЗаписи= :НомерЗаписи
//  	|";
//			RS.УстановитьТекстовыйПараметр("НомерЗаписи", НомерЗаписи);  
			//RS.Отладка(1);
	//		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Запрос = базаДанных.НовыйЗапрос();
	ТекстЗапроса = "
	|select 	              
    |   ДокВ.iddoc [id $Документ.ВСД_входящаяПартия]
    |from [Документ.ВСД_входящаяПартия] as ДокВ  
  	|where 
  	|	ДокВ.GUID= :GUID
  	|";	
	Запрос.Подставлять("GUID", GUID);
	//тз.Отладка();
	ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
  	
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
	Иначе
		док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
	конецЕсли;
  	
	Возврат  Док;
КонецФункции

//*********** работа с XML ********************************
Процедура ЗагрузитьXML_getStockEntryListResponse(имяФайла)
    
    //tt1=_GetPerformanceCounter();
    
	Если ПустоеЗначение(имяФайла)=1 Тогда
		
	    ИмяФайла="C:\C#\logs\1.xml";
		
		Каталог = "";
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "XML (*.xml)|*.xml", , ) = 1 Тогда
		    ИмяФайла = Каталог + ИмяФайла;
		КонецЕсли;
	КонецЕсли;	

	//имяф=КаталогИБ()+"tovar3.xml";
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
//    о=СоздатьОбъект("Справочник.Товары");
    stockEntryList = objDom.selectNodes("//vetd:stockEntry") ;
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
		
		t = stockEntry.text;	
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("vetd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		batch = stockEntry.selectSingleNode("vetd:batch");
		
		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;
		productItem = batch.selectSingleNode("vetd:productItem").selectSingleNode("prod:name").text;
		volume 		= batch.selectSingleNode("vetd:volume").text;
		unit		= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
		packingListUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("bs:uuid").text;
		packingListName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("argc:name").text;;
		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
		
		попытка
			dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:firstDate").text;
		Исключение
			dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").text;
		КонецПопытки;
		dateOfProduction = СтрЗаменить(dateOfProduction," ",".");
		попытка
			dateOfProduction2 	= batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:secondDate").text;;
			dateOfProduction2 = СтрЗаменить(dateOfProduction2," ",".");
			dateOfProduction = dateOfProduction +  " - "+ dateOfProduction2;
		Исключение			
		КонецПопытки;
		Попытка
			expiryDate 	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:firstDate").text;
		Исключение
			expiryDate 	= batch.selectSingleNode("vetd:expiryDate").text;
		КонецПопытки;
		expiryDate = СтрЗаменить(expiryDate," ",".");
		Попытка
			expiryDate2	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:secondDate").text;
			expiryDate2 = СтрЗаменить(expiryDate2," ",".");
			expiryDate  = expiryDate +" - "+ expiryDate2; 
		Исключение			
		КонецПопытки;
		
		
		producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		
		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект

		//Сообщить(""+entryNumber+" "+volume);		
	
		//ДокВхПартия = НайтиВхПартиюПоНомеру(entryNumber);
		ДокВхПартия = НайтиВхПартиюПоGUID(guid);
		
		Сообщить(""+ДокВхПартия.ТекущийДокумент()+" от "+createDate+" # "+entryNumber);
		
		ДокВхПартия.ДатаДок = createDate;
		Производитель = НайтиПлощадку(producer);
		
		Если ПустоеЗначение(Производитель)=1 Тогда
			Сообщить("Партия пропущена "+entryNumber,"!");
			Возврат;
		КонецЕсли;
		ПроизводительХС = "";
		Попытка
			ПроизводительХС =  Производитель.Владелец;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		//ДокВхПартия.Отправитель_ХозСубъект = ;
		//ДокВхПартия.Отправитель_Площадка = ;
		ДокВхПартия.Получатель_ХозСубъект = НашХозСубъект;
		ДокВхПартия.Получатель_Площадка = НашаПлощадка;
		ДокВхПартия.Производитель_Площадка = Производитель;
		ДокВхПартия.Производитель_ХозСубъект = ПроизводительХС;
		//ДокВхПартия.Перевозчик_ХозСубъект = ;
		//ДокВхПартия.applicationID = ;
		ДокВхПартия.Продукция = НайтиПродукцию(product, productItem);
		ДокВхПартия.ВидПродукции = НайтиВидПродукции(subProduct, productItem);
		ДокВхПартия.Количество = Число(volume);
		ДокВхПартия.КоличествоКор = Число(packingAmount);
		ДокВхПартия.ДатаИзготовления = dateOfProduction;
		ДокВхПартия.ДатаСрокГодности = expiryDate;
		ДокВхПартия.Статус = st;		
		//ДокВхПартия.ТермическоеСостояние = ;
		//ДокВхПартия.ОсобыеОтметки = ;
		ДокВхПартия.GUID = guid;
		ДокВхПартия.UUID = uuid;
		ДокВхПартия.ДатаИзменения = updateDate;
		ДокВхПартия.НомерЗаписи = entryNumber;
		ДокВхПартия.НаименованиеПродукции = productItem;
		ДокВхПартия.Фирма = глПользователь.ОсновнаяФирма;
		//ДокВхПартия.ЮрЛицо = ;
		//ДокВхПартия.Проект = ;
		ДокВхПартия.Автор = глПользователь;
		//ДокВхПартия.Филиал = глПользователь.Филиал;
		//ДокВхПартия.Комментарий = ;
		
		ДокВхПартия.ВсдДата = ДокВхПартия.ДатаДок;
		ДокВхПартия.ВсдЭкспертиза = ВСД_Экспертиза;
		ДокВхПартия.ВсдМестность = ВСД_Местность;
		
		ДокВхПартия.Записать();
		
    КонецЦикла;

    
    //tt2=_GetPerformanceCounter();
    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");
    
    

КонецПроцедуры

//*********** работа с XML ********************************
Процедура ЗагрузитьПартииXML(имяФайла, докПартия="" )
    
    //tt1=_GetPerformanceCounter();
    
	Если ПустоеЗначение(имяФайла)=1 Тогда
		
	    ИмяФайла="C:\C#\logs\1.xml";
		
		Каталог = "";
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "XML (*.xml)|*.xml", , ) = 1 Тогда
		    ИмяФайла = Каталог + ИмяФайла;
		КонецЕсли;
	КонецЕсли;	

	//имяф=КаталогИБ()+"tovar3.xml";
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
//    о=СоздатьОбъект("Справочник.Товары");
    stockEntryList = objDom.selectNodes("//merc:stockEntry") ;
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
		
		t = stockEntry.text;	
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("vetd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		batch = stockEntry.selectSingleNode("vetd:batch");
		
		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;
		productItem = batch.selectSingleNode("vetd:productItem").text;
		volume 		= batch.selectSingleNode("vetd:volume").text;
		unit		= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
//		packingListUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("com:packingForm").selectSingleNode("bs:uuid").text;
		//packingListName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("argc:name").text;;
		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
		
		//попытка
		//	dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:firstDate").text;
		//Исключение
		//	dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").text;
		//КонецПопытки;
		//dateOfProduction = СтрЗаменить(dateOfProduction," ",".");
		//попытка
		//	dateOfProduction2 	= batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:secondDate").text;;
		//	dateOfProduction2 = СтрЗаменить(dateOfProduction2," ",".");
		//	dateOfProduction = dateOfProduction +  " - "+ dateOfProduction2;
		//Исключение			
		//КонецПопытки;
		//Попытка
		//	expiryDate 	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:firstDate").text;
		//Исключение
		//	expiryDate 	= batch.selectSingleNode("vetd:expiryDate").text;
		//КонецПопытки;
		//expiryDate = СтрЗаменить(expiryDate," ",".");
		//Попытка
		//	expiryDate2	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:secondDate").text;
		//	expiryDate2 = СтрЗаменить(expiryDate2," ",".");
		//	expiryDate  = expiryDate +" - "+ expiryDate2; 
		//Исключение			
		//КонецПопытки;
		
		
		//producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		
		//owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект

		//Сообщить(""+entryNumber+" "+volume);		
	
		//ДокВхПартия = СоздатьОбъект("Документ.ВСД_входящаяПартия");	
		Если ПустоеЗначение(докПартия)=1 Тогда 
			ДокВхПартия = НайтиВхПартиюПоGUID( guid );
		Иначе			
			ДокВхПартия = СоздатьОбъект("Документ.ВСД_входящаяПартия");
			ДокВхПартия.НайтиДокумент(докПартия);
		КонецЕсли;
		
		Сообщить(""+ДокВхПартия.ТекущийДокумент()+" от "+createDate+" # "+entryNumber);
		
		//ДокВхПартия.ДатаДок =
		//ДокВхПартия.Новый();
		//ДокВхПартия.НомерДок = ;
		ДокВхПартия.ДатаДок = createDate;
		//Производитель = НайтиПлощадку(producer);
		//
		//Если ПустоеЗначение(Производитель)=1 Тогда
		//	Сообщить("Партия пропущена "+entryNumber,"!");
		//	Продолжить;
		//КонецЕсли;		
		
		//ДокВхПартия.Отправитель_ХозСубъект = ;
		//ДокВхПартия.Отправитель_Площадка = ;
		//ДокВхПартия.Получатель_ХозСубъект = НашХозСубъект;
		//ДокВхПартия.Получатель_Площадка = НашаПлощадка;
		//ДокВхПартия.Производитель_Площадка = Производитель;
		//ДокВхПартия.Производитель_ХозСубъект = Производитель.Владелец;
		//ДокВхПартия.Перевозчик_ХозСубъект = ;
		//ДокВхПартия.applicationID = ;
		ДокВхПартия.Продукция = НайтиПродукцию(product, productItem);
		ДокВхПартия.ВидПродукции = НайтиВидПродукции(subProduct, productItem);
		ДокВхПартия.Количество = Число(volume);
		ДокВхПартия.КоличествоКор = Число(packingAmount);
		//ДокВхПартия.ДатаИзготовления = dateOfProduction;
		//ДокВхПартия.ДатаСрокГодности = expiryDate;
		ДокВхПартия.Статус = st;		
		//ДокВхПартия.ТермическоеСостояние = ;
		//ДокВхПартия.ОсобыеОтметки = ;
		ДокВхПартия.GUID = guid;
		ДокВхПартия.UUID = uuid;
		ДокВхПартия.ДатаИзменения = updateDate;
		ДокВхПартия.НомерЗаписи = entryNumber;
		ДокВхПартия.НаименованиеПродукции = productItem;
		//ДокВхПартия.Фирма = глПользователь.ОсновнаяФирма;
		//ДокВхПартия.ЮрЛицо = ;
		//ДокВхПартия.Проект = ;
		//ДокВхПартия.Автор = глПользователь;
		//ДокВхПартия.Филиал = глПользователь.Филиал;
		//ДокВхПартия.Комментарий = ;
		
		ДокВхПартия.ВсдДата = ДокВхПартия.ДатаДок;
		ДокВхПартия.ВсдЭкспертиза = ВСД_Экспертиза;
		ДокВхПартия.ВсдМестность = ВСД_Местность;
		
		ДокВхПартия.Записать();
		
    КонецЦикла;

    
    //tt2=_GetPerformanceCounter();
    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");
    
КонецПроцедуры
//*******************************************

НачДата = ТекущаяДата();
КонДата = НачДата;
попытка
	Филиал = глПользователь.Филиал;
Исключение
	Филиал="";
КонецПопытки;
// тестовая версия
//ЗагрузитьВнешнююКомпоненту(КаталогИБ()+"ExtForms\Soap\SoapDLL.dll");
//Компонента = СоздатьОбъект("SoapDLL.MyClass");  

ПутьМодульПараметры = "ExtForms\Меркурий_МодульПараметры.txt";