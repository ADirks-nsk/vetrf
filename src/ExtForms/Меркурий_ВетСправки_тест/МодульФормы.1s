Перем Компонента;

Перем ВыпМодуль;
Перем ПутьМодульПараметры;
Перем КаталогОбработки, ИмяФайлаНастроек;

Перем Отправитель_ХозСубъект, Отправитель_Площадка;
Перем Филиал;

Перем ЭтоSQL; 
Перем базаДанных;
Перем СпЕдИзмерения; // http://help.vetrf.ru/wiki/PackingForm
	
Процедура ЗагрузитьXML_ВсеПартииОтвет( имяФайла, докПартия="" ) Далее
//Процедура ЗагрузитьXML_Партия( имяФайла, докПартия="" ) Далее
	
//******************************************************************************
 // предопределенная процедура
 //
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;        
	
КонецПроцедуры 

Процедура Пауза(ЗадержкаСекунд)
	scr = СоздатьОбъект("WScript.Shell");
	scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ЗадержкаСекунд) ),0,1); 
КонецПроцедуры


Функция НайтиЕдИзмерения(guid, Название)	
	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Форма упаковки - пустой Guid ");
	КонецЕсли;
		
	Возврат Рез;
	
КонецФункции


//Процедура ЗаполнитьПараметрыErt()
//	ГлобМодуль=СоздатьОбъект("Текст");
//	
//	Если ФС.СуществуетФайл( КаталогИБ()+ПутьМодульПараметры  )=0 Тогда 
//		Сообщить("Параметры не загружены. Проверьте файл "+КаталогИБ()+ПутьМодульПараметры ,"!");
//		Возврат;
//	КонецЕсли;
//	
//	ГлобМодуль.Открыть(КаталогИБ()+ПутьМодульПараметры );
//    Н=1; ТекстМодуля="";
//	Для Н=1 по ГлобМодуль.КоличествоСтрок() Цикл
//		Стр=ГлобМодуль.ПолучитьСтроку(Н); 
//		ТекстМодуля=ТекстМодуля+Стр+РазделительСтрок;
//	КонецЦикла;
//	
//	ВыпМодуль = СоздатьОбъект("ВыполняемыйМодуль");
//	ВыпМодуль.УстановитьМодуль(ТекстМодуля);
//	ВыпМодуль.НазначитьКонтекст(Контекст);
//	ВыпМодуль.КомпилироватьМодуль();
//	ВыпМодуль.ВыполнитьМодуль();
//	
//	ВыпМодуль.ЗаполнитьПараметры();
//
//	param_username = ВыпМодуль.param_username;  // для базовой авторизации
//	param_password = ВыпМодуль.param_password;
//	param_issuer_id = ВыпМодуль.param_issuer_id; // идентификатор хозяйствующего субъекта в реестре РСХН.
//	param_service_id = ВыпМодуль.param_service_id ;
//	param_api_key = ВыпМодуль.param_api_key ;
//
//	param_intiator_login = ВыпМодуль.param_intiator_login; // ! логин ветврача или др. пользователя в Меркурии
//	param_vetdoctor_login = ВыпМодуль.param_vetdoctor_login;
//	
//	СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
//	СпрХС.НайтиПоРеквизиту("GUID",param_issuer_id,1);
//	Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
//	
//	GUID_ОтправительПлощадка = ВыпМодуль.GUID_НашаПлощадка;
//	СпрПлощадка = СоздатьОбъект("Справочник.ВСД_Площадка");
//	Если СпрПлощадка.НайтиПоРеквизиту("Guid",GUID_ОтправительПлощадка,1)=1 Тогда
//		Отправитель_Площадка = СпрПлощадка.ТекущийЭлемент();
//	Иначе
//		Сообщить("Отправитель_Площадка не определена проверьте [GUID_ОтправительПлощадка]");
//	КонецЕсли;
//		
//	GUID_Страна	= ВыпМодуль.GUID_Страна; //страна
//	GUID_Регион = ВыпМодуль.GUID_Регион; //регион = обл		
//	GUID_Город  = ВыпМодуль.GUID_Город; // city 
//		
//	GUID_Упаковка = ВыпМодуль.GUID_Упаковка; //гофроящик
//	
//	ВСД_Экспертиза = "Произ.лабор ";
//	ВСД_Местность = "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
//	
//	КаталогЛогов = КаталогИБ()+"logs\";
//	Если ФС.СуществуетФайл(КаталогЛогов)=0 Тогда 
//		ФС.СоздатьКаталог(КаталогЛогов);
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура СохранитьПараметры()
	
	СписокКонстант=СоздатьОбъект("СписокЗначений");
	СписокКонстант.ДобавитьЗначение(param_username, "param_username");
	СписокКонстант.ДобавитьЗначение(param_password ,"param_password");
	СписокКонстант.ДобавитьЗначение(param_issuer_id, "param_issuer_id");
	СписокКонстант.ДобавитьЗначение(param_service_id, "param_service_id");
	СписокКонстант.ДобавитьЗначение(param_api_key, "param_api_key");
	СписокКонстант.ДобавитьЗначение(param_intiator_login, "param_intiator_login");
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_login, "param_vetdoctor_login");
	СписокКонстант.ДобавитьЗначение(GUID_ОтправительПлощадка, "GUID_ОтправительПлощадка");
	
	СписокКонстант.ДобавитьЗначение(GUID_Страна, "GUID_Страна");
	СписокКонстант.ДобавитьЗначение(GUID_Регион, "GUID_Регион");
	СписокКонстант.ДобавитьЗначение(GUID_Город, "GUID_Город");
	СписокКонстант.ДобавитьЗначение(Упаковка, "ВСД_Упаковка");
	СписокКонстант.ДобавитьЗначение(ВСД_Экспертиза, "ВСД_Экспертиза");
	СписокКонстант.ДобавитьЗначение(ВСД_Местность, "ВСД_Местность");
	
	СписокКонстант.ДобавитьЗначение(ТермическиеУсловияПеревозки, "ТермическиеУсловияПеревозки");
	
	СписокКонстант.ДобавитьЗначение(ПаузаСек, "ПаузаСек");	
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаГрузополучатель, "НазваниеРеквизитаГрузополучатель");	
			
	ЗначениеВФайл(ИмяФайлаНастроек,СписокКонстант);
	Предупреждение("Настройки сохранены!",3);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСписок()
	Если фс.СуществуетФайл(ИмяФайлаНастроек)=0 Тогда
		Сообщить("Файл с константами ["+ИмяФайлаНастроек+"] не найден","!");
		Возврат;
	Иначе
		СписокКонстант=СоздатьОбъект("СписокЗначений");
		ЗначениеИзФайла(ИмяФайлаНастроек,СписокКонстант);
	КонецЕсли;

	param_username = СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
	param_password = СписокКонстант.Получить("param_password");
	param_issuer_id = СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id = СписокКонстант.Получить("param_service_id") ;
	param_api_key = СписокКонстант.Получить("param_api_key") ;

	param_intiator_login = СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
	
	СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	СпрХС.НайтиПоРеквизиту("GUID",param_issuer_id,1);
	Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
	
	GUID_ОтправительПлощадка = СписокКонстант.Получить("GUID_ОтправительПлощадка");
	СпрПлощадка = СоздатьОбъект("Справочник.ВСД_Площадка");
	Если СпрПлощадка.НайтиПоРеквизиту("Guid",GUID_ОтправительПлощадка,1)=1 Тогда
		Отправитель_Площадка = СпрПлощадка.ТекущийЭлемент();
	Иначе
		Сообщить("Отправитель_Площадка не определена проверьте [GUID_ОтправительПлощадка]");
	КонецЕсли;
		
	GUID_Страна	= СписокКонстант.Получить("GUID_Страна"); //страна
	GUID_Регион = СписокКонстант.Получить("GUID_Регион"); //регион = обл		
	GUID_Город  = СписокКонстант.Получить("GUID_Город"); // city 
		
	Упаковка = СписокКонстант.Получить("ВСД_Упаковка"); //гофроящик
	
	ВСД_Экспертиза 	= СписокКонстант.Получить("ВСД_Экспертиза");	
	Если ПустоеЗначение(ВСД_Экспертиза)=1 Тогда		
		ВСД_Экспертиза 	= "Произ.лабор Приосколье";
	КонецЕсли;
	
	ВСД_Местность 	= СписокКонстант.Получить("ВСД_Местность");
	Если ПустоеЗначение(ВСД_Местность)=1  Тогда 
		ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	КонецЕсли;
	
	ТермическиеУсловияПеревозки 	= СписокКонстант.Получить("ТермическиеУсловияПеревозки");
	
	КаталогЛогов = КаталогИБ()+"logs\";
	Если ФС.СуществуетФайл(КаталогЛогов)=0 Тогда 
		ФС.СоздатьКаталог(КаталогЛогов);
	КонецЕсли;
	
	ПаузаСек = СписокКонстант.Получить("ПаузаСек");
	Если ПустоеЗначение(ПаузаСек)=1 Тогда
		ПаузаСек=10;
	КонецЕсли;
	
	НазваниеРеквизитаГрузополучатель  = СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
	Если ПустоеЗначение(НазваниеРеквизитаГрузополучатель)=1 Тогда
		НазваниеРеквизитаГрузополучатель="Контрагент";
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьТЗ(Запрос)
	тз = СоздатьОбъект("ТаблицаЗначений");
	Таб = "|";
	
	КолСтр=СтрКоличествоСтрок(СокрЛП(Запрос));
	если КолСтр=0 Тогда
		Возврат тз;
	КонецЕсли;
	ТекСтр=СтрПолучитьСтроку(Запрос,1);
	КолПарам = СтрЧислоВхождений(ТекСтр,Таб);
	
	Если КолПарам=0 Тогда 
		//Сообщить("Пустая таблица значений");
		Возврат тз;
	КонецЕсли;
	
	Для А=1 По КолПарам Цикл
		тз.НоваяКолонка();
	КонецЦикла;
	
	Для А=1 По КолСтр Цикл
		тз.НоваяСтрока();
		ТекСтр=СтрПолучитьСтроку(Запрос,А);
		
		НомПарам = 1;
		Пока НомПарам<=КолПарам Цикл
			Парам="";
			ПозРазд=Найти(ТекСтр,Таб);
			Если ПозРазд<>0 Тогда
				Парам=Лев(ТекСтр,ПозРазд-1);
				ТекСтр=Сред(ТекСтр,ПозРазд+1);
			Иначе
				Парам=ТекСтр;
				ТекСтр="";
			КонецЕсли;
			тз.УстановитьЗначение(А, НомПарам, Парам);
			
			НомПарам=НомПарам+1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тз;
КонецФункции

Процедура Отладка();
	Сообщить("ApplicationId = "+Компонента.ApplicationId);
	Сообщить("Status = "+Компонента.Status);
	Сообщить("ErrorMessage = "+Компонента.ErrorMessage);
	Сообщить("ResultString = 
	|"+Компонента.ResultString);

	appID = Компонента.ApplicationId; 	
КонецПроцедуры

Функция ПроверкаВходВСД(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
	//	Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(док.ВсдНомер)=1 Тогда 
		Сообщить("Не указан ВсдНомер ","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.ВсдДата)=1 Тогда 
		Сообщить("Не указан ВсдДата ","!");
		результат = 0;
	КонецЕсли;
		
	Возврат результат;
КонецФункции

Процедура Отправить_ВходВСД(док) Экспорт
	
	Если ПроверкаВходВСД(док)=0 Тогда 
		Возврат;
	КонецЕсли;
	
//                    TransportationStorageType.FROZEN == 0 
//                    TransportationStorageType.CHILLED == 1 
//                    TransportationStorageType.COOLED == 2
//                    TransportationStorageType.VENTILATED ==3
	
	Сообщить("Отправляем запрос ВСД_Входящий ["+док+"]" ,"i");
	
	Результат = Компонента.Send_VSD_IN( Док );
	
	//Результат = Компонента.Send_VSD_IN(
	//	СокрЛП(док.Отправитель_ХозСубъект.GUID),  	//	отправитель_хозСубъект_guid,
	//	СокрЛП(док.Отправитель_Площадка.GUID),		//	отправитель_площадка_guid,
	//	СокрЛП(док.Получатель_ХозСубъект.GUID),		//	получатель_хозСубъект_guid,
	//	СокрЛП(док.Получатель_Площадка.GUID),		//	получатель_площадка_guid,
	//	СокрЛП(док.Производитель_Площадка.GUID),	//	производитель_площадка_guid,
	//	СокрЛП(док.Перевозчик_ХозСубъект.GUID),		//	перевозчик_хозСубъект_guid,
	//	СокрЛП(док.Продукция.GUID),					//	продукция_guid,
	//	СокрЛП(док.ВидПродукции.GUID),				//	видПродукции_guid,
	//	СокрЛП(док.Продукция.Наименование),			//	названиеПродукции,
	//	СокрЛП(док.ДатаИзготовления),				//  датаИзготовления,
	//	СокрЛП(док.ДатаСрокГодности),				//	датаСрокГодности,
	//	(док.Количество),						//	количествоКг,
	//	(док.КоличествоКор),					//	количествоКор,
	//	СокрЛП(док.ТтнСерия),						//	ТтнСерия,
	//	СокрЛП(док.ТтнНомер),						//	ТтнНомер,
	//	док.ТтнДата, //ТекущаяДата(),
	//	СокрЛП(док.номерАвто), 		//	номерАвто,
	//	СокрЛП(док.ВсдСерия), 		//	ВсдСерия,
	//	СокрЛП(док.ВсдНомер), 		//	ВсдНомер,
	//	док.ВсдДата,		//	ВсдДата, ТекущаяДата(), //
	//	СокрЛП(док.ВсдЭкспертиза), 	//	ВсдЭкспертиза,
	//	СокрЛП(док.ВсдМестность	),
	//	СокрЛП(док.ОсобыеОтметки ),
	//	(док.ТермическоеСостояние-1), // = TransportationStorageType
	//	Док.ФормаУпаковки.guid		//GUID_Упаковка
	//);
			
	//Отладка();
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент( док );				
		ДокОб.applicationId = Компонента.ApplicationId;
		ДокОб.Статус = СокрЛП(Компонента.Status);
		ДокОб.RequestResult = Компонента.ErrorMessage;		
		ДокОб.Записать();
		Сообщить(" статус = "+ДокОб.Статус );
		Сообщить(ДокОб.RequestResult);
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

Функция ПроверкаИсхВСД(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.applicationID)=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		Сообщить("не указано Количество "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если док.КоличествоКор =0 Тогда 
		Сообщить("не указано Количество коробов"+док,"!");
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура Отправить_ИсхВСД(док) 
	
	Если ПроверкаИсхВСД(док)=0 Тогда 
		Возврат;
	КонецЕсли;	
	
	// Форма ВСД
    //VetDocumentForm {
//Список возможных значений.
//Значение	Описание
//CERTCU1	0 Форма 1 ветеринарного сертификата ТС.
//LIC1		1 Форма 1 ветеринарного свидетельства. Оформляется на живых животных, биологические объекты (генетически материал).
//CERTCU2	2 Форма 2 ветеринарного сертификата ТС.
//LIC2		3 Форма 2 ветеринарного свидетельства. Оформляется на сырьё животного происхождения.
//CERTCU3	4 Форма 3 ветеринарного сертификата ТС.
//LIC3		5 Форма 3 ветеринарного свидетельства. Оформляется на техническое сырьё; корма; биологические отходы (шкуры, шерсть, пушнина, кость, кровь,отходы молочного производства, субпродукты непищевые; рогокопытное сырье невыделанное; щетина, очесы, линька; мездра и обрезки кожсырья; альбумин, казеин и желатин технические; желчь; сырье для биологической промышленности).
//NOTE4		6 Форма 4 ветеринарной справки. При перевозке кожевенно-мехового сырья ветеринарная справка формы N 4 оформляется без учета наличия клейма, но при условии обязательного биркования шкур. Также оформляется при перевозке любого вида продукции внутри одного района.
//CERT5I	7 Форма 5i ветеринарного сертификата.
//CERT61	8 Форма 6.1 ветеринарного сертификата.
//CERT62	9 Форма 6.2 ветеринарного сертификата.
//CERT63	10 Форма 6.3 ветеринарного сертификата.
//PRODUCTIVE	Производственный сертификат
	Если док.ФормаВСД=1 Тогда 
		//Форма 2
		ФормаВСД = 3; 
	Иначе
		//Форма 4
		ФормаВСД = 6;
	КонецЕсли;
	
// 	TransportationStorageType.FROZEN == 0 
//  TransportationStorageType.CHILLED == 1 
//  TransportationStorageType.COOLED == 2
//  TransportationStorageType.VENTILATED ==3
	
	Сообщить("Отправляем запрос ВСД_Исходящий ["+док+"]" ,"i");
	Результат = Компонента.Send_VSD_OUT( док );
	
	//Результат = Компонента.send_VSD_OUT( 
	//	СокрЛП(док.Отправитель_ХозСубъект.GUID),  	//	отправитель_хозСубъект_guid,
	//	СокрЛП(док.Отправитель_Площадка.GUID),		//	отправитель_площадка_guid,
	//	СокрЛП(док.Получатель_ХозСубъект.GUID),		//	получатель_хозСубъект_guid,
	//	СокрЛП(док.Получатель_Площадка.GUID),		//	получатель_площадка_guid,
	//	СокрЛП(док.Партия.Производитель_Площадка.GUID), 	//СокрЛП(док.Производитель_Площадка.GUID),	//	производитель_площадка_guid,
	//	СокрЛП(док.Перевозчик_ХозСубъект.GUID),		//	перевозчик_хозСубъект_guid,		
	//	СокрЛП(док.Партия.Продукция.GUID), 		//СокрЛП(док.Продукция.GUID),					//	продукция_guid,
	//	СокрЛП(док.Партия.ВидПродукции.GUID), 	//СокрЛП(док.ВидПродукции.GUID),				//	видПродукции_guid,
	//	СокрЛП(док.Партия.Продукция.Наименование), //СокрЛП(док.Продукция.Наименование),			//	названиеПродукции,
	//	СокрЛП(док.Партия.ДатаИзготовления),	//СокрЛП(док.ДатаИзготовления),				//  датаИзготовления,
	//	СокрЛП(док.Партия.ДатаСрокГодности),	//СокрЛП(док.ДатаСрокГодности),				//	датаСрокГодности,		
	//	СокрЛП(док.Количество),						//	количествоКг,
	//	СокрЛП(док.КоличествоКор),					//	количествоКор,
	//	СокрЛП(док.ТтнСерия),						//	ТтнСерия,
	//	СокрЛП(док.ТтнНомер),						//	ТтнНомер,
	//	док.ТтнДата, 
	//	СокрЛП(док.номерАвто), 		//	номерАвто,		
	//	СокрЛП(док.Партия.ВсдСерия), //СокрЛП(док.ВсдСерия), 		//	ВсдСерия,
	//	СокрЛП(док.Партия.ВсдНомер), //СокрЛП(док.ВсдНомер), 		//	ВсдНомер,
	//	док.Партия.ВсдДата,		//	ВсдДата, ТекущаяДата(), //
	//	СокрЛП(док.Партия.ВсдЭкспертиза), //СокрЛП(док.ВсдЭкспертиза), 	//	ВсдЭкспертиза,
	//	СокрЛП(док.Партия.ВсдМестность), //СокрЛП(док.ВсдМестность	),
	//	СокрЛП(док.Партия.ОсобыеОтметки ),
	//	СокрЛП(док.Партия.GUID	),		
	//	(ТермическиеУсловияПеревозки-1), // TransportationStorageType
	//	док.Партия.ФормаУпаковки.Guid, //GUID_Упаковка, // упаковка = гофроящик - должно быть тоже самое что и во входящем ВСД
	//	//"fedf5ad4-053c-11e1-99b4-d8d385fbc9e8" //упаковка = коробки 
	//	ФормаВСД
	//);

	//Отладка();
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);

		ДокОб.applicationID = Компонента.ApplicationId;
		ДокОб.Статус = СокрЛП(Компонента.Status);
		ДокОб.RequestResult = Компонента.ErrorMessage;		
		ДокОб.Записать();
		Сообщить(" статус = "+ДокОб.Статус );
		Сообщить(ДокОб.RequestResult);
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

Функция ЗагрузитьМассив(Массив)
	тз = СоздатьОбъект("ТаблицаЗначений");
	
	Для Инд = Массив.GetLBound(1) По Массив.GetUBound(1) Цикл
		тз.НоваяСтрока();
		
		Зн="";
		Для Инд2 = Массив.GetLBound(2) По Массив.GetUBound(2) Цикл
			тз.НоваяКолонка();
			тз.УстановитьЗначение(инд+1,Инд2+1, Массив.GetValue(Инд,Инд2));
			
			зн = зн + Массив.GetValue(Инд,Инд2)+" ";
			
			//Массив.SetValue(Инд, Значение+1);
			//Сообщить("Тип "+Массив.GetType());			
		КонецЦикла;
		Сообщить(зн);	
	КонецЦикла;

	тз.ВыбратьСтроку();
КонецФункции

//******************************** Партии ******************************************************************

Процедура ЗаписатьПартии(тзПартии, докВходВСД="")
	
	Если ЭтоSQL=1 Тогда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "
		|select
		|	Док.idDOc [ID $Документ.ВСД_входящаяПартия]
		|from $Документ.ВСД_входящаяПартия as Док 
		|where 
		|	$Док.GUID = :GUID or 
		|	Док.IDDoc = :ВыбДок";
	
	Иначе
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
		|	Док.idDOc [ID $Документ.ВСД_входящаяПартия]
		|from [Документ.ВСД_входящаяПартия] as Док 
		|where 
		|	Док.GUID = :GUID 
		//|	or Док.IDDoc = :ВыбДок
		|";	
	КонецЕсли;
	
	ДокПартии = СоздатьОбъект("Документ.ВСД_входящаяПартия");
	
	тзПартии.ВыбратьСтроки();
	Пока тзПартии.ПолучитьСтроку() = 1 Цикл

		Если ЭтоSQL=1 Тогда
			
			RS.УстановитьТекстовыйПараметр("GUID", тзПартии._2);  
			RS.УстановитьТекстовыйПараметр("ВыбДок", докВходВСД);  
			//RS.Отладка(1);
			ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
		Иначе
			Запрос.Подставлять("GUID", тзПартии._2);
			//Запрос.Подставлять("ВыбДок", докВходВСД);
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		КонецЕсли;
		
		//ТЗ.ВыбратьСтроку();
		Если тз.КоличествоСтрок()>0 Тогда 
			//изменяем существующую партию
			тз.ВыбратьСтроки();
			Пока тз.ПолучитьСтроку() = 1 Цикл
				ДокПартии.НайтиДокумент(тз.id);
				Если ДокПартии.Проведен()=1 Тогда
					ДокПартии.СделатьНеПроведенным();
				КонецЕсли;

				Если ВРЕГ(тзПартии._10) <>  "TRUE" Тогда 
					//пропускаем неактивные партии
					ДокПартии.Удалить();
					Продолжить;
				Иначе
				
					ДокПартии.НомерЗаписи 	= тзПартии._1;
					ДокПартии.GUID 			= тзПартии._2;
					ДокПартии.UUID 			= тзПартии._3;			
					ДокПартии.ДатаДок 		= тзПартии._6;
					ДокПартии.ДатаИзменения = тзПартии._7;
					ДокПартии.Количество 	= Число(тзПартии._5);
					ДокПартии.Статус 		= тзПартии._8;
					
					ДокПартии.Записать();
					
					Сообщить("Изменена партия "+ДокПартии.ТекущийДокумент());				
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если ВРЕГ(тзПартии._10) <>  "TRUE" Тогда 
				//пропускаем неактивные партии
				Продолжить;
			Иначе
				Если докВходВСД<>"" Тогда 
					ДокПартии = докВходВСД;
					ДокПартии.СделатьНеПроведенным();
					ДокПартии.СнятьПометкуУдаления();
				Иначе
					//создаем новую партию
					ДокПартии.Новый();
				КонецЕсли;
				ДокПартии.АвтоВремяТекущее();
				
				ДокПартии.НомерЗаписи 			= тзПартии._1;
				ДокПартии.GUID 					= тзПартии._2;
				ДокПартии.UUID 					= тзПартии._3;			
				ДокПартии.НаименованиеПродукции = тзПартии._4;
				ДокПартии.Количество 			= Число(тзПартии._5);
				ДокПартии.ДатаДок 				= тзПартии._6;			
				ДокПартии.ДатаИзменения 		= тзПартии._7;
				ДокПартии.Статус 				= тзПартии._8;
	
				ДокПартии.Записать();
				
				Сообщить("Записана партия "+ДокПартии.ТекущийДокумент());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция  ПолучитьПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	Результат = Компонента.GetStockList(СокрЛП(Отправитель_Площадка.GUID), Смещение);

	Отладка();
			
	Возврат Результат;
	
КонецФункции

//Процедура ПолучитьПартииОтвет()
//
//	Результат = Компонента.GetStockListResult(СокрЛП(appID));
//
//	Отладка();
//	
//	Если Результат="COMPLETED" Тогда
//						
//		тз = ЗагрузитьТЗ(Компонента.ResultString);
//		//тз.ВыбратьСтроку();
//		ЗаписатьПартии(тз);
//				
//	КонецЕсли;		
//		
//	
//КонецПроцедуры

Функция  ПолучитьПартииОтветXML()

	Результат = Компонента.GetStockListResult(СокрЛП(appID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		//тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		ЗагрузитьXML_ВсеПартииОтвет( Компонента.LogFilename );
				
	КонецЕсли;		
		
	Возврат Результат;
КонецФункции

Процедура ПолучитьВсеПартии()
	
	tt1=_GetPerformanceCounter();
			
	ПолучитьПартии();
	
	Пауза( ПаузаСек );			
			
	tt2=_GetPerformanceCounter();			
	Сообщить("Пауза = "+(tt2 - tt1));
			
	Результат = ПолучитьПартииОтветXML();
	Для А=1 По 10 Цикл
		Если ((Результат<>"COMPLETED") И (Результат<>"REJECTED")) Тогда 
			Пауза( ПаузаСек );
			Сообщить("Пауза = "+(tt2 - tt1));
			Результат = ПолучитьПартииОтветXML();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПоследнююВерсиюПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("У Площадки пустой GUID");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбПартия.GUID)=1 Тогда 
		Сообщить("В выбранной партии пустой GUID");
		Возврат;
	КонецЕсли;	

	Результат = Компонента.GetStockEntryVersionList(
		СокрЛП(ВыбПартия.GUID),
		СокрЛП(Отправитель_Площадка.GUID)
		);

	Отладка();
			
КонецПроцедуры

Процедура ПолучитьПоследнююВерсиюПартииОтвет()

	Результат = Компонента.GetStockEntryVersionListResult(СокрЛП(appID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		тз = ЗагрузитьТЗ(Компонента.ResultString);
		тз.ВыбратьСтроку();
		//ЗаписатьПартии(тз);
				
	КонецЕсли;		
		
	
КонецПроцедуры

//******************************** ******************************************************************

Процедура ПолучитьРезультат_ВходВСД( докСсылка ) Экспорт
	
	Сообщить("Отправляем запрос ВСД_Входящий_Результат ["+докСсылка+"]" );
	Результат = Компонента.Send_VSD_IN_Result( СокрЛП(докСсылка.applicationID));

	//Отладка();
	
	Попытка
		Ошибка = Компонента.ErrorMessage;
		//Сообщить(""+Результат+" "+Ошибка);
		
		Массив = Компонента.ResultString;
		//Сообщить(Массив);
		тз = ЗагрузитьТЗ(Массив);
		//тз.ВыбратьСтроку();
		
		Док = СоздатьОбъект("Документ");
		док.НайтиДокумент( докСсылка );		
		док.Статус = СокрЛП(Компонента.Status);
		Док.RequestResult = Компонента.ErrorMessage;		
		док.Записать();
		Сообщить(" статус = "+Док.Статус );
		Сообщить(Док.RequestResult);		
		
		Если Результат="COMPLETED" Тогда
			
			Док.Провести();		

			//ЗаписатьПартии(тз, док);
			//ЗагрузитьXML_Партия( Компонента.LogFilename , докСсылка);
			ЗагрузитьXML_ВсеПартииОтвет( Компонента.LogFilename , докСсылка);
		КонецЕсли;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

Функция ПолучитьРезультат_ИсхВСД( докСсылка ) Экспорт
	

	Сообщить("Отправляем запрос ВСД_Исходящий_Результат ["+докСсылка+"]" );
	Результат = Компонента.Send_VSD_OUT_Result( СокрЛП(докСсылка.applicationID) );

	//Отладка();
	
	Попытка
		Ошибка = Компонента.ErrorMessage;
		
		Массив = Компонента.ResultString;
		тз = ЗагрузитьТЗ(Массив);
		//тз.ВыбратьСтроку();

		Док = СоздатьОбъект("Документ");
		док.НайтиДокумент( докСсылка );		
		док.Статус = СокрЛП(Компонента.Status);
		Док.RequestResult = Компонента.ErrorMessage;		
		
		Сообщить("статус = "+Док.Статус );
		//Сообщить(Док.RequestResult);
		
		док.Записать();
		Если Результат="COMPLETED" Тогда
			//ЗаписатьПартии(тз);
			//ЗагрузитьXML_Партия( Компонента.LogFilename );
			ЗагрузитьXML_ВсеПартииОтвет( Компонента.LogFilename );
			
			док.UUID = Компонента.DocUUID;
			
			док.Записать();
			Док.Провести();
		КонецЕсли;

		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Результат;
КонецФункции

Процедура ОтправитьВсеИсходящиеВСД()
		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");
	
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Док.ВыбратьДокументы(НачДата, КонДата);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если ((Док.Проведен()=0) И (Док.ПометкаУдаления()=0)) Тогда 
			tt1=_GetPerformanceCounter();
			Сообщить(""+Док+" "+Док.Статус);
			
			Если СокрЛП(Док.Статус)="REJECTED" Тогда 
				Продолжить;
			КонецЕсли;
			
			Отправить_ИсхВСД(док.ТекущийДокумент());			
			Пауза( ПаузаСек );			
			
			tt2=_GetPerformanceCounter();			
			Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ИсхВСД(док.ТекущийДокумент());
			Для А=1 По 10 Цикл
				Если ((Результат<>"COMPLETED") И (Результат<>"REJECTED")) Тогда 
					Пауза( ПаузаСек );
					Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ИсхВСД(док);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецПроцедуры

Процедура ПолучитьОтветВсеИсходящиеВСД()
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Док.ВыбратьДокументы(НачДата, КонДата);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен()=0 Тогда 
			ПолучитьРезультат_ИсхВСД(док);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//****************** Площадки **********************************
Процедура ПолучитьПощадки(ХС)	

	
	Сообщить(" Запрос GetEnterpriseList [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetEnterpriseList( СокрЛП(ХС.GUID) );
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
			
		рез = Компонента.ResultString;
		//Сообщить(рез);
		
		тзПлощадки = ЗагрузитьТЗ(рез);
		//тзПлощадки.ВыбратьСтроку();
		тзПлощадки.ВыбратьСтроки();
		Пока тзПлощадки.ПолучитьСтроку() = 1 Цикл
			
			Если ЭтоSQL=1 Тогда		
				RS = СоздатьОбъект("ODBCRecordset");
				RS.УстБД1С();     
		
				ТекстЗапроса = "
				|select 	              
			    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
			    |   СпрПл.descr, 
			    |   $СпрПл.GUID, 
			    |   $СпрПл.Контрагент as Контрагент 
			    |from $Справочник.ВСД_Площадка as СпрПл  
			  	|where 
//			  	|	СпрПл.ParentExt = :ВыбХС and
			  	|	$СпрПл.GUID= :GUID
			  	|";
				
				RS.УстановитьТекстовыйПараметр("ВыбХС", ХС);  
				RS.УстановитьТекстовыйПараметр("GUID", тзПлощадки._3);  
				//RS.Отладка(1);
				тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
			Иначе
				Запрос = базаДанных.НовыйЗапрос();
				ТекстЗапроса = "
				|select 	              
			    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
			    |   СпрПл.descr, 
			    |   СпрПл.GUID, 
			    |   СпрПл.Контрагент as Контрагент 
			    |from [Справочник.ВСД_Площадка] as СпрПл  
			  	|where 
//			  	|	СпрПл.ParentExt = :ВыбХС and
			  	|	СпрПл.GUID= :GUID
			  	|";
				
				Запрос.Подставлять("ВыбХС", ХС);
				Запрос.Подставлять("GUID", тзПлощадки._3);
				ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			КонецЕсли;
			
			//ТЗ.ВыбратьСтроку();
			Если ПустоеЗначение(тз)=0 Тогда 	
				Сообщить(тз.ПолучитьЗначение(1,"id"));
				Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
				Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,"id"));
				Спр.Наименование = тзПлощадки._1;
				Спр.Адрес = тзПлощадки._2;
				Спр.GUIDХозСубъекта = ХС.GUID;
				спр.Записать();
				Сообщить("Найден Эл ["+Спр.ТекущийЭлемент()+Спр.Наименование+"] GUID = "+ тзПлощадки._3);
				//КонецЦикла;	
			Иначе
				//создаем новый элемент
				Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
				Спр.Новый();
				//Спр.Код = ;
				//Спр.Наименование = тзПлощадки._1+" "+тзПлощадки._2;
				Спр.Наименование = тзПлощадки._1;
				Спр.Адрес = тзПлощадки._2;
				//Спр.Контрагент = ;
				Спр.GUID = тзПлощадки._3;
				Спр.UUID = тзПлощадки._4;
				//Спр.Владелец = ХС;
				Спр.GUIDХозСубъекта = ХС.GUID;
				Спр.УстановитьНовыйКод("00");
				Спр.Записать();
				Сообщить("Создан Эл ["+тзПлощадки._1+ тзПлощадки._2 +"] GUID = "+ тзПлощадки._3);
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПощадкиПоНазванию( ХС, УточнитьНазвание=1)
	
	Стр = СокрЛП(ХС.Контрагент.ЮрФизЛицо.ПолнНаименование);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ЮрФизЛицо.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=1 Тогда 
			
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ]","i");		
	Результат = Компонента.GetRussianEnterpriseListByName( стр, GUID_Регион );
	//Отладка();
	
	Если Результат="SUCCESS" Тогда		
			  
		рез = Компонента.ResultString;
		//Сообщить(рез);
				
		тзПлощадки = ЗагрузитьТЗ(рез);
		//тзПлощадки.ВыбратьСтроку();
		тзПлощадки.ВыбратьСтроки();
		Пока тзПлощадки.ПолучитьСтроку() = 1 Цикл
			
			Если ЭтоSQL=1 Тогда 
				RS = СоздатьОбъект("ODBCRecordset");
				RS.УстБД1С();     			
				
				ТекстЗапроса = "
				|select 	              
			    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
			    |   СпрПл.descr, 
			    |   $СпрПл.GUID, 
			    |   $СпрПл.Контрагент as Контрагент 
			    |from $Справочник.ВСД_Площадка as СпрПл  
			  	|where 
			  	|	$СпрПл.GuidХозСубъекта = :GuidХС and
			  	|	$СпрПл.GUID= :GUID
			  	|";
				
				RS.УстановитьТекстовыйПараметр("GuidХС", СокрЛП(ХС.GUID));  
				RS.УстановитьТекстовыйПараметр("GUID", тзПлощадки._3);  
				//RS.Отладка(1);
				тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			Иначе
				Запрос = базаДанных.НовыйЗапрос();			  
				ТекстЗапроса = "
				|select 	              
			    |   СпрПл.id [id $Справочник.ВСД_Площадка], 
			    |   СпрПл.descr, 
			    |   СпрПл.GUID, 
			    |   СпрПл.Контрагент as Контрагент 
			    |from [Справочник.ВСД_Площадка] as СпрПл  
			  	|where 
			  	|	СпрПл.GuidХозСубъекта = :GuidХС and
			  	|	СпрПл.GUID= :GUID
			  	|";
				
				Запрос.Подставлять("GuidХС", СокрЛП(ХС.GUID));
				Запрос.Подставлять("GUID", тзПлощадки._3);
				ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			КонецЕсли;
			
			//ТЗ.ВыбратьСтроку();
			Если ПустоеЗначение(тз)=0 Тогда 
				Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
				//ссылка = тз.ПолучитьЗначение(1,"id");
				Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,"id"));
				//спр.GUID = тз.GUID;
				Спр.Наименование = тзПлощадки._1;
				Спр.Адрес = тзПлощадки._2;
				Спр.GuidХозСубъекта = ХС.GUID;
				спр.Записать();
				Сообщить("Найден Эл ["+Спр.ТекущийЭлемент()+Спр.Наименование+"] GUID = "+ тзПлощадки._3);
				//КонецЦикла;	
			Иначе
				Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
				//создаем новый элемент
				Спр.Новый();
				//Спр.Код = ;
				//Спр.Наименование = тзПлощадки._1+" "+тзПлощадки._2;
				Спр.Наименование = тзПлощадки._1;
				Спр.Адрес = тзПлощадки._2;
				//Спр.Контрагент = ;
				Спр.GUID = тзПлощадки._3;
				Спр.UUID = тзПлощадки._4;
				//Спр.Владелец = ХС;
				Спр.GuidХозСубъекта = ХС.GUID;
				Спр.УстановитьНовыйКод("00");
				Спр.Записать();
				Сообщить("Создан Эл ["+тзПлощадки._1+ тзПлощадки._2 +"] GUID = "+ тзПлощадки._3);
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПлощадку(Площадка)

	Адрес = Площадка.Контрагент.ЮрФизЛицо.ФактАдрес;
	
	//GUID = GetBusinessEntity(ИНН);
	Результат = Компонента.CreateEnterprise(
			СокрЛП(Площадка.Контрагент.Наименование),
			Адрес, 
	        GUID_Страна, //страна
            GUID_Регион, //регион Самара
            GUID_город, // city
			СокрЛП(Площадка.Владелец.GUID)
	);
	
	Отладка();	
		
		//Сообщить("Хоз субъект с ИНН ["+ИНН+"] не найден");
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateEnterpriseResult( СокрЛП(applicationID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
			
		рез = Компонента.ResultString;
		
		тз = ЗагрузитьТЗ(рез);
		//тз.ВыбратьСтроку();
		
		GUID = тз.ПолучитьЗначение(1,3);
		uuid = тз.ПолучитьЗначение(1,4);
		
		если ПустоеЗначение(GUID)=0 Тогда			
			Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
			Спр.НайтиЭлемент(ВыбПлощадка);
			спр.GUID = GUID;
			спр.uuid = uuid;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
		Иначе
			Сообщить("Пустой GUID ");
		КонецЕсли;
			
	КонецЕсли;	

		
КонецПроцедуры


Процедура СоздатьСвязьХозсубъектПлощадка(ВыбХС, ВыбПлощадка)
	Если ПустоеЗначение(ВыбХС.GUID)=1 Тогда 
		Сообщить("Выб хозсбъект не указан GUID");
		Возврат;
	КонецЕсли;
		
	Если ПустоеЗначение(ВыбПлощадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateActivityLocationsOperation(
			СокрЛП(ВыбХС.GUID),
			СокрЛП(ВыбПлощадка.GUID) 
	);
	
	Отладка();	
	
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));

	Отладка();
	
	Если Результат="COMPLETED" Тогда
			
		рез = Компонента.ResultString;
		
		тз = ЗагрузитьТЗ(рез);
		//тз.ВыбратьСтроку();
		
		GUID = тз.ПолучитьЗначение(1,3);
		uuid = тз.ПолучитьЗначение(1,4);
		
		//если ПустоеЗначение(GUID)=0 Тогда			
		//	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		//	Спр.НайтиЭлемент(ВыбПлощадка);
		//	спр.GUID = GUID;
		//	спр.uuid = uuid;
		//	спр.Записать();
		//	Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
		//Иначе
		//	Сообщить("Пустой GUID ");
		//КонецЕсли;
			
	КонецЕсли;	

		
КонецПроцедуры

//****************** ХозСубъкты **********************************
Функция ПолучитьИНН(ВыбКлиент)
	
	//Если ПустоеЗначение(ВыбКлиент.ИНН)=0 Тогда 
	//	Возврат СокрЛП(ВыбКлиент.ИНН);		
	//Иначе
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
		Если Найти(ИННКПП, "\") <> 0 Тогда
			// найден разделитель
			Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);
	
		ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
			// найден разделитель
			Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
		Иначе
			Возврат СокрЛП(ИННКПП);
	
		КонецЕсли;
	//КонецЕсли;
КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьКПП(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение КПП юр лица.
//  
// Описание:
//  Функция возращает КПП из переданной строки 
//
Функция ПолучитьКПП(ВыбКлиент)
	
	//Если ПустоеЗначение(ВыбКлиент.КПП)=0 Тогда 
	//	Возврат СокрЛП(ВыбКлиент.КПП);		
	//Иначе
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

		Если Найти(ИННКПП, "\") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);
	
		ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
			// найден разделитель
			Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
		Иначе
			Возврат "";
	
		КонецЕсли;
	//КонецЕсли;
КонецФункции // ПолучитьКПП()

Функция ПолучитьОГРН(ВыбКонтрагент)
	
КонецФункции

Процедура СоздатьХС(ХС)

	ИНН = ПолучитьИНН(ХС.Контрагент);	
	КПП = ПолучитьКПП(ХС.Контрагент);	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ПолучитьОГРН(ХС.Контрагент);

	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда 
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;
	
	Адрес = ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	
	//GUID = GetBusinessEntity(ИНН);
	Результат = Компонента.CreateBusinessEntity(
			хс.Контрагент.Наименование, 
			хс.Контрагент.ЮрФизЛицо.ПолнНаименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        GUID_Страна, //страна
            GUID_Регион, //регион Самара
            GUID_Город, // city
			Адрес
	);
	
	Отладка();	
		
		//Сообщить("Хоз субъект с ИНН ["+ИНН+"] не найден");
	
КонецПроцедуры

Процедура ПолучитьGuidХС(ХС)

	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	
	//КПП = ПолучитьКПП(ХС.Контрагент.ЮрФизЛицо.ИНН);
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	//ОГРН = СокрЛП(ХС.Контрагент.ОГРН);
	//Адрес = ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	
	//GUID = GetBusinessEntity(ИНН);	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");		
	Результат = Компонента.GetBusinessEntityByINN( ИНН );
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
						
		тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		
		//GUID="";
		//тз.ВыбратьСтроки();
		//Пока тз.ПолучитьСтроку() = 1 Цикл
		//	GUID = тз._3;
		//	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		//	Спр.НайтиЭлемент(ВыбХС);
		//	спр.GUID = GUID;
		//	спр.Записать();
		//	Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);						
		//КонецЦикла;
		Если тз.КоличествоКолонок()>0 Тогда			
			GUID = тз.ПолучитьЗначение(1,3);
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ХС);
			спр.GUID = GUID;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);			
		Иначе
		//Если ПустоеЗначение(GUID)=1 Тогда
			Сообщить("Хоз субъект не найден по ИНН "+ИНН);
		КонецЕсли;
		
	КонецЕсли;	
		
		//Сообщить("Хоз субъект с ИНН ["+ИНН+"] не найден");
	
КонецПроцедуры

Процедура СинхронизацияСпрХС()
	Если ЭтоSQL=1 Тогда
			
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     
	
		ТекстЗапроса = "select 	              
	    |   СпрХС.id [id $Справочник.ВСД_ХозСубъект], 
	    |   СпрХС.descr, 
	    |   $СпрХС.GUID, 
	    |   $СпрХС.Контрагент [Контрагент $Справочник.Контрагенты]
	    //|   $СпрХС.ИНН as ИНН
	    |  from $Справочник.ВСД_ХозСубъект as СпрХС  
	  	|";
	  	Если обновитьВсеХозСубъекты=0 Тогда 
	  		ТекстЗапроса=ТекстЗапроса+"  where $СпрХС.GUID=''";
	  	КонецЕсли;
		//RS.Отладка(1);
		ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	Иначе
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "select 	              
	    |   СпрХС.id [id $Справочник.ВСД_ХозСубъект], 
	    |   СпрХС.descr, 
	    |   СпрХС.GUID, 
	    |   СпрХС.Контрагент [Контрагент $Справочник.Контрагенты]
	    |  from [Справочник.ВСД_ХозСубъект] as СпрХС  
	  	|";
	  	Если обновитьВсеХозСубъекты=0 Тогда 
	  		ТекстЗапроса=ТекстЗапроса+"  where СпрХС.GUID=''";
	  	КонецЕсли;
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);

	КонецЕсли;
	  
	
	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		
		ПолучитьGuidХС(тз.id);
		
		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ПолучитьПощадки(тз.id);
			ПолучитьПощадкиПоНазванию(тз.id, 0 );
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПолучитьОтветХС( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));

	Отладка();
	
		рез = Компонента.ResultString;
		
		тз = ЗагрузитьТЗ(рез);
		//тз.ВыбратьСтроку();
		
		GUID = тз.ПолучитьЗначение(1,3);
		
		если ПустоеЗначение(GUID)=0 Тогда			
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ВыбХС);
			спр.GUID = GUID;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
		Иначе
			Сообщить("Пустой GUID ");
		КонецЕсли;

		
КонецПроцедуры


Функция НайтиХС(Guid)
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Guid "+Guid+" не найден, создаем новый ХС");
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция НайтиПлощадку(Guid)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
			//создать площадку

			Результат = Компонента.getEnterpriseByGuid(guid);	
			
			Отладка();	
			Если Результат="SUCCESS" Тогда
					
				рез = Компонента.ResultString;
				
				тз = ЗагрузитьТЗ(рез);
				//тз.ВыбратьСтроку();
				
				//Владелец = НайтиХС( тз.ПолучитьЗначение(1,5) ); //owner = XC
				
				//Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
				//Спр.Новый();
				//Спр.Наименование = тз.ПолучитьЗначение(1,1);
				//спр.Адрес = тз.ПолучитьЗначение(1,2);
				//спр.GUID = тз.ПолучитьЗначение(1,3); // = GUID
				//спр.uuid = тз.ПолучитьЗначение(1,4);
				//спр.Записать();
				//Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
				Сообщить("Не найдена площадка: 
				|name = "+тз.ПолучитьЗначение(1,1)+"
				|address = "+тз.ПолучитьЗначение(1,2)+"
				|guid = "+тз.ПолучитьЗначение(1,3));
					
			КонецЕсли;	
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиПродукцию(Guid, Название)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(Guid, Название)
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.Записать();
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

//Функция НайтиВхПартиюПоНомеру(НомерЗаписи)
//	Док = СоздатьОбъект("Документ.ВСД_входящаяПартия");	
//	
//	Если ЭтоSQL=1 Тогда 
//		RS = СоздатьОбъект("ODBCRecordset");
//		RS.УстБД1С();     	
//	
//		ТекстЗапроса = "
//		|select 	              
//	    |   ДокВ.iddoc [id $Документ.ВСД_входящаяПартия]
//	    |from $Документ.ВСД_входящаяПартия as ДокВ  
//	  	|where 
//	  	|	$ДокВ.НомерЗаписи= :НомерЗаписи
//	  	|";
//		RS.УстановитьТекстовыйПараметр("НомерЗаписи", НомерЗаписи);  
//		//RS.Отладка(1);
//		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
//	Иначе
//	
//		Запрос = базаДанных.НовыйЗапрос();
//		ТекстЗапроса = "
//		|select 	              
//	    |   ДокВ.iddoc [id $Документ.ВСД_входящаяПартия]
//	    |from [Документ.ВСД_входящаяПартия] as ДокВ  
//	  	|where 
//	  	|	ДокВ.НомерЗаписи= :НомерЗаписи
//	  	|";	
//		Запрос.Подставлять("НомерЗаписи", НомерЗаписи);
//		//тз.Отладка();
//		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
//	КонецЕсли;
//
//	Если ПустоеЗначение(тз)=1 Тогда 
//		Док.Новый();
//	Иначе
//		док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
//	конецЕсли;
//  	
//	Возврат  Док;
//КонецФункции

Функция НайтиПартиюПоGUID(GUID, ДокОснование)
	Док = СоздатьОбъект("Документ.ВСД_Партия");	
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   ДокВ.iddoc [id $Документ.ВСД_Партия]
	    |from $Документ.ВСД_Партия as ДокВ  
	  	|where 
	  	|	$ДокВ.GUID= :GUID
	  	|";
		RS.УстановитьТекстовыйПараметр("GUID", GUID);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
			
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   ДокВ.iddoc [id $Документ.ВСД_Партия]
	    |from [Документ.ВСД_Партия] as ДокВ  
	  	|where 
	  	|	ДокВ.GUID= :GUID
	  	|";	
		Запрос.Подставлять("GUID", GUID);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
		Док.ДокОснование = ДокОснование;
	Иначе
		док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
		док.СделатьНеПроведенным();
		док.СнятьПометкуУдаления();
	конецЕсли;
  	
	Возврат  Док;
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

Процедура ЗаписатьПартию(stockEntry, докПартия)
		t = stockEntry.text;	
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("vetd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		batch = stockEntry.selectSingleNode("vetd:batch");
		
		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;
		productItem = batch.selectSingleNode("vetd:productItem").text;
		volume 		= batch.selectSingleNode("vetd:volume").text;
		unit		= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
		Попытка
			packingFormUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("bs:uuid").text;
			packingFormName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("argc:name").text;
		Исключение
			packingListUuid = "";
			packingFormName="";
		КонецПопытки;
		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
		
		попытка
			dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:firstDate").text;
		Исключение
			dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").text;
		КонецПопытки;
		dateOfProduction = СтрЗаменить(dateOfProduction," ",".");
		попытка
			dateOfProduction2 	= batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:secondDate").text;;
			dateOfProduction2 = СтрЗаменить(dateOfProduction2," ",".");
			dateOfProduction = dateOfProduction +  " - "+ dateOfProduction2;
		Исключение			
		КонецПопытки;
		Попытка
			expiryDate 	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:firstDate").text;
		Исключение
			expiryDate 	= batch.selectSingleNode("vetd:expiryDate").text;
		КонецПопытки;
		expiryDate = СтрЗаменить(expiryDate," ",".");
		Попытка
			expiryDate2	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:secondDate").text;
			expiryDate2 = СтрЗаменить(expiryDate2," ",".");
			expiryDate  = expiryDate +" - "+ expiryDate2; 
		Исключение			
		КонецПопытки;
		
		
		producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		
		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект

		//Сообщить(""+entryNumber+" "+volume);		
	
		//ДокВхПартия = НайтиВхПартиюПоНомеру(entryNumber);
		ДокВхПартия = НайтиПартиюПоGUID(guid, докПартия);
		
		Сообщить(""+ДокВхПартия.ТекущийДокумент()+" от "+createDate+" # "+entryNumber);
		
		ДокВхПартия.ДатаДок = СтрокаВДату(createDate);
		ДокВхПартия.ДатаИзменения = СтрокаВДату( updateDate );
		Производитель = НайтиПлощадку(producer);
		
		Если ПустоеЗначение(Производитель)=1 Тогда
			Сообщить("Партия пропущена "+entryNumber,"!");
			Возврат;
		КонецЕсли;
		ПроизводительХС = "";
		Попытка
			ПроизводительХС =  Производитель.Владелец;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		//ДокВхПартия.Отправитель_ХозСубъект = ;
		//ДокВхПартия.Отправитель_Площадка = ;
		ДокВхПартия.Получатель_ХозСубъект = Отправитель_ХозСубъект;
		ДокВхПартия.Получатель_Площадка = Отправитель_Площадка;
		ДокВхПартия.Производитель_Площадка = Производитель;
		ДокВхПартия.Производитель_ХозСубъект = ПроизводительХС;
		//ДокВхПартия.Перевозчик_ХозСубъект = ;
		//ДокВхПартия.applicationID = ;
		ДокВхПартия.Продукция = НайтиПродукцию(product, productItem);
		ДокВхПартия.ВидПродукции = НайтиВидПродукции(subProduct, productItem);
		ДокВхПартия.Количество = Число(volume);
		ДокВхПартия.КоличествоКор = Число(packingAmount);
		ДокВхПартия.ФормаУпаковки = НайтиЕдИзмерения( packingFormUuid, packingFormName);
		
		ДокВхПартия.ДатаИзготовления = dateOfProduction;
		ДокВхПартия.ДатаСрокГодности = expiryDate;
		ДокВхПартия.Статус = st;		
		//ДокВхПартия.ТермическоеСостояние = ;
		//ДокВхПартия.ОсобыеОтметки = ;
		ДокВхПартия.GUID = guid;
		ДокВхПартия.UUID = uuid;
		ДокВхПартия.ДатаИзменения = updateDate;
		ДокВхПартия.НомерЗаписи = entryNumber;
		ДокВхПартия.НаименованиеПродукции = productItem;
		ДокВхПартия.Фирма = глПользователь.ОсновнаяФирма;
		//ДокВхПартия.ЮрЛицо = ;
		//ДокВхПартия.Проект = ;
		ДокВхПартия.Автор = глПользователь;
		Если ПустоеЗначение(Филиал)=0 Тогда 
			ДокВхПартия.Филиал = глПользователь.Филиал;
		КонецЕсли;
		//ДокВхПартия.Комментарий = ;
		
		ДокВхПартия.ВсдДата = ДокВхПартия.ДатаДок;
		ДокВхПартия.ВсдЭкспертиза = ВСД_Экспертиза;
		ДокВхПартия.ВсдМестность = ВСД_Местность;
		
		ДокВхПартия.Комментарий = ДокВхПартия.Комментарий + ТекущаяДата()+" "+ТекущееВремя();
		
		ДокВхПартия.Записать();
		ДокВхПартия.Провести();

КонецПроцедуры

//*********** работа с XML ********************************
Процедура ЗагрузитьXML_ВсеПартииОтвет(имяФайла, докПартия="")
    
    //tt1=_GetPerformanceCounter();
    
	Если ПустоеЗначение(имяФайла)=1 Тогда
		
	    ИмяФайла="C:\C#\logs\1.xml";
		
		Каталог = "";
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "XML (*.xml)|*.xml", , ) = 1 Тогда
		    ИмяФайла = Каталог + ИмяФайла;
		КонецЕсли;
	КонецЕсли;	

	//имяф=КаталогИБ()+"tovar3.xml";
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    stockEntryList = objDom.selectNodes("//vetd:stockEntry") ;
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
		
		ЗаписатьПартию(stockEntry, докПартия);
			
    КонецЦикла;
    stockEntryList = objDom.selectNodes("//merc:stockEntry") ;
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
		
		ЗаписатьПартию(stockEntry, докПартия);
			
    КонецЦикла;
    
    //tt2=_GetPerformanceCounter();
    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");     

КонецПроцедуры

Процедура ЗагрузитьXML_Номенклатура(имяФайла)
		
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    productList = objDom.selectNodes("//product") ;
    Для i1 = 0 По productList.length - 1 Цикл
        product=productList.item(i1);
		
		uuid = product.selectSingleNode("uuid").text;
		guid = product.selectSingleNode("guid").text;
		st = product.selectSingleNode("status").text;
		updateDate = product.selectSingleNode("updateDate").text;
		createDate = product.selectSingleNode("createDate").text;		
		name = product.selectSingleNode("name").text;
		code = product.selectSingleNode("code").text;
		productType = product.selectSingleNode("productType").text;
		
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.КодМеркурий = code;
			Спр.Тип = ProductType;
			Спр.Записать();

    КонецЦикла;
КонецПроцедуры

////*********** работа с XML ********************************
//Процедура ЗагрузитьXML_Партия(имяФайла, докПартия="" )
//    
//    //tt1=_GetPerformanceCounter();
//    
//	Если ПустоеЗначение(имяФайла)=1 Тогда
//		
//	    ИмяФайла="C:\C#\logs\1.xml";
//		
//		Каталог = "";
//		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "XML (*.xml)|*.xml", , ) = 1 Тогда
//		    ИмяФайла = Каталог + ИмяФайла;
//		КонецЕсли;
//	КонецЕсли;	
//
//	//имяф=КаталогИБ()+"tovar3.xml";
//    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
//    
//    objDom=СоздатьОбъект("MSXML2.DOMDocument");
//    objDom.load(ИмяФайла);    
//    
////    о=СоздатьОбъект("Справочник.Товары");
//    stockEntryList = objDom.selectNodes("//merc:stockEntry") ;
//    Для i1 = 0 По stockEntryList.length - 1 Цикл
//        stockEntry=stockEntryList.item(i1);
//		
//		t = stockEntry.text;	
//		uuid = stockEntry.selectSingleNode("bs:uuid").text;
//		guid = stockEntry.selectSingleNode("bs:guid").text;
//		st = stockEntry.selectSingleNode("bs:status").text;
//		entryNumber = stockEntry.selectSingleNode("vetd:entryNumber").text;
//		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
//		createDate = stockEntry.selectSingleNode("bs:createDate").text;
//		
//		batch = stockEntry.selectSingleNode("vetd:batch");
//		
//		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
//		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;
//		productItem = batch.selectSingleNode("vetd:productItem").text;
//		volume 		= batch.selectSingleNode("vetd:volume").text;
//		unit		= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
////		packingListUuid	= batch.selectSingleNode("vetd:packingList").selectSingleNode("com:packingForm").selectSingleNode("bs:uuid").text;
//		//packingListName	= batch.selectSingleNode("vetd:packingList").selectSingleNode("argc:packingForm").selectSingleNode("argc:name").text;;
//		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
//		
//		попытка
//			dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:firstDate").text;
//		Исключение
//			dateOfProduction 	= ""+batch.selectSingleNode("vetd:dateOfProduction").text;
//		КонецПопытки;
//		dateOfProduction = СтрЗаменить(dateOfProduction," ",".");
//		попытка
//			dateOfProduction2 	= batch.selectSingleNode("vetd:dateOfProduction").selectSingleNode("vetd:secondDate").text;;
//			dateOfProduction2 = СтрЗаменить(dateOfProduction2," ",".");
//			dateOfProduction = dateOfProduction +  " - "+ dateOfProduction2;
//		Исключение			
//		КонецПопытки;
//		Попытка
//			expiryDate 	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:firstDate").text;
//		Исключение
//			expiryDate 	= batch.selectSingleNode("vetd:expiryDate").text;
//		КонецПопытки;
//		expiryDate = СтрЗаменить(expiryDate," ",".");
//		Попытка
//			expiryDate2	= batch.selectSingleNode("vetd:expiryDate").selectSingleNode("vetd:secondDate").text;
//			expiryDate2 = СтрЗаменить(expiryDate2," ",".");
//			expiryDate  = expiryDate +" - "+ expiryDate2; 
//		Исключение			
//		КонецПопытки;
//
//		
//		ДокВхПартия = НайтиПартиюПоGUID( guid, докПартия);
//		
//		Сообщить(""+ДокВхПартия.ТекущийДокумент()+" от "+createDate+" # "+entryNumber);
//		
//		//ДокВхПартия.ДатаДок =
//		//ДокВхПартия.Новый();
//		//ДокВхПартия.НомерДок = ;
//		ДокВхПартия.ДатаДок = СтрокаВДату(createDate);
//		//Производитель = НайтиПлощадку(producer);
//		//
//		//Если ПустоеЗначение(Производитель)=1 Тогда
//		//	Сообщить("Партия пропущена "+entryNumber,"!");
//		//	Продолжить;
//		//КонецЕсли;		
//		
//		producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
//		
//		Производитель = НайтиПлощадку(producer);
//		Если ПустоеЗначение(Производитель)=1 Тогда
//			Сообщить("Партия пропущена "+entryNumber,"!");
//			Возврат;
//		КонецЕсли;
//		ПроизводительХС = "";
//		Попытка
//			ПроизводительХС =  Производитель.Владелец;
//		Исключение
//			Сообщить(ОписаниеОшибки());
//		КонецПопытки;
//		
//		
//		ДокВхПартия.Получатель_ХозСубъект = Отправитель_ХозСубъект;
//		ДокВхПартия.Получатель_Площадка = Отправитель_Площадка;
//		ДокВхПартия.Производитель_Площадка = Производитель;
//		ДокВхПартия.Производитель_ХозСубъект = ПроизводительХС;
//		//ДокВхПартия.Производитель_Площадка = Производитель;
//		//ДокВхПартия.Производитель_ХозСубъект = Производитель.Владелец;
//		//ДокВхПартия.Перевозчик_ХозСубъект = ;
//		//ДокВхПартия.applicationID = ;
//		ДокВхПартия.Продукция = НайтиПродукцию(product, productItem);
//		ДокВхПартия.ВидПродукции = НайтиВидПродукции(subProduct, productItem);
//		ДокВхПартия.Количество = Число(volume);
//		ДокВхПартия.КоличествоКор = Число(packingAmount);
//		//ДокВхПартия.ДатаИзготовления = dateOfProduction;
//		//ДокВхПартия.ДатаСрокГодности = expiryDate;
//		ДокВхПартия.Статус = st;		
//		//ДокВхПартия.ТермическоеСостояние = ;
//		//ДокВхПартия.ОсобыеОтметки = ;
//		ДокВхПартия.GUID = guid;
//		ДокВхПартия.UUID = uuid;
//		ДокВхПартия.ДатаИзменения = updateDate;
//		ДокВхПартия.НомерЗаписи = entryNumber;
//		ДокВхПартия.НаименованиеПродукции = productItem;
//		//ДокВхПартия.Фирма = глПользователь.ОсновнаяФирма;
//		//ДокВхПартия.ЮрЛицо = ;
//		//ДокВхПартия.Проект = ;
//		//ДокВхПартия.Автор = глПользователь;
//		Если ПустоеЗначение(Филиал)=0 Тогда 
//			ДокВхПартия.Филиал = глПользователь.Филиал;
//		КонецЕсли;
//		//ДокВхПартия.Комментарий = ;
//		
//		ДокВхПартия.ВсдДата = ДокВхПартия.ДатаДок;
//		ДокВхПартия.ВсдЭкспертиза = ВСД_Экспертиза;
//		ДокВхПартия.ВсдМестность = ВСД_Местность;
//		
//		ДокВхПартия.Записать();
//		ДокВхПартия.Провести();
//		
//    КонецЦикла;
//
//    
//    //tt2=_GetPerformanceCounter();
//    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");
//    
//КонецПроцедуры
//*******************************************

Процедура ПолучитьТовары()
	
	// http://help.vetrf.ru/wiki/ProductType
	productType = 1; //мясо
	
	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetProductList( productType );
	
	Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		ЗагрузитьXML_Номенклатура( Компонента.LogFilename );

	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьЕдИзмерения()
	//http://help.vetrf.ru/wiki/PackingForm
	
	НайтиЕдИзмерения("fedf3e32-053c-11e1-99b4-d8d385fbc9e8",	"банки");
	НайтиЕдИзмерения("fedf401c-053c-11e1-99b4-d8d385fbc9e8",	"биг бэги");
	НайтиЕдИзмерения("fedf412a-053c-11e1-99b4-d8d385fbc9e8",	"бочки");
	НайтиЕдИзмерения("fedf422e-053c-11e1-99b4-d8d385fbc9e8",	"жестяные банки");
	НайтиЕдИзмерения("fedf4328-053c-11e1-99b4-d8d385fbc9e8",	"картонные коробки");
	НайтиЕдИзмерения("fedf4422-053c-11e1-99b4-d8d385fbc9e8",	"крафтмешки");
	НайтиЕдИзмерения("fedf451c-053c-11e1-99b4-d8d385fbc9e8",	"мешки");
	НайтиЕдИзмерения("fedf4616-053c-11e1-99b4-d8d385fbc9e8",	"мешки полипропиленовые");
	НайтиЕдИзмерения("fedf46fc-053c-11e1-99b4-d8d385fbc9e8",	"навалом");
	НайтиЕдИзмерения("fedf47ec-053c-11e1-99b4-d8d385fbc9e8",	"насыпью");
	НайтиЕдИзмерения("fedf48dc-053c-11e1-99b4-d8d385fbc9e8",	"пакеты");
	НайтиЕдИзмерения("fedf49cc-053c-11e1-99b4-d8d385fbc9e8",	"полиблоки");
	НайтиЕдИзмерения("fedf55e8-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые ящики");
	НайтиЕдИзмерения("fedf56f6-053c-11e1-99b4-d8d385fbc9e8",	"паллеты");
	НайтиЕдИзмерения("fedf57f0-053c-11e1-99b4-d8d385fbc9e8",	"полиэтилен");
	НайтиЕдИзмерения("fedf58e0-053c-11e1-99b4-d8d385fbc9e8",	"картон");
	НайтиЕдИзмерения("fedf59da-053c-11e1-99b4-d8d385fbc9e8",	"стокинеты");
	НайтиЕдИзмерения("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8",	"коробки");
	НайтиЕдИзмерения("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8",	"прицеп");
	НайтиЕдИзмерения("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8",	"корзины");
	НайтиЕдИзмерения("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8",	"автоцистерна");
	НайтиЕдИзмерения("fedf5e80-053c-11e1-99b4-d8d385fbc9e8",	"мешки бумажные");
	НайтиЕдИзмерения("fedf5f70-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые коробки");
	НайтиЕдИзмерения("fedf606a-053c-11e1-99b4-d8d385fbc9e8",	"контейнер");
	НайтиЕдИзмерения("fedf615a-053c-11e1-99b4-d8d385fbc9e8",	"поддоны");
	НайтиЕдИзмерения("fedf6240-053c-11e1-99b4-d8d385fbc9e8",	"на подвесе");
	НайтиЕдИзмерения("fedf6344-053c-11e1-99b4-d8d385fbc9e8",	"кипы");
	НайтиЕдИзмерения("a99ecd22-d2e8-11e4-8109-d89d67148660",	"гофроящики");
	НайтиЕдИзмерения("dae4571f-d2e8-11e4-8109-d89d67148660",	"пластмассовые ящики");
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
	
	//ЗаполнитьПараметрыErt();
	ЗаполнитьПараметрыСписок();
		
	Компонента.Init(      
		param_username,  	//string USERNAME 
        param_password, 	//string PASSWORD = 
        param_issuer_id, 	//string ISSUER_ID 
        param_service_id, 	// string SERVICE_ID = 
        param_api_key, 		//string API_KEY = 
        param_intiator_login, 	//string USER_LOGIN = 
        param_vetdoctor_login, //string VETDOCTOR_LOGIN = 
		КаталогЛогов // для логов
		);

	//Сообщить("Логи сохраняются в "+КаталогЛогов);
		
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Партии");
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты");
	Форма.Закладки.ДобавитьЗначение("Площадки");
	Форма.Закладки.ДобавитьЗначение("ВСД");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	          
	Форма.ИспользоватьСлой("Основной, Партии");
	
	ЭтоSQL = ФС.СуществуетФайл(КаталогИБ()+"1cv7.dba");
	
	Если ЭтоSQL=1 Тогда 
		Попытка
			RS = СоздатьОбъект("ODBCRecordset");
			RS.УстБД1С();     
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	Иначе
		
		Попытка
			базаДанных = СоздатьОбъект("SQLiteBase");
		Исключение
			ЗагрузитьВнешнююКомпоненту("1sqlite.dll");
			базаДанных = СоздатьОбъект("SQLiteBase");
		КонецПопытки;	
		базаДанных.Открыть(":memory:");	
	КонецЕсли;

	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда  
		
		Команда = Парам.Получить("Команда");
		
		//ВыполнитьКоманду(Команда)
		Если Команда="ОтправитьВсдИсходящие" Тогда
			
			ТермическиеУсловияПеревозки = Парам.Получить("ТермическиеУсловияПеревозки");
			
			Если ПустоеЗначение(ТермическиеУсловияПеревозки)=1 Тогда
				Сообщить("ТермическиеУсловияПеревозки не определено!","!");
			Иначе 
				Сообщить("ТермическиеУсловияПеревозки = "+ТермическиеУсловияПеревозки);
			КонецЕсли;
			
			Состояние("Меркурий: отправляются ВСД исходящие...");
			ОтправитьВсеИсходящиеВСД();
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ПолучитьПартии" Тогда
			Состояние("Меркурий: получение партий...");
			ПолучитьВсеПартии();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;   

	ЗаполнитьЕдИзмерения();
	
КонецПроцедуры


НачДата = ТекущаяДата();
КонДата = НачДата;
попытка
	Филиал = глПользователь.Филиал;
Исключение
	Филиал="";
КонецПопытки;

////боевая версия
//ЗагрузитьВнешнююКомпоненту("SoapDLL_work.dll");
//Компонента = СоздатьОбъект("SoapDLL.WorkClass"); 		
	
// тестовый сервер
//ЗагрузитьВнешнююКомпоненту("SoapDLL_test.dll");	
ПодключитьВнешнююКомпоненту("AddIn.SoapDLL_test");
Компонента = СоздатьОбъект("AddIn.SoapDLL_test"); 		

//ПутьМодульПараметры = "ExtForms\Меркурий_МодульПараметры.txt";		// рабочая версия
//ПутьМодульПараметры = "ExtForms\Меркурий_МодульПараметрыТест.txt"; // тестовая версия
ПаузаСек = 10;

//настройки модуля хранятся в файле
РасположениеФайла(КаталогОбработки, ИмяФайлаНастроек);
//ИмяФайлаНастроек=КаталогОбработки+"Меркурий_Константы_"+СокрЛП(глПользователь.Код)+".tx8";
ИмяФайлаНастроек=КаталогОбработки+"Меркурий_Константы_ТЕСТ_"+СокрЛП(глПользователь.Код)+".tx8";
