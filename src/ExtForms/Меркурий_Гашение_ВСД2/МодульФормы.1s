//Автор: Жуков Дмитрий
//zhukov@kb99.pro 
//Все права принадлежат ИП Синявский Ф.А. http://www.kb99.pro
//Версия api 2.0 
//Ver  01.06.2018_16
//********** 
// Замечание по импортным ВСД -> Форма упаковки без ГУИД - не гасится
// По производителям -> ProducerRole - ставим всегда PRODUCER, либо изменить хранение ПроизводителиСписок - в ТЗ с колонкой Роль,
// либо реквизит Роль в ВСД_Площадка добавить
// Нет даты срока годности или производства
// нет термических условий !

// Считывание работает в 2 прохода
// 1 - считывает данные ответа в ТЗ 
// 2 - обрабатывает загруженную ТЗ - Создает докумены ВСД2_Входящий (или перезаписывает), находит/создает по ГУИДам справочники в 1С
// Возможен вариант оформления входящей партии без записи в 1с документа ВСД2_Входящий
//Перем ГМ, ГМ2; = определение перенесено в ПриНачалеРаботыСистемы() Глобальный Модуль конфигурации
Перем цвКрасный, цвЖелтый, цвЗеленый, цвГолубой, цвФиолетовый;

Перем ВыбФирма Экспорт;
Перем оПривязки; //:Меркурий.Привязки

// работа с номенклатурой ******************
// спр Номенклатура с отбором по реквизиту ВСД_Продукция_Элемент !!!

Процедура РаскраситьСоответствия()
	тз = СоздатьОбъект("ТаблицаЗначений");
	тзСоответствия.Выгрузить(тз);
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл		
        Если ПустоеЗначение(тз.Номенклатура) = 1 Тогда
        	тз.сЦвет = цвКрасный;
		ИначеЕсли ПустоеЗначение(тз.Номенклатура.ВСД_Продукция_Элемент) = 1 Тогда
		    тз.сЦвет = цвЖелтый;
		Иначе
			тз.сЦвет = цвЗеленый;
        КонецЕсли;
		
	КонецЦикла;
	
	ТекСтрока = тзСоответствия.ТекущаяСтрока();
	
	тзСоответствия.Загрузить(тз);
	
//	тзСоответствия.ВыводитьПиктограммы("Пометка");

	Если ПустоеЗначение(ТекСтрока)=1 Тогда 
		тзСоответствия.ТекущаяСтрока(1);
	Иначе
		тзСоответствия.ТекущаяСтрока( ТекСтрока );
	КонецЕсли;
КонецПроцедуры


Процедура ЗаписатьСоответствие(ВыбТЗ)
	тз = СоздатьОбъект("ТаблицаЗначений");
	ВыбТЗ.Выгрузить(тз);
	тз.ВыбратьСтроки();
	спрНом =СоздатьОбъект("Справочник.Номенклатура");
	Пока тз.ПолучитьСтроку() = 1 Цикл
	    Если ПустоеЗначение(тз.Номенклатура) = 1 Тогда			
	        Продолжить;
		КонецЕсли;
		Если тз.Номенклатура.ВСД_Продукция_Элемент = тз.Продукция_Элемент.текущийЭлемент()  Тогда
			//Сообщить("Ранее установлено соответствие "+тз.Продукция_Элемент+" -> "+тз.Номенклатура);
		    Продолжить;
		КонецЕсли;
		спрНом.найтиЭлемент(тз.Номенклатура);
		спрНом.ВСД_Продукция_Элемент = тз.Продукция_Элемент.текущийЭлемент();
		спрНом.Записать();
		Сообщить("Установлено соответствие "+тз.Продукция_Элемент+" -> "+спрНом);
	КонецЦикла;
КонецПроцедуры

Процедура УбратьСоответствие(ВыбНоменклатура)
	спрНом =СоздатьОбъект("Справочник.Номенклатура");
	спрНом.найтиЭлемент(ВыбНоменклатура);
	спрНом.ВСД_Продукция_Элемент = "";
	спрНом.Записать();
	Сообщить("Отключено соответствие "+ВыбНоменклатура);
КонецПроцедуры

Функция НайтиНоменклатуруПоРеквизиту(ВыбРеквизит,ЗначениеРеквизита)
	результат = "";
	Если ТипЗначенияСтр(ЗначениеРеквизита) = "Строка" Тогда
		Если НРег(СокрЛП(ВыбРеквизит)) = "код" Тогда
			ВыбРеквизит = "CODE";
		ИначеЕсли НРег(СокрЛП(ВыбРеквизит)) = "наименование" Тогда
			ВыбРеквизит = "descr";
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		
	Если ГМ.ЭтоSQL=1 Тогда 	
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "select 
		|	СпрНом.ID [id $Справочник.Номенклатура],
		|	$СпрНом."+СокрЛП(ВыбРеквизит)+"
		|from $Справочник.Номенклатура as СпрНом 
		|where 
		|	$СпрНом."+СокрЛП(ВыбРеквизит)+"=:ЗначРеквизита
		|";
		RS.УстановитьТекстовыйПараметр("ЗначРеквизита", ЗначениеРеквизита);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	  	
	Иначе	
		Запрос = ГМ.базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "select 
		|	СпрНом.ID [id $Справочник.Номенклатура],
		|	СпрНом."+СокрЛП(ВыбРеквизит)+"
		|from [Справочник.Номенклатура] as СпрНом 
		|where 
		|	СпрНом."+СокрЛП(ВыбРеквизит)+"=:ЗначРеквизита
		|";
		
		Запрос.Подставлять("ЗначРеквизита", ЗначениеРеквизита);
	
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;
	
	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	КонецЕсли;
	
	Исключение
		Сообщить("Не удалось выполнить запрос");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат результат;
КонецФункции 

Функция ПроставитьНоменклатуруВТЗ(ВыбТЗ)
	тз = СоздатьОбъект("ТаблицаЗначений");
    ВыбТЗ.Выгрузить(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
	    Если ПустоеЗначение(тз.Продукция_Элемент) = 1 Тогда
	        Продолжить;
	    КонецЕсли;
	    Если ПустоеЗначение(тз.Номенклатура) = 0 Тогда
//	        Продолжить;
	    КонецЕсли;
		тз.Номенклатура = НайтиНоменклатуруПоРеквизиту("ВСД_Продукция_Элемент",тз.Продукция_Элемент);//ПолучитьНоменклатуруПоПродукцияЭлемент(тз.Продукция_Элемент); 
	КонецЦикла;
	ВыбТЗ.Загрузить(тз);
	РаскраситьСоответствия();
КонецФункции


Процедура ОбработкаПодбора(ВыбЭлемент)
	Если ВыбЭлемент.Вид() = "Номенклатура" Тогда
		Если Форма.АктивныйЭлемент() = "тзСоответствия" Тогда
			тзСоответствия.Номенклатура = ВыбЭлемент;
			РаскраситьСоответствия();
		Иначе
			ТЗВСД.Номенклатура = ВыбЭлемент;	
		КонецЕсли;
	    
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьИзменитьНоменклатуру(ВыбТЗ)
	
	ВыбНоменклатура = ВыбТЗ.Номенклатура;
	Если ПустоеЗначение(ВыбНоменклатура) = 0 Тогда
		Если ПустоеЗначение(ВыбНоменклатура.ВСД_Продукция_Элемент) = 0 Тогда
		    // м.б. спросить - Убрать соответствие ?
			ТВопроса = "Убрать сопоставление "+ВыбНоменклатура +"
			| "+ВыбТЗ.Продукция_Элемент;
			Если Вопрос(ТВопроса,"Да+Нет") = "Да" Тогда
				УбратьСоответствие(ВыбНоменклатура);
				ВыбТЗ.Номенклатура = "";
				Если Форма.АктивныйЭлемент() = "тзСоответствия" Тогда
					ПроставитьНоменклатуруВТЗ(тзВСД);    
				КонецЕсли;
				Возврат "";
			Иначе
				ОткрытьФорму(ВыбНоменклатура.ТекущийЭлемент());
				Возврат "";
			КонецЕсли;
		Иначе
			ТВопроса = "Убрать сопоставление -Да, Выбрать другой - Нет";
			Если Вопрос(ТВопроса,"Да+Нет") = "Да" Тогда
				ВыбТЗ.Номенклатура = "";
				Возврат "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// сначала из документа подберем, если он указан в Параметрах
	Если ПустоеЗначение(ВыбДокумент) = 0 Тогда
	    ВремСз = СоздатьОбъект("СписокЗначений");
		ВыбДокумент.ВыгрузитьтабличнуюЧасть(ВремСз,ГМ.НазваниереквизитаНоменклатура());
		поз = 0;
		Если ВремСз.ВыбратьЗначение(ВыбТЗ.Номенклатура,ГМ.НазваниереквизитаНоменклатура(),поз) > 0 Тогда
			ВыбТЗ.Номенклатура = ВремСз.ПолучитьЗначение(поз);    
		КонецЕсли;
	Иначе
		ОткрытьПодбор("Справочник.Номенклатура","ДляВыбора",,0,ВыбНоменклатура);
		Возврат "";
	КонецЕсли;
	
    //ВыбНоменклатура = СтрокаТЗ.Номенклатура;
	//ВыбПродЭлемент = СтрокаТЗ.Продукция_Элемент;
КонецФункции




// Вкладка Соответствия ************************

Функция ПроставитьСПоискомПоРеквизиту(ВыбТЗ,ВыбРеквизит,ИмяРекв = "Артикул")
	тз = СоздатьОбъект("ТаблицаЗначений");
    ВыбТЗ.Выгрузить(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
	    Если ПустоеЗначение(тз.Продукция_Элемент) = 1 Тогда
	        Продолжить;
	    КонецЕсли;
	    Если ПустоеЗначение(тз.Номенклатура) = 0 Тогда
	        Продолжить;
		КонецЕсли;
		Если ИмяРекв = "Артикул" Тогда
		    	ВыбЗначение = СокрЛП(тз.Артикул);
			Иначе
		    	ВыбЗначение = СокрЛП(тз.GTIN);
		КонецЕсли;
		Если ПустоеЗначение(ВыбЗначение) = 1 Тогда
		    Сообщить("Не указано значение "+ИмяРекв+" у "+тз.Продукция_Элемент+" ->Пропускаю");
			Продолжить;
		КонецЕсли;
		тз.Номенклатура = НайтиНоменклатуруПоРеквизиту(ВыбРеквизит,ВыбЗначение); 
	КонецЦикла;
	ВыбТЗ.Загрузить(тз);
	РаскраситьСоответствия();	
КонецФункции

Процедура КликСоответствия()
	Если ТЗСоответствия.ТекущаяСтрока() = 0 Тогда
	    Возврат;
	КонецЕсли;
	текСтр = ТЗСоответствия.ТекущаяСтрока();
	текКол = ТЗСоответствия.ТекущаяКолонка();
	
	Если текКол = "ПроизводителиСписок" Тогда
		Сп = ЗначениеИзСтроки(ТЗСоответствия.ПроизводителиСписок); 
		зн="";
		Сп.ВыбратьСтроку(зн,"Производители");
	ИначеЕсли текКол = "Продукция_Элемент" Тогда
		ОткрытьФорму(ТЗСоответствия.Продукция_элемент);	
	ИначеЕсли текКол = "Производитель" Тогда
		ОткрытьФорму(ТЗСоответствия.Производитель);	

	ИначеЕсли текКол = "Номенклатура" Тогда
		ПодобратьИзменитьНоменклатуру(ТЗСоответствия);	
	Иначе
		текЗн = ТЗСоответствия.ПолучитьЗначение(ТекСтр, текКол);
		ВвестиЗначение(текЗн, "","Строка",100);
		ТЗСоответствия.УстановитьЗначение(текСтр, текКол, текЗн);
	КонецЕсли;
	РаскраситьСоответствия()	
КонецПроцедуры

Процедура ЗагрузитьТЗСоответствий(СзЭлементов)
	//Заполняет таблицу соответствий из полученного параметра - СЗ ВСД_Продукция_Элемент
	тзСоответствия.УдалитьСтроки();
	к = 0;
	Для к=1 по СзЭлементов.РазмерСписка() Цикл //тз.ПолучитьСтроку() = 1 Цикл
		тзСоответствия.НоваяСтрока();
		тзСоответствия.Продукция_Элемент =  СзЭлементов.ПолучитьЗначение(к);		
		тзСоответствия.Артикул = тзСоответствия.Продукция_Элемент.Артикул;
		тзСоответствия.GTIN = тзСоответствия.Продукция_Элемент.GTIN;
	    тзСоответствия.Производитель = тзСоответствия.Продукция_Элемент.Площадка;
	КонецЦикла;
	тзСоответствия.Свернуть("Продукция_Элемент,Номенклатура,Артикул,GTIN,Производитель,сЦвет","");
	ПроставитьНоменклатуруВТЗ(тзСоответствия);
	РаскраситьСоответствия();	
КонецПроцедуры

Процедура ЗагрузитьИзСправочника()
	Перем Запрос, ТекстЗапроса;
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПродЭлементыВсе)
	|Обрабатывать НеПомеченныеНаУдаление;
	|ТекущийЭлемент = Справочник.ВСД_Продукция_Элемент.ТекущийЭлемент;
	|Группировка ТекущийЭлемент упорядочить по ТекущийЭлемент.Наименование;
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
    времТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(времТЗ,,0);
	Запрос = "";
	ВремСз = СоздатьОбъект("СписокЗначений");
	времТЗ.Выгрузить(ВремСз,,,"ТекущийЭлемент");
	ЗагрузитьТЗСоответствий(ВремСз);
КонецПроцедуры


Процедура СкопироватьИзТзВСД()
	ВремСз = СоздатьОбъект("СписокЗначений");
	ТЗВСД.Выгрузить(ВремСз,,,"Продукция_Элемент");
	ЗагрузитьТЗСоответствий(ВремСз);
КонецПроцедуры

//**********************

Функция ПриИзмененииПлощадки()
	//В противном случае партии запишутся на первую попавшуюся площадку
	// когда у ХС их несколько !!!!
	//Необходимо учесть этот момент во всех обработках
	ТЗВСД.УдалитьСтроки();
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);	
КонецФункции


//******************************************************************************
Процедура ОтменитьВсеДокументы()
	ТЗВСД.ВыбратьСтроки();
	Пока ТЗВСД.ПолучитьСтроку() = 1 Цикл
		ТЗВСД.Пометка=1;		
	КонецЦикла;	 
		

//	ОбновитьИнф();
КонецПроцедуры

Процедура ВыделитьВсеДокументы()
	ТЗВСД.ВыбратьСтроки();
	Пока ТЗВСД.ПолучитьСтроку() = 1 Цикл
		Если ТЗВСД.сЦвет = "" Тогда 
			если ПустоеЗначение(ТЗВСД.ВидПродукции)=0 тогда
			ТЗВСД.Пометка=2;	
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;	      

//	ОбновитьИнф();	
КонецПроцедуры


Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(НомерЗакладки));
КонецПроцедуры 



// нужно подумать, как красить будем
Процедура РаскраситьСписокДокументов(тзДок="")
	
	Если ПустоеЗначение(тзДок)=1 Тогда 
		тз = СоздатьОбъект("ТаблицаЗначений");
		ТЗВСД.Выгрузить(тз);
	Иначе
		тз = тзДок;
	КонецЕсли;	
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл		

		
		Если ПустоеЗначение(тз.ДокВСД)=0 Тогда
			Если СокрЛП(тз.ДокВСД.Статус)="COMPLETED" Тогда
				тз.сЦвет = цвЗеленый;
			иначеЕсли (ПустоеЗначение(тз.ДокВСД.Статус)= 1) или (СокрЛП(тз.ДокВСД.Статус)="CONFIRMED") Тогда
				тз.сЦвет = "";
			иначе
				тз.сЦвет = цвЖелтый;
			КонецЕсли;
			Если (ПустоеЗначение(тз.докВСД.Отправитель_ХозСубъект) = 1) или
//	Импорт			(ПустоеЗначение(тз.докВСД.Отправитель_Площадка) = 1) или
				(ПустоеЗначение(тз.ДокВСД.ПроизводителиСписок) = 1) Тогда
			    тз.сЦвет = цвКрасный;
			КонецЕсли;
			//Если (ПустоеЗначение(тз.докВСД.Перевозчик_ХозСубъект) = 1)  Тогда
			//    тз.сЦвет = цвКрасный;
			//КонецЕсли;
		Иначе
			Если _НеЗагружать = 1 Тогда
				Если СокрЛП(тз.Статус)="COMPLETED" Тогда
					тз.сЦвет = цвЗеленый;
				иначеЕсли (ПустоеЗначение(тз.Статус)= 1) или (СокрЛП(тз.Статус)="CONFIRMED") Тогда
					тз.сЦвет = "";
				иначе
					тз.сЦвет = цвЖелтый;
				КонецЕсли;
				Если (ПустоеЗначение(тз.Отправитель_ХозСубъект) = 1) или
//Импорт					(ПустоеЗначение(тз.Отправитель_Площадка) = 1) или
					(ПустоеЗначение(тз.ПроизводителиСписок) = 1) Тогда
				    тз.сЦвет = цвКрасный;
				КонецЕсли;
			Иначе
				тз.сЦвет = цвКрасный;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекСтрока = ТЗВСД.ТекущаяСтрока();
	
	ТЗВСД.Загрузить(тз);
	
	ТЗВСД.ВыводитьПиктограммы("Пометка");

	Если ПустоеЗначение(ТекСтрока)=1 Тогда 
		ТЗВСД.ТекущаяСтрока(1);
	Иначе
		ТЗВСД.ТекущаяСтрока( ТекСтрока );
	КонецЕсли;
КонецПроцедуры

Функция УстановитьНомерАвтоВМаршрут(МаршрутСледования)
	// Через АПИ не работает - нельзя указать №№ авто при гашении
	//Переработать под обработку МеркурийМультимодальнаяПеревозка
	Рез = "";
	Сп = ЗначениеИзСтроки(МаршрутСледования); 
	зн="";
	Если Сп.ВыбратьСтроку(зн,"Маршрут") = 1 тогда
//		Сп.ПолучитьСтрокуПоНомеру(зн);
//		ТекНомерАвто = Сп.НомерАвто;
//		если ввестиСтроку(ТекНомерАвто,"номер Авто",30) = 1 Тогда
//			Сп.НомерАвто = СокрЛП(ТекНомерАвто);
//			Возврат ЗначениеВСтроку(Сп);
//		КонецЕсли;
	КонецЕсли;
	Возврат Рез;
КонецФункции

Процедура Клик()
	Если ТЗВСД.ТекущаяСтрока() = 0 Тогда
	    Возврат;
	КонецЕсли;
	текСтр = ТЗВСД.ТекущаяСтрока();
	текКол = ТЗВСД.ТекущаяКолонка();
	
	Если текКол="Пометка" Тогда		
		Пометка = ТЗВСД.Пометка;
		Если Пометка = 2 Тогда
			ТЗВСД.Пометка=1;
		Иначе
			ТЗВСД.Пометка=2;
		КонецЕсли;
	ИначеЕсли текКол = "ПроизводителиСписок" Тогда
		Сп = ЗначениеИзСтроки(ТЗВСД.ПроизводителиСписок); 
		зн="";
		Сп.ВыбратьСтроку(зн,"Производители");
	ИначеЕсли текКол = "МаршрутСледования" Тогда
		ИзмМаршрут = УстановитьНомерАвтоВМаршрут(ТЗВСД.МаршрутСледования);
		Если ПустоеЗначение(ИзмМаршрут) = 0 тогда
			ТЗВСД.МаршрутСледования = ИзмМаршрут;		
		КонецЕсли;
	ИначеЕсли текКол = "НомерПартии" Тогда
		Сп = ЗначениеИзСтроки(ТЗВСД.НомерПартии);
		Если ТипЗначенияСтр(Сп) = "СписокЗначений" Тогда
			зн="";
			Сп.ВыбратьЗначение(зн,"№ Партий");
		КонецЕсли;
	ИначеЕсли текКол = "ДокВСД" Тогда
		//не открывает, зараза
		Эл = ТЗВСД.ПолучитьЗначение(текСтр, текКол);	
		ОткрытьФорму(Эл);
	ИначеЕсли текКол = "УровниУпаковки" Тогда
		//не открывает, зараза
		стрУровни = ТЗВСД.ПолучитьЗначение(текСтр, текКол);	
		//ОткрытьФорму("Обработка.ВСД_УровниУпаковки",стрУровни);;
	   КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
	   ОткрытьФорму("Отчет", стрУровни, КаталогОбработки+"ВСД_УровниУпаковки.ert");
	ИначеЕсли текКол = "СвязанныеДокументы" Тогда
		Сп = ЗначениеИзСтроки(ТЗВСД.СвязанныеДокументы); 
		Сп.ВыбратьСтроку(,"Документы");
	ИначеЕсли текКол = "Номенклатура" Тогда
		ПодобратьИзменитьНоменклатуру(ТЗВСД);	
	Иначе
		текЗн = ТЗВСД.ПолучитьЗначение(ТекСтр, текКол);
		ВвестиЗначение(текЗн, "","Строка",100);
		ТЗВСД.УстановитьЗначение(текСтр, текКол, текЗн);
	КонецЕсли;
КонецПроцедуры 


//***************************


Процедура Фильтровать(тз)
	тз.ВыбратьСтроки();
	ТекСтрока =тз.КоличествоСтрок();
	Пока ТекСтрока >0 Цикл
		ТекПоставщик = тз.ПолучитьЗначение(ТекСтрока, "Отправитель_ХозСубъект");
		если ПустоеЗначение(ВыбПоставщик)=0 Тогда 
			Если ТекПоставщик <> ВыбПоставщик Тогда
				Сообщить(""+тз.ПолучитьЗначение(ТекСтрока, "uuid") +" "+ тз.ПолучитьЗначение(ТекСтрока, "НаименованиеПродукции") + " пропущен");
				тз.УдалитьСтроку(ТекСтрока);
			КонецЕсли;
		КонецЕсли;
			
		ТекСтрока=ТекСтрока-1;
	КонецЦикла;
КонецПроцедуры


Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="")
	// ЖД грузанем в ТЗ
	ТЗВСД.УдалитьСтроки();
	тз = СоздатьОбъект("ТаблицаЗначений");
	ТЗВСД.Выгрузить(тз);
	// Добавлен 3ий параметр функции в ГМ2
	ГМ2.ЗагрузитьXML_ВСД2(имяФайла, докОснование,тз);
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку()=1 Цикл
	    тз.Фирма = ВыбФирма;
	КонецЦикла;
	Фильтровать(тз);
	
	ТЗВСД.Загрузить(тз);

	ТЗВСД.ВыводитьПиктограммы("Пометка");	
	Возврат "";

КонецФункции


Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)

	Если Элемент = "СтрИмяФайла" Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		СтрИмяФайла = ик+иф;
	КонецЕсли;
	
	Если Элемент = "Отправитель_Площадка" Тогда
		//ЖД отфильтруем наши площадки
		ТекХС = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Если ПустоеЗначение(ТекХС) = 1 Тогда
			Возврат;
		КонецЕсли;
		
		тз = ГМ.ВыбратьВсеПлощадкиХС(ТекХС);	
		СписокОтбора = СоздатьОбъект("СписокЗначений");
	
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;	
        ОткрытьФорму("Справочник.ВСД_Площадка", СписокОтбора);
        ФлагПродолжения = 0;
		Возврат;
	КонецЕсли;	

КонецПроцедуры 


// Создает документы ВСД2_входящий в 1С
Процедура СоздатьВСД2Входящие()
	ВремТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗВСД.Выгрузить(ВремТЗ);
	ВремТЗ.ВыбратьСтроки();
	Пока ВремТЗ.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ВремТЗ.ВладелецХС)=1 Тогда
			Сообщить("Нет ХС владельца в справочнике ");
			продолжить;
		КонецЕсли;
				
		докОбъект = ГМ2.НайтиВСДпоUUID(ВремТЗ.uuid, "ВСД2_Входящий" );
		//(ДокОбъект.Проведен()=0) или 
		Если НЕ(СокрЛП(ДокОбъект.Статус) = "COMPLETED") Тогда    // или другие условия, пока считаем, что если не проведен - не отправлен.
			ДокОбъект.UUID = ВремТЗ.uuid;
			ДокОбъект.ВидВСД = ВремТЗ.ВидВСД; 
			
	        докОбъект.Статус = ВремТЗ.Статус;	

			ДокОбъект.Отправитель_ХозСубъект = ВремТЗ.Отправитель_ХозСубъект;
			ДокОбъект.Отправитель_Площадка = ВремТЗ.Отправитель_Площадка;
			
			ДокОбъект.Получатель_ХозСубъект = ВремТЗ.Получатель_ХозСубъект;
			
			ДокОбъект.Получатель_Площадка = ВремТЗ.Получатель_Площадка;
			Если Пустоезначение(ВремТЗ.Перевозчик_ХозСубъект) = 0 Тогда
			    ДокОбъект.Перевозчик_ХозСубъект = ВремТЗ.Перевозчик_ХозСубъект;
			КонецЕсли;
			ДокОбъект.ПроизводителиСписок  = ВремТЗ.ПроизводителиСписок;
			ДокОбъект.УровниУпаковки = ВремТЗ.УровниУпаковки;
			
			ДокОбъект.Продукция = ВремТЗ.Продукция;
			ДокОбъект.ВидПродукции = ВремТЗ.ВидПродукции;
			ДокОбъект.НаименованиеПродукции = ВремТЗ.НаименованиеПродукции;
			ДокОбъект.Продукция_Элемент = ВремТЗ.Продукция_Элемент;
	        
			ДокОбъект.Артикул = ВремТЗ.Артикул;
			ДокОбъект.GTIN = ВремТЗ.GTIN;
			ДокОбъект.Количество = Число(ВремТЗ.Количество);
			ДокОбъект.ЕдиницаИзмерения = ВремТЗ.ЕдиницаИзмерения;
            //Фасовка
			ДокОбъект.ФасовкаКоличество = Число(ВремТЗ.ФасовкаКоличество);
			Если ПустоеЗначение(ВремТЗ.ФасовкаФормаУпаковки)=0 Тогда
				ДокОбъект.ФасовкаФормаУпаковки = ВремТЗ.ФасовкаФормаУпаковки;
				ДокОбъект.ФасовкаЕдиницаИзм = ВремТЗ.ФасовкаЕдиницаИзм ; 
				ДокОбъект.ФасовкаОбъем = ВремТЗ.ФасовкаОбъем; 
			Иначе
				ДокОбъект.ФасовкаФормаУпаковки = "";
				ДокОбъект.ФасовкаЕдиницаИзм = ""; 
				ДокОбъект.ФасовкаОбъем = ""; 
			КонецЕсли;
	
			ДокОбъект.ДатаИзготовления1 = ВремТЗ.ДатаИзготовления1;
			ДокОбъект.ДатаИзготовления2 = ВремТЗ.ДатаИзготовления2;
	
			ДокОбъект.ДатаСрокГодности1 = ВремТЗ.ДатаСрокГодности1;
			ДокОбъект.ДатаСрокГодности2 = ВремТЗ.ДатаСрокГодности2;
			
			Попытка
				ДокОбъект.Фирма = ВыбФирма;
			Исключение	КонецПопытки;
			Попытка
				докОбъект.Автор = ГМ.ПолучитьАвтора();;
//			докОбъект.Филиал = глПользователь.Филиал;
			Исключение	КонецПопытки;
			
			докОбъект.всдсерия = ВремТЗ.всдсерия;
			докОбъект.всдномер = ВремТЗ.всдномер;
			докОбъект.всддата = ВремТЗ.всддата;
			докОбъект.термическоесостояние = ВремТЗ.термическоесостояние ;
			докОбъект.номеравто = ВремТЗ.номеравто;
			Попытка докОбъект.номерПолуприцепа = ВремТЗ.номерПолуприцепа; Исключение	КонецПопытки;
			Попытка докОбъект.номерКонтейнера = ВремТЗ.номерКонтейнера; Исключение	КонецПопытки;
			докОбъект.ТипТС = ВремТЗ.ТипТС;
			
			докОбъект.ВСДместность = ВремТЗ.ВСДместность;
			
//ЖД		докОбъект.ВСДэкспертиза = ВремТЗ.эксп;
 			докОбъект.РезультатыИсследований = ВремТЗ.РезультатыИсследований;
			докОбъект.особыеотметки = ВремТЗ.особыеотметки;
			докОбъект.ттнномер = ВремТЗ.ттнномер;
			докОбъект.ттндата = ВремТЗ.ттндата;
			докОбъект.Скоропортящийся = ВремТЗ.Скоропортящийся;
			докОбъект.Некачественный = ВремТЗ.Некачественный;
			докОбъект.cargoInspected=ВремТЗ.cargoInspected;
			докОбъект.ДатаДок = ВремТЗ.ДатаДок;
			
            ДокОбъект.Записать();
		    
		КонецЕсли;
		ВремТЗ.ДокВСД = ДокОбъект.ТекущийДокумент();
		
	КонецЦикла;
    ВремТЗ.Выгрузить(ТЗВСД); 
	ТЗВСД.ВыводитьПиктограммы("Пометка");
КонецПроцедуры

Процедура ОбработатьДанные()
	Если ФС.СуществуетФайл(СтрИмяФайла) = 0 Тогда
	    Сообщить("Отсутствует файл ответа");
		Возврат;
	КонецЕсли;
	ЗагрузитьXML_ВСД2(СтримяФайла); //Грузим в ТЗ
	Если _НеЗагружать = 0 Тогда
		СоздатьВСД2Входящие();    
	КонецЕсли;
	ПроставитьНоменклатуруВТЗ(ТЗВСД);
	РаскраситьСписокДокументов();	
КонецПроцедуры

// ВСД Входящий

Функция Проверка_ВСД2_Входящий(док) 

	//стандартное поведение функции	
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
// Импортный ВСД
//	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
//		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
//		результат = 0;
//	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
// Импортный ВСД	
//	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
//		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
//		результат = 0;
//	КонецЕсли;
	Если ПустоеЗначение(Док.ПроизводителиСписок)=1 Тогда 
		Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если док.ВидВСД = 1 Тогда 
		//бумажный
		Если ПустоеЗначение(док.ВсдНомер)=1 Тогда 
			Сообщить("Не указан ВсдНомер ","!");
			результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ВсдДата)=1 Тогда 
			Сообщить("Не указан ВсдДата ","!");
			результат = 0;
		КонецЕсли;
	Иначе
		//электронный
		Если ПустоеЗначение(док.UUID)=1 Тогда 
			Сообщить("Не указан UUID ","!");
			результат = 0;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда 
		Сообщить("Не указана ЕдиницаИзмерения ","!");
		результат = 0;
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Функция ВСД2_ВходящийБумажныйГашение_ЗапросXML(док,НаименованиеПродукции="")
	Запрос = "
    |              <vd:issueSeries>"+СокрЛП(док.ВСДСерия)+"</vd:issueSeries>
    |              <vd:issueNumber>"+СокрЛП(док.ВСДномер)+"</vd:issueNumber>
    |              <vd:issueDate>"+ ГМ.ДатаXML(док.ВсдДата) +"</vd:issueDate>
    |              <vd:vetDForm>"+СокрЛП(док.ФормаВСД)+"</vd:vetDForm>
    |              <vd:certifiedConsignment>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>";
	Если ПустоеЗначение(док.Отправитель_Площадка) = 0 Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
    ВремПолучатель_Площадка = ?(ПустоеЗначение(док.Получатель_Площадка) = 0,док.Получатель_Площадка,ГМ.СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
	Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>";

	
	Если ПустоеЗначение(СокрЛП(док.Перевозчик_ХозСубъект))=0 Тогда  //ЖД
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ПустоеЗначение(СокрЛП(док.ТипТС))=0 Тогда  //ЖД
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
//			|"; 
	
			Если СокрЛП(Док.ТипТС) = "1" Тогда
				Попытка
				Если ПустоеЗначение(док.номерКонтейнера)=0 Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
				
			    Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
				|";
				Попытка
				Если ПустоеЗначение(док.номерПолуприцепа)=0 Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
				
			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
//			|";
		КонецЕсли;
	Если ПустоеЗначение(док.ТермическоеСостояние) = 0 Тогда
	Запрос=Запрос+"			

	|              <vd:transportStorageType>"+ ГМ.ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</vd:transportStorageType>";
	КонецЕсли;

// сложный вариант с перегрузками Пример
//              <vd:shipmentRoute>
//                <vd:routePoint>
//                  <vd:sqnId>1</vd:sqnId>
//                  <vd:enterprise>
//                    <bs:guid>ac264dc6-a3eb-4b0f-a86a-9c9577209d6f</bs:guid>
//                  </vd:enterprise>
//                  <vd:nextTransport>
//                    <vd:transportType>1</vd:transportType>
//                    <vd:transportNumber>
//                      <vd:vehicleNumber>в206кв58</vd:vehicleNumber>
//                    </vd:transportNumber>
//                  </vd:nextTransport>
//                </vd:routePoint>
//              </vd:shipmentRoute>
	Запрос=Запрос+"			
	|              <vd:batch>
	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
	Иначе	
		Если ПустоеЗначение(НаименованиеПродукции) = 0 Тогда
			Запрос = Запрос + " <dt:name>"+ СокрЛП(НаименованиеПродукции) +"</dt:name> ";    
		Иначе
			Запрос = Запрос + " <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name> ";	
		КонецЕсли;
	КонецЕсли;	
			
//	Если ПустоеЗначение(док.GTIN) = 0 Тогда
//		Запрос = Запрос + "
//		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
//	КонецЕсли;
//	Если ПустоеЗначение(док.Артикул) = 0 Тогда
//		Запрос = Запрос + "
//		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
//	КонецЕсли;
	
// сведения о фасовке
	Если ПустоеЗначение(док.ФасовкаФормаУпаковки) = 0 Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ док.ФасовкаКоличество +"</dt:quantity>
		|               <dt:volume>"+ док.ФасовкаОбъем +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;


	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
			
		Если (ПустоеЗначение(док.ДатаИзготовления1) = 0) или (ПустоеЗначение(док.ДатаИзготовления2) = 0) или (ПустоеЗначение(док.ДатаИзготовления) = 0) Тогда
			Запрос = Запрос + "
        				|                <vd:dateOfProduction>"; 
		КонецЕсли;

		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Если (ПустоеЗначение(док.ДатаИзготовления)=0) Тогда
			Запрос = Запрос + "
			|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
		КонецЕсли;
		Если (ПустоеЗначение(док.ДатаИзготовления1) = 0) или (ПустоеЗначение(док.ДатаИзготовления2) = 0) или (ПустоеЗначение(док.ДатаИзготовления) = 0) Тогда
			Запрос = Запрос + "
				|                </vd:dateOfProduction>"; 
		КонецЕсли;
			
		Если (ПустоеЗначение(док.ДатаСрокГодности1) = 0) или (ПустоеЗначение(док.ДатаСрокГодности2) = 0) или (ПустоеЗначение(док.ДатаСрокГодности) = 0) Тогда
			Запрос = Запрос + "
				|                <vd:expiryDate>";
		КонецЕсли;

		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;  
		Если (ПустоеЗначение(док.ДатаСрокГодности)=0) Тогда
			Запрос = Запрос + "
			|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
		КонецЕсли;
		Если (ПустоеЗначение(док.ДатаСрокГодности1) = 0) или (ПустоеЗначение(док.ДатаСрокГодности2) = 0) или (ПустоеЗначение(док.ДатаСрокГодности) = 0) Тогда
			Запрос = Запрос + "
			|            </vd:expiryDate>";
		КонецЕсли;
		
		Попытка
			Если ПустоеЗначение(док.НомерПартии) = 0 Тогда
				ВремНомерПартии = ЗначениеИзСтроки(док.НомерПартии);
				Если ТипЗначенияСтр(ВремНомерПартии) = "СписокЗначений" Тогда
					Для _нп =1 по ВремНомерПартии.РазмерСписка() Цикл
						Запрос = Запрос + "
						|			<vd:batchID>"+СокрЛП(ВремНомерПартии.ПолучитьЗначение(_нп))+"</vd:batchID>";
					КонецЦикла;					
				Иначе
					Запрос = Запрос + "
					|			<vd:batchID>"+СокрЛП(док.НомерПартии)+"</vd:batchID>";
				КонецЕсли;
			КонецЕсли;	
		Исключение КонецПопытки;	
			
//			|           <vd:batchID>BN-875999954</vd:batchID>    Уникальный идентификатор производственной партии продукции.
		Запрос = Запрос + "
			|			<vd:perishable>"+ГМ.булево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ СокрЛП( док.Страна_Гуид) +"</bs:guid>
//			|              <bs:uuid>"+ СокрЛП( ГМ.СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:country>";


			
		Если ПустоеЗначение(Док.ПроизводителиСписок)=0 Тогда     //ЖД
			СпПроизводители = ЗначениеИзСтроки(Док.ПроизводителиСписок);
			СпПроизводители.ВыбратьСтроки();
			Пока СпПроизводители.ПолучитьСтроку() = 1 Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>
				|            			<bs:guid>"+ СокрЛП(СпПроизводители.Площадка.GUID) +"</bs:guid>
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(СпПроизводители.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+ГМ.булево(док.некачественный)+"</vd:lowGradeCargo>"; 
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
    ТЗУровни = ЗначениеИзСтроки(док.УровниУпаковки);
	Если ТипЗначенияСтр(ТЗУровни) = "ТаблицаЗначений" Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";

		ТЗУровни.ВыбратьСтроки();
		Пока ТЗУровни.ПолучитьСтроку()=1 Цикл
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+ТЗУровни.НомерУровня+"</dt:level>
			|                    <dt:packingType>";
			Если ПустоеЗначение(ТЗУровни.Упаковка) = 0 Тогда
				Запрос=Запрос+"
				|                      <bs:guid>"+ СокрЛП(ТЗУровни.Упаковка.GUID) +"</bs:guid>";
//			Иначе //было только наименование - переделывать ПолучитьФормуУпаковки????
//				Запрос=Запрос+"
//				|                      <bs:name>"+ СокрЛП(ТЗУровни.Упаковка.Наименование) +"</bs:name>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    </dt:packingType>
			|                    <dt:quantity>"+ ТЗУровни.Колво +"</dt:quantity>";
			СзМарк = ЗначениеИзСтроки(ТЗУровни.Маркировки);
			Если ТипЗначенияСтр(СзМарк) = "СписокЗначений" Тогда
			    кк=0;
				Для кк=1 по СзМарк.РазмерСписка() Цикл
					стрМарк="";
					ЗнМарк = СзМарк.ПолучитьЗначение(кк,стрМарк);
					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";

		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";

	КонецЕсли;

//		ТЗВСД.cargoInspected = ?(cargoInspected="true",1,0);//cargoInspected;
//		ТЗВСД.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(cargoExpertized); 
		


		Запрос=Запрос+"
	|              </vd:batch>
	|              </vd:certifiedConsignment>
    |              <vd:authentication>
    |                <vd:purpose>
    |                  <bs:guid>"+ СокрЛП( ГМ.СписокКонстант.Получить("Цель").Guid ) +"</bs:guid>
    |                </vd:purpose>
    |                <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>
    |                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
    |                <vd:locationProsperity>"+СокрЛП(Док.ВСДМестность)+"</vd:locationProsperity>
    |                <vd:specialMarks>"+СокрЛП(док.ОсобыеОтметки)+"</vd:specialMarks>
    |              </vd:authentication>";
//    |              <vd:precedingVetDocuments>ВСД №5891</vd:precedingVetDocuments> 
		Запрос=Запрос+"
    |              <vd:referencedDocument>
	|                <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
    |                <vd:issueDate>"+ ГМ.ДатаXML(док.ТтнДата) +"</vd:issueDate>
    |                <vd:type>1</vd:type>
    |                <vd:relationshipType>1</vd:relationshipType>
    |              </vd:referencedDocument>
    |              <vd:statusChange>
    |                <vd:status>CONFIRMED</vd:status>
    |                <vd:specifiedPerson>
    |                  <vd:fio>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_fio")) +"</vd:fio>
    |                  <vd:post>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_post")) +"</vd:post>
    |                </vd:specifiedPerson>
    |                <vd:actualDateTime>"+ ГМ.ДатаXML(док.ДатаДок,"T00:00:00") +"</vd:actualDateTime>
    |              </vd:statusChange>";
                
	
	Возврат Запрос;
КонецФункции

// Запрос на гашение ВСД входящего ЖД 30/01/2018
Функция ВСД2_входящийГашение_ЗапросXML(док,НаименованиеПродукции="")
	// что ставить в <merc:localTransactionId>a1</merc:localTransactionId>
	
		Запрос="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>  
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:processIncomingConsignmentRequest>
	|            <merc:localTransactionId>a1</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>";

//deliveryDate - Дата оформления входящей партии. Заменил <vd:deliveryDate>" + ГМ.ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>	
	Запрос = запрос +"
	|            <merc:delivery>
	|              <vd:deliveryDate>" + ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") + "</vd:deliveryDate>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>";
	Если ПустоеЗначение(док.Отправитель_Площадка) = 0 Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
    ВремПолучатель_Площадка = ?(ПустоеЗначение(док.Получатель_Площадка) = 0,док.Получатель_Площадка,ГМ.СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
	Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>
	|              <vd:consignment>
	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
	Иначе	
		Если ПустоеЗначение(НаименованиеПродукции) = 0 Тогда
			Запрос = Запрос + " <dt:name>"+ СокрЛП(НаименованиеПродукции) +"</dt:name> ";    
		Иначе
			Запрос = Запрос + " <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name> ";	
		КонецЕсли;
	КонецЕсли;	

// Почему-то ругается, если передать GTIN,  Format validation failed due to XML Schema rules:  Element 'globalID' not expected.
//просто Артикул проходит ??		
//	Если ПустоеЗначение(док.GTIN) = 0 Тогда
//		Запрос = Запрос + "
//		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
//	КонецЕсли;
//	Если ПустоеЗначение(док.Артикул) = 0 Тогда
//		Запрос = Запрос + "
//		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
//	КонецЕсли;
	
// сведения о фасовке
	Если ПустоеЗначение(док.ФасовкаФормаУпаковки) = 0 Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ док.ФасовкаКоличество +"</dt:quantity>
		|               <dt:volume>"+ док.ФасовкаОбъем +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;


	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
		Если (ПустоеЗначение(док.ДатаИзготовления1) = 0) или (ПустоеЗначение(док.ДатаИзготовления2) = 0) или (ПустоеЗначение(док.ДатаИзготовления) = 0) Тогда
			Запрос = Запрос + "
        				|                <vd:dateOfProduction>"; 
		КонецЕсли;

		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		
		Если (ПустоеЗначение(док.ДатаИзготовления)=0) Тогда
			Запрос = Запрос + "
			|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
		КонецЕсли;
		
		Если (ПустоеЗначение(док.ДатаИзготовления1) = 0) или (ПустоеЗначение(док.ДатаИзготовления2) = 0) или (ПустоеЗначение(док.ДатаИзготовления) = 0) Тогда
			Запрос = Запрос + "
				|                </vd:dateOfProduction>"; 
		КонецЕсли;
			
		Если (ПустоеЗначение(док.ДатаСрокГодности1) = 0) или (ПустоеЗначение(док.ДатаСрокГодности2) = 0) или (ПустоеЗначение(док.ДатаСрокГодности) = 0) Тогда
			Запрос = Запрос + "
				|                <vd:expiryDate>";
		КонецЕсли;

		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;  
		Если (ПустоеЗначение(док.ДатаСрокГодности)=0) Тогда
			Запрос = Запрос + "
			|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
		КонецЕсли;
		Если (ПустоеЗначение(док.ДатаСрокГодности1) = 0) или (ПустоеЗначение(док.ДатаСрокГодности2) = 0) или (ПустоеЗначение(док.ДатаСрокГодности) = 0) Тогда
			Запрос = Запрос + "
			|            </vd:expiryDate>";
		КонецЕсли;
		Попытка
			Если ПустоеЗначение(док.НомерПартии) = 0 Тогда
				ВремНомерПартии = ЗначениеИзСтроки(док.НомерПартии);
				Если ТипЗначенияСтр(ВремНомерПартии) = "СписокЗначений" Тогда
					Для _нп =1 по ВремНомерПартии.РазмерСписка() Цикл
						Запрос = Запрос + "
						|			<vd:batchID>"+СокрЛП(ВремНомерПартии.ПолучитьЗначение(_нп))+"</vd:batchID>";
					КонецЦикла;					
				Иначе
					Запрос = Запрос + "
					|			<vd:batchID>"+СокрЛП(док.НомерПартии)+"</vd:batchID>";
				КонецЕсли;
			КонецЕсли;	
		Исключение КонецПопытки;	
			
//			|           <vd:batchID>BN-875999954</vd:batchID>    Уникальный идентификатор производственной партии продукции.
		Запрос = Запрос + "
			|			<vd:perishable>"+ГМ.булево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ СокрЛП( док.Страна_Гуид) +"</bs:guid>
//			|              <bs:uuid>"+ СокрЛП( ГМ.СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:country>";


			
		Если ПустоеЗначение(Док.ПроизводителиСписок)=0 Тогда
			СпПроизводители = ЗначениеИзСтроки(Док.ПроизводителиСписок);
			СпПроизводители.ВыбратьСтроки();
			Пока СпПроизводители.ПолучитьСтроку() = 1 Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>
				|            			<bs:guid>"+ СокрЛП(СпПроизводители.Площадка.GUID) +"</bs:guid>
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(СпПроизводители.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+ГМ.булево(док.некачественный)+"</vd:lowGradeCargo>"; 
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
    ТЗУровни = ЗначениеИзСтроки(док.УровниУпаковки);
	Если ТипЗначенияСтр(ТЗУровни) = "ТаблицаЗначений" Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";

		ТЗУровни.ВыбратьСтроки();
		Пока ТЗУровни.ПолучитьСтроку()=1 Цикл
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+ТЗУровни.НомерУровня+"</dt:level>
			|                    <dt:packingType>";
			Если ПустоеЗначение(ТЗУровни.Упаковка.GUID) = 0 Тогда
				Запрос=Запрос+"
				|                      <bs:guid>"+ СокрЛП(ТЗУровни.Упаковка.GUID) +"</bs:guid>";
//			Иначе //было только наименование - переделывать ПолучитьФормуУпаковки????
//				Запрос=Запрос+"
//				|                      <bs:name>"+ СокрЛП(ТЗУровни.Упаковка.Наименование) +"</bs:name>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    </dt:packingType>
			|                    <dt:quantity>"+ ТЗУровни.Колво +"</dt:quantity>";
			СзМарк = ЗначениеИзСтроки(ТЗУровни.Маркировки);
			Если ТипЗначенияСтр(СзМарк) = "СписокЗначений" Тогда
			    кк=0;
				Для кк=1 по СзМарк.РазмерСписка() Цикл
					стрМарк="";
					ЗнМарк = СзМарк.ПолучитьЗначение(кк,стрМарк);
					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";

		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";

	КонецЕсли;



		Запрос=Запрос+"
	|              </vd:consignment>";
		Если ПустоеЗначение(СокрЛП(док.Перевозчик_ХозСубъект))=0 Тогда 
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ПустоеЗначение(СокрЛП(док.ТипТС))=0 Тогда 
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
//			|"; 
	
			Если СокрЛП(Док.ТипТС) = "1" Тогда
				Попытка
					// Странный важный момент - контейнер д.б. первым !
				Если ПустоеЗначение(док.номерКонтейнера)=0 Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;

				Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
				|"; 
				Попытка
				Если ПустоеЗначение(док.номерПолуприцепа)=0 Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
			
			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
//			|";
		КонецЕсли;
	Если ПустоеЗначение(док.ТермическоеСостояние) = 0 Тогда
	Запрос=Запрос+"
	|              <vd:transportStorageType>"+ ГМ.ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</vd:transportStorageType>";
	КонецЕсли;
    
	ТочкиМаршрута = ЗначениеИзСтроки(док.МаршрутСледования);
	Если ТипЗначенияСтр(ТочкиМаршрута) = "ТаблицаЗначений" Тогда
		Если ТочкиМаршрута.КоличествоСтрок() > 0 Тогда
			Запрос=Запрос+"	
            |  <vd:shipmentRoute>";
			ТочкиМаршрута.ВыбратьСтроки();
			Пока ТочкиМаршрута.ПолучитьСтроку() = 1 Цикл
				Запрос=Запрос+"	
	            |    <vd:routePoint>
    	        |      <vd:sqnId>"+ТочкиМаршрута.НомерТочки+"</vd:sqnId>
        	    |      <vd:enterprise>
            	|        <bs:guid>"+ТочкиМаршрута.ПредприятиеGUID+"</bs:guid>
	            |      </vd:enterprise>
				|      <vd:transshipment>"+ТочкиМаршрута.Перегрузка+"</vd:transshipment>  
				|      <vd:nextTransport>
        	    |        <vd:transportType>"+ТочкиМаршрута.ТипТС+"</vd:transportType>
            	|        <vd:transportNumber>";
				Если ПустоеЗначение(ТочкиМаршрута.номерКонтейнера) = 0 тогда
					Запрос=Запрос+"
	            	|          <vd:containerNumber>"+ТочкиМаршрута.номерКонтейнера+"</vd:containerNumber>";
				КонецЕсли;
				Если ПустоеЗначение(ТочкиМаршрута.НомерАвто) = 0 тогда
					Запрос=Запрос+"
	            	|          <vd:vehicleNumber>"+ТочкиМаршрута.НомерАвто+"</vd:vehicleNumber>";
				КонецЕсли;
				Если ПустоеЗначение(ТочкиМаршрута.номерПолуприцепа) = 0 тогда
					Запрос=Запрос+"
	            	|          <vd:trailerNumber>"+ТочкиМаршрута.номерПолуприцепа+"</vd:trailerNumber>";
				КонецЕсли;
				Запрос=Запрос+"
    	        |        </vd:transportNumber>
        	    |      </vd:nextTransport>
            	|    </vd:routePoint>";
	
			КонецЦикла;
			Запрос=Запрос+"	
            |  </vd:shipmentRoute>";
		КонецЕсли;
	КонецЕсли;
	
// сложный вариант с перегрузками Пример
//              <vd:shipmentRoute>
//                <vd:routePoint>
//                  <vd:sqnId>1</vd:sqnId>
//                  <vd:enterprise>
//                    <bs:guid>ac264dc6-a3eb-4b0f-a86a-9c9577209d6f</bs:guid>
//                  </vd:enterprise>
//                  <vd:nextTransport>
//                    <vd:transportType>1</vd:transportType>
//                    <vd:transportNumber>
//                      <vd:vehicleNumber>в206кв58</vd:vehicleNumber>
//                    </vd:transportNumber>
//                  </vd:nextTransport>
//                </vd:routePoint>
//              </vd:shipmentRoute>

	
	Запрос=Запрос+"			
	|              <vd:accompanyingForms>";
	
	Если ПустоеЗначение(док.ТтнНомер)=0 Тогда //не ясно, как гасить входящие без ТТН - похоже в Ветисе починили: стало гаситься. 
		Запрос=Запрос+"
		|                <vd:waybill>  
		|                  <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
		|                  <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
		|                  <vd:issueDate>"+ ГМ.ДатаXML(док.ТтнДата) +"</vd:issueDate>";
		Попытка
			Запрос=Запрос+"			
			|                  <vd:type>"+ док.ТтнТип +"</vd:type>";
		Исключение
			//Добавить Реквизит ттнТип в документ ВСД2_входящий
			Сообщить("Добавьте Реквизит ттнТип (число 1.0) в документ ВСД2_входящий");
			Сообщить("Отправляю с типом 1 - Товарно транспортная накладная");
			Запрос=Запрос+"			
			|                  <vd:type>1</vd:type>";
		КонецПопытки;
		Запрос=Запрос+"
		|                </vd:waybill>";
	Иначе
//		Запрос=Запрос+"
//		|                <vd:waybill>
//		|                  <vd:type>1</vd:type>
//		|                </vd:waybill>";
	КонецЕсли;
	
	Запрос=Запрос+"
	|                <vd:vetCertificate>";
	Если док.ВидВСД=1 Тогда
		Запрос = Запрос + ВСД2_ВходящийБумажныйГашение_ЗапросXML(док,НаименованиеПродукции);
	Иначе	
		Запрос=Запрос+"
		|                  <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>";
	КонецЕсли;
	
	Запрос=Запрос+"			
	|                </vd:vetCertificate>
	|              </vd:accompanyingForms>
	|            </merc:delivery>
	|            <merc:deliveryFacts>";
	Если док.ВидВСД=1 Тогда
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>";
	Иначе
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>";
	КонецЕсли;
	
//	|";
//<vd:docInspection> 	vd:DeliveryInspection 	[1..1] 	Соответствуют ли сведения о партии, указанной в ВСД, фактическим. 	
//<vd:responsible> 	dt:User 	[1..1] 	Пользователь, указавший результат соответствия. 	
//<vd:login> 	xs:NCName 	[0..1] 	Логин пользователя, зарегистрированного в системе Меркурий. 	<vd:login>user_ab_150101</vd:login>
//</vd:responsible> 				
//·<vd:result> 	vd:DeliveryInspectionResult 	[1..1] 	Результат соответствия. 	<vd:result>CORRESPONDS</vd:result>
//</vd:docInspection> 

	Запрос=Запрос+"			
	|              <vd:docInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:docInspection>
	|              <vd:vetInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:vetInspection>
	|              <vd:decision>ACCEPT_ALL</vd:decision>
	|            </merc:deliveryFacts>";
	
	// Акт несоотв.
   	Если _АктНесоотв = 1 Тогда
		Запрос = Запрос+"
		|            <merc:discrepancyReport>
	//	|              <vd:issueSeries>S1624387448</vd:issueSeries>  Для электронного акта несоответствия серия генерируется автоматически
	//	|              <vd:issueNumber>N1584929183</vd:issueNumber>
		|              <vd:issueDate>"+ ГМ.ДатаXML(ДатаАкта) +"</vd:issueDate>
		|              <vd:reason>
		|                <vd:name>"+СокрЛП(тПричинаАкта)+"</vd:name>
		|              </vd:reason>
		|              <vd:description>"+?(ПустоеЗначение(тОписаниеНесоответствия)=1,"Описание несоответствия",СокрЛП(тОписаниеНесоответствия)) +"</vd:description>
		|            </merc:discrepancyReport>";
    КонецЕсли;

	Запрос = Запрос+"
	|          </merc:processIncomingConsignmentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";	
	

	Возврат Запрос;
КонецФункции


Функция ПолучитьРезультат_ГашениеВСД2(applicationID, докСсылка="" ) Экспорт
	
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	ГМ.Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = ГМ.Компонента.SendRequestResult( applicationID );

	Если ПустоеЗначение(докСсылка)=0 Тогда
		Если ТипЗначенияСтр(докСсылка) = "Документ" Тогда
			ГМ.СохранитьСтатусЗапроса(докСсылка);
			ДокОб = СоздатьОбъект("Документ");
			ДокОб.НайтиДокумент(докСсылка);
			Если (СокрЛП(ДокОб.Статус)="COMPLETED") Тогда			
				ДокОб.Провести();
			КонецЕсли;
		Иначе
			// ТабЗначений
			докСсылка.applicationID = СокрЛП(ГМ.Компонента.ApplicationId);
			докСсылка.Статус 		= СокрЛП(ГМ.Компонента.Status);
			докСсылка.Комментарий = СокрЛП(ГМ.Компонента.ErrorMessage);	
				    
		КонецЕсли;
		
		Сообщить(" статус = "+докСсылка.Статус );
		Если ПустоеЗначение(СокрЛП(докСсылка.Комментарий))=0 Тогда
			Сообщить("Ошибка: "+докСсылка.Комментарий);
		КонецЕсли;	
		
	КонецЕсли;
    // Нужно партии загрузить 
	ГМ2.ЗагрузитьXML_Партии2(ГМ.Компонента.LogFilename, докссылка)	;
		
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции 


Функция Отправить_ВСД2_ВходящийГашение(док,НаименованиеПродукции="")

	//стандартное поведение функции	
	
	Если Проверка_ВСД2_Входящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	Если док.ВидВСД=1 Тогда
	    //Сообщить("Гашение Бумажного ВСД не предусмотрено");
		//Возврат 0;
	КонецЕсли;
   	Если _АктНесоотв = 1 Тогда
   		Если (ПустоеЗначение(тПричинаАкта) = 1) или (ДатаАкта = Дата(0)) Тогда
	    	Сообщить("Не указана Причина составления Акта либо его Дата составления");
			Возврат 0;
   		КонецЕсли;
    КонецЕсли;
	
	// !!!! Важно. привязал к выбору площадки на форме Функция ПриИзмененииПлощадки(), чтобы при гашении Партии записались на выбранную площадку
	
	ЗапросXML = ВСД2_входящийГашение_ЗапросXML(док,НаименованиеПродукции);
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции

//******************************************************************************
Процедура Отправка()
	ВремТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗВСД.Выгрузить(ВремТЗ);
	ВремТЗ.ВыбратьСтроки();
	Отправлено = 0;
	Пока ВремТЗ.ПолучитьСтроку() = 1 Цикл
		Если НЕ(ВремТЗ.Пометка = 2) Тогда
		    Продолжить;
		КонецЕсли;

		Если _НеЗагружать = 0 Тогда
			Если ПустоеЗначение(ВремТЗ.ДокВСД) = 1 Тогда
			    Продолжить;
			КонецЕсли;
			Если ВремТЗ.ДокВСД.Проведен() = 1 Тогда
			    Продолжить;
			КонецЕсли;
			Отправить_ВСД2_ВходящийГашение(ВремТЗ.ДокВСД,ВремТЗ.НаименованиеПродукции);
			ВремТЗ.Статус = ВремТЗ.ДокВСД.Статус;
			
		Иначе
			Если СокрЛП(ВремТЗ.Статус) = "COMPLETED" Тогда
				Сообщить("Партия уже оформлена. uuid "+ВремТЗ.uuid);
		    	Продолжить;
			КонецЕсли;
			Отправить_ВСД2_ВходящийГашение(ВремТЗ,ВремТЗ.НаименованиеПродукции); // не создаем документ ВСД2_Входящий в 1с
		КонецЕсли;
		
			
		Отправлено = Отправлено + 1;
		ВремТЗ.Пометка = 1;
	КонецЦикла;
	
	Если Отправлено>0 Тогда
    	ВремТЗ.Выгрузить(ТЗВСД); 
		РаскраситьСписокДокументов();    
	КонецЕсли;
	
КонецПроцедуры // Отправка()

// Получить ВСД для гашения от Меркурия

//*********************************

Функция  ПолучитьСписокВСД2_ОтветXML(appID)

	//стандартное поведение функции
	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	ГМ.Пауза( );
	
	Сообщить("Отправляем запрос " );
	Результат = ГМ.Компонента.SendRequestResult( appID );

	СтрИмяФайла = ГМ.Компонента.LogFilename;
	
	ОбработатьДанные(); // Загрузить в ТЗ, обработать ТЗ
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
		
	Возврат Результат;
КонецФункции



Функция  ПолучитьСписокВСД(Предприятие, vetDocumentType	= "INCOMING", vetDocumentStatus = "CONFIRMED", Смещение=0)
//	список ВСД может быть отфильтрован по следующим критериям
//	Тип ВСД:
//        входящий ВСД;				INCOMING
//        исходящий ВСД;			OUTGOING
//        производственный ВСД;		PRODUCTIVE
//        транспортный ВСД;			TRANSPORT
//        возвратный ВСД.			RETURNABLE 
//    Статус ВСД:
//        оформлен;		CONFIRMED 	Оформлен. Действующий сертификат, по которому разрешено совершать транзакцию с грузом. 
//        погашен;		UTILIZED 	Погашен. Действующий сертификат, по которому транзакция уже была совершена. 
//        аннулирован.	WITHDRAWN 	Аннулирован. Не действующий более сертификат.  

	
	//ПолучитьСписокВСД( Отправитель_Площадка, "INCOMING","CONFIRMED", 0)
	Если ПустоеЗначение(Предприятие.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
    
//	при Включенной отладке запросов закомментированный ниже вариант сработает
//	ГМ2.ПолучитьСписокВСД(Предприятие, vetDocumentType, vetDocumentStatus, Смещение);
//	СтрИмяФайла = ГМ.Компонента.LogFilename;
//	ОбработатьДанные(); // Загрузить в ТЗ, обработать ТЗ
//	Возврат "";
	~Метка:  //+               
	ЗапросXML = ГМ2.ПолучитьСписокВСД2_ЗапросXML(Предприятие, vetDocumentType, vetDocumentStatus, Смещение);
	
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
    Результат = "";
	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьСписокВСД2_ОтветXML(appID ); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьСписокВСД2_ОтветXML( appID );
			КонецЕсли;
		КонецЦикла;
	//+
		если Результат="REJECTED" тогда
			Перейти ~метка;
		КонецЕсли;
		//+
	КонецЕсли;
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции



Процедура ПриИзмененииФирмы()
	ГМ.Инициализация(Контекст);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	ПриИзмененииПлощадки();
		//ГМ2.Инициализация(ГМ);
		//ТЗВСД.УдалитьСтроки();
	//КонецЕсли;	
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
		ПриИзмененииФирмы();
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСФ

Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	ГМ._ПриИзмененииРазмераОкна(Контекст, ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПослеОткрытия()
	ГМ._ПослеОткрытия(Контекст);
КонецПроцедуры


Процедура ПриОткрытии()

	ВыбФирма = "";
	ГМ._ПриОткрытии(Контекст);

	_НеЗагружать = 1;
    ДатаАкта = ТекущаяДата();
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	Форма.Закладки.ДобавитьЗначение("Соответствия");
	          
	Форма.ИспользоватьСлой("Основной");	
	//ГМ.Инициализация(Контекст);        
	//ГМ.ЗагрузитьПараметрыВФорму(Контекст);        

	// 3. Глобавльный модуль Ветис.2.0
	ГМ2.Инициализация(ГМ);
		
	Парам = Форма.Параметр;
	Если ПустоеЗначение(Парам) = 1 Тогда
		////0. Получаем Фирму из Параметров
		//попытка
		//	стр = "";
		//	к = ГМ.ПараметрыФирм.ПолучитьЗначение(1,стр);
		//	Если Пустоезначение(стр) = 0 Тогда
		//		ВыбФирма = ЗначениеИзСтрокиВнутр(стр);
		//		ПриИзмененииФирмы();
		//	КонецЕсли;
		//Исключение
		//КонецПопытки;
	ИначеЕсли ТипЗначенияСтр(Парам)="Документ" Тогда  
		ВыбДокумент = (Парам);
		ВыбПоставщик = ГМ.НайтиХозСубъект( ВыбДокумент.Контрагент );
		//ЖД Необходимо при наличии нескольких ХС/Площадок
		//Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
		//	Попытка
				ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(ВыбДокумент); 
				ПриИзмененииФирмы();
				Попытка 
					Отправитель_Площадка = ГМ.найтиПлощадкуПоСкладу(ВыбДокумент.Склад);
					Если Пустоезначение(Отправитель_Площадка) = 1 Тогда
					    Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
						Сообщить("Установлена Площадка по умолчанию");
					Иначе
						ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);	
					КонецЕсли;				    
				Исключение КонецПопытки;				
			//Исключение КонецПопытки;
		//КонецЕсли;	
		ПолучитьСписокВСД( Отправитель_Площадка );
	ИначеЕсли ТипЗначенияСтр(Парам)="Строка" Тогда
		СтрИмяФайла = СокрЛП(Парам);
		ОбработатьДанные();
	ИначеЕсли ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		
		СтрИмяФайла = Парам.Получить("ФайлОтвета"); 
		Если ПустоеЗначение(Парам.Получить("Фирма")) = 0 Тогда
			ВыбФирма = Парам.Получить("Фирма");
			ПриИзмененииФирмы();
		КонецЕсли;
		
		Если ПустоеЗначение(Парам.Получить("Отправитель_ХозСубъект")) = 0 Тогда
			Отправитель_ХозСубъект = Парам.Получить("Отправитель_ХозСубъект");
		КонецЕсли;
		
		Если ПустоеЗначение(Парам.Получить("Фирма")) = 1 Тогда
			ВыбФирма = ГМ.ПолучитьФирмуПоХС(Отправитель_ХозСубъект);
			ПриИзмененииФирмы();
		КонецЕсли; 
		
		Если ПустоеЗначение(Парам.Получить("Отправитель_Площадка")) = 0 Тогда
			Отправитель_Площадка = Парам.Получить("Отправитель_Площадка");
			ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);	
		КонецЕсли;
		

		ОбработатьДанные();
	КонецЕсли;	

	Если Форма.МодальныйРежим() = 0 Тогда
		оПривязки.Привязка("ТЗВСД", "H", "Форма", "W", "Форма");
		оПривязки.Привязка("тзСоответствия", "H", "Форма", "W", "Форма");
		оПривязки.Привязка("кнЗакрыть","T","Форма");
		оПривязки.Привязка("рамкаРеквизит,рамкаНайти,текстШК,текстАртикул,РеквизитШК,РеквизитАртикул,кнНайтиШК,кнНайтиАртикул,кнНайтиПоПЭ,кнЗаписать","T","Форма");
	КонецЕсли;
	
КонецПроцедуры  


тзСоответствия.НоваяКолонка("сЦвет",,,,,1,);
//тзСоответствия.НоваяКолонка("ВладелецХС");  //1С Элемент справочника. owner
//тзСоответствия.НоваяКолонка("НаименованиеПродукции","Строка",200,,"Продукция");
тзСоответствия.НоваяКолонка("Номенклатура","Справочник.Номенклатура");
тзСоответствия.НоваяКолонка("Продукция_Элемент","Справочник.ВСД_Продукция_Элемент");
тзСоответствия.НоваяКолонка("Артикул");
тзСоответствия.НоваяКолонка("GTIN");
тзСоответствия.НоваяКолонка("Производитель");
//тзСоответствия.НоваяКолонка("ПроизводителиСписок");


ТЗВСД.НоваяКолонка("сЦвет",,,,,1,);
ТЗВСД.НоваяКолонка("Пометка",,,,,5,);


ТЗВСД.НоваяКолонка("ВладелецХС");  //1С Элемент справочника. owner
ТЗВСД.НоваяКолонка("НаименованиеПродукции","Строка",200,,"Продукция");
ТЗВСД.НоваяКолонка("Количество",,,,"Объем",10);

ТЗВСД.НоваяКолонка("Номенклатура","Справочник.Номенклатура");

ТЗВСД.НоваяКолонка("ВсдДата");
ТЗВСД.НоваяКолонка("ДокВСД");
ТЗВСД.НоваяКолонка("uuid");

ТЗВСД.НоваяКолонка("ФормаВСД");
ТЗВСД.НоваяКолонка("Статус");
ТЗВСД.НоваяКолонка("типВСД");


ТЗВСД.НоваяКолонка("ВсдСерия");
ТЗВСД.НоваяКолонка("ВсдНомер");


ТЗВСД.НоваяКолонка("GTIN");
ТЗВСД.НоваяКолонка("Артикул");
ТЗВСД.НоваяКолонка("ФасовкаФормаУпаковки");
ТЗВСД.НоваяКолонка("ФасовкаНаименование");
ТЗВСД.НоваяКолонка("ФасовкаКоличество");
ТЗВСД.НоваяКолонка("ФасовкаЕдиницаИзм");
ТЗВСД.НоваяКолонка("ФасовкаОбъем");

ТЗВСД.НоваяКолонка("ДатаДок");
ТЗВСД.НоваяКолонка("Отправитель_ХозСубъект");
ТЗВСД.НоваяКолонка("Отправитель_Площадка");
ТЗВСД.НоваяКолонка("Получатель_ХозСубъект");
ТЗВСД.НоваяКолонка("Получатель_Площадка");
ТЗВСД.НоваяКолонка("Продукция");
ТЗВСД.НоваяКолонка("ВидПродукции");
ТЗВСД.НоваяКолонка("Продукция_Элемент");


//ТЗВСД.НоваяКолонка("productItemUuid");

ТЗВСД.НоваяКолонка("ЕдиницаИзмерения");
ТЗВСД.НоваяКолонка("ДатаИзготовления1","Дата");
ТЗВСД.НоваяКолонка("ДатаИзготовления");
ТЗВСД.НоваяКолонка("ДатаИзготовления2","Дата");
ТЗВСД.НоваяКолонка("ДатаСрокГодности1","Дата");
ТЗВСД.НоваяКолонка("ДатаСрокГодности");
ТЗВСД.НоваяКолонка("ДатаСрокГодности2","Дата"); 
ТЗВСД.НоваяКолонка("НомерПартии","Строка",300);
ТЗВСД.НоваяКолонка("ПроизводителиСписок");
ТЗВСД.НоваяКолонка("УровниУпаковки");
ТЗВСД.НоваяКолонка("ТипТС");
ТЗВСД.НоваяКолонка("номеравто");
ТЗВСД.НоваяКолонка("номерПолуприцепа");
ТЗВСД.НоваяКолонка("номерКонтейнера");
ТЗВСД.НоваяКолонка("термическоесостояние");
ТЗВСД.НоваяКолонка("ВСДместность");
ТЗВСД.НоваяКолонка("особыеотметки");
//ТЗВСД.НоваяКолонка("Эксп");
ТЗВСД.НоваяКолонка("ТтнТип","Число",1,0);
ТЗВСД.НоваяКолонка("ТтнСерия");
ТЗВСД.НоваяКолонка("ТтнНомер");
ТЗВСД.НоваяКолонка("ТтнДата","Дата");
ТЗВСД.НоваяКолонка("РезультатыИсследований");
ТЗВСД.НоваяКолонка("cargoInspected");    

ТЗВСД.НоваяКолонка("Перевозчик_ХозСубъект");
ТЗВСД.НоваяКолонка("Скоропортящийся");
ТЗВСД.НоваяКолонка("Некачественный");
//ТЗВСД.НоваяКолонка("страна_ууид");
ТЗВСД.НоваяКолонка("страна_гуид");
ТЗВСД.НоваяКолонка("Фирма");
ТЗВСД.НоваяКолонка("ВидВСД");
ТЗВСД.НоваяКолонка("applicationID");
ТЗВСД.НоваяКолонка("Комментарий");
ТЗВСД.НоваяКолонка("СвязанныеДокументы"); 
ТЗВСД.НоваяКолонка("МаршрутСледования");

//ТЗВСД.НоваяКолонка("owner");

ЦвЖелтый 	= "FONT[0]BRUSH[65535]FONT_S[0]BRUSH_S[65535]                       ";
ЦвЗеленый 	= "FONT[0]BRUSH[65280]FONT_S[0]BRUSH_S[65280]                       ";
ЦвКрасный  	= "FONT[0]BRUSH[255]FONT_S[0]BRUSH_S[255]                           " ;
ЦвГолубой	= "FONT[0]BRUSH[13421619]FONT_S[0]BRUSH_S[13421619]                 ";
ЦвФиолетовый= "FONT[0]BRUSH[11665663]FONT_S[0]BRUSH_S[11665663]";


Сервис = СоздатьОбъект("Сервис");
Сервис.ВключитьРаскраскуТаблиц();


//ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");// = определение перенесено в ПриНачалеРаботыСистемы() Глобальный Модуль конфигурации