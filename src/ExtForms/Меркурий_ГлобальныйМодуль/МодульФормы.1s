//Автор: Синявский Филипп 
//phsin@kb99.pro

Перем Компонента Экспорт;

Перем СписокКонстант Экспорт;
//Перем КаталогМодуля;
Перем базаДанных Экспорт;
Перем ЭтоSQL Экспорт;
Перем ТестовыйРежим Экспорт;
Перем ТаблицаПереопределенныхФункций;
Перем ИмяDLL Экспорт; 
Перем ТермическиеУсловияПеревозки Экспорт;

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Конструктор()
	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");
	
	СписокКонстант = СоздатьОбъект("СписокЗначений");
	
	Сервис = СоздатьОбъект("Сервис");	
	
	//public enum TransportationStorageType 
	//{
    //    
    //    /// <remarks/>
    //    FROZEN,
    //    
    //    /// <remarks/>
    //    CHILLED,
    //    
    //    /// <remarks/>
    //    COOLED,
    //    
    //    /// <remarks/>
    //    VENTILATED,
    //}
	
	ТермическиеУсловияПеревозки = СоздатьОбъект("СписокЗначений");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("FROZEN", "1");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("CHILLED", "2");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("COOLED", "3");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("VENTILATED", "4");
	
КонецПроцедуры

Процедура Деструктор() 
КонецПроцедуры
//

//======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);
	
	
	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;	
	
	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;	
КонецФункции // МодульВыполнения
//======================================================================



//======= ФУНКЦИИ ПО СБОРУ ИНФОРМАЦИИ О КЛИЕНТЕ ==============

Функция ПолучитьИНН(ВыбКлиент) экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИНН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИНН(ВыбКлиент);
	КонецЕсли;	
	//}
	
	//стандартное поведение функции
	Попытка		
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	
	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);
	КонецЕсли;
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьКПП(ВыбКлиент) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьКПП");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьКПП(ВыбКлиент);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
	Иначе
		Возврат "";

	КонецЕсли;
КонецФункции // ПолучитьКПП() //mbIkola - функция изменена

Функция ПолучитьОГРН(ВыбКлиент) экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОГРН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОГРН(ВыбКлиент);
	КонецЕсли;	
	//}
	
	//стандартное поведение функции
	Попытка		
		Возврат ВыбКлиент.ОГРН;
	Исключение
	КонецПопытки;

	Возврат "";
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьАвтора() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАвтора");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАвтора();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат глПользователь;
КонецФункции

Функция ПолучитьОсновнуюФирму() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОсновнуюФирму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОсновнуюФирму();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции

Функция ПолучитьФилиал() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФилиал");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФилиал();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции


//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============

Функция ДатаXML(ВыбДата, Время="") Экспорт
	стрДата = ""+ДатаГод(ВыбДата)+"-";
	Если ДатаМесяц(ВыбДата)<10 ТОгда 
		стрДата=стрДата+"0"+ДатаМесяц(ВыбДата)+"-";
	Иначе
		стрДата=стрДата + ДатаМесяц(ВыбДата) + "-";
	КонецЕсли; 
	Если ДатаЧисло(ВыбДата)<10 Тогда 
		стрДата=стрДата + "0" + ДатаЧисло(ВыбДата);
	Иначе
		стрДата=стрДата + ДатаЧисло(ВыбДата);
	КонецЕсли;
		
	стрДата=стрДата+Время;
	
	Возврат стрДата;
КонецФункции

Функция булево(знЧисло) Экспорт

	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции


//Найти ошибки в XML ответе сервера и показать в строке сообщений
Функция НайтиОшибки() Экспорт
	Результат=0;
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
  
	Попытка
	    errors=objDom.selectNodes("//error") ;
		Если errors.length>0 Тогда 
			Сообщить("Ошибок = "+errors.length+" ","!!");
		    Для i1 = 0 По errors.length - 1 Цикл
		        error=errors.item(i1);
				Сообщить("ОШИБКА: "+error.text,"!!");
				Результат=Результат+1;
			КонецЦикла;
		КонецЕсли;
	Исключение
	КонецПопытки;
 
	Возврат Результат;
КонецФункции


Функция ИмяФайлаНастроек() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИмяФайлаНастроек");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИмяФайлаНастроек();
	КонецЕсли;	
	//}

	//стандартное поведение функции

	КаталогМодуля = КаталогИБ();
	
	//Сформируем полное имя файла настроек
	возврат КаталогМодуля+"Меркурий_Параметры_"+ИмяПользователя()+".cfg";
КонецФункции

Функция УдалитьXML(ИмяФайла) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("УдалитьXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.УдалитьXML();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если СписокКонстант.Получить("ОтладкаЗапросовXML")=0 Тогда 
		Попытка
			ФС.УдалитьФайл(ИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция УстановитьНазваниеОкна(КонтекстФормы) 
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("УстановитьНазваниеОкна");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.УстановитьНазваниеОкна();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ТестовыйРежим = 0 Тогда
		Заголовок = "Меркурий - РАБОЧАЯ версия";
	Иначе
		Заголовок = "Меркурий - ТЕСТОВАЯ версия !!!";
	КонецЕсли;
	
	КонтекстФормы.Форма.Заголовок(Заголовок);
	Возврат 1;
КонецФункции

Функция ЗагрузитьПараметры() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПараметры");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПараметры();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(СписокКонстант)=1 Тогда 
		ИмяФайла = ИмяФайлаНастроек();
		СписокКонстант=СоздатьОбъект("СписокЗначений");
		
		Если фс.СуществуетФайл(ИмяФайла)=0 Тогда
			Сообщить("Файл с константами ["+ИмяФайла+"] не найден","!");
		Иначе
			ЗначениеИзФайла(ИмяФайла,СписокКонстант);
		КонецЕсли;
	КонецЕсли;	
	
	ТестовыйРежим = СписокКонстант.Получить("ТестовыйРежим");
КонецФункции
	
Функция ЗагрузитьПараметрыВФорму(КонтекстФормы) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПараметрыВФорму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПараметрыВФорму(КонтекстФормы);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(КонтекстФормы)=0 тогда
		УстановитьНазваниеОкна(КонтекстФормы);

		Попытка
			КонтекстФормы.param_username 		= СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_password 		= СписокКонстант.Получить("param_password");
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_issuer_id		= СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_service_id 		= СписокКонстант.Получить("param_service_id") ;
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_api_key 		= СписокКонстант.Получить("param_api_key") ;
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_intiator_login 	= СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_vetdoctor_fio 	= СписокКонстант.Получить("param_vetdoctor_fio");
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.param_vetdoctor_post 	= СписокКонстант.Получить("param_vetdoctor_post");
		Исключение КонецПопытки;
		Попытка	
		КонтекстФормы.Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.Отправитель_Площадка 	= СписокКонстант.Получить("Отправитель_Площадка");
		Исключение КонецПопытки;
		Попытка	
		КонтекстФормы.Страна 				= СписокКонстант.Получить("Страна");
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.Регион 				= СписокКонстант.Получить("Регион");
		Исключение КонецПопытки;
		Попытка
		КонтекстФормы.Город 				= СписокКонстант.Получить("Город");
		Исключение КонецПопытки;
		Попытка	
		КонтекстФормы.ВСД_Экспертиза 		= СписокКонстант.Получить("ВСД_Экспертиза");
			Если ПустоеЗначение(КонтекстФормы.ВСД_Экспертиза)=1 Тогда		
				КонтекстФормы.ВСД_Экспертиза 	= "Произ.лабор ";
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка	
		КонтекстФормы.ВСД_Местность 		= СписокКонстант.Получить("ВСД_Местность");
			Если ПустоеЗначение(КонтекстФормы.ВСД_Местность)=1  Тогда 
				КонтекстФормы.ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка
		КонтекстФормы.ВСД_ОсобыеОтметки 	= СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		Исключение КонецПопытки;
		Попытка		
		//КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
		КонтекстФормы.КаталогЛогов = СписокКонстант.Получить("КаталогЛогов");
			Если ПустоеЗначение(КонтекстФормы.КаталогЛогов )=1 Тогда 
				КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
			КонецЕсли;
			Если ФС.СуществуетФайл(КонтекстФормы.КаталогЛогов)=0 Тогда 
				ФС.СоздатьКаталог(КонтекстФормы.КаталогЛогов);
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка		
		КонтекстФормы.ПаузаСек 				= СписокКонстант.Получить("ПаузаСек");
			Если ПустоеЗначение(КонтекстФормы.ПаузаСек)=1 Тогда
				КонтекстФормы.ПаузаСек=10;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка		
		КонтекстФормы.НазваниеРеквизитаГрузополучатель  = СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
		Если ПустоеЗначение(КонтекстФормы.НазваниеРеквизитаГрузополучатель)=1 Тогда
			КонтекстФормы.НазваниеРеквизитаГрузополучатель="Контрагент";
		КонецЕсли;		
		Исключение КонецПопытки;
				
		Попытка
		КонтекстФормы.ОтладкаЗапросовXML  	= СписокКонстант.Получить("ОтладкаЗапросовXML");
		Исключение КонецПопытки;
		Попытка		
		КонтекстФормы.Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
		Исключение КонецПопытки;
		Попытка		
		КонтекстФормы.НазваниеРеквизитаКоличествоМест  = СписокКонстант.Получить("НазваниеРеквизитаКоличествоМест");
		Исключение КонецПопытки;
		Если ПустоеЗначение(КонтекстФормы.НазваниеРеквизитаКоличествоМест)=1 Тогда
			КонтекстФормы.НазваниеРеквизитаКоличествоМест="КоличествоМест";
		КонецЕсли;		
		Попытка
			КонтекстФормы.ПропускатьПустыеСвойства = СписокКонстант.Получить("ПропускатьПустыеСвойства");
		Исключение КонецПопытки;		
		Попытка
			КонтекстФормы.НазваниеВидаДокументаРеализация = СписокКонстант.Получить("НазваниеВидаДокументаРеализация");
			Если ПустоеЗначение(КонтекстФормы.НазваниеВидаДокументаРеализация)=1 Тогда 
				КонтекстФормы.НазваниеВидаДокументаРеализация = "Реализация";
			КонецЕсли;	
		Исключение КонецПопытки;		
		Попытка
			КонтекстФормы.НазваниеРеквизитаКоличество = СписокКонстант.Получить("НазваниеРеквизитаКоличество");
			Если ПустоеЗначение(КонтекстФормы.НазваниеРеквизитаКоличество)=1 Тогда 
				КонтекстФормы.НазваниеРеквизитаКоличество = "Количество";
			КонецЕсли;
		Исключение КонецПопытки;
		
		попытка
			КонтекстФормы.ОчищатьСправочникВСД_Партии = СписокКонстант.Получить("ОчищатьСправочникВСД_Партии");
		Исключение
		КонецПопытки;
		
		попытка
			КонтекстФормы.ТестовыйРежим = СписокКонстант.Получить("ТестовыйРежим");
		Исключение
		КонецПопытки;

		попытка
			КонтекстФормы.КаталогБиблиотек = СписокКонстант.Получить("КаталогБиблиотек");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция СохранитьПараметры(_СписокКонстант) Экспорт
		//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СохранитьПараметры");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СохранитьПараметры(_СписокКонстант);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	СписокКонстант = _СписокКонстант;
	
	ИмяФайла = ИмяФайлаНастроек();
	ЗначениеВФайл(ИмяФайла,СписокКонстант);
	Сообщить("Настройки сохранены в "+ИмяФайла,"i");	
КонецФункции

Функция Пауза() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Пауза");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Пауза();
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	ЗадержкаСекунд = СписокКонстант.Получить("ПаузаСек");
	Состояние("Пауза "+ЗадержкаСекунд+" сек");
	
	//tt2=_GetPerformanceCounter();			
	//Сообщить("Пауза = "+(tt2 - tt1));
	
	//Состояние("Пауза "+ПаузаСек+" сек");
	//scr = СоздатьОбъект("WScript.Shell");
	//scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ЗадержкаСекунд) ),0,1); 

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Пауза");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Пауза(ЗадержкаСекунд);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Компонента.Pause(ЗадержкаСекунд*1000); // в ms
КонецФункции

Функция ПолучитьОтветХС(applicationID, ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОтветХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОтветХС(applicationID, ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат 0;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("base:guid").text;
	uuid = enterprise.selectSingleNode("base:uuid").text;
	active = enterprise.selectSingleNode("base:active").text;
						
	Если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
		Возврат 1;
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
		Возврат 0;
	КонецЕсли;

КонецФункции


//======= ФУНКЦИИ ПО ПОИСКУ ИНФОРМАЦММ ==============

Функция НайтиФормуУпаковки(guid, name) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиФормуУпаковки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиФормуУпаковки(guid, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		//Сообщить("Форма упаковки не определена "+guid+" = "+name,"!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиЕдИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиЕдИзмерения(guid, uuid);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			//Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Единица измерения не определена ["+guid+"]","!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиПродукцию(guid) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПродукцию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПродукцию(guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена. Выполните загрузку справочника Продукция");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Guid;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция Найти_Продукция_Элемент(Название, Uuid="", ВСД_Продукция, ВСД_ВидПродукции) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Найти_Продукция_Элемент");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Найти_Продукция_Элемент(Название, Uuid, ВСД_Продукция, ВСД_ВидПродукции);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Рез = "";
	Uuid = СокрЛП(Uuid);
	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
	если ПустоеЗначение(Uuid)=0 Тогда			
		
		Если Спр.НайтиПоРеквизиту("Uuid",Uuid,1)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент UUID ["+Uuid+"] не найдена. Создан новый элемент. ");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.Записать();
			
		КонецЕсли;
	Иначе
		Если Спр.НайтиПоНаименованию(Название,0,0)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент название ["+Название+"] не найдена. Создан новый элемент.");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			//Спр.Uuid = Uuid;
			Спр.Записать();
		КонецЕсли;
	КонецЕсли;
	рез = Спр.ТекущийЭлемент();
	
	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВидПродукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВидПродукции(guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена. Выполните инициализацию", "!");
			//создать 
			//Спр.Новый();
			////Спр.Код = ;
			//Спр.Наименование = Guid;
			//Спр.GUID = guid;
			//Спр.Записать();
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid Вида продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиСтрануПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиСтрануПоGUID(GUID, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Страна");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Страна "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиРегионПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиРегионПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиРегионПоGUID(GUID, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Регион");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Регион "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиГородПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиГородПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиГородПоGUID(GUID, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Город");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			//Сообщить("Guid "+Guid+" не найден, создайте ВСД_Город, выполните синхронизацию");
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Город "+GUID);
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиХозСубъект(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХозСубъект");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХозСубъект(ВыбКлиент);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Попытка		
		Если ПустоеЗначение(ВыбКлиент.Плательщик) = 0 Тогда 
			ВыбКлиент = ВыбКлиент.Плательщик;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	
	Если ЭтоSQL=1 Тогда 	
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "select 
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	$СпрХС.GUID,
		|	$СпрХС.Контрагент
		|from $Справочник.ВСД_ХозСубъект as СпрХС 
		|where 
		|	$СпрХС.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	  	
	Иначе	
	
		Запрос = базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "select 
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	СпрХС.GUID,
		|	СпрХС.Контрагент
		|from [Справочник.ВСД_ХозСубъект] as СпрХС 
		|where 
		|	СпрХС.Контрагент=:ВыбКлиент
		|";

		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
	
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;
	
	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	Иначе
		СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		СпрХС.Новый();
		СпрХС.Наименование = ВыбКлиент.Наименование;
		СпрХС.Контрагент = ВыбКлиент;
		СпрХС.Записать();
		Сообщить("Создан новый элемент справочника ВСД_ХозСубъект: "+ВыбКлиент);
		
		результат = спрХС.ТекущийЭлемент();
	КонецЕсли;
	
	Возврат результат;
КонецФункции

Функция НайтиПартиюПоGUID(GUID) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПартиюПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПартиюПоGUID(GUID);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Спр = СоздатьОбъект("Справочник.ВСД_Партия");	
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from $Справочник.ВСД_Партия as Партия  
	  	|where 
	  	|	$Партия.GUID= :GUID
	  	|";
		RS.УстановитьТекстовыйПараметр("GUID", GUID);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
			
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from [Справочник.ВСД_Партия] as Партия  
	  	|where 
	  	|	Партия.GUID= :GUID
	  	|";	
		Запрос.Подставлять("GUID", GUID);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	Если ПустоеЗначение(тз)=1 Тогда 
		Спр.Новый();
		//Док.ДокОснование = ДокОснование;
	Иначе
		Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,1));
		//Спр.СделатьНеПроведенным();
		Спр.СнятьПометкуУдаления();
	конецЕсли;
  	
	Возврат  Спр;
КонецФункции

Функция НайтиВСДпоUUID( uuid, ВидДокумента) 
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИмяФайлаНастроек");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИмяФайлаНастроек();
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		Если ПустоеЗначение(UUID)=0 Тогда 
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from $Документ."+ВидДокумента+" as ДокВСД  
		  	|where 
		  	|	( $ДокВСД.UUID = :uuid)
		  	|";			
			RS.УстановитьТекстовыйПараметр("uuid", uuid);  
			//RS.Отладка(1);
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			
		КонецЕсли;
	Иначе
		Если ПустоеЗначение(UUID)=0 Тогда 	
			Запрос = базаДанных.НовыйЗапрос();
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from [Документ."+ВидДокумента+"] as ДокВСД  
		  	|where 
		  	|	( ДокВСД.UUID = :uuid)
		  	|";	
			Запрос.Подставлять("uuid", uuid);
			//тз.Отладка();
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	
		КонецЕсли;
	КонецЕсли;
	
	Возврат тз;
КонецФункции

Функция НайтиВСДпоApplicationId(applicationId, ВидДокумента) 
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВСДпоApplicationId");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВСДпоApplicationId(applicationId, ВидДокумента);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД  
	  	|where 
	  	|($ДокВСД.applicationId = :applicationId) 
	  	|";
		RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	Иначе

		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД  
	  	|where 
	  	|	(ДокВСД.applicationId= :applicationId) 
	  	|";	
		Запрос.Подставлять("applicationId", applicationId);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	Возврат тз;
КонецФункции

// Поиск ВСД по UUID и/или ApplicationID
// ВариантПоиска = 1 - поиск только по 1 параметру ApplicationID / uuid
// ВариантПоиска = 2 - поиск только по 2 параметрам - сначала по uuid, потом по ApplicationID 
Функция НайтиВСД(ApplicationID, uuid, ВидДокумента, ВариантПоиска=2) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВСД(ApplicationID, uuid, ВидДокумента, ВариантПоиска) ;
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(UUID)=0 Тогда 	
		тз = НайтиВСДпоUUID(uuid, ВидДокумента );
		
		Если ВариантПоиска=2 Тогда 
			Если тз.КоличествоСтрок()=0 Тогда 
				тз = НайтиВСДпоApplicationId(ApplicationID, ВидДокумента );
			КонецЕсли;
		КонецЕсли;
	Иначе
		тз = НайтиВСДпоApplicationId(ApplicationID, ВидДокумента );
	КонецЕсли;

	//тз.ВыбратьСтроку();
	
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
		Док.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
	Иначе		
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));		
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;	
	
	Возврат Док;
КонецФункции

//****************** Площадки **********************************

Функция ХС_ПолучитьGuid(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьGuidХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьGuidХС(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат "ERROR";
	КонецЕсли;	
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");		
	Результат = Компонента.GetBusinessEntityByINN( ИНН );	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда

	  	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(Компонента.LogFilename);    
	    	
		Если НайтиОшибки()>0 Тогда 
			Возврат Результат;
		КонецЕсли;		
		
		Попытка			
		    enterprise=objDom.selectSingleNode("//businessEntity") ;
			guid = enterprise.selectSingleNode("guid").text;
			uuid = enterprise.selectSingleNode("uuid").text;
			active = enterprise.selectSingleNode("active").text;
		
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ХС);
			спр.GUID = GUID;
			спр.UUID = uuid;
			спр.Записать();
			Сообщить("Записан ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);			
		Исключение			
			Сообщить("Получен пустой ответ GetBusinessEntityByINN","!");
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции


Функция НайтиХСпоGUID(Guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХСпоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХСпоGUID(guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGUID(GUID, ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		

	enterprise = objDom.selectSingleNode("//enterprise") ;
						
	guid = enterprise.selectSingleNode("guid").text;
	uuid = enterprise.selectSingleNode("uuid").text;
		
	//updateDate = unit.selectSingleNode("updateDate").text;
	//createDate = unit.selectSingleNode("createDate").text;		
	name = enterprise.selectSingleNode("name").text;
	active = enterprise.selectSingleNode("active").text;
		
	address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
	
	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=0 Тогда 
		Спр.Новый();
		Спр.УстановитьНовыйКод("00");
		
	КонецЕсли;
	
	Спр.Наименование = name;
	Спр.Адрес = address;
	Спр.GUID = guid;
	Спр.UUID = uuid;	
	
	Если ПустоеЗначение(ХС)=1 Тогда
		Сообщить("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ","!!");
		//Возврат;
	Иначе 
		Спр.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;	
	
	спр.Записать();
	Сообщить("Записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+ Guid);		
	
КонецФункции

Функция ЗагрузитьПлощадки(ХС)	Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадки(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда 
		ХС_ПолучитьGuid(ХС);

		//{обновим ссылку на объект		
		Спр_ХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр_ХС.НайтиЭлемент(ХС);
		ХС = Спр_ХС.ТекущийЭлемент();
		//}
	КонецЕсли;
	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда 
		Сообщить("В ХозСубъекте ["+ХС+"] не указан GUID","!");
		Возврат "";
	КонецЕсли;
	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
    activityLocationList = objDom.selectNodes("//activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
						
		guid = activityLocation.selectSingleNode("enterprise").selectSingleNode("guid").text;
		
    	ЗагрузитьПлощадкуПоGUID(guid, ХС);
					
	КонецЦикла;
	
	Сообщить("Загрузка площадок завершена","i");
КонецФункции

Функция ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС="", тзПлощадки) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGuidТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС, тзПлощадки);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Сообщить("Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
    enterprise = objDom.selectSingleNode("//enterprise") ;
						
	guid = enterprise.selectSingleNode("guid").text;
	uuid = enterprise.selectSingleNode("uuid").text;
		
	updateDate = enterprise.selectSingleNode("updateDate").text;
	createDate = enterprise.selectSingleNode("createDate").text;		
	name = enterprise.selectSingleNode("name").text;
	active = enterprise.selectSingleNode("active").text;
		
	address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
	
	Попытка
		owner = enterprise.selectSingleNode("owner").selectSingleNode("guid").text;
		ownerName = enterprise.selectSingleNode("owner").selectSingleNode("name").text;
	Исключение
		owner="";
	КонецПопытки;
	
	Если owner<>СокрЛП(ХС.GUID) Тогда 
		Сообщить("Площадка пропущена ["+name+"] принадлежит другому ХозСубъекту ["+ownerName+"] ","!");
		//Возврат;
	КонецЕсли;
	
	тзПлощадки.НоваяСтрока();
	
	тзПлощадки.Наименование = name;
	тзПлощадки.Адрес = address;
	тзПлощадки.Активна = active;
	тзПлощадки.GUID = guid;
	тзПлощадки.UUID = uuid;
	тзПлощадки.ДатаСоздания = createDate;
	тзПлощадки.ДатаИзменения = updateDate;
	Если ПустоеЗначение(owner)=0 тогда 
		тзПлощадки.ХозСубъект = НайтиХСпоGUID(owner);
		//тзПлощадки.ХозСубъектНаименование = ownerName;
	Иначе
		тзПлощадки.ХозСубъект = ХС;
		//тзПлощадки.ХозСубъектНаименование = ХС.Наименование;
	КонецЕсли;
		
	Сообщить("Загружена информация о площадке ["+name+"] GUID = "+ guid,"i");		
	
	УдалитьXML( Компонента.LogFilename );
КонецФункции

Функция ЗагрузитьПлощадкиТЗ(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкиТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкиТЗ(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");	
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");
	
    activityLocationList = objDom.selectNodes("//activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
						
		guid = activityLocation.selectSingleNode("enterprise").selectSingleNode("guid").text;
		
    	ЗагрузитьПлощадкуПоGuidТЗ(guid, ХС, тзПлощадки);
					
	КонецЦикла;
	
	Сообщить("Загрузка информации о площадках завершена","i");
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");	

	КаталогОбработки = СписокКонстант.Получить("КаталогМодуля");
	
	ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");	
	
	УдалитьXML( Компонента.LogFilename );
КонецФункции

Функция НайтиПлощадку(Guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадку");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадку(Guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
			//создать площадку

			ЗагрузитьПлощадкуПоGUID(guid);
			
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("ВСД_Площадка не найдена ["+Guid+"]","!");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Функция НайтиПлощадкуПоКонтрагенту(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоКонтрагенту");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоКонтрагенту(ВыбКлиент);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	результат = "";
	
	Если ЭтоSQL=1 Тогда 	
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "select 
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	$СпрПл.GUID,
		|	$СпрПл.Контрагент
		|from $Справочник.ВСД_Площадка as СпрПл 
		|where 
		|	$СпрПл.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	  	
	Иначе	
		Запрос = базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "select 
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	СпрПл.GUID,
		|	СпрПл.Контрагент
		|from [Справочник.ВСД_Площадка] as СпрПл 
		|where 
		|	СпрПл.Контрагент=:ВыбКлиент
		|";
		
		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
	
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;
	
	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	КонецЕсли;
	
	Возврат результат;
КонецФункции

Функция НайтиПлощадкуПоСкладу(ВыбСклад) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоСкладу");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоСкладу(ВыбСклад);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Рез = "";
	если ПустоеЗначение(ВыбСклад)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("Склад",ВыбСклад,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка со складом ["+ВыбСклад+"] не найдена: ","!");
			//создать площадку

			//ЗагрузитьПлощадкуПоGUID(guid);
			
		КонецЕсли;
	Иначе
		Сообщить("не указан склад Площадки","!");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкиПоНазванию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		Сообщить("Не указан ХозСубъект GUID ","!");
		Возврат 0;
	КонецЕсли;
	
	
	Стр = СокрЛП(ХС.Контрагент.ЮрФизЛицо.ПолнНаименование);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ЮрФизЛицо.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ]","i");		
	Результат = Компонента.GetRussianEnterpriseListByName( стр, СокрЛП(Регион.GUID) );
	//Отладка();
	
	Если Результат="SUCCESS" Тогда		
		
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
		тзПлощадки.НоваяКолонка("Наименование");
		тзПлощадки.НоваяКолонка("Адрес");
		тзПлощадки.НоваяКолонка("Активна");
		тзПлощадки.НоваяКолонка("GUID");
		тзПлощадки.НоваяКолонка("UUID");
		//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");	
		тзПлощадки.НоваяКолонка("ХозСубъект");
		тзПлощадки.НоваяКолонка("ДатаСоздания");
		тзПлощадки.НоваяКолонка("ДатаИзменения");
		
		objDom=СоздатьОбъект("MSXML2.DOMDocument");
		objDom.load(Компонента.LogFilename);    
		
		Если НайтиОшибки()>0 Тогда 
			Возврат Результат;
		КонецЕсли;		
		
		enterpriseList = objDom.selectNodes("//enterprise") ;
		Для i1 = 0 По enterpriseList.length - 1 Цикл
			enterprise=enterpriseList.item(i1);
			
			guid = enterprise.selectSingleNode("guid").text;
			uuid = enterprise.selectSingleNode("uuid").text;
			name = enterprise.selectSingleNode("name").text;
			active = enterprise.selectSingleNode("active").text;
			
			address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;			
			
			тзПлощадки.НоваяСтрока();
			тзПлощадки.Наименование = name;
			тзПлощадки.адрес = address;
			//тз.Регион = region;
			тзПлощадки.guid = guid;
			тзПлощадки.uuid = uuid;
			тзПлощадки.активна = active;
			тзПлощадки.ХозСубъект = ХС;
			
		КонецЦикла;
		
		Сообщить("Загрузка площадок завершена","i");
		
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
		СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");	
		
		КаталогОбработки = СписокКонстант.Получить("КаталогМодуля");
		
		ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");	
		
		УдалитьXML( Компонента.LogFilename );
		Возврат 1;
	КонецЕсли;
	
	УдалитьXML( Компонента.LogFilename );
	Возврат 0;
КонецФункции

Функция ВыбратьВсеПлощадкиХС(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВыбратьВсеПлощадкиХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВыбратьВсеПлощадкиХС(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";
	
	ВыбGuidХозСубъекта = (ХС.GUID);
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	Возврат тз;
КонецФункции

//Функция ОткрытьПлощадкиПоХС(КонтекстФормы,ВыбХС) Экспорт  //данная функция не работает в объекте (не работает ОткрытьПодбор)
//
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОткрытьПлощадкиПоХС");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ОткрытьПлощадкиПоХС(КонтекстФормы,ВыбХС);
//	КонецЕсли;	
//	//}
//
//	//стандартное поведение функции		
//	тз = ВыбратьВсеПлощадкиХС(ВыбХС);
//	
//	СписокОтбора = СоздатьОбъект("СписокЗначений");
//	
//	Тз.ВыбратьСтроки();
//	Пока ТЗ.ПолучитьСТроку()=1 Цикл
//		СписокОтбора.ДобавитьЗначение(тз.id);
//	КонецЦикла;			
//			
//	КонтекстФормы.ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);
//
//КонецФункции

//======= ФУНКЦИИ ПО ИНИЦИАЛИЗАЦИИ ХС ==============

Функция ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Владелец) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Загрузить_ВидПродукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Загрузить_ВидПродукции(guid, Владелец);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	Если ПустоеЗначение(Владелец)=1 Тогда 
		Сообщить("Не указан владелец "+guid,"!");
		Возврат 0;
	КонецЕсли;

	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetSubProductByProductList( guid );
	
	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	
	objDom=СоздатьОбъект("MSXML2.DOMDocument");
	objDom.load(Компонента.LogFilename);    
	
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	
	Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
	
	List = objDom.selectNodes("//subProduct") ;
	Для i1 = 0 По List.length - 1 Цикл
	    item = List.item(i1);

		uuid = item.selectSingleNode("uuid").text;
		guid = item.selectSingleNode("guid").text;
		st = item.selectSingleNode("status").text;
		updateDate = item.selectSingleNode("updateDate").text;
		createDate = item.selectSingleNode("createDate").text;		
		name = item.selectSingleNode("name").text;
		Попытка 
			code = item.selectSingleNode("code").text;
		Исключение
			code ="";
		КонецПопытки;
		
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.КодТНВЭД = code;
		Спр.Владелец = Владелец.ТекущийЭлемент();
		Спр.Записать();
		
	КонецЦикла;

	Возврат 1;
КонецФункции

Функция ЗагрузитьXML_ЕдиницыИзмерения(имяФайла) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ЕдиницыИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ЕдиницыИзмерения(имяФайла);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
    unitList = objDom.selectNodes("//unit") ;
    Для i1 = 0 По unitList.length - 1 Цикл
        unit=unitList.item(i1);
		
		uuid = unit.selectSingleNode("uuid").text;
		guid = unit.selectSingleNode("guid").text;
		//updateDate = unit.selectSingleNode("updateDate").text;
		//createDate = unit.selectSingleNode("createDate").text;		
		name = unit.selectSingleNode("name").text;
		factor = unit.selectSingleNode("factor").text;
		//commonUnitGuid = unit.selectSingleNode("commonUnitGuid").text;
		
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Коэффициент = factor;
			Спр.Записать();

    КонецЦикла;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьСтраны() Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьСтраны");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьСтраны();
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	Сообщить(" Запрос GetCountryList ","i");		
	Результат = Компонента.GetCountryList( );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Спр = СоздатьОбъект("Справочник.ВСД_Страна");
    countryList = objDom.selectNodes("//country") ;
    Для i1 = 0 По countryList.length - 1 Цикл
        country=countryList.item(i1);
		
		uuid = country.selectSingleNode("uuid").text;
		guid = country.selectSingleNode("guid").text;
		st = country.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = country.selectSingleNode("name").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Страна ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Страна ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка стран завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРегионы(Страна) Экспорт //проверить реквизит страна ... как о

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьРегионы");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьРегионы(Страна);
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	//Страна_GUID = ?(ПустоеЗначение(Страна)=1,"",Страна.GUID);
		
	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]","i");		
	Результат = Компонента.GetRegionList( СокрЛП(Страна.GUID) );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Спр = СоздатьОбъект("Справочник.ВСД_Регион");
    regionList = objDom.selectNodes("//region") ;
    Для i1 = 0 По regionList.length - 1 Цикл
        region=regionList.item(i1);
		
		uuid = region.selectSingleNode("uuid").text;
		guid = region.selectSingleNode("guid").text;
		st = region.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = region.selectSingleNode("name").text;
		view = region.selectSingleNode("view").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Регион ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Регион ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьГорода(Регион) Экспорт 

	//стандартное поведение функции			
	//Страна_GUID = ?(ПустоеЗначение(Страна)=1,"",Страна_GUID);
		
	Сообщить(" Запрос GetLocalityListByRegion "+Регион+" ["+СокрЛП(Регион.GUID) +"]","i");		
	Результат = Компонента.GetLocalityListByRegion( СокрЛП(Регион.GUID) );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Спр = СоздатьОбъект("Справочник.ВСД_Город");
    List = objDom.selectNodes("//locality") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);
		
		uuid = item.selectSingleNode("uuid").text;
		guid = item.selectSingleNode("guid").text;
		st = item.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = item.selectSingleNode("name").text;
		view = item.selectSingleNode("view").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Город ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Город ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьЕдиницыИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	Сообщить(" Запрос GetUnitList ","i");		
	Результат = Компонента.GetUnitList();
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		ЗагрузитьXML_ЕдиницыИзмерения( Компонента.LogFilename );

	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьПродукцию(Тип) Экспорт
	// http://help.vetrf.ru/wiki/ProductType

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьПродукцию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьПродукцию(Тип);
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetProductList( Тип );
	
	//ЗагрузитьXML_Номенклатура( Компонента.LogFilename );		
	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	
	objDom=СоздатьОбъект("MSXML2.DOMDocument");
	objDom.load(Компонента.LogFilename);    

	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
	
	productList = objDom.selectNodes("//product") ;
	Для i1 = 0 По productList.length - 1 Цикл
	    product=productList.item(i1);
		
		uuid = product.selectSingleNode("uuid").text;
		guid = product.selectSingleNode("guid").text;
		st = product.selectSingleNode("status").text;
		updateDate = product.selectSingleNode("updateDate").text;
		createDate = product.selectSingleNode("createDate").text;		
		name = product.selectSingleNode("name").text;
		Попытка
			code = product.selectSingleNode("code").text;
		Исключение
			code ="";
		КонецПопытки;
		productType = product.selectSingleNode("productType").text;
		
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.КодТНВЭД = code;
			Спр.Тип = ProductType;
			Спр.Записать();
			
		КонецЕсли;		
		
		Сообщить("Загрузка [Видов продукции] "+name);
		ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Спр.ТекущийЭлемент());
	КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции


//======= ОБЩИЕ ФУНКЦИИ РАБОТЫ С ВСД ==============

//Процедура Отладка();
//	Сообщить("ApplicationId = "+ Компонента.ApplicationId);
//	Сообщить("Status = "+ Компонента.Status);
//	Если ПустоеЗначение(Компонента.ErrorMessage)=0 Тогда 
//		Сообщить("ErrorMessage = "+ Компонента.ErrorMessage);
//	КонецЕсли;
//
//	appID = Компонента.ApplicationId; 	
//КонецПроцедуры

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

Функция СохранитьСтатусЗапроса(док) Экспорт 
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СохранитьСтатусЗапроса");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СохранитьСтатусЗапроса(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(док);

	ДокОб.applicationID = СокрЛП(Компонента.ApplicationId);
	ДокОб.Статус 		= СокрЛП(Компонента.Status);
	ДокОб.Комментарий = СокрЛП(Компонента.ErrorMessage);		
	ДокОб.Записать();
	Сообщить(" статус = "+ДокОб.Статус );
	Если ПустоеЗначение(СокрЛП(ДокОб.Комментарий))=0 Тогда
		Сообщить("Ошибка: "+ДокОб.Комментарий);
	КонецЕсли;	
КонецФункции

Функция ВыбратьВидДокументаВСД(type)
	
    //{ VetDocumentType 
    //    TRANSPORT, = 1	= Транспортный ВСД.	
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}
	
	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД_исходящий";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД_исходящий";
	Иначе
		Сообщить("Неопределенный вид ВСД ["+type+"]","!");
	КонецЕсли;
	
	Возврат рез;
КонецФункции


Функция ЗагрузитьXML_ВСД(имяФайла, докОснование, ВидДокумента)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ВСД(имяФайла, докОснование, ВидДокумента);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common' 
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' 
		|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications' 
		|xmlns:vetd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
		
	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
	vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;    
	
    Для i1 = 0 По vetDocumentList.length - 1 Цикл
        vetDocument=vetDocumentList.item(i1);
		uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;

		st 	 = vetDocument.selectSingleNode("vetd:status").text;
		type = vetDocument.selectSingleNode("vetd:type").text;
		
		ВидДокумента = ВыбратьВидДокументаВСД(type);
		
		createDate = vetDocument.selectSingleNode("vetd:issueDate").text;
		
		consignorBusinessEntity = vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		consignorEnterprise 	= vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		
		Попытка
			consigneeBusinessEntity = vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		Исключение
			consigneeBusinessEntity ="";
		КонецПопытки;
		Попытка
			consigneeEnterprise 	= vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			consigneeEnterprise = "";
		КонецПопытки;
		
		batch = vetDocument.selectSingleNode("vetd:batch");
		
		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;

		Попытка
			productItem = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='name']").text;
		Исключение
			Сообщить("Не удалось получить элемент [productItem]","!");
			productItem = "";
		КонецПопытки;
		
		Попытка
			productItemUuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:uuid").text;
		Исключение
			productItemUuid="";
		КонецПопытки;
		volume 		= batch.selectSingleNode("vetd:volume").text;
		unitGuid	= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
		
		Попытка
			packingFormUuid	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("bs:uuid").text;			
		Исключение
			//Сообщить("Не удалось получить элемент [packingForm] [uuid]","!");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("*[local-name()='name']").text;			
		Исключение
			packingFormName="";
			//Сообщить("Не удалось получить элемент [packingForm] [name]","!");
		КонецПопытки;

		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
						
		Попытка			
			producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		
		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
				
		//Если докОснование.Вид()="ВСД_исходящий" Тогда 
		//	ДокОснование = докСсылка.ДокОснование;
		//Иначе
		//	ДокОснование = докСсылка;
		//КонецЕсли;
		//
		//
		Если докОснование.Вид() = "ВСД_транзакция" Тогда 
			докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента, 1);
		Иначе			
			докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента);
		КонецЕсли;
		докОбъект.UUID = uuid;
		Если докОбъект.ТекущийДокумент() <> докОснование Тогда 
			докОбъект.ДокОснование = докОснование;
		КонецЕсли;
		//док.UUID = Компонента.DocUUID;					
		
		Попытка 
			докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity);
		Исключение			
		КонецПопытки;
		Попытка			
			докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise);
		Исключение			
		КонецПопытки;

		Попытка
			докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity);
		Исключение			
		КонецПопытки;

		Попытка			
			докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise);
		Исключение			
		КонецПопытки;
			
		докОбъект.Производитель_Площадка 	= НайтиПлощадку(producer);
		//Попытка
		//	докОбъект.Производитель_ХозСубъект = докОбъект.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;		
		//ДокПартия.Перевозчик_ХозСубъект = ;
		докОбъект.Продукция 	= НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= НайтиВидПродукции(subProduct);
		
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент(productItem, productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		
		докОбъект.Количество 	= Число(volume);
		докОбъект.КоличествоМест = Число(packingAmount);
		ФормаУпаковки 			= НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;	

		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );;
		
		докОбъект.Статус = st;		
		докОбъект.НаименованиеПродукции = productItem;
		докОбъект.Фирма = глПользователь.ОсновнаяФирма;
		докОбъект.Автор = глПользователь;
		Попытка
			докОбъект.Филиал = глПользователь.Филиал;
		Исключение
		КонецПопытки;
		
		докОбъект.ДатаДок = СтрокаВДату(createDate);
				
		докОбъект.Записать();
		докОбъект.Провести();

		Сообщить("Записан "+ВидДокумента+" от "+докОбъект.ДатаДок+" ["+uuid+"]");
	КонецЦикла;

	//проведём для красоты
	ДокОснованиеОбъект = СоздатьОбъект("Документ");
	ДокОснованиеОбъект.НайтиДокумент(докОснование);
	ДокОснованиеОбъект.Провести();
	
КонецФункции

//=========================== ВСД Партии =================================

Функция ПолучитьПартии_ТекстЗапросаXML(Отправитель_Площадка, Смещение=0) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии_ТекстЗапросаXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии_ТекстЗапросаXML(Отправитель_Площадка, Смещение);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	
	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e
	Запрос = "      <getStockEntryListRequest xmlns:sch='http://www.w3.org/2001/XMLSchema' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 	
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СписокКонстант.Получить("param_intiator_login")+"</co:login>
	|        </initiator>
	|        <bs:listOptions>
	|          <bs:count>1000</bs:count>
	|          <bs:offset>"+Смещение+"</bs:offset>
	|        </bs:listOptions>
	|        <ent:enterpriseGuid>"+СокрЛП(Отправитель_Площадка.GUID)+"</ent:enterpriseGuid>
	|      </getStockEntryListRequest>
	|";	
		
	Возврат Запрос;
КонецФункции

Функция ЗаписатьПартию(stockEntry)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаписатьПартию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаписатьПартию(stockEntry);
	КонецЕсли;	
	//}

	//стандартное поведение функции
		//t = stockEntry.text;	
		active = stockEntry.selectSingleNode("bs:active").text;
		
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("ns2:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		batch = stockEntry.selectSingleNode("ns2:batch");
		
		product 	= batch.selectSingleNode("ns2:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("ns2:subProduct").selectSingleNode("bs:guid").text;

		Попытка
			productItemName = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='name']").text;
		Исключение
			//Сообщить("Не удалось получить элемент [productItem]","!");
			productItemName = "";
		КонецПопытки;
		
		Попытка
			productItemUuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:uuid").text;
		Исключение			
			productItemUuid="";
		КонецПопытки;
		
		volume 		= batch.selectSingleNode("ns2:volume").text;
		unit		= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:guid").text;

		Попытка
			unitGuid	= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:guid").text;			
		Исключение
			unitGuid = "";			
		КонецПопытки;
		Попытка
			unitUuid	= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:uuid").text;			
		Исключение
			unitUuid = "";			
		КонецПопытки;
		
		Попытка
			packingFormUuid	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("bs:uuid").text;			
		Исключение
			//Сообщить("Не удалось получить элемент [packingForm] [uuid]","!");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("*[local-name()='name']").text;			
		Исключение
			packingFormName="";
			//Сообщить("Не удалось получить элемент [packingForm] [name]","!");
		КонецПопытки;

		packingAmount = batch.selectSingleNode("ns2:packingAmount").text;
			
		// dateOfProduction 1
		ДатаИзготовления1="";
		ДатаИзготовления="";
		попытка			
			год = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:day").text;
			ДатаИзготовления1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаИзготовления = ""+batch.selectSingleNode("ns2:dateOfProduction").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаИзготовления2="";
		попытка
			год = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:day").text;
			ДатаИзготовления2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		//ДатаСрокГодности
		попытка			
			год = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:day").text;
			ДатаСрокГодности1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаСрокГодности = ""+batch.selectSingleNode("ns2:expiryDate").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;
		ДатаСрокГодности2="";
		попытка
			год = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:day").text;
			ДатаСрокГодности2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		Попытка			
			producer = batch.selectSingleNode("ns2:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		
		Попытка				
			owner = batch.selectSingleNode("ns2:owner").selectSingleNode("bs:guid").text; //ХозСубъект
			ВладелецХС = НайтиХСпоGUID(owner);
		Исключение
			ВладелецХС = "";
		КонецПопытки;

		Партия = НайтиПартиюПоGUID(guid);
		
		Если active="false" Тогда 
			Сообщить("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна","i");
			Партия.Удалить(0);
			Возврат Партия;
		КонецЕсли;
		
		Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);
		
		//Партия.ДатаДок = СтрокаВДату(createDate);
		Партия.ДатаИзменения = СтрокаВДату( updateDate );
						
		Партия.Получатель_ХозСубъект = ВладелецХС;
		Партия.Получатель_Площадка = СписокКонстант.Получить("Отправитель_Площадка"); 
		Партия.Производитель_Площадка = НайтиПлощадку(producer);
		//Попытка
		//	Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
		Партия.Продукция 	= НайтиПродукцию(product);
		Партия.ВидПродукции = НайтиВидПродукции(subProduct);
		
		Партия.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
		
		Партия.Количество 	= Число(volume);
		Партия.КоличествоМест = Число(packingAmount);
		Партия.ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);;

		Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid, unitUUID );;
		
		Партия.ДатаИзготовления1 = ДатаИзготовления1;
		Партия.ДатаИзготовления2 = ДатаИзготовления2;
		Партия.ДатаИзготовления =  ДатаИзготовления;
		Партия.ДатаСрокГодности = ДатаСрокГодности;
		Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
		Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
		Партия.Статус = st;		
		Партия.GUID = guid;
		Партия.UUID = uuid;
		//Партия.ДатаИзменения = updateDate;
		Партия.НомерЗаписи = entryNumber;
		Партия.НаименованиеПродукции = productItemName;
		Если ПустоеЗначение(productItemName)=0 Тогда 
			Партия.Наименование = productItemName;
		Иначе
			Партия.Наименование = Партия.Продукция_Элемент.Наименование;
		КонецЕсли;
		Партия.Фирма = глПользователь.ОсновнаяФирма;
		Если ПустоеЗначение(Партия.Автор)=1 Тогда
			Партия.Автор = глПользователь;
		КонецЕсли;
		
		Попытка
			Партия.Филиал = глПользователь.Филиал;
		Исключение
		КонецПопытки;
		
		Партия.ВсдДата = СтрокаВДату(createDate);
		
		Если Партия.Количество=0 Тогда 
			
			Если ( ПустоеЗначение( Партия.ТекущийЭлемент() ) =0 ) Тогда
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
				Партия.Удалить(0);
			Иначе
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
		
		Партия.Записать();

		Возврат Партия;
КонецФункции
	
Функция ЗагрузитьXML_Партии(имяФайла, докОснование="") 
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_Партии");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_Партии(имяФайла, докОснование) ;
	КонецЕсли;	
	//}

	//стандартное поведение функции    
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
	Если НайтиОшибки()>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common' 
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' 
		|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications' 
		|xmlns:vetd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|" );
	
    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;	
	
	Сообщить("Получено "+stockEntryList.length+" записей","i");
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
					
		Партия = ЗаписатьПартию(stockEntry);
		
		Если ПустоеЗначение(докОснование)=0 Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецФункции

Функция ЗагрузитьXML_ВсеПартииОтвет(имяФайла) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ВсеПартииОтвет");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ВсеПартииОтвет(имяФайла);
	КонецЕсли;	
	//}

	//стандартное поведение функции    
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
	objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
	
	Если НайтиОшибки()>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
    objDom.setProperty("SelectionNamespaces", "xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications'" );
	
    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;
	Сообщить("Получено "+stockEntryList.length+" записей","i");
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
		
		ЗаписатьПартию(stockEntry);
			
    КонецЦикла;
    
КонецФункции

//=================== ВСД ==========================================

Функция ПолучитьРезультат_ВСД(applicationID, докСсылка ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьРезультат_ВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьРезультат_ВСД(applicationID, докСсылка );
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = Компонента.SendRequestResult( applicationID );

	Если ПустоеЗначение(докСсылка)=0 Тогда 
		СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД( Компонента.LogFilename, докСсылка, докСсылка.Вид());
	КонецЕсли;

	ЗагрузитьXML_Партии( Компонента.LogFilename );
		
	УдалитьXML( Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция  ОтправитьЗапросXML(ЗапросXML, док="") Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьЗапросXML(ЗапросXML, док);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(док)=0 Тогда 
		Сообщить("Отправляем запрос "+док.Вид()+" ["+док+"]" ,"i");
	Иначе
		Сообщить("Отправляем запрос" ,"i");
	КонецЕсли;
	результат = Компонента.SendRequestXML(ЗапросXML);

	appID = Компонента.ApplicationId;
	
	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции

//========================== Партии ===============================================

// новая версия - XML запрос формируем в 1С и отправляем в Ветис
Функция  ПолучитьПартии(Отправитель_Площадка, Смещение=0) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии(Отправитель_Площадка, Смещение);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	ЗапросXML = ПолучитьПартии_ТекстЗапросаXML(Отправитель_Площадка, Смещение);

	appID = ОтправитьЗапросXML(ЗапросXML);

	Возврат appID;
	
КонецФункции

Процедура ПолучитьПоследнююВерсиюПартии(ВыбПартия, Отправитель_Площадка)
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("У Площадки пустой GUID");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбПартия.GUID)=1 Тогда 
		Сообщить("В выбранной партии пустой GUID");
		Возврат;
	КонецЕсли;	

	Результат = Компонента.GetStockEntryVersionList(
		СокрЛП(ВыбПартия.GUID),
		СокрЛП(Отправитель_Площадка.GUID)
		);

	//Отладка();
			
КонецПроцедуры

Процедура ПолучитьПоследнююВерсиюПартииОтвет(appID)

	Результат = Компонента.GetStockEntryVersionListResult(СокрЛП(appID));

	//Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		//тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		//ЗаписатьПартии(тз);
				
	КонецЕсли;		
		
	
КонецПроцедуры

//========================== ВСД Входящий =================================

//Функция ПолучитьРезультат_ВСД_Входящий( докСсылка ) Экспорт
//	
//	ДокОб = СоздатьОбъект("Документ");
//	ДокОб.НайтиДокумент(докСсылка);
//	applicationID = СокрЛП(ДокОб.applicationID);
//	Если ПустоеЗначение(applicationID)=1 Тогда
//		Сообщить("Пустая ссылка applicationID","!");
//		Возврат "Пустая ссылка applicationID";
//	КонецЕсли;
//	
//	Сообщить("Отправляем запрос ВСД_Входящий_Результат ["+докСсылка+"]" );
//	Результат = Компонента.Send_VSD_IN_Result( applicationID );
//
//	СохранитьСтатусЗапроса(докСсылка);					
//	
//	ЗагрузитьXML_Партии( Компонента.LogFilename , докСсылка );
//		
//	ЗагрузитьXML_ВСД( Компонента.LogFilename, докСсылка, "ВСД_входящий");
//			
//	УдалитьXML( Компонента.LogFilename );
//	
//	Возврат Результат;
//		
//КонецФункции

Функция Проверка_ВСД_Входящий(док) 
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_Входящий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_Входящий(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
	//	Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
	//	Возврат;
	//КонецЕсли;

	Если док.ВидВСД = 1 Тогда 
		//бумажный
		Если ПустоеЗначение(док.ВсдНомер)=1 Тогда 
			Сообщить("Не указан ВсдНомер ","!");
			результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ВсдДата)=1 Тогда 
			Сообщить("Не указан ВсдДата ","!");
			результат = 0;
		КонецЕсли;
	Иначе
		//электронный
		Если ПустоеЗначение(док.UUID)=1 Тогда 
			Сообщить("Не указан UUID ","!");
			результат = 0;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда 
		Сообщить("Не указана ЕдиницаИзмерения ","!");
		результат = 0;
	КонецЕсли;	
	Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
		Сообщить("Не указана ФормаУпаковки ","!");
		результат = 0;
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Функция ВСД_входящий_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_входящий_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_входящий_ЗапросXML(док);
	КонецЕсли;	
	//}
	
	//док = СоздатьОбъект("Документ.ВСД_входящий")
	
	Если док.ВидВСД=1 Тогда 
		//бумажный
		
		Запрос = "<processIncomingConsignmentRequest 
			|  xmlns:sch='http://www.w3.org/2001/XMLSchema' 
			|  xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
			|  xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
			|  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
			|  xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
			|  xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
			|  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
			|  xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
			|  xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
			|  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
			|  xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
			|  <localTransactionId>[GUID]</localTransactionId>
			|  <initiator>
			|    <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
			|  </initiator>
			|";
		Запрос=Запрос+ "
			|        <delivery>
			|          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
			|          <vd:consignor>
			|            <ent:businessEntity>
			|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignor>
			|          <vd:consignee>
			|            <ent:businessEntity>
			|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignee>
			|";
		Запрос = Запрос + "
			|		<vd:consignment>
			|            <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|";
		Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
			Запрос = Запрос + "
			|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <pr:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
			|            <vd:dateOfProduction>
			|";
		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(док.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:dateOfProduction>
			|            <vd:expiryDate>
			|";
			
		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос = Запрос + "
				|              <vd:firstDate>
				|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:firstDate>
				|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос = Запрос + "
				|              <vd:secondDate>
				|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:secondDate>
				|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:expiryDate>
			|            <vd:perishable>false</vd:perishable>
			|            <vd:countryOfOrigin>
			|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:countryOfOrigin>
			|      		 <vd:producerList>
			|        		<ent:producer>
			|          			<ent:enterprise>
			|            			<bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
			|          			</ent:enterprise>
			|        		</ent:producer>
			|      		 </vd:producerList>
			|            <vd:productMarkingList />
			|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
			|            <vd:productName>"+ СокрЛП(док.НаименованиеПродукции) +"</vd:productName>
			|      		 <vd:sourceStockEntry />
			|      </vd:consignment>
			|    <vd:accompanyingForms>
			|      <vd:waybill>
			|        <sh:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</sh:issueSeries>
			|        <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
			|        <sh:issueDate>"+ ДатаXML(док.ТтнДата) +"</sh:issueDate>
			|        <sh:type>1</sh:type>
			|        <sh:consignor>
			|          <ent:businessEntity />
			|          <ent:enterprise />
			|        </sh:consignor>
			|        <sh:consignee>
			|          <ent:businessEntity />
			|          <ent:enterprise />
			|        </sh:consignee>
			|        <sh:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </sh:broker>
			|        <sh:transportInfo>
			|          <sh:transportType>1</sh:transportType>
			|          <sh:transportNumber>
			|            <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
			|          </sh:transportNumber>
			|        </sh:transportInfo>
			|        <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</sh:transportStorageType>
			|        <sh:cargoReloadingPointList />
			|      </vd:waybill>
			|      <vd:vetCertificate>
			|        <vd:issueSeries>"+ СокрЛП(док.ВсдСерия) +"</vd:issueSeries>
			|        <vd:issueNumber>"+ СокрЛП(док.ВсдНомер) +"</vd:issueNumber>
			|        <vd:issueDate>"+ ДатаXML(док.ВсдДата) +"</vd:issueDate>
			|        <vd:form>LIC2</vd:form>
			|          <vd:consignor>
			|            <ent:businessEntity>
			|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignor>
			|          <vd:consignee>
			|            <ent:businessEntity>
			|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignee>
			|
			|        <vd:batch>
			|            <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|";
		Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
			Запрос = Запрос + "	
			|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		Запрос = Запрос + "		
			|              <pr:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
			|            <vd:dateOfProduction>
			|";
			
			
		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос + "			
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(док.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос = Запрос + "	
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:dateOfProduction>
			|            <vd:expiryDate>
			|";
		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос = Запрос + "					
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос = Запрос + "				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:expiryDate>
			|            <vd:perishable>false</vd:perishable>
			|            <vd:countryOfOrigin>
			|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:countryOfOrigin>
			|                <vd:producerList>
			|                  <ent:producer>
			|                    <ent:enterprise>
			|                      <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
			|                    </ent:enterprise>
			|                  </ent:producer>
			|                </vd:producerList>
			|                <vd:productMarkingList />
			|                <vd:lowGradeCargo>false</vd:lowGradeCargo>
			|              </vd:batch>
			|              <vd:purpose>
			|                <bs:guid>5b90da1b-e089-11e1-bcf3-b499babae7ea</bs:guid>
			|              </vd:purpose>
			|              <vd:broker>
			|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|              </vd:broker>
			|              <vd:transportInfo>
			|                <sh:transportType>1</sh:transportType>
			|                <sh:transportNumber>
			|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
			|                </sh:transportNumber>
			|              </vd:transportInfo>
			|              <vd:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</vd:transportStorageType>
			|              <vd:cargoReloadingPointList />
			|              <vd:waybillSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:waybillSeries>
			|              <vd:waybillNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:waybillNumber>
			|              <vd:waybillDate>"+ ДатаXML(док.ТтнДата) +"</vd:waybillDate>
			|              <vd:waybillType>1</vd:waybillType>
			|              <vd:cargoInspected>"+ булево(док.cargoInspected) +"</vd:cargoInspected>
			|              <vd:cargoExpertized>"+  булево(док.cargoExpertized) +"</vd:cargoExpertized>
			|              <vd:expertiseInfo>"+ СокрЛП(док.ВсдЭкспертиза) +"</vd:expertiseInfo>
			|              <vd:confirmedBy>
			|          	     <co:fio>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_fio")) +"</co:fio>
			|          		 <co:post>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_post")) +"</co:post>
			|                <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
			|              </vd:confirmedBy>
			|              <vd:confirmedDate>"+ ДатаXML(док.ДатаДок,"T00:00:00") +"</vd:confirmedDate>			
			|              <vd:locationProsperity>"+ СокрЛП(док.ВсдМестность) +"</vd:locationProsperity>
			|              <vd:importPermit />
			|              <vd:transferPermit />
			|              <vd:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vd:specialMarks>
			|              <vd:withdrawedBy />
			|              <vd:utilizedBy />
			|            </vd:vetCertificate>		
			|    </vd:accompanyingForms>
			|  </delivery>
			|  <deliveryFacts>
			|    <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>
			|    <vd:docInspection>
			|      <vd:responsible>
			|        <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
			|      </vd:responsible>
			|      <vd:result>CORRESPONDS</vd:result>
			|    </vd:docInspection>
			|    <vd:vetInspection>
			|      <vd:responsible>
			|        <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
			|      </vd:responsible>
			|      <vd:result>CORRESPONDS</vd:result>
			|    </vd:vetInspection>
			|    <vd:decision>ACCEPT_ALL</vd:decision>
			|  </deliveryFacts>
			|</processIncomingConsignmentRequest>
			|";
	Иначе
		//Электронный
		Запрос="<processIncomingConsignmentRequest 
			|  xmlns:sch='http://www.w3.org/2001/XMLSchema' 
			|  xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
			|  xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
			|  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
			|  xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
			|  xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
			|  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
			|  xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
			|  xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
			|  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
			|  xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
			|  <localTransactionId>[GUID]</localTransactionId>
			|  <initiator>
			|    <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
			|  </initiator>
			|        <delivery>
			|          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
			|          <vd:consignor>
			|            <ent:businessEntity>
			|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignor>
			|          <vd:consignee>
			|            <ent:businessEntity>
			|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignee>
			|		<vd:consignment>
			|            <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|";
		Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
			Запрос = Запрос + "
			|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <pr:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
			|            <vd:dateOfProduction>
			|";
		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(док.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:dateOfProduction>
			|            <vd:expiryDate>
			|";
			
		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:expiryDate>
			|            <vd:perishable>false</vd:perishable>
			|            <vd:countryOfOrigin>
			|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:countryOfOrigin>
			|      		 <vd:producerList>
			|        		<ent:producer>
			|          			<ent:enterprise>
			|            			<bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
			|          			</ent:enterprise>
			|        		</ent:producer>
			|      		 </vd:producerList>
			|            <vd:productMarkingList />
			|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
			|            <vd:productName>"+ СокрЛП(док.НаименованиеПродукции) +"</vd:productName>
			|      		 <vd:sourceStockEntry />
			|      </vd:consignment>
			|
			|    <vd:accompanyingForms>
			|      <vd:waybill>
			|        <sh:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</sh:issueSeries>
			|        <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
			|        <sh:issueDate>"+ ДатаXML(док.ТтнДата) +"</sh:issueDate>
			|        <sh:type>1</sh:type>
			|        <sh:consignor>
			|          <ent:businessEntity />
			|          <ent:enterprise />
			|        </sh:consignor>
			|        <sh:consignee>
			|          <ent:businessEntity />
			|          <ent:enterprise />
			|        </sh:consignee>
			|        <sh:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </sh:broker>
			|        <sh:transportInfo>
			|          <sh:transportType>1</sh:transportType>
			|          <sh:transportNumber>
			|            <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
			|          </sh:transportNumber>
			|        </sh:transportInfo>
			|        <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</sh:transportStorageType>
			|        <sh:cargoReloadingPointList />
			|      </vd:waybill>
			|      <vd:vetCertificate>
			|        <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>
			|      </vd:vetCertificate>
			|    </vd:accompanyingForms>
			|  </delivery>
			|  <deliveryFacts>
			|    <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>
			|    <vd:docInspection>
			|      <vd:responsible>
			|        <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
			|      </vd:responsible>
			|      <vd:result>CORRESPONDS</vd:result>
			|    </vd:docInspection>
			|    <vd:vetInspection>
			|      <vd:responsible>
			|        <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
			|      </vd:responsible>
			|      <vd:result>CORRESPONDS</vd:result>
			|    </vd:vetInspection>
			|    <vd:decision>ACCEPT_ALL</vd:decision>
			|  </deliveryFacts>
			|</processIncomingConsignmentRequest>";
		КонецЕсли;
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_Входящий(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_Входящий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_Входящий(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если Проверка_ВСД_Входящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
			
	ЗапросXML = ВСД_входящий_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);
		
	Возврат appID;
	
КонецФункции

//=========================== ВСД Исходящий =================================

Функция Проверка_ВСД_Исходящий(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_Исходящий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_Исходящий(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда 
		Сообщить("Не указан Партия.ФормаУпаковки","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Продукция)=1 Тогда 
		Сообщить("Не указан Продукция","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.ВидПродукции)=1 Тогда 
		Сообщить("Не указан ВидПродукции","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.НаименованиеПродукции)=1 Тогда 
		Сообщить("Не указан НаименованиеПродукции","!");
		Результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда 
	//	Сообщить("Не указан ЕдиницаИзмерения","!");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан ФормаУпаковки","!");
	//	Результат = 0;
	//КонецЕсли;

	Если ПустоеЗначение(док.applicationID)=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		Сообщить("не указано Количество "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если док.КоличествоМест =0 Тогда 
		Сообщить("не указано Количество коробов"+док,"!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда 
		Сообщить("Не указан Партия.Продукция.Тип","!");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ВСД_исходящий_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_исходящий_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_исходящий_ЗапросXML(док);
	КонецЕсли;	
	//}
	//док = СоздатьОбъект("Документ.ВСД_исходящий");

	Запрос="<prepareOutcomingConsignmentRequest 
		|  xmlns:sch='http://www.w3.org/2001/XMLSchema' 
		|  xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|  xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
		|  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|  xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
		|  xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
		|  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|  xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
		|  xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
		|  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|  xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
		|  <localTransactionId>[GUID]</localTransactionId>
		|  <initiator>
		|    <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
		|  </initiator>
			|        <delivery>
			|          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
			|          <vd:consignor>
			|            <ent:businessEntity>
			|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignor>
			|          <vd:consignee>
			|            <ent:businessEntity>
			|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignee>
			|		<vd:consignment>
			|            <vd:productType>"+ док.Партия.Продукция.Тип +"</vd:productType>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|";
		Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
			Запрос = Запрос + "
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
			|            <vd:dateOfProduction>
			|";
		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос + "
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и 
				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
			Запрос = Запрос + "
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:dateOfProduction>
			|            <vd:expiryDate>
			|";
			
		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
			Запрос = Запрос + "
				|              <vd:firstDate>
				|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:firstDate>
				|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и 
				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
			Запрос = Запрос + "
				|              <vd:secondDate>
				|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:secondDate>
				|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:expiryDate>
			|            <vd:perishable>false</vd:perishable>
			|            <vd:countryOfOrigin>
			|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:countryOfOrigin>
			|      		 <vd:producerList>
			|        		<ent:producer>
			|          			<ent:enterprise>
			|            			<bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
			|          			</ent:enterprise>
			|        		</ent:producer>
			|      		 </vd:producerList>
			|            <vd:productMarkingList />
			|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
			|            <vd:productName>"+ СокрЛП(док.Партия.НаименованиеПродукции) +"</vd:productName>
			|            <vd:sourceStockEntry>
			|              <bs:guid>"+ СокрЛП(док.Партия.GUID) +"</bs:guid>
			|            </vd:sourceStockEntry>
			|      </vd:consignment>
			|    <vd:accompanyingForms>
			|      <vd:waybill>
			|        <sh:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</sh:issueSeries>
			|        <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
			|        <sh:issueDate>"+ ДатаXML(док.ТтнДата) +"</sh:issueDate>
			|        <sh:type>1</sh:type>
			|        <sh:consignor>
			|          <ent:businessEntity />
			|          <ent:enterprise />
			|        </sh:consignor>
			|        <sh:consignee>
			|          <ent:businessEntity />
			|          <ent:enterprise />
			|        </sh:consignee>
			|        <sh:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </sh:broker>
			|        <sh:transportInfo>
			|          <sh:transportType>1</sh:transportType>
			|          <sh:transportNumber>
			|            <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
			|          </sh:transportNumber>
			|        </sh:transportInfo>
			|        <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</sh:transportStorageType>
			|        <sh:cargoReloadingPointList />
			|      </vd:waybill>
			|      <vd:vetCertificate>
			|        <vd:issueSeries />
			|        <vd:issueNumber />
			|        <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
			|        <vd:form>LIC2</vd:form>
			|          <vd:consignor>
			|            <ent:businessEntity>
			|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignor>
			|          <vd:consignee>
			|            <ent:businessEntity>
			|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
			|            </ent:businessEntity>
			|            <ent:enterprise>
			|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
			|            </ent:enterprise>
			|          </vd:consignee>
			|
			|        <vd:batch>
			|            <vd:productType>"+ док.Партия.Продукция.Тип +"</vd:productType>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|";		
		Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
			Запрос = Запрос + "	
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		Запрос = Запрос + "		
			|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
			|            <vd:dateOfProduction>
			|";
			
			
		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос + "			
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и 
				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
			Запрос = Запрос + "	
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:dateOfProduction>
			|            <vd:expiryDate>
			|";
		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
			Запрос = Запрос + "					
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и 
				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
			Запрос = Запрос + "				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
				Запрос = Запрос + "
			|              <vd:informalDate />
			|            </vd:expiryDate>
			|            <vd:perishable>false</vd:perishable>
			|            <vd:countryOfOrigin>
			|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:countryOfOrigin>
			|                <vd:producerList>
			|                  <ent:producer>
			|                    <ent:enterprise>
			|                      <bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
			|                    </ent:enterprise>
			|                  </ent:producer>
			|                </vd:producerList>
			|                <vd:productMarkingList />
			|                <vd:lowGradeCargo>false</vd:lowGradeCargo>
			|              </vd:batch>
			|              <vd:purpose>
			|                <bs:guid>5b90da1b-e089-11e1-bcf3-b499babae7ea</bs:guid>
			|              </vd:purpose>
			|              <vd:broker>
			|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|              </vd:broker>
			|              <vd:transportInfo>
			|                <sh:transportType>1</sh:transportType>
			|                <sh:transportNumber>
			|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
			|                </sh:transportNumber>
			|              </vd:transportInfo>
			|              <vd:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</vd:transportStorageType>
			|              <vd:cargoReloadingPointList />
			|              <vd:waybillSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:waybillSeries>
			|              <vd:waybillNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:waybillNumber>
			|              <vd:waybillDate>"+ ДатаXML(док.ТтнДата) +"</vd:waybillDate>
			|              <vd:waybillType>1</vd:waybillType>
			|              <vd:cargoInspected>"+ булево(док.cargoInspected) +"</vd:cargoInspected>
			|              <vd:cargoExpertized>"+  булево(док.cargoExpertized) +"</vd:cargoExpertized>
			|              <vd:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vd:expertiseInfo>
			|              <vd:confirmedBy>
			|                <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
			|              </vd:confirmedBy>
			|              <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
			|              <vd:importPermit />
			|              <vd:transferPermit />
			|              <vd:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vd:specialMarks>
			|              <vd:withdrawedBy />
			|              <vd:utilizedBy />
			|            </vd:vetCertificate>		
			|    </vd:accompanyingForms>
			|  </delivery>
			|</prepareOutcomingConsignmentRequest>
			|";
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_Исходящий(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_Исходящий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_Исходящий(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если Проверка_ВСД_исходящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
			
	ЗапросXML = ВСД_исходящий_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);
		
	Возврат appID;
	
КонецФункции

//=========================== ВСД Производство ===============================

Функция ВСД_производство_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_производство_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_производство_ЗапросXML(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//док = СоздатьОбъект("Документ.ВСД_производство");
	
	Запрос = "<registerProductiveBatchRequest xmlns:sch='http://www.w3.org/2001/XMLSchema' 
		|  xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|  xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
		|  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|  xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
		|  xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
		|  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|  xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
		|  xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
		|  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|  xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
		|        <localTransactionId>[GUID]</localTransactionId>
		|        <initiator>
		|          <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
		|        </initiator>
		|        <enterprise>
		|            <bs:guid>"+ СокрЛП(док.Производитель_площадка.GUID) +"</bs:guid>
		|        </enterprise>
		|        <productionOperation>
		|";
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
				
			Запрос=Запрос+"			
			|          <vd:productiveBatch>
			|            <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|";
			Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
				Запрос = Запрос+ "
				|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
				|";
			КонецЕсли;
			Запрос = Запрос+ "
			|              <pr:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>			
			|";
			Если Док.КоличествоМест>0 Тогда 
				Запрос=Запрос+"
				|            <vd:packingList>
				|              <co:packingForm>
				|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
				|              </co:packingForm>
				|            </vd:packingList>
				|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
				|";				
			КонецЕсли;
			Запрос=Запрос+"
			|            <vd:dateOfProduction>
			|";
			Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
				Запрос = Запрос+ "
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(док.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
			КонецЕсли;
			Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
				Запрос=Запрос+"		
				|              <vd:secondDate>
				|                <bs:year>"+ ДатаГод(док.ДатаИзготовления2) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:secondDate>
				|";
			КонецЕсли;
			Запрос=Запрос+"
			|              <vd:informalDate />
			|            </vd:dateOfProduction>
			|            <vd:expiryDate>
			|";
			
			Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
				Запрос=Запрос+"
				|              <vd:firstDate>
				|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:firstDate>
				|";
			КонецЕсли;
			Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
				Запрос=Запрос+"				
				|              <vd:secondDate>
				|                <bs:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:secondDate>
				|";
			КонецЕсли;
			Запрос=Запрос+"
			|              <vd:informalDate />
			|            </vd:expiryDate>
			|            <vd:perishable>false</vd:perishable>
			|            <vd:countryOfOrigin>
			|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:countryOfOrigin>
			|            <vd:productMarkingList />
			|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
			|          </vd:productiveBatch>
			|          <vd:finalizeOperation>"+булево(док.ЗавершитьОперацию)+"</vd:finalizeOperation>
			|";
		КонецЦикла;
		Запрос=Запрос+"
		|        </productionOperation>
		|        <vetDocument>
		|          <vd:consignor>
		|            <ent:businessEntity />
		|            <ent:enterprise />
		|          </vd:consignor>
		|          <vd:consignee>
		|            <ent:businessEntity />
		|            <ent:enterprise />
		|          </vd:consignee>
		|          <vd:batch>
		|            <vd:product />
		|            <vd:subProduct />
		|            <vd:productItem />
		|            <vd:unit />
		|            <vd:packingList />
		|            <vd:dateOfProduction>
		|              <vd:firstDate />
		|              <vd:secondDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|              <vd:firstDate />
		|              <vd:secondDate />
		|            </vd:expiryDate>
		|            <vd:countryOfOrigin />
		|            <vd:producerList />
		|            <vd:productMarkingList />
		|          </vd:batch>
		|          <vd:purpose />
		|          <vd:broker />
		|          <vd:transportInfo>
		|            <sh:transportNumber />
		|          </vd:transportInfo>
		|          <vd:cargoReloadingPointList />
		|          <vd:cargoInspected>true</vd:cargoInspected>
		|          <vd:cargoExpertized>true</vd:cargoExpertized>
		|          <vd:expertiseInfo>Произ.лабор</vd:expertiseInfo>
		|          <vd:confirmedBy />
		|          <vd:importPermit />
		|          <vd:transferPermit />
		|          <vd:withdrawedBy />
		|          <vd:utilizedBy />
		|        </vetDocument>
		|      </registerProductiveBatchRequest>
		|";
		
	возврат Запрос;
	
КонецФункции
	
Функция Отправить_ВСД_производство(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_производство(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//Если Проверка_ВСД_производство(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	
			
	ЗапросXML = ВСД_производство_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);
		
	Возврат appID;
	
КонецФункции

//=========================== ВСД Инвентаризация =============================

Функция ВСД_инвентаризация_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_транзакция_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_транзакция_ЗапросXML(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//док = СоздатьОбъект("Документ.ВСД_инвентаризация");
	
	Запрос = "<resolveDiscrepancyRequest 		
		|xmlns:sch='http://www.w3.org/2001/XMLSchema'  
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
		|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
		|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
		|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
		|  <localTransactionId>[GUID]</localTransactionId>
		|  <initiator>
		|    <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
		|  </initiator>
		|  <enterprise>
		|    <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|  </enterprise>
		|  <inventoryDate>"+ ДатаXML(док.ДатаДок,"T00:00:00") +"</inventoryDate>
		|  <responsible>
		|    <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
		|  </responsible>
		|  <stockDiscrepancy>
		|    <vd:affectedList count='0' total='0' offset='0' />
		|    <vd:resultingList count='"+ док.КоличествоСтрок() +"' total='"+ док.КоличествоСтрок() +"' offset='0'>
		|";
		
		док.ВыбратьСтроки();
		Пока док.ПолучитьСтроку() = 1 Цикл
			Запрос=Запрос+"		
			|      <vd:stockEntry>
			|        <bs:uuid>"+ СокрЛП(док.Партия.UUID) +"</bs:uuid>
			|        <vd:batch>
			|
			|            <vd:productType>"+ док.Партия.Продукция.Тип +"</vd:productType>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|";
			Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
				Запрос=Запрос+"		
				|              <bs:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</bs:guid>
				|";
			КонецЕсли;
			Запрос=Запрос+"		
			|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|            <vd:volume>"+ Док.Количество +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
			|            <vd:dateOfProduction>
			|";
			Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
				Запрос=Запрос+"		
				|              <vd:firstDate>
				|                <bs:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:firstDate>
				|";
			КонецЕсли;
			Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и 
					(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
				consignment=consignment+"		
				|              <vd:secondDate>
				|                <bs:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:secondDate>
				|";
			КонецЕсли;
			Запрос=Запрос+"		
			|              <vd:informalDate />
			|            </vd:dateOfProduction>
			|            <vd:expiryDate>
			|";
			
			Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
				Запрос=Запрос+"		
				|              <vd:firstDate>
				|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:firstDate>
				|";
			КонецЕсли;
			Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и 
					(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
				Запрос=Запрос+"		
				|              <vd:secondDate>
				|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</bs:year>
				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</bs:month>
				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</bs:day>
				|                <bs:hour>0</bs:hour>
				|              </vd:secondDate>
				|";
			КонецЕсли;
			Запрос=Запрос+"		
			|              <vd:informalDate />
			|            </vd:expiryDate>
			|            <vd:perishable>false</vd:perishable>
			|            <vd:countryOfOrigin>
			|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:countryOfOrigin>
			|            <vd:productMarkingList />
			|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
			|          <vd:owner>
			|            <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
			|          </vd:owner>
			|
			|        </vd:batch>
			|      </vd:stockEntry>
			|";
		КонецЦикла;
		Запрос=Запрос+"
		|    </vd:resultingList>
		|  </stockDiscrepancy>
		|  <discrepancyReport>
		|    <vd:issueNumber>"+ Док.НомерДок +"</vd:issueNumber>
		|    <vd:reason />
		|    <vd:description>"+ док.Вид() +"</vd:description>
		|  </discrepancyReport>
		|</resolveDiscrepancyRequest>
		|";
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_Инвентаризация(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_транзакция(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	
	//Если Проверка_ВСД_инвентаризация(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	
	
	ЗапросXML = ВСД_инвентаризация_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);
		
	Возврат appID;
	
КонецФункции



//=========================== ВСД Транзакция =================================

Функция Проверка_ВСД_транзакция(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_транзакция(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		
		// Не обязательное условие
		//Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		//	Результат = 0;
		//КонецЕсли;		
	
		Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
			Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда 
			Сообщить("Не указан Партия.ВсдДата","!");
			Результат = 0;
		КонецЕсли;
		//Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан Партия.ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		Если  док.Количество=0 Тогда 
			Сообщить("не указано Количество "+док,"!");
			Результат = 0;
		КонецЕсли;
		//Если док.КоличествоМест =0 Тогда 
		//	Сообщить("не указано Количество коробов"+док,"!");
		//	Результат = 0;
		//КонецЕсли;
	
		Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда 
			Сообщить("Не указан Партия.Продукция.Тип","!");
			Результат = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ПустоеЗначение(док.applicationID)=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док,"!");
	//	Результат = 0;
	//КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ВСД_транзакция_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_транзакция_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_транзакция_ЗапросXML(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//док = СоздатьОбъект("Документ.ВСД_транзакция");
	
	Запрос_Шапка = "      <prepareOutcomingConsignmentRequest 
	|xmlns:sch='http://www.w3.org/2001/XMLSchema' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
	|        </initiator>
	|";
	
	delivery = "
	|        <delivery>
	|          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
	|          <vd:consignor>
	|            <ent:businessEntity>
	|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignor>
	|          <vd:consignee>
	|            <ent:businessEntity>
	|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignee>
	|";
	
	consignment=""; vetCertificate ="";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		consignment = consignment+ "
		|          <vd:consignment id='id"+ док.НомерСтроки +"'>
		|            <vd:productType>"+ док.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
			consignment = consignment+ "
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Док.Количество +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|            <vd:packingList>
		|              <co:packingForm>
		|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
		|              </co:packingForm>
		|            </vd:packingList>
		|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
		|            <vd:dateOfProduction>
		|";
		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
			consignment = consignment+ "
		|              <vd:firstDate>
		|                <bs:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</bs:year>
		|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</bs:month>
		|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</bs:day>
		|                <bs:hour>0</bs:hour>
		|              </vd:firstDate>
		|";
	КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и 
				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
			consignment=consignment+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		
		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
			consignment=consignment+"
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и 
				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
			consignment=consignment+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:producerList />
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		|            <vd:productName>"+ СокрЛП(док.Партия.НаименованиеПродукции) +"</vd:productName>
		|            <vd:productCode />
		|            <vd:sourceStockEntry>
		|              <bs:guid>"+ СокрЛП(док.Партия.GUID) +"</bs:guid>
		|            </vd:sourceStockEntry>
		|          </vd:consignment>
		|";
			
		vetCertificate  = vetCertificate + "
		|            <vd:vetCertificate for='id"+ док.НомерСтроки +"'>
		|              <vd:issueSeries />
		|              <vd:issueNumber />
		|              <vd:issueDate>"+ ДатаXML(док.ДатаДок) +"</vd:issueDate>
		|              <vd:form>LIC2</vd:form>
		|          <vd:consignor>
		|            <ent:businessEntity>
		|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignor>
		|          <vd:consignee>
		|            <ent:businessEntity>
		|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignee>
		|              <vd:batch>
		|            <vd:productType>"+ док.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
			vetCertificate=vetCertificate+"	
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"		
		|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Док.Количество +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|            <vd:packingList>
		|              <co:packingForm>
		|                <bs:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</bs:uuid>
		|              </co:packingForm>
		|            </vd:packingList>
		|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
		|            <vd:dateOfProduction>
		|";
		
		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и 
				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
			vetCertificate=vetCertificate+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
			vetCertificate=vetCertificate+"						
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и 
				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		//|                <vd:producerList>
		//|                  <ent:producer>
		//|                    <ent:enterprise>
		//|                      <bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
		//|                    </ent:enterprise>
		//|                  </ent:producer>
		//|                </vd:producerList>
		|              </vd:batch>
		|              <vd:productName>"+ СокрЛП(док.НаименованиеПродукции) +"</vd:productName>
		|              <vd:productCode />
		|              <vd:purpose>
		|                <bs:guid>5b90da1b-e089-11e1-bcf3-b499babae7ea</bs:guid>
		|              </vd:purpose>
		|              <vd:broker>
		|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
		|              </vd:broker>
		|              <vd:transportInfo>
		|                <sh:transportType>1</sh:transportType>
		|                <sh:transportNumber>
		|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
		|                </sh:transportNumber>
		|              </vd:transportInfo>
		|              <vd:cargoReloadingPointList />
		|              <vd:cargoInspected>"+ булево(док.cargoInspected) +"</vd:cargoInspected>
		|              <vd:cargoExpertized>"+  булево(док.cargoExpertized) +"</vd:cargoExpertized>
		|              <vd:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vd:expertiseInfo>
		|              <vd:confirmedBy>
		|                <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
		|              </vd:confirmedBy>
		|              <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
		|              <vd:importPermit />
		|              <vd:transferPermit />
		|              <vd:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vd:specialMarks>
		|              <vd:withdrawedBy />
		|              <vd:utilizedBy />
		|            </vd:vetCertificate>
		|";
	
	КонецЦикла;
	
	
	accompanyingForms_Шапка = "
	|          <vd:accompanyingForms>
	|            <vd:waybill>
	|              <sh:issueSeries />
	|              <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
	|              <sh:issueDate>"+ ДатаXML(док.ТтнДата) +"</sh:issueDate>
	|              <sh:type>1</sh:type>
	|              <sh:consignor>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignor>
	|              <sh:consignee>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignee>
	|              <sh:broker>
	|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
	|              </sh:broker>
	|              <sh:transportInfo>
	|                <sh:transportType>1</sh:transportType>
	|                <sh:transportNumber>
	|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
	|                </sh:transportNumber>
	|              </sh:transportInfo>
	|              <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</sh:transportStorageType>
	|              <sh:cargoReloadingPointList />
	|            </vd:waybill>
	|";
	
	
	ЗапросПодвал = "
	|          </vd:accompanyingForms>
	|        </delivery>
	|      </prepareOutcomingConsignmentRequest>
	|";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		accompanyingForms_Шапка+
		vetCertificate+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_транзакция(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_транзакция(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	ЗапросXML = ВСД_транзакция_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);
		
	Возврат appID;
	
КонецФункции


//=========================== Групповая обработка ВСД =================================

Функция ОтправитьВсе_ВСД_Исходящий(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД_Исходящий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД_Исходящий(СписокВСД,НачДата, КонДата) ;
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_исходящий");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	КонецЕсли;
	
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
			Продолжить;
		КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД_Исходящий( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецФункции

Функция ОтправитьВсе_ВСД_Транзакция(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД_Транзакция(СписокВСД,НачДата, КонДата);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_исходящий");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	КонецЕсли;
	
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
		//	Продолжить;
		//КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда 
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД_транзакция( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецФункции

Функция ПолучитьОтветВсеИсходящиеВСД(НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОтветВсеИсходящиеВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОтветВсеИсходящиеВСД(НачДата, КонДата);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Док.ВыбратьДокументы(НачДата, КонДата);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен()=0 Тогда 
			Результат = ПолучитьРезультат_ВСД(СокрЛП(док.applicationID), док );
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ОтправитьВсе_ВСД_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД_Производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД_Производство(СписокВСД,НачДата, КонДата);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	Состояние("Меркурий: отправка ВСД Производство");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		Сообщить("отправляются ВСД производство за период "+ПериодСтр(НачДата, КонДата));

		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_Производство");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	Иначе
		Сообщить("отправляются ВСД производство "+СписокВСД.РазмерСписка()+" документов");
	КонецЕсли;
		
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
		//	Продолжить;
		//КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда 
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД_производство( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецФункции

//******************************** Объединение партий ************************

Функция ВСД_ОбъединениеПартий_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_ОбъединениеПартий_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_ОбъединениеПартий_ЗапросXML(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//док = СоздатьОбъект("Документ.ВСД_ОбъединениеПартий");
	
	запрос = "<mergeStockEntriesRequest xmlns:sch='http://www.w3.org/2001/XMLSchema' 
		|  xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|  xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
		|  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|  xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
		|  xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
		|  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|  xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
		|  xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
		|  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|  xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
		|        <localTransactionId>[GUID]</localTransactionId>
		|        <initiator>
		|          <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
		|        </initiator>
		|        <enterprise>
		|            <bs:guid>"+ СокрЛП(док.Владелец_площадка.GUID) +"</bs:guid>
		|        </enterprise>
		|        <mergeOperation>
		|";

		sourceStockEntry="";
		batch="";
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл		
			sourceStockEntry=sourceStockEntry+"
			|          <vd:sourceStockEntry>
			|            <bs:uuid>"+ СокрЛП(док.Партия.UUID) +"</bs:uuid>
			|          </vd:sourceStockEntry>
			|";
			batch=batch+"
			|          <vd:batch>
			|            <vd:product>
			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
			|            </vd:product>
			|            <vd:subProduct>
			|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
			|            </vd:subProduct>
			|            <vd:productItem>
			|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
			|            </vd:productItem>
			|          </vd:batch>
			|";
			
		КонецЦикла;
		
		запрос = запрос + sourceStockEntry + batch + "
		|        </mergeOperation>		
		|      </mergeStockEntriesRequest>
		|";
	
		Возврат запрос;
КонецФункции

Функция Отправить_ВСД_ОбъединениеПартий(док) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_ОбъединениеПартий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_ОбъединениеПартий(док);
	КонецЕсли;	
	//}
	
	//Если ПроверкаИсхВСД(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	
	
	ЗапросXML = ВСД_ОбъединениеПартий_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);
		
	Возврат appID;
КонецФункции

//******************************** Продукция *********************************

Функция  ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID) Экспорт

	Результат = Компонента.GetVetDocumentListResult(СокрЛП(appID));
	
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(Компонента.LogFilename);    
	    
	Если НайтиОшибки()>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
		
    objDom.setProperty("SelectionNamespaces", "
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|" );
		
	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
	productItemList = objDom.selectNodes("//*[local-name() = 'productItem']") ;    
	
    Для i1 = 0 По productItemList.length - 1 Цикл
        productItem = productItemList.item(i1);
		
		guid  	 = productItem.selectSingleNode("base:guid").text;
		uuid  	 = productItem.selectSingleNode("base:uuid").text;
		active 	 = productItem.selectSingleNode("base:active").text;
		
		Если active="false" Тогда
			Продолжить;
		КонецЕсли;
		
		st  	 = productItem.selectSingleNode("base:status").text;
		name     = productItem.selectSingleNode("prod:name").text;
		//code 	 = productItem.selectSingleNode("prod:code").text;
		prodType = productItem.selectSingleNode("prod:productType").text;		
		
		product 	= productItem.selectSingleNode("prod:product").selectSingleNode("base:guid").text;
		subProduct 	= productItem.selectSingleNode("prod:subProduct").selectSingleNode("base:guid").text;

		correspondToGost = productItem.selectSingleNode("prod:correspondToGost").text;
		Попытка
			gost = productItem.selectSingleNode("prod:gost").text;				
		Исключение
			gost = "";
		КонецПопытки;
		
		Продукция 	 = НайтиПродукцию(product);
		ВидПродукции = НайтиВидПродукции(subProduct);
		
		
		СпрОбъект = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
		СпрОбъект.НайтиЭлемент(продукцияЭлемент);
		СпрОбъект.UUID = uuid;
		СпрОбъект.GUID = guid;	
						
		СпрОбъект.Записать();

		Сообщить("Записан ["+СпрОбъект.ТекущийЭлемент()+"] uuid =["+uuid+"]");
	КонецЦикла;
				
	УдалитьXML( Компонента.LogFilename);

	Возврат Результат;
КонецФункции

Функция  Изменить_Продукцию( продукцияЭлемент , RegisterModificationType) Экспорт
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(продукцияЭлемент.Площадка.GUID)=1 Тогда 
		Сообщить("В продукцияЭлемент.Площадка пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

    //{ public enum RegisterModificationType 
    //    
    //    /// <remarks/>
    //    CREATE,
    //    
    //    /// <remarks/>
    //    FIND_OR_CREATE,
    //    
    //    /// <remarks/>
    //    UPDATE,
    //    
    //    /// <remarks/>
    //    DELETE,
    //    
    //    /// <remarks/>
    //    MERGE,
    //    
    //    /// <remarks/>
    //    ATTACH,
    //    
    //    /// <remarks/>
    //    SPLIT,
    //    
    //    /// <remarks/>
    //    FORK,
    //}	
	
	Результат = Компонента.ModifyProducerStockList( продукцияЭлемент, RegisterModificationType);

	appID = Компонента.ApplicationId;
	//Отладка();
	
	УдалитьXML( Компонента.LogFilename);

	Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
	Пока Результат="IN_PROCESS" Цикл
		Пауза( );				
		Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
	КонецЦикла;		
	
	УдалитьXML( Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции

//******************************** Список ВСД ********************************

Функция  ПолучитьСписокВСДОтветXML(appID) Экспорт

	Результат = Компонента.GetVetDocumentListResult(СокрЛП(appID));

	ЗагрузитьXML_ВСД(Компонента.LogFilename, "", "ВСД_входящий");
			
	УдалитьXML( Компонента.LogFilename);
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьСписокВСД(Отправитель_Площадка, vetDocumentType	= 4, vetDocumentStatus = 0, Смещение) Экспорт
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

    //{ VetDocumentType 
    //    TRANSPORT, = 1	= Транспортный ВСД.	
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}


    //{ VetDocumentStatus 
    //    
    //    /// <remarks/>
    //    CREATED, = 1
    //    
    //    /// <remarks/>
    //    CONFIRMED, = 2
    //    
    //    /// <remarks/>
    //    WITHDRAWN, = 3
    //    
    //    /// <remarks/>
    //    UTILIZED, = 4 
    //}	
	
	Результат = Компонента.GetVetDocumentListOperation(СокрЛП(Отправитель_Площадка.GUID), vetDocumentType, vetDocumentStatus, Смещение);

	appID = Компонента.ApplicationId;
	//Отладка();
	
	УдалитьXML( Компонента.LogFilename);

	Результат = ПолучитьСписокВСДОтветXML( appID );
	Пока Результат="IN_PROCESS" Цикл
		Пауза();				
		Результат = ПолучитьСписокВСДОтветXML( appID );
	КонецЦикла;		
	
	УдалитьXML( Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции


//======= СЛУЖЕБНЫЕ ФУНКЦИИ ПО НАСТРОЙКЕ РАБОТЫ МОДУЛЯ ==============

Процедура Инициализация(_КаталогОбработки="") Экспорт	

	Если _КаталогОбработки="" Тогда
		КаталогОбработки = СписокКонстант.Получить("КаталогМодуля");
	Иначе
		КаталогОбработки = _КаталогОбработки;	
	КонецЕсли;
	
	ЗагрузитьПараметры();
	
	КаталогБиблиотек 	= СписокКонстант.Получить("КаталогБиблиотек");;
	
	ЭтоSQL = ФС.СуществуетФайл(КаталогИБ()+"1cv7.dba");	
	Если ЭтоSQL=1 Тогда 
		Попытка
			RS = СоздатьОбъект("ODBCRecordset");
			RS.УстБД1С();     
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	Иначе		
		Попытка
			базаДанных = СоздатьОбъект("SQLiteBase");
		Исключение
					
			Если ЗагрузитьВнешнююКомпоненту(КаталогБиблиотек + "1sqlite.dll")	<>	1	Тогда ////mbIkola	
				Предупреждение("Компонента 1sqlite.dll не найдена!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			базаДанных = СоздатьОбъект("SQLiteBase");
		КонецПопытки;	
		базаДанных.Открыть(":memory:");	
	КонецЕсли;		
	
	Если ТестовыйРежим=0 Тогда 	
		ИмяDLL = "SoapDLL_work";
	Иначе		
		ИмяDLL = "SoapDLL_test";
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);			
		Компонента = СоздатьОбъект("AddIn."+ИмяDLL); 		
	Исключение
			Сообщить("Компонента [AddIn."+ИмяDLL+"] не зарегистрирована","!");
			Сообщить(ОписаниеОшибки());
			Возврат;
	КонецПопытки;		
	
	Если ПустоеЗначение(СписокКонстант.Получить("КаталогЛогов"))=1 Тогда 
		Сообщить("Внимание: каталог log файлов не определен","!");
	КонецЕсли;
	
	Компонента.Init(      
		СписокКонстант.Получить("param_username"),  		//string USERNAME 
        СписокКонстант.Получить("param_password"), 			//string PASSWORD = 
        СписокКонстант.Получить("param_issuer_id"), 		//string ISSUER_ID 
        СписокКонстант.Получить("param_service_id"), 		// string SERVICE_ID = 
        СписокКонстант.Получить("param_api_key"), 			//string API_KEY = 
        СписокКонстант.Получить("param_intiator_login"), 	//string USER_LOGIN = 
        СписокКонстант.Получить("param_vetdoctor_login"), 	//string VETDOCTOR_LOGIN = 
		СписокКонстант.Получить("КаталогЛогов"),  			// для логов
		СписокКонстант.Получить("ОтладкаЗапросовXML"),
		СписокКонстант.Получить("param_vetdoctor_fio"),
		СписокКонстант.Получить("param_vetdoctor_post")
		);
	
КонецПроцедуры // Инициализация


//=======================================================================

Функция Выбрать_ВСД_транзакция(ДокРеализация)
	
	Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(ДокРеализация.ДатаДок, КонГода(ДокРеализация.ДатаДок), ДокРеализация);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Вид()="ВСД_транзакция" Тогда 
			Возврат Док.ТекущийДокумент();
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция Выбрать_ВСД_исходящий(ДокРеализация)
	тзДок = СоздатьОбъект("ТаблицаЗначений");
	тзДок.НоваяКолонка("Док");
	
	Если ПустоеЗначение(ДокРеализация)=1 Тогда
		Возврат тзДок;
	КонецЕсли;
	
	Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(ДокРеализация.ДатаДок, КонГода(ДокРеализация.ДатаДок), ДокРеализация);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Вид()="ВСД_исходящий" Тогда 
			тзДок.НоваяСтрока();
			тзДок.Док = Док.ТекущийДокумент();
		КонецЕсли;
	КонецЦикла;
	
	Возврат тзДок;
КонецФункции

Функция ОформитьВСД(РеализацияТоваров) Экспорт

КонецФункции

Функция ПечатьВСД(Док) Экспорт
	Если Док.Вид() = "Реализация" Тогда 
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД_исходящие = Выбрать_ВСД_исходящий(Док_ВСД_транзакция);
					
	ИначеЕсли Док.Вид() = "ВСД_транзакция" Тогда
		тз_ВСД_исходящие = Выбрать_ВСД_исходящий(Док_ВСД_транзакция);
	КонецЕсли;

	тз_ВСД_исходящие.ВыбратьСтроки();
	Пока тз_ВСД_исходящие.ПолучитьСтроку() = 1 Цикл
		Если ТестовыйРежим=0 Тогда
			ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД_исходящие.Док.UUID);	
		Иначе
			ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД_исходящие.Док.UUID);	
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция ОткрытьВсдВГис(Док) Экспорт
	
	Если Док.Вид() = "Реализация" Тогда 
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД_исходящие = Выбрать_ВСД_исходящий(Док_ВСД_транзакция);
					
	ИначеЕсли Док.Вид() = "ВСД_транзакция" Тогда
		тз_ВСД_исходящие = Выбрать_ВСД_исходящий(Док_ВСД_транзакция);
	КонецЕсли;

	тз_ВСД_исходящие.ВыбратьСтроки();
	Пока тз_ВСД_исходящие.ПолучитьСтроку() = 1 Цикл
		Если ТестовыйРежим=1 Тогда
			ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД_исходящие.Док.UUID);	
		Иначе
			ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД_исходящие.док.UUID);	
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ОткрытьСписокВсд(Док) Экспорт
	
	Если Док.Вид() = "Реализация" Тогда 
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД_исходящие = Выбрать_ВСД_исходящий(Док_ВСД_транзакция);
					
	ИначеЕсли Док.Вид() = "ВСД_транзакция" Тогда
		тз_ВСД_исходящие = Выбрать_ВСД_исходящий(Док_ВСД_транзакция);
	КонецЕсли;

	стр=0;
	Если тз_ВСД_исходящие.ВыбратьСтроку(стр,"ВСД")=1 Тогда 
		тз_ВСД_исходящие.ПолучитьСтрокуПоНомеру(стр);
		ОткрытьФорму(тз_ВСД_исходящие.Док);
	КонецЕсли;
КонецФункции