//Автор: Синявский Филипп 
//phsin@kb99.pro

Перем Компонента Экспорт;

Перем СписокКонстант;
Перем КаталогОбработки;
Перем базаДанных Экспорт;
Перем ЭтоSQL Экспорт;
Перем ЭтоТестовыйРежим Экспорт;
Перем ТаблицаПереопределенныхФункций;
Перем ИмяDLL Экспорт; 
Перем ОбработкаОбмена Экспорт; // временно

//Служебные функции

Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Конструктор()
	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");
КонецПроцедуры

Процедура Деструктор() 
КонецПроцедуры
//

//======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);
	
	
	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;	
	
	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;	
КонецФункции // МодульВыполнения
//======================================================================



//======= ФУНКЦИИ ПО СБОРУ ИНФОРМАЦИИ О КЛИЕНТЕ ==============

Функция ПолучитьИНН(ВыбКлиент) экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИНН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИНН(ВыбКлиент);
	КонецЕсли;	
	//}
	
	//стандартное поведение функции
	Попытка		
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	
	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);
	КонецЕсли;
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьКПП(ВыбКлиент) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьКПП");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьКПП(ВыбКлиент);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
	Иначе
		Возврат "";

	КонецЕсли;
КонецФункции // ПолучитьКПП() //mbIkola - функция изменена

Функция ПолучитьОГРН(ВыбКлиент) экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОГРН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОГРН(ВыбКлиент);
	КонецЕсли;	
	//}
	
	//стандартное поведение функции
	Попытка		
		Возврат ВыбКлиент.ОГРН;
	Исключение
	КонецПопытки;

	Возврат "";
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьАвтора() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАвтора");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАвтора();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат глПользователь;
КонецФункции

Функция ПолучитьОсновнуюФирму() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОсновнуюФирму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОсновнуюФирму();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции

Функция ПолучитьФилиал() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФилиал");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФилиал();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции




//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============

Функция ИмяФайлаНастроек() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИмяФайлаНастроек");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИмяФайлаНастроек();
	КонецЕсли;	
	//}

	//стандартное поведение функции

	//Сформируем полное имя файла настроек
	Если ЭтоТестовыйРежим=0 Тогда
		возврат КаталогОбработки+"Меркурий_Константы_"+ИмяПользователя()+".tx8";
	Иначе
		возврат КаталогОбработки+"Меркурий_Константы_ТЕСТ_"+ИмяПользователя()+".tx8";
	КонецЕсли;	
КонецФункции

Функция УдалитьXML(ИмяФайла) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("УдалитьXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.УдалитьXML();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если СписокКонстант.Получить("ОтладкаЗапросовXML")=0 Тогда 
		Попытка
			ФС.УдалитьФайл(ИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция УстановитьНазваниеОкна(КонтекстФормы) 
	Если ЭтоТестовыйРежим = 0 Тогда
		Заголовок = "Меркурий - РАБОЧАЯ версия";
	Иначе
		Заголовок = "Меркурий - ТЕСТОВАЯ версия";
	КонецЕсли;
	
	КонтекстФормы.Форма.Заголовок(Заголовок);
	Возврат 1;
КонецФункции

Функция ЗагрузитьПараметры(КонтекстФормы = "") Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПараметры");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПараметры(КонтекстФормы);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	//Если задан контекст формы, то кроме чтения настроек, происходит заполнение реквизитов на форме
	
	ИмяФайла = ИмяФайлаНастроек();
	СписокКонстант=СоздатьОбъект("СписокЗначений");
	
	Если фс.СуществуетФайл(ИмяФайла)=0 Тогда
		Сообщить("Файл с константами ["+ИмяФайла+"] не найден","!");
	Иначе
		ЗначениеИзФайла(ИмяФайла,СписокКонстант);
	КонецЕсли;
	

	Если ПустоеЗначение(КонтекстФормы)=0 тогда
		УстановитьНазваниеОкна(КонтекстФормы);
		
		КонтекстФормы.param_username 		= СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
		КонтекстФормы.param_password 		= СписокКонстант.Получить("param_password");
		КонтекстФормы.param_issuer_id		= СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
		КонтекстФормы.param_service_id 		= СписокКонстант.Получить("param_service_id") ;
		КонтекстФормы.param_api_key 		= СписокКонстант.Получить("param_api_key") ;

		КонтекстФормы.param_intiator_login 	= СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
		КонтекстФормы.param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
		КонтекстФормы.param_vetdoctor_fio 	= СписокКонстант.Получить("param_vetdoctor_fio");
		КонтекстФормы.param_vetdoctor_post 	= СписокКонстант.Получить("param_vetdoctor_post");
	
		КонтекстФормы.Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
		КонтекстФормы.Отправитель_Площадка 	= СписокКонстант.Получить("Отправитель_Площадка");
	
		КонтекстФормы.Страна 				= СписокКонстант.Получить("Страна");
		КонтекстФормы.Регион 				= СписокКонстант.Получить("Регион");
		КонтекстФормы.Город 				= СписокКонстант.Получить("Город");
	
		КонтекстФормы.ВСД_Экспертиза 		= СписокКонстант.Получить("ВСД_Экспертиза");	
		Если ПустоеЗначение(КонтекстФормы.ВСД_Экспертиза)=1 Тогда		
			КонтекстФормы.ВСД_Экспертиза 	= "Произ.лабор ";
		КонецЕсли;
	
		КонтекстФормы.ВСД_Местность 		= СписокКонстант.Получить("ВСД_Местность");
		Если ПустоеЗначение(КонтекстФормы.ВСД_Местность)=1  Тогда 
			КонтекстФормы.ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
		КонецЕсли;

		КонтекстФормы.ВСД_ОсобыеОтметки 	= СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		
		//КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
		КонтекстФормы.КаталогЛогов = СписокКонстант.Получить("КаталогЛогов");
		Если ПустоеЗначение(КонтекстФормы.КаталогЛогов )=1 Тогда 
			КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
		КонецЕсли;
		Если ФС.СуществуетФайл(КонтекстФормы.КаталогЛогов)=0 Тогда 
			ФС.СоздатьКаталог(КонтекстФормы.КаталогЛогов);
		КонецЕсли;
		
		КонтекстФормы.ПаузаСек 				= СписокКонстант.Получить("ПаузаСек");
		Если ПустоеЗначение(КонтекстФормы.ПаузаСек)=1 Тогда
			КонтекстФормы.ПаузаСек=10;
		КонецЕсли;
		
		КонтекстФормы.НазваниеРеквизитаГрузополучатель  = СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
		Если ПустоеЗначение(КонтекстФормы.НазваниеРеквизитаГрузополучатель)=1 Тогда
			КонтекстФормы.НазваниеРеквизитаГрузополучатель="Контрагент";
		КонецЕсли;
		
		КонтекстФормы.ОтладкаЗапросовXML  	= СписокКонстант.Получить("ОтладкаЗапросовXML");
		
		КонтекстФормы.ВСД_Продукция_Свойство = СписокКонстант.Получить("ВСД_Продукция_Свойство");
		КонтекстФормы.Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
		
		КонтекстФормы.НазваниеРеквизитаКоличествоМест  = СписокКонстант.Получить("НазваниеРеквизитаКоличествоМест");
		Если ПустоеЗначение(КонтекстФормы.НазваниеРеквизитаКоличествоМест)=1 Тогда
			КонтекстФормы.НазваниеРеквизитаКоличествоМест="КоличествоМест";
		КонецЕсли;
		
		КонтекстФормы.ПропускатьПустыеСвойства = СписокКонстант.Получить("ПропускатьПустыеСвойства");
		
		КонтекстФормы.НазваниеВидаДокументаРеализация = СписокКонстант.Получить("НазваниеВидаДокументаРеализация");
		Если ПустоеЗначение(КонтекстФормы.НазваниеВидаДокументаРеализация)=1 Тогда 
			КонтекстФормы.НазваниеВидаДокументаРеализация = "Реализация";
		КонецЕсли;	
		
		КонтекстФормы.НазваниеРеквизитаКоличество = СписокКонстант.Получить("НазваниеРеквизитаКоличество");
		Если ПустоеЗначение(КонтекстФормы.НазваниеРеквизитаКоличество)=1 Тогда 
			КонтекстФормы.НазваниеРеквизитаКоличество = "Количество";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция Пауза(ЗадержкаСекунд) Экспорт
	//Состояние("Пауза "+ПаузаСек+" сек");
	//scr = СоздатьОбъект("WScript.Shell");
	//scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ЗадержкаСекунд) ),0,1); 

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Пауза");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Пауза(ЗадержкаСекунд);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Компонента.Pause(ЗадержкаСекунд*1000); // в ms
КонецФункции

Функция ПолучитьОтветХС(applicationID, ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОтветХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОтветХС(applicationID, ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат 0;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("base:guid").text;
	uuid = enterprise.selectSingleNode("base:uuid").text;
	active = enterprise.selectSingleNode("base:active").text;
						
	Если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
		Возврат 1;
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
		Возврат 0;
	КонецЕсли;

КонецФункции


//======= ФУНКЦИИ ПО ПОИСКУ ИНФОРМАЦММ ==============

Функция НайтиФормуУпаковки(guid, name) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиФормуУпаковки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиФормуУпаковки(guid, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Форма упаковки не определена "+guid+" = "+name,"!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиЕдИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиЕдИзмерения(guid, uuid);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+guid+"] добавлена");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			//Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Единица измерения не определена ["+guid+"]","!");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиПродукцию(guid) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПродукцию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПродукцию(guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена. Выполните загрузку справочника Продукция");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Guid;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция Найти_Продукция_Элемент(Название, Uuid="", ВСД_Продукция, ВСД_ВидПродукции) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Найти_Продукция_Элемент");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Найти_Продукция_Элемент(Название, Uuid, ВСД_Продукция, ВСД_ВидПродукции);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Рез = "";
	Uuid = СокрЛП(Uuid);
	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
	если ПустоеЗначение(Uuid)=0 Тогда			
		
		Если Спр.НайтиПоРеквизиту("Uuid",Uuid,1)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент UUID ["+Uuid+"] не найдена. Создан новый элемент. ");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.Записать();
			
		КонецЕсли;
	Иначе
		Если Спр.НайтиПоНаименованию(Название,0,0)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент название ["+Название+"] не найдена. Создан новый элемент.");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Название;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			//Спр.Uuid = Uuid;
			Спр.Записать();
		КонецЕсли;
	КонецЕсли;
	рез = Спр.ТекущийЭлемент();
	
	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВидПродукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВидПродукции(guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена. Выполните инициализацию", "!");
			//создать 
			//Спр.Новый();
			////Спр.Код = ;
			//Спр.Наименование = Guid;
			//Спр.GUID = guid;
			//Спр.Записать();
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid Вида продукции");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиСтрануПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиСтрануПоGUID(GUID, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Страна");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Страна "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиРегионПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиРегионПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиРегионПоGUID(GUID, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Регион");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Регион "+GUID);			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиГородПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиГородПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиГородПоGUID(GUID, name);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Город");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			//Сообщить("Guid "+Guid+" не найден, создайте ВСД_Город, выполните синхронизацию");
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Город "+GUID);
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция НайтиХозСубъект(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХозСубъект");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХозСубъект(ВыбКлиент);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Попытка		
		Если ПустоеЗначение(ВыбКлиент.Плательщик) = 0 Тогда 
			ВыбКлиент = ВыбКлиент.Плательщик;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	
	Если ЭтоSQL=1 Тогда 	
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "select 
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	$СпрХС.GUID,
		|	$СпрХС.Контрагент
		|from $Справочник.ВСД_ХозСубъект as СпрХС 
		|where 
		|	$СпрХС.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	  	
	Иначе	
	
		Запрос = базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "select 
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	СпрХС.GUID,
		|	СпрХС.Контрагент
		|from [Справочник.ВСД_ХозСубъект] as СпрХС 
		|where 
		|	СпрХС.Контрагент=:ВыбКлиент
		|";

		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
	
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;
	
	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	Иначе
		СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		СпрХС.Новый();
		СпрХС.Наименование = ВыбКлиент.Наименование;
		СпрХС.Контрагент = ВыбКлиент;
		СпрХС.Записать();
		Сообщить("Создан новый элемент справочника ВСД_ХозСубъект: "+ВыбКлиент);
		
		результат = спрХС.ТекущийЭлемент();
	КонецЕсли;
	
	Возврат результат;
КонецФункции

Функция НайтиПартиюПоGUID(GUID) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПартиюПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПартиюПоGUID(GUID);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Спр = СоздатьОбъект("Справочник.ВСД_Партия");	
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from $Справочник.ВСД_Партия as Партия  
	  	|where 
	  	|	$Партия.GUID= :GUID
	  	|";
		RS.УстановитьТекстовыйПараметр("GUID", GUID);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
			
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from [Справочник.ВСД_Партия] as Партия  
	  	|where 
	  	|	Партия.GUID= :GUID
	  	|";	
		Запрос.Подставлять("GUID", GUID);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	Если ПустоеЗначение(тз)=1 Тогда 
		Спр.Новый();
		//Док.ДокОснование = ДокОснование;
	Иначе
		Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,1));
		//Спр.СделатьНеПроведенным();
		Спр.СнятьПометкуУдаления();
	конецЕсли;
  	
	Возврат  Спр;
КонецФункции

Функция НайтиВСД(applicationId, uuid, ВидДокумента) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВСД(applicationId, uuid, ВидДокумента);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	
	//
	// В первую очередь ищем UUID
	// если не находим - тогда по 	applicationId
	//
	Если ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		Если ПустоеЗначение(UUID)=0 Тогда 
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from $Документ."+ВидДокумента+" as ДокВСД  
		  	|where 
		  	|	( $ДокВСД.UUID = :uuid)
		  	|";
			RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
			RS.УстановитьТекстовыйПараметр("uuid", uuid);  
			//RS.Отладка(1);
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			
			Если тз.КоличествоСтрок()=0 Тогда 
				ТекстЗапроса = "
				|select 	              
			    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
			    |from $Документ."+ВидДокумента+" as ДокВСД  
			  	|where 
			  	|($ДокВСД.applicationId = :applicationId) 
			  	|";
				RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
				RS.УстановитьТекстовыйПараметр("uuid", uuid);  
				//RS.Отладка(1);
				тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
			КонецЕсли;
		Иначе
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from $Документ."+ВидДокумента+" as ДокВСД  
		  	|where 
		  	|($ДокВСД.applicationId = :applicationId) 
		  	|";
			RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
			RS.УстановитьТекстовыйПараметр("uuid", uuid);  
			//RS.Отладка(1);
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
		КонецЕсли;
	Иначе
		Если ПустоеЗначение(UUID)=0 Тогда 	
			Запрос = базаДанных.НовыйЗапрос();
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from [Документ."+ВидДокумента+"] as ДокВСД  
		  	|where 
		  	|	( ДокВСД.UUID = :uuid)
		  	|";	
			Запрос.Подставлять("applicationId", applicationId);
			Запрос.Подставлять("uuid", uuid);
			//тз.Отладка();
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			Если тз.КоличествоСтрок()=0 Тогда 
				ТекстЗапроса = "
				|select 	              
			    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
			    |from [Документ."+ВидДокумента+"] as ДокВСД  
			  	|where 
			  	|	(ДокВСД.applicationId= :applicationId) 
			  	|";	
				Запрос.Подставлять("applicationId", applicationId);
				Запрос.Подставлять("uuid", uuid);
				//тз.Отладка();
				ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			КонецЕсли;			
		Иначе
			Запрос = базаДанных.НовыйЗапрос();
			ТекстЗапроса = "
			|select 	              
		    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
		    |from [Документ."+ВидДокумента+"] as ДокВСД  
		  	|where 
		  	|	(ДокВСД.applicationId= :applicationId) 
		  	|";	
			Запрос.Подставлять("applicationId", applicationId);
			Запрос.Подставлять("uuid", uuid);
			//тз.Отладка();
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	//тз.ВыбратьСтроку();
	
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
		Док.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
	Иначе		
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));		
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;	
	
	Возврат Док;
КонецФункции



//****************** Площадки **********************************

Функция НайтиХСпоGUID(Guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХСпоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХСпоGUID(guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда 
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");
			
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGUID(GUID, ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise = objDom.selectSingleNode("//enterprise") ;
						
	guid = enterprise.selectSingleNode("guid").text;
	uuid = enterprise.selectSingleNode("uuid").text;
		
	//updateDate = unit.selectSingleNode("updateDate").text;
	//createDate = unit.selectSingleNode("createDate").text;		
	name = enterprise.selectSingleNode("name").text;
	active = enterprise.selectSingleNode("active").text;
		
	address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
	
	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=0 Тогда 
		Спр.Новый();
		Спр.УстановитьНовыйКод("00");
		
	КонецЕсли;
	
	Спр.Наименование = name;
	Спр.Адрес = address;
	Спр.GUID = guid;
	Спр.UUID = uuid;	
	
	Если ПустоеЗначение(ХС)=1 Тогда
		Сообщить("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ","!!");
		//Возврат;
	Иначе 
		Спр.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;	
	
	спр.Записать();
	Сообщить("Записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+Спр.Наименование+"] GUID = "+ Guid);		
	
КонецФункции

Функция ЗагрузитьПлощадки(ХС)	Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадки(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    activityLocationList = objDom.selectNodes("//activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
						
		guid = activityLocation.selectSingleNode("enterprise").selectSingleNode("guid").text;
		
    	ЗагрузитьПлощадкуПоGUID(guid, ХС);
					
	КонецЦикла;
	
	Сообщить("Загрузка площадок завершена","i");
КонецФункции

Функция ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС="", тзПлощадки) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGuidТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС, тзПлощадки);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	Сообщить("Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
    enterprise = objDom.selectSingleNode("//enterprise") ;
						
	guid = enterprise.selectSingleNode("guid").text;
	uuid = enterprise.selectSingleNode("uuid").text;
		
	updateDate = enterprise.selectSingleNode("updateDate").text;
	createDate = enterprise.selectSingleNode("createDate").text;		
	name = enterprise.selectSingleNode("name").text;
	active = enterprise.selectSingleNode("active").text;
		
	address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
	
	Попытка
		owner = enterprise.selectSingleNode("owner").selectSingleNode("guid").text;
		ownerName = enterprise.selectSingleNode("owner").selectSingleNode("name").text;
	Исключение
		owner="";
	КонецПопытки;
	
	Если owner<>СокрЛП(ХС.GUID) Тогда 
		Сообщить("Площадка пропущена ["+name+"] принадлежит другому ХозСубъекту ["+ownerName+"] ","!");
		//Возврат;
	КонецЕсли;
	
	тзПлощадки.НоваяСтрока();
	
	тзПлощадки.Наименование = name;
	тзПлощадки.Адрес = address;
	тзПлощадки.Активна = active;
	тзПлощадки.GUID = guid;
	тзПлощадки.UUID = uuid;
	тзПлощадки.ДатаСоздания = createDate;
	тзПлощадки.ДатаИзменения = updateDate;
	Если ПустоеЗначение(owner)=0 тогда 
		тзПлощадки.ХозСубъект = НайтиХСпоGUID(owner);
		//тзПлощадки.ХозСубъектНаименование = ownerName;
	Иначе
		тзПлощадки.ХозСубъект = ХС;
		//тзПлощадки.ХозСубъектНаименование = ХС.Наименование;
	КонецЕсли;
		
	Сообщить("Загружена информация о площадке ["+name+"] GUID = "+ guid,"i");		
	
	УдалитьXML( Компонента.LogFilename );
КонецФункции

Функция ЗагрузитьПлощадкиТЗ(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкиТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкиТЗ(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	
	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]","i");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");	
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");
	
    activityLocationList = objDom.selectNodes("//activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
						
		guid = activityLocation.selectSingleNode("enterprise").selectSingleNode("guid").text;
		
    	ЗагрузитьПлощадкуПоGuidТЗ(guid, ХС, тзПлощадки);
					
	КонецЦикла;
	
	Сообщить("Загрузка информации о площадках завершена","i");
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");	

	ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");	
	
	УдалитьXML( Компонента.LogFilename );
КонецФункции

Функция НайтиПлощадку(Guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадку");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадку(Guid);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
			//создать площадку

			ЗагрузитьПлощадкуПоGUID(guid);
			
		КонецЕсли;
	КонецЕсли;
		
	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("ВСД_Площадка не найдена ["+Guid+"]","!");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Функция НайтиПлощадкуПоКонтрагенту(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоКонтрагенту");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоКонтрагенту(ВыбКлиент);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	результат = "";
	
	Если ЭтоSQL=1 Тогда 	
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     

		ТекстЗапроса = "select 
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	$СпрПл.GUID,
		|	$СпрПл.Контрагент
		|from $Справочник.ВСД_Площадка as СпрПл 
		|where 
		|	$СпрПл.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);			
	  	
	Иначе	
		Запрос = базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "select 
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	СпрПл.GUID,
		|	СпрПл.Контрагент
		|from [Справочник.ВСД_Площадка] as СпрПл 
		|where 
		|	СпрПл.Контрагент=:ВыбКлиент
		|";
		
		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
	
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;
	
	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	КонецЕсли;
	
	Возврат результат;
КонецФункции

Функция НайтиПлощадкуПоСкладу(ВыбСклад) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоСкладу");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоСкладу(ВыбСклад);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Рез = "";
	если ПустоеЗначение(ВыбСклад)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("Склад",ВыбСклад,1)=1 Тогда 
			Рез = Спр.ТекущийЭлемент();			
		Иначе
			Сообщить("Площадка со складом ["+ВыбСклад+"] не найдена: ","!");
			//создать площадку

			//ЗагрузитьПлощадкуПоGUID(guid);
			
		КонецЕсли;
	Иначе
		Сообщить("не указан склад Площадки","!");
	КонецЕсли;
		
	Возврат рез;
КонецФункции

Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкиПоНазванию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		Сообщить("Не указан ХозСубъект GUID ","!");
		Возврат 0;
	КонецЕсли;
	
	
	Стр = СокрЛП(ХС.Контрагент.ЮрФизЛицо.ПолнНаименование);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ЮрФизЛицо.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ]","i");		
	Результат = Компонента.GetRussianEnterpriseListByName( стр, СокрЛП(Регион.GUID) );
	//Отладка();
	
	Если Результат="SUCCESS" Тогда		
		
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
		тзПлощадки.НоваяКолонка("Наименование");
		тзПлощадки.НоваяКолонка("Адрес");
		тзПлощадки.НоваяКолонка("Активна");
		тзПлощадки.НоваяКолонка("GUID");
		тзПлощадки.НоваяКолонка("UUID");
		//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");	
		тзПлощадки.НоваяКолонка("ХозСубъект");
		тзПлощадки.НоваяКолонка("ДатаСоздания");
		тзПлощадки.НоваяКолонка("ДатаИзменения");
		
		objDom=СоздатьОбъект("MSXML2.DOMDocument");
		objDom.load(Компонента.LogFilename);    
		
		enterpriseList = objDom.selectNodes("//enterprise") ;
		Для i1 = 0 По enterpriseList.length - 1 Цикл
			enterprise=enterpriseList.item(i1);
			
			guid = enterprise.selectSingleNode("guid").text;
			uuid = enterprise.selectSingleNode("uuid").text;
			name = enterprise.selectSingleNode("name").text;
			active = enterprise.selectSingleNode("active").text;
			
			address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;			
			
			тзПлощадки.НоваяСтрока();
			тзПлощадки.Наименование = name;
			тзПлощадки.адрес = address;
			//тз.Регион = region;
			тзПлощадки.guid = guid;
			тзПлощадки.uuid = uuid;
			тзПлощадки.активна = active;
			тзПлощадки.ХозСубъект = ХС;
			
		КонецЦикла;
		
		Сообщить("Загрузка площадок завершена","i");
		
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
		СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");	
		
		ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");	
		
		УдалитьXML( Компонента.LogFilename );
		Возврат 1;
	КонецЕсли;
	
	УдалитьXML( Компонента.LogFilename );
	Возврат 0;
КонецФункции

Функция ВыбратьВсеПлощадкиХС(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВыбратьВсеПлощадкиХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВыбратьВсеПлощадкиХС(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";
	
	ВыбGuidХозСубъекта = (ХС.GUID);
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	Возврат тз;
КонецФункции

//Функция ОткрытьПлощадкиПоХС(КонтекстФормы,ВыбХС) Экспорт  //данная функция не работает в объекте (не работает ОткрытьПодбор)
//
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОткрытьПлощадкиПоХС");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ОткрытьПлощадкиПоХС(КонтекстФормы,ВыбХС);
//	КонецЕсли;	
//	//}
//
//	//стандартное поведение функции		
//	тз = ВыбратьВсеПлощадкиХС(ВыбХС);
//	
//	СписокОтбора = СоздатьОбъект("СписокЗначений");
//	
//	Тз.ВыбратьСтроки();
//	Пока ТЗ.ПолучитьСТроку()=1 Цикл
//		СписокОтбора.ДобавитьЗначение(тз.id);
//	КонецЦикла;			
//			
//	КонтекстФормы.ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);
//
//КонецФункции

Функция ХС_ПолучитьGuid(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьGuidХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьGuidХС(ХС);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат "ERROR";
	КонецЕсли;	
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");		
	Результат = Компонента.GetBusinessEntityByINN( ИНН );	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда

	  	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(Компонента.LogFilename);    
	    	
		Попытка			
		    enterprise=objDom.selectSingleNode("//businessEntity") ;
			guid = enterprise.selectSingleNode("guid").text;
			uuid = enterprise.selectSingleNode("uuid").text;
			active = enterprise.selectSingleNode("active").text;
		
			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ХС);
			спр.GUID = GUID;
			спр.UUID = uuid;
			спр.Записать();
			Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);			
		Исключение			
			Сообщить("Получен пустой ответ GetBusinessEntityByINN","!");
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции


//======= ФУНКЦИИ ПО ИНИЦИАЛИЗАЦИИ ХС ==============

Функция ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Владелец) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Загрузить_ВидПродукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Загрузить_ВидПродукции(guid, Владелец);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	Если ПустоеЗначение(Владелец)=1 Тогда 
		Сообщить("Не указан владелец "+guid,"!");
		Возврат 0;
	КонецЕсли;

	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetSubProductByProductList( guid );
	
	//Отладка();
	
	//Если Результат="SUCCESS" Тогда
		
		//ЗагрузитьXML_Номенклатура( Компонента.LogFilename );
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		objDom=СоздатьОбъект("MSXML2.DOMDocument");
		objDom.load(Компонента.LogFilename);    
		
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		
		List = objDom.selectNodes("//subProduct") ;
		Для i1 = 0 По List.length - 1 Цикл
		    item = List.item(i1);

			uuid = item.selectSingleNode("uuid").text;
			guid = item.selectSingleNode("guid").text;
			st = item.selectSingleNode("status").text;
			updateDate = item.selectSingleNode("updateDate").text;
			createDate = item.selectSingleNode("createDate").text;		
			name = item.selectSingleNode("name").text;
			Попытка 
				code = item.selectSingleNode("code").text;
			Исключение
				code ="";
			КонецПопытки;
			
			Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
				//Рез = Спр.ТекущийЭлемент();
			Иначе
				Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
				Спр.Новый();
				//рез = Спр.ТекущийЭлемент();
			КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.КодТНВЭД = code;
			Спр.Владелец = Владелец.ТекущийЭлемент();
			Спр.Записать();
			
		КонецЦикла;
	//КонецЕсли;

	Возврат 1;
КонецФункции

Функция ЗагрузитьXML_ЕдиницыИзмерения(имяФайла) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ЕдиницыИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ЕдиницыИзмерения(имяФайла);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);    
    
    unitList = objDom.selectNodes("//unit") ;
    Для i1 = 0 По unitList.length - 1 Цикл
        unit=unitList.item(i1);
		
		uuid = unit.selectSingleNode("uuid").text;
		guid = unit.selectSingleNode("guid").text;
		//updateDate = unit.selectSingleNode("updateDate").text;
		//createDate = unit.selectSingleNode("createDate").text;		
		name = unit.selectSingleNode("name").text;
		factor = unit.selectSingleNode("factor").text;
		//commonUnitGuid = unit.selectSingleNode("commonUnitGuid").text;
		
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Коэффициент = factor;
			Спр.Записать();

    КонецЦикла;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьСтраны() Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьСтраны");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьСтраны();
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	Сообщить(" Запрос GetCountryList ","i");		
	Результат = Компонента.GetCountryList( );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Спр = СоздатьОбъект("Справочник.ВСД_Страна");
    countryList = objDom.selectNodes("//country") ;
    Для i1 = 0 По countryList.length - 1 Цикл
        country=countryList.item(i1);
		
		uuid = country.selectSingleNode("uuid").text;
		guid = country.selectSingleNode("guid").text;
		st = country.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = country.selectSingleNode("name").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Страна ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Страна ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка стран завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРегионы(Страна) Экспорт //проверить реквизит страна ... как о

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьРегионы");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьРегионы(Страна);
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	//Страна_GUID = ?(ПустоеЗначение(Страна)=1,"",Страна.GUID);
		
	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]","i");		
	Результат = Компонента.GetRegionList( СокрЛП(Страна.GUID) );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Спр = СоздатьОбъект("Справочник.ВСД_Регион");
    regionList = objDom.selectNodes("//region") ;
    Для i1 = 0 По regionList.length - 1 Цикл
        region=regionList.item(i1);
		
		uuid = region.selectSingleNode("uuid").text;
		guid = region.selectSingleNode("guid").text;
		st = region.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = region.selectSingleNode("name").text;
		view = region.selectSingleNode("view").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Регион ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Регион ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьГорода(Регион) Экспорт 

	//стандартное поведение функции			
	//Страна_GUID = ?(ПустоеЗначение(Страна)=1,"",Страна_GUID);
		
	Сообщить(" Запрос GetLocalityListByRegion "+Регион+" ["+СокрЛП(Регион.GUID) +"]","i");		
	Результат = Компонента.GetLocalityListByRegion( СокрЛП(Регион.GUID) );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);    
    
	Спр = СоздатьОбъект("Справочник.ВСД_Город");
    List = objDom.selectNodes("//locality") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);
		
		uuid = item.selectSingleNode("uuid").text;
		guid = item.selectSingleNode("guid").text;
		st = item.selectSingleNode("status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;		
		name = item.selectSingleNode("name").text;
		view = item.selectSingleNode("view").text;
					
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
			//Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Новый ВСД_Город ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;		
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Город ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьЕдиницыИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	Сообщить(" Запрос GetUnitList ","i");		
	Результат = Компонента.GetUnitList();
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		ЗагрузитьXML_ЕдиницыИзмерения( Компонента.LogFilename );

	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьПродукцию(Тип) Экспорт
	// http://help.vetrf.ru/wiki/ProductType

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьПродукцию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьПродукцию(Тип);
	КонецЕсли;	
	//}

	//стандартное поведение функции			
	Сообщить(" Запрос GetProductList ","i");		
	Результат = Компонента.GetProductList( Тип );
	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда
		
		//ЗагрузитьXML_Номенклатура( Компонента.LogFilename );		
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		objDom=СоздатьОбъект("MSXML2.DOMDocument");
		objDom.load(Компонента.LogFilename);    

		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		
		productList = objDom.selectNodes("//product") ;
		Для i1 = 0 По productList.length - 1 Цикл
		    product=productList.item(i1);
			
			uuid = product.selectSingleNode("uuid").text;
			guid = product.selectSingleNode("guid").text;
			st = product.selectSingleNode("status").text;
			updateDate = product.selectSingleNode("updateDate").text;
			createDate = product.selectSingleNode("createDate").text;		
			name = product.selectSingleNode("name").text;
			Попытка
				code = product.selectSingleNode("code").text;
			Исключение
				code ="";
			КонецПопытки;
			productType = product.selectSingleNode("productType").text;
			
			Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда 
				//Рез = Спр.ТекущийЭлемент();
			Иначе
				Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
				Спр.Новый();
				//рез = Спр.ТекущийЭлемент();
				Спр.Наименование = name;
				Спр.GUID = guid;
				Спр.UUID = UUID;
				Спр.КодТНВЭД = code;
				Спр.Тип = ProductType;
				Спр.Записать();
				
			КонецЕсли;		
			
			Сообщить("Загрузка [Видов продукции] "+name);
			ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Спр.ТекущийЭлемент());
		КонецЦикла;
		
	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецФункции


//======= СЛУЖЕБНЫЕ ФУНКЦИИ ПО НАСТРОЙКЕ РАБОТЫ МОДУЛЯ ==============

Функция ВыборВерсии() Экспорт
		
	ИмяФайлаНастроек = ИмяФайлаНастроек();
	
	Если ЭтоТестовыйРежим=0 Тогда 	
		// РАБОЧАЯ		
		ИмяDLL = "SoapDLL_work";
		ОбработкаОбмена = "Меркурий_Обмен.ert";		
		//Форма.Заголовок("Меркурий - РАБОЧАЯ [!!!]");
	Иначе		
		// ТЕСТ
		ИмяDLL = "SoapDLL_test";
		ОбработкаОбмена = "Меркурий_Обмен_ТЕСТ.ert";	
		//Форма.Заголовок("Меркурий - ТЕСТ");		
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);			
		Компонента = СоздатьОбъект("AddIn."+ИмяDLL); 		
	Исключение
			Сообщить("Библиотека не зарегистрирована","!");
			Сообщить(ОписаниеОшибки());
			Возврат 0;
	КонецПопытки;	
	
	Если фс.СуществуетФайл(ИмяФайлаНастроек)=0 Тогда
		Сообщить("Файл с константами ["+ИмяФайлаНастроек+"] не найден.
		|Сохраните параметры ","!");			
	КонецЕсли;		
		
	ЗагрузитьПараметры("");
	
	Если ПустоеЗначение(СписокКонстант.Получить("КаталогЛогов"))=1 Тогда 
		Сообщить("Внимание: каталог log файлов не определен","!");
	КонецЕсли;
	
	Компонента.Init(      
		СписокКонстант.Получить("param_username"),  		//string USERNAME 
        СписокКонстант.Получить("param_password"), 			//string PASSWORD = 
        СписокКонстант.Получить("param_issuer_id"), 		//string ISSUER_ID 
        СписокКонстант.Получить("param_service_id"), 		// string SERVICE_ID = 
        СписокКонстант.Получить("param_api_key"), 			//string API_KEY = 
        СписокКонстант.Получить("param_intiator_login"), 	//string USER_LOGIN = 
        СписокКонстант.Получить("param_vetdoctor_login"), 	//string VETDOCTOR_LOGIN = 
		СписокКонстант.Получить("КаталогЛогов"),  			// для логов
		СписокКонстант.Получить("ОтладкаЗапросовXML"),
		СписокКонстант.Получить("param_vetdoctor_fio"),
		СписокКонстант.Получить("param_vetdoctor_post")
		);
	
	Возврат 1;
КонецФункции // ВыборВерсии

Функция Инициализация( _КаталогМодуля, _КаталогБиблиотек, _РежимРаботы) Экспорт
	//КаталогМодуля 					- каталог где лежат все обработки
	//КаталогДополнительныхБиблиотек	- каталог хранения дополнительных библиотек (например 1sqlite)
	//РежимРаботы						- 0 = это рабочий режим
	//									  1 = это тестовый режим	

	ЭтоТестовыйРежим = _РежимРаботы;	
	КаталогОбработки = _КаталогМодуля;
	
	ЭтоSQL = ФС.СуществуетФайл(КаталогИБ()+"1cv7.dba");	
	Если ЭтоSQL=1 Тогда 
		Попытка
			RS = СоздатьОбъект("ODBCRecordset");
			RS.УстБД1С();     
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	Иначе		
		Попытка
			базаДанных = СоздатьОбъект("SQLiteBase");
		Исключение
					
			Если ЗагрузитьВнешнююКомпоненту(_КаталогБиблиотек + "1sqlite.dll")	<>	1	Тогда ////mbIkola	
			//Если ЗагрузитьВнешнююКомпоненту("1sqlite.dll") <> 1	Тогда
				Предупреждение("Компонента 1sqlite.dll не найдена!");
				СтатусВозврата(0);
				Возврат 0;
			КонецЕсли;
			базаДанных = СоздатьОбъект("SQLiteBase");
		КонецПопытки;	
		базаДанных.Открыть(":memory:");	
	КонецЕсли;	
	
	Возврат ВыборВерсии();
	
КонецФункции // Инициализация

