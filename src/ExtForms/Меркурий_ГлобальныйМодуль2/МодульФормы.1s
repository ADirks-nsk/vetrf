//Авторы: 
// Синявский Филипп phsin@kb99.pro
// Дмитрий Жуков zhukov@kb99.pro
// Все права защищены


//Перем Компонента Экспорт;
//Перем СписокКонстант Экспорт;
//Перем ПараметрыФирм Экспорт; // ЖД  Многофирм
//Перем базаДанных Экспорт;
//Перем ЭтоSQL Экспорт;
//Перем ТестовыйРежим Экспорт;
Перем ТаблицаПереопределенныхФункций;
//Перем ИмяDLL Экспорт; 
//Перем ТермическиеУсловияПеревозки Экспорт;
Перем ГМ;

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Конструктор()
	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");
	
КонецПроцедуры

Процедура Деструктор() 
КонецПроцедуры
//

Процедура Инициализация(ГлобавльныйМодуль) Экспорт
	ГМ = ГлобавльныйМодуль;
КонецПроцедуры

//======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);
	
	
	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;	
	
	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;	
КонецФункции // МодульВыполнения
//======================================================================

//======= ФУНКЦИИ ПО СБОРУ ИНФОРМАЦИИ О КЛИЕНТЕ ==============

Функция НазваниеРеквизитаНоменклатура() экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НазваниеРеквизитаНоменклатура");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НазваниеРеквизитаНоменклатура();
	КонецЕсли;	
	//}

	Возврат  "Номенклатура"; 	
КонецФункции


Функция ПолучитьНаименованиеКлиента(ВыбКлиент) экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьНаименованиеКлиента");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьНаименованиеКлиента(ВыбКлиент);
	КонецЕсли;	
	//}

	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ПолнНаименование); 	
КонецФункции

Функция ПолучитьЮрАдрес(ВыбКлиент) экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьЮрАдрес");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьЮрАдрес(ВыбКлиент);
	КонецЕсли;	
	//}

	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ЮрАдрес); 	
КонецФункции

Функция ПолучитьФактАдрес(ВыбКлиент) экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФактАдрес");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФактАдрес(ВыбКлиент);
	КонецЕсли;	
	//}

	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ФактАдрес); 	
КонецФункции

Функция ПолучитьИНН(ВыбКлиент) экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИНН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИНН(ВыбКлиент);
	КонецЕсли;	
	//}
	
	//стандартное поведение функции
	Попытка		
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	
	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);
	КонецЕсли;
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьКПП(ВыбКлиент) Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьКПП");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьКПП(ВыбКлиент);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
	Иначе
		Возврат "";

	КонецЕсли;
КонецФункции // ПолучитьКПП() //mbIkola - функция изменена

Функция ПолучитьОГРН(ВыбКлиент) экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОГРН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОГРН(ВыбКлиент);
	КонецЕсли;	
	//}
	
	//стандартное поведение функции
	Попытка		
		Возврат ВыбКлиент.ОГРН;
	Исключение
	КонецПопытки;

	Возврат "";
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьАвтора() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАвтора");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАвтора();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат глПользователь;
КонецФункции

Функция ПолучитьОсновнуюФирму() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОсновнуюФирму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОсновнуюФирму();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции

Функция ПолучитьФилиал() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФилиал");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФилиал();
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции


//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============

Функция ДатаXML(ВыбДата, Время="") Экспорт
	стрДата = ""+ДатаГод(ВыбДата)+"-";
	Если ДатаМесяц(ВыбДата)<10 ТОгда 
		стрДата=стрДата+"0"+ДатаМесяц(ВыбДата)+"-";
	Иначе
		стрДата=стрДата + ДатаМесяц(ВыбДата) + "-";
	КонецЕсли; 
	Если ДатаЧисло(ВыбДата)<10 Тогда 
		стрДата=стрДата + "0" + ДатаЧисло(ВыбДата);
	Иначе
		стрДата=стрДата + ДатаЧисло(ВыбДата);
	КонецЕсли;
		
	стрДата=стрДата+Время;
	
	Возврат стрДата;
КонецФункции

Функция булево(знЧисло) Экспорт

	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

// =========== Общие функции ==================

Функция Получить_ApplicationID(LogFilename) Экспорт

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(LogFilename);    
    
	//Если НайтиОшибки()>0 Тогда 
	//	Возврат Результат;
	//КонецЕсли;		
	
    item = objDom.selectSingleNode("//application") ;        
	
	applicationId = item.selectSingleNode("applicationId").text;
	st = item.selectSingleNode("status").text;

	Сообщить("Ответ: ["+applicationId+"] ["+st+"]");
	
	возврат applicationId;
КонецФункции

// из ГМ не экспортные  -ЖД в ГМ под версию 2 придумать
Функция НайтиВСДпоUUID( uuid ) 

	Если ПустоеЗначение(UUID)=1 Тогда 
		Возврат "";
	КонецЕсли;
	
	ВидДокумента = "ВСД2"; // ЖД v2

	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ГМ.ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД  
	  	|where 
	  	|	( $ДокВСД.UUID = :uuid)
	  	|";			
		RS.УстановитьТекстовыйПараметр("uuid", uuid);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД  
	  	|where 
	  	|	( ДокВСД.UUID = :uuid)
	  	|";	
		Запрос.Подставлять("uuid", uuid);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	//Возврат тз;
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
		//Док.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
	Иначе		
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));		
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;	
	
	Возврат Док;	
КонецФункции

//================= Партии ============================


Функция ЗаписатьПартию2(stockEntry) //ЖД нужно ли делать изменения в ВСД_Партия (Уровни упаковки, Фасовка) ?

	//стандартное поведение функции
		//t = stockEntry.text;	
		active = stockEntry.selectSingleNode("bs:active").text;
		
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("vd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		batch = stockEntry.selectSingleNode("vd:batch");
		
		product 	= batch.selectSingleNode("vd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vd:subProduct").selectSingleNode("bs:guid").text;

		Попытка
			productItemName = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='name']").text;
		Исключение
			//Сообщить("Не удалось получить элемент [productItem]","!");
			productItemName = "";
		КонецПопытки;
		
		Попытка
			productItemUuid = batch.selectSingleNode("vd:productItem").selectSingleNode("bs:uuid").text;
		Исключение			
			productItemUuid="";
		КонецПопытки;
		
		//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
		Попытка
			GTIN = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:globalID").text;
		Исключение
			GTIN="";
		КонецПопытки;
        //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		Попытка
			Артикул = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:code").text;
		Исключение
			Артикул="";
		КонецПопытки;
        //Наименование продукции. 
		Попытка
			НаимПрции = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:name").text;
		Исключение
			НаимПрции="";
		КонецПопытки;

		//<dt:packaging> Фасовка. - В чем отличие от упаковки? packageList 
		ФасУИД =""; ФасГУИД ="";ФасУН ="";ФасИмя ="";КолФас ="";ОбъемФас ="";ЕдФас ="";
		Попытка
			packaging = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:packaging");
			// 	Тип упаковки. 
			Попытка
				ТипФасовки = packaging.selectSingleNode("dt:packagingType").text; 
			Исключение
				ТипФасовки ="";
			КонецПопытки;
			// 	Идентификатор версии типа упаковки.
			Попытка
				ФасУИД =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:uuid").text;
			Исключение
				ФасУИД ="";
			КонецПопытки;
			//  	Глобальный идентификатор типа упаковки.
			Попытка
				ФасГУИД =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text;   // ВСД_ФормыУпаковки
			Исключение
				ФасГУИД ="";
			КонецПопытки;
			Попытка
				//  	Уникальный идентификатор упаковки. 
				ФасУН =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:globalID").text;
			Исключение
				ФасУН ="";
			КонецПопытки;
			
			// Наименование упаковки.
			Попытка
				ФасИмя =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text;
			Исключение
				ФасИмя ="";
			КонецПопытки;
				
			//  	Количество единиц упаковки.
			Попытка
				КолФас = packaging.selectSingleNode("dt:quantity").text;
			Исключение
				КолФас ="";
			КонецПопытки;
			// Объём единицы упаковки товара.
			Попытка
				ОбъемФас = packaging.selectSingleNode("dt:volume").text; 
			Исключение
				ОбъемФас ="";
			КонецПопытки;
			// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name> 
			Попытка
				ЕдФас = packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text;
			Исключение
				ЕдФас ="";
			КонецПопытки;			
		Исключение
			packaging = "";
		КонецПопытки;
		// Объем продукции

		volume 		= batch.selectSingleNode("vd:volume").text;
		unit		= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;

		Попытка
			unitGuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;			
		Исключение
			unitGuid = "";			
		КонецПопытки;
		Попытка
			unitUuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:uuid").text;			
		Исключение
			unitUuid = "";			
		КонецПопытки;
		//еще есть Наименование единицы измерения. 	<dt:name>кг.</dt:name> 


			
		ДатаИзготовления1="";
		ДатаИзготовления="";
		попытка			
			год = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:firstDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:firstDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:firstDate").selectSingleNode("dt:day").text;
			ДатаИзготовления1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаИзготовления = ""+batch.selectSingleNode("vd:dateOfProduction").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаИзготовления2="";
		попытка
			год = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:secondDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:secondDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:secondDate").selectSingleNode("dt:day").text;
			ДатаИзготовления2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		//ДатаСрокГодности
		попытка			
			год = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:firstDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:firstDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:firstDate").selectSingleNode("dt:day").text;
			ДатаСрокГодности1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаСрокГодности = ""+batch.selectSingleNode("vd:expiryDate").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;
		ДатаСрокГодности2="";
		попытка
			год = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:secondDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:secondDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:secondDate").selectSingleNode("dt:day").text;
			ДатаСрокГодности2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
     // <vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 

	 	Попытка
			Скоропортящийся = batch.selectSingleNode("vd:perishable").text; 			
		Исключение
			Скоропортящийся = "";
		КонецПопытки;

		// <vd:origin> 	vd:BatchOrigin 	[0..1] 	Сведения о происхождении продукции. 
		//		vd:productItem> 	dt:ProductItem 	[1..1] 	Наименование продукции в номенклатуре производителя.
		//			<bs:uuid> 	bs:UUID 	[0..1] 	Идентификатор версии номенклатуры продукции. 
		//			<dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. 	<dt:globalID>85672854</dt:globalID>
		//			<dt:name> 	bs:String255 	[1..1] 	Наименование продукции. 
		//			<dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя. 
		//		<vd:country> 	dt:Country 	[1..1] 	Страна происхождения партии продукции.
		// сведения о стране


		//Информация о предприятие-производителе продукции.

    	//Если предприятие было задано из справочника, то вернутся uuid и guid
    	//Если предприятие было указано текстом, то вернется name 		
		Попытка			
			producer = batch.selectSingleNode("vd:origin").selectSingleNode("vd:producer").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		Попытка			
			producerName = batch.selectSingleNode("vd:origin").selectSingleNode("vd:producer").selectSingleNode("dt:enterprise").selectSingleNode("dt:name").text;
		Исключение
			producerName = "";
		КонецПопытки;
		
		
		Попытка
			Некач = batch.selectSingleNode("vd:lowGradeCargo").text; 			
		Исключение
			Некач = "";
		КонецПопытки;
	//Список физической упаковки. vd:packageList		
	// С уровнями
		ТЗУровни = Создатьобъект("ТаблицаЗначений");		
		ТЗУровни.НоваяКолонка("НомерУровня","Число",1,0,,2);
		ТЗУровни.НоваяКолонка("Упаковка","Справочник.ВСД_ФормыУпаковки");
		ТЗУровни.НоваяКолонка("КолВо","Число",9,0,,5);
		ТЗУровни.НоваяКолонка("Маркировки");
	
		Попытка
			Pl = batch.selectSingleNode("*[local-name()='packageList']");
			PList = Pl.selectNodes("dt:package") ;
		Исключение 
			PList = "";
		КонецПопытки;
		Попытка
		    Для l1 = 0 По PList.length - 1 Цикл
				Узел = PList.item(l1);
				Уровень = Узел.selectSingleNode("dt:level").text;   // Уровень упаковки
				Попытка
					ПГУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text; // ВСД_ФормыУпаковки
				Исключение
					ПГУИД = "";
				КонецПопытки;
				Попытка
					ПУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:uuid").text; 
				Исключение
					ПУИД = "";
				КонецПопытки;
				//dt:globalID  	Уникальный идентификатор упаковки.
				Попытка
					ГлИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:globalID").text;
				Исключение
					ГлИД = "";
				КонецПопытки;
				// <dt:name>  	Наименование упаковки.
				Попытка
					ПакИмя = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text;
				Исключение
					ПакИмя = "";
				КонецПопытки;
				// dt:quantity  	Количество единиц упаковки.
				Попытка
					КолМест = Узел.selectSingleNode("dt:quantity").text;
				Исключение
					КолМест = "";
				КонецПопытки;
				ТЗУровни.НоваяСтрока();
				ТЗУровни.КолВо = Число(КолМест);
				ТЗУровни.НомерУровня = Уровень;
				ТЗУровни.Упаковка = ГМ.НайтиФормуУпаковки( ПГУИД, ПакИмя); 
				
				СзМаркировки = СоздатьОбъект("Списокзначений");
				//Маркировка партии продукции. Например
				//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
                //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
				Попытка
                Маркировки = Узел.selectNodes("dt:productMarks");//Узел.Attributes;
				
				Для кк =0 по Маркировки.length - 1 Цикл					
					МаркН = Маркировки.item(кк);
					МаркЗнач = МаркН.text;
					МаркКласс = МаркН.getattribute("class");
					СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
				КонецЦикла;
				Исключение КонецПопытки;
			    Если СзМаркировки.РазмерСписка()>0 Тогда
			        ТЗУровни.Маркировки = ЗначениеВСтроку(СзМаркировки);
			    КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		Попытка
			owner = batch.selectSingleNode("vd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
			ВладелецХС = ГМ.НайтиХСпоGUID(owner);
		Исключение
			ВладелецХС = "";
		КонецПопытки;
		// batch закончился
        // vd:vetDocument> 	vd:VetDocument 	[0..*] 	Ветеринарный документ, связанный с записью журнала 
		// 	<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии ветеринарного документа
		
		// конец </vd:stockEntry> 


		Партия = ГМ.НайтиПартиюПоGUID(guid);
		
		Если active="false" Тогда 
			Сообщить("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна","i");
			Партия.Удалить(0);
			Возврат Партия;
		КонецЕсли;
		
		Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);
		
		//Партия.ДатаДок = СтрокаВДату(createDate);
		Партия.ДатаИзменения = СтрокаВДату( updateDate );
						
		Партия.Получатель_ХозСубъект = ВладелецХС;
		Партия.Получатель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка"); 
		Партия.Производитель_Площадка = ГМ.НайтиПлощадку(producer);
		//Попытка
		//	Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
		Партия.Продукция 	= ГМ.НайтиПродукцию(product);
		Партия.ВидПродукции = ГМ.НайтиВидПродукции(subProduct);
		
		Партия.Продукция_Элемент = ГМ.Найти_Продукция_Элемент(productItemName, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
		
		Партия.Количество 	= Число(volume);
		// ЖД - Фасовка в партии - Нужно ли? 
		// 23/01/18 - Фасовка в ВСД_ПродукцияЭлемент - в Партию не загружаем    Нужно определиться
		
		попытка
			Партия.КоличествоМест = Число(КолФас);
		Исключение	КонецПопытки;
        попытка
			ФормаУпаковкиФас 			= ГМ.НайтиФормуУпаковки( ФасГУИД, ФасИмя);
			Партия.ФормаУпаковки = ФормаУпаковкиФас;	
		Исключение	КонецПопытки;
		попытка	
			Партия.ОбъемФас = Число(ОбъемФас);                         //ЖД реквизит отсутствует
		Исключение	КонецПопытки;
		попытка	
			Партия.ЕдиницаИзмеренияФас = ГМ.НайтиЕдИзмерения( ЕдФас );    //ЖД реквизит отсутствует
		Исключение	КонецПопытки;
	
		попытка	
			Если ТЗУровни.КоличествоСтрок()>0 Тогда
			    Партия.УровниУпаковки = ЗначениеВСтроку(ТзУровни);
			иначе
				Партия.УровниУпаковки ="";
			КонецЕсли;
		Исключение	КонецПопытки;

		Партия.ЕдиницаИзмерения = ГМ.НайтиЕдИзмерения( unitGuid, unitUUID );;
		
		Партия.ДатаИзготовления1 = ДатаИзготовления1;
		Партия.ДатаИзготовления2 = ДатаИзготовления2;
		Партия.ДатаИзготовления =  ДатаИзготовления;
		Партия.ДатаСрокГодности = ДатаСрокГодности;
		Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
		Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
		Партия.Статус = st;		
		Партия.GUID = guid;
		Партия.UUID = uuid;
		Партия.НомерЗаписи = entryNumber;
		Партия.НаименованиеПродукции = productItemName;
		Если ПустоеЗначение(productItemName)=0 Тогда 
			Партия.Наименование = productItemName;
		Иначе
			Партия.Наименование = Партия.Продукция_Элемент.Наименование;
		КонецЕсли;
		//Партия.Фирма = глПользователь.ОсновнаяФирма; // ЖД - продумать по фирмам
		//докОбъект.Фирма = глПользователь.ОсновнаяФирма; 
		//Вариант1  
		Если ПустоеЗначение(Партия.Фирма) = 1 Тогда
			Попытка
				поз = ГМ.ПараметрыФирм.НайтиЗначение(ГМ.СписокКонстант);	
				стр = "";
				ГМ.ПараметрыФирм.ПолучитьЗначение(поз,стр);
				Партия.Фирма = ЗначениеИзСтрокиВнутр(стр);
			Исключение
			КонецПопытки;
		КонецЕсли;



		Если ПустоеЗначение(Партия.Автор)=1 Тогда
			Партия.Автор = глПользователь;
		КонецЕсли;
		
		Попытка
			Партия.Филиал = глПользователь.Филиал;
		Исключение
		КонецПопытки;
		
		Партия.ВсдДата = СтрокаВДату(createDate);
		
		Если Партия.Количество=0 Тогда 
			
			Если ( ПустоеЗначение( Партия.ТекущийЭлемент() ) =0 ) Тогда
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
				Партия.Удалить(0);
			Иначе
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
		
		Партия.Записать();

		Возврат Партия;
КонецФункции // ЗаписатьПартию2


Функция ЗагрузитьXML_Партии2(имяФайла, докОснование="") Экспорт//ЖД - все читает, нужно ли делать изменения в ВСД_Партия ?

	//стандартное поведение функции    
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
	
    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;	
	
	Сообщить("Получено "+stockEntryList.length+" записей","i");
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
					
		Партия = ЗаписатьПартию2(stockEntry);
		
		Если ПустоеЗначение(докОснование)=0 Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецФункции


//================= Отправка ВСД ======================

// Дмитрий Жуков 2018-01
Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="") Экспорт
	// 

	//стандартное поведение функции	
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
//	Если НайтиОшибки(докОснование)>0 Тогда 
//		Возврат "";
//	КонецЕсли;		
	
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
		
	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
	vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;
Попытка
    Для i1 = 0 По vetDocumentList.length - 1 Цикл
        vetDocument=vetDocumentList.item(i1);
		uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;
        
		// ищем Сведения об измененных ВСД. 
		Попытка
			forma 	 = vetDocument.selectSingleNode("vd:vetDForm").text;
		Исключение
			Продолжить;//Это привязанный к партии ВСД
		КонецПопытки;
		
		st 	 = vetDocument.selectSingleNode("vd:vetDStatus").text;
		type = vetDocument.selectSingleNode("vd:vetDType").text;
		Попытка
			Завершен = vetDocument.selectSingleNode("vd:finalized").text; // Сертификат закрыт 
		Исключение
			Завершен="";
		КонецПопытки;
		Попытка
			Lastupd = vetDocument.selectSingleNode("vd:lastUpdateDate").text; // дата время посл изменения
		Исключение
			Lastupd="";
		КонецПопытки;
		Если ПустоеЗначение(докОснование)=0 Тогда
			//Если явно указан документ, получаем его вид
			ВидДокумента = докОснование.Вид();
		Иначе
			//при загрузке списка документов - вид документа получаем из XML
			ВидДокумента = ГМ.ВыбратьВидДокументаВСД(type);
		КонецЕсли;
		
		createDate = vetDocument.selectSingleNode("vd:issueDate").text;
		// Несколько иная структура у док-та ВСД результат
		// ответ от транспортного
		// vd:certifiedConsignment содержит сведения об отпр и получателе, трансп данные
		
		// Сертифицированная производственная партия продукции. 
		// Сведения о партии продукции.
		ЭтоТранспортныйВСД=0;
		Попытка
			batch = vetDocument.selectSingleNode("vd:certifiedBatch").selectSingleNode("vd:batch");  //Продуктивный ВСД
		Исключение
			Попытка
				//Сертифицированная партия.
				//Сведения о партии продукции. 
				batch = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:batch");  //ЖД Транспортный ВСД -другая структура ответа буду делать отдельно
				ЭтоТранспортныйВСД=1;
			Исключение
			 	batch = "";
			КонецПопытки;
		КонецПопытки; 
		
		Если ЭтоТранспортныйВСД = 1 Тогда
			Попытка
			consignorBusinessEntity = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignor").selectSingleNode("dt:businessEntity").selectSingleNode("bs:guid").text;
			consignorEnterprise 	= vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignor").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
			Исключение КонецПопытки;
			
			Попытка
				consigneeBusinessEntity = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignee").selectSingleNode("dt:businessEntity").selectSingleNode("bs:guid").text;
			Исключение
				consigneeBusinessEntity ="";
			КонецПопытки;
			Попытка
				consigneeEnterprise 	= vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignee").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
			Исключение
				consigneeEnterprise = "";
			КонецПопытки;
			Попытка //Перевозчик
				ПеревозчикГУИД 	= vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:broker").selectSingleNode("bs:guid").text;
			Исключение
				ПеревозчикГУИД = "";
			КонецПопытки;
			Попытка
				transportInfo = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:transportInfo");
				ТипТС = transportInfo.selectSingleNode("vd:transportType").text;//("*[local-name()='transportType'] ").text;
				Если ТипТС = "1" Тогда
					номеравто = transportInfo.selectSingleNode("vd:transportNumber").selectSingleNode("vd:vehicleNumber").text;//("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='vehicleNumber']").text; 
				Иначеесли ТипТС = "2" Тогда
					номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='wagonNumber']").text;
				Иначеесли ТипТС = "3" Тогда
					номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='flightNumber']").text;
				Иначеесли (ТипТС = "4") или (ТипТС = "5") или (ТипТС = "6") Тогда
					номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
	//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
				
				КонецЕсли;
			исключение
				transportInfo = "";
				номеравто = "";
			КонецПопытки;
			Попытка
				термическоесостояние = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:transportStorageType").text;
			Исключение
				термическоесостояние ="";
			КонецПопытки;
				
			
		КонецЕсли;
			
		product 	= batch.selectSingleNode("vd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vd:subProduct").selectSingleNode("bs:guid").text;

		Попытка
			productItem = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='name']").text;
		Исключение
			Сообщить("Не удалось получить элемент [productItem]","!");
			productItem = "";
		КонецПопытки;
		
		Попытка
			productItemUuid = batch.selectSingleNode("vd:productItem").selectSingleNode("bs:uuid").text;
		Исключение
			productItemUuid="";
		КонецПопытки;
		//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
		Попытка
			GTIN = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:globalID").text;
		Исключение
			GTIN="";
		КонецПопытки;
        //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		Попытка
			Артикул = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:code").text;
		Исключение
			Артикул="";
		КонецПопытки;
        //Наименование продукции. 
		Попытка
			НаимПрции = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:name").text;
		Исключение
			НаимПрции="";
		КонецПопытки;
		
		
		
		//<dt:packaging> Фасовка. - В чем отличие от упаковки? packageList 
		// Фасовка м.б. указана по требованию сети, Параметры фасовки привязаны к ВД_ПродукцияЭлемент
		ФасУИД =""; ФасГУИД ="";ФасУН ="";ФасИмя ="";КолФас ="";ОбъемФас ="";ЕдФас ="";
		Попытка
			packaging = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:packaging");
			// 	Тип упаковки. 
			Попытка
				ТипФасовки = packaging.selectSingleNode("dt:packagingType").text; 
			Исключение
				ТипФасовки ="";
			КонецПопытки;
			// 	Идентификатор версии типа упаковки.
			Попытка
				ФасУИД =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:uuid").text;
			Исключение
				ФасУИД ="";
			КонецПопытки;
			//  	Глобальный идентификатор типа упаковки.
			Попытка
				ФасГУИД =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text;   // ВСД_ФормыУпаковки
			Исключение
				ФасГУИД ="";
			КонецПопытки;
			Попытка
				//  	Уникальный идентификатор упаковки. 
				ФасУН =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:globalID").text;;
			Исключение
				ФасУН ="";
			КонецПопытки;
			
			// Наименование упаковки.
			Попытка
				ФасИмя =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text;;
			Исключение
				ФасИмя ="";
			КонецПопытки;
				
			//  	Количество единиц упаковки.
			Попытка
				КолФас = packaging.selectSingleNode("dt:quantity").text;
			Исключение
				КолФас ="";
			КонецПопытки;
			// Объём единицы упаковки товара.
			Попытка
				ОбъемФас = packaging.selectSingleNode("dt:volume").text; 
			Исключение
				ОбъемФас ="";
			КонецПопытки;
			// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name> 
			Попытка
				ЕдФас = packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text;
			Исключение
				ЕдФас ="";
			КонецПопытки;			
		Исключение
			packaging = "";	
		КонецПопытки;
		// Объем продукции
		volume 		= batch.selectSingleNode("vd:volume").text; 
		// Единица измерения объема партии продукции. Глобальный идентификатор еиницы измерения.
		unitGuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;
		
		
		ДатаИзготовления1="";
		ДатаИзготовления="";
		попытка			
			год = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:firstDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:firstDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:firstDate").selectSingleNode("dt:day").text;
			ДатаИзготовления1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаИзготовления = ""+batch.selectSingleNode("vd:dateOfProduction").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаИзготовления2="";
		попытка
			год = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:secondDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:secondDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:dateOfProduction").selectSingleNode("vd:secondDate").selectSingleNode("dt:day").text;
			ДатаИзготовления2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		//ДатаСрокГодности
		попытка			
			год = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:firstDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:firstDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:firstDate").selectSingleNode("dt:day").text;
			ДатаСрокГодности1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаСрокГодности = ""+batch.selectSingleNode("vd:expiryDate").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;
		ДатаСрокГодности2="";
		попытка
			год = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:secondDate").selectSingleNode("dt:year").text;
			мес = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:secondDate").selectSingleNode("dt:month").text;
			день = ""+batch.selectSingleNode("vd:expiryDate").selectSingleNode("vd:secondDate").selectSingleNode("dt:day").text;
			ДатаСрокГодности2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
        //<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
		Попытка
			Скоропортящийся = batch.selectSingleNode("vd:perishable").text; 			
		Исключение
			Скоропортящийся = "";
		КонецПопытки;
		//Информация о предприятие-производителе продукции.

    	//Если предприятие было задано из справочника, то вернутся uuid и guid
    	//Если предприятие было указано текстом, то вернется name 		
		
		Попытка			
			producer = batch.selectSingleNode("vd:origin").selectSingleNode("vd:producer").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		Попытка			
			producerName = batch.selectSingleNode("vd:origin").selectSingleNode("vd:producer").selectSingleNode("dt:enterprise").selectSingleNode("dt:name").text;
		Исключение
			producerName = "";
		КонецПопытки;
		
		
		Попытка
			Некач = batch.selectSingleNode("vd:lowGradeCargo").text; 			
		Исключение
			Некач = "";
		КонецПопытки;
		
	
	//Список физической упаковки. vd:packageList		
	// С уровнями
//   Уровни <dt:level>
//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
		ТЗУровни = Создатьобъект("ТаблицаЗначений");		
		ТЗУровни.НоваяКолонка("НомерУровня","Число",1,0,,2);
		ТЗУровни.НоваяКолонка("Упаковка","Справочник.ВСД_ФормыУпаковки");
		ТЗУровни.НоваяКолонка("КолВо","Число",9,0,,5);
		ТЗУровни.НоваяКолонка("Маркировки");
	
		Попытка
			Pl = batch.selectSingleNode("*[local-name()='packageList']");
			PList = Pl.selectNodes("dt:package") ;
		Исключение 
			PList = "";
		КонецПопытки;
		Попытка
		    Для l1 = 0 По PList.length - 1 Цикл
				Узел = PList.item(l1);
				Уровень = Узел.selectSingleNode("dt:level").text;   // Уровень упаковки
				Попытка
					ПГУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text; // ВСД_ФормыУпаковки
				Исключение
					ПГУИД = "";
				КонецПопытки;
				Попытка
					ПУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:uuid").text; 
				Исключение
					ПУИД = "";
				КонецПопытки;
				//dt:globalID  	Уникальный идентификатор упаковки.
				Попытка
					ГлИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:globalID").text;
				Исключение
					ГлИД = "";
				КонецПопытки;
				// <dt:name>  	Наименование упаковки.
				Попытка
					ПакИмя = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text;
				Исключение
					ПакИмя = "";
				КонецПопытки;
				// dt:quantity  	Количество единиц упаковки.
				Попытка
					КолМест = Узел.selectSingleNode("dt:quantity").text;
				Исключение
					КолМест = "";
				КонецПопытки;
				ТЗУровни.НоваяСтрока();
				ТЗУровни.КолВо = Число(КолМест);
				ТЗУровни.НомерУровня = Уровень;
				ТЗУровни.Упаковка = ГМ.НайтиФормуУпаковки( ПГУИД, ПакИмя); 
				
				СзМаркировки = СоздатьОбъект("Списокзначений");
				//Маркировка партии продукции. Например
				//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
                //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
				Попытка
                Маркировки = Узел.selectNodes("dt:productMarks");
				
				Для кк =0 по Маркировки.length - 1 Цикл					
					МаркН = Маркировки.item(кк);
					МаркЗнач = МаркН.text;
					МаркКласс = МаркН.getattribute("class");
					СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
				КонецЦикла;
				Исключение КонецПопытки;
			    Если СзМаркировки.РазмерСписка()>0 Тогда
			        ТЗУровни.Маркировки = ЗначениеВСтроку(СзМаркировки);
			    КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
		
	
		
		Попытка
			owner = batch.selectSingleNode("vd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
			ВладелецХС = ГМ.НайтиХСпоGUID(owner);
		Исключение
			ВладелецХС = "";
		КонецПопытки;
		
		// batch закончился

		// <vd:authentication>  Результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
		//<vd:cargoInspected>false</vd:cargoInspected>   Осуществлен контроль гос.ветврачом на соответствие требованиям. 
        // <vd:cargoExpertized>UNFULFILLED</vd:cargoExpertized>  Проводилась ли ветсанэкспертиза. 
        // <vd:specialMarks> Особые отметки / примечания для ВСД.
		Попытка
			cargoInspected = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:cargoInspected").text;
		Исключение
			cargoInspected = "";	
		КонецПопытки;
        Попытка
			cargoExpertized = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:cargoExpertized").text;
		Исключение
			cargoExpertized = "";	
		КонецПопытки;
		Попытка
			особыеотметки = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:specialMarks").text;
		Исключение
			особыеотметки = "";	
		КонецПопытки;
		//ЖД вставить в модуль Обмен2
		Попытка
			ВСДместность = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:locationProsperity").text;
		Исключение
			ВСДместность = "";	
		КонецПопытки;  
        // след блок Сделать ЖД
		//·······<vd:laboratoryResearch> 	vd:LaboratoryResearchEvent 	[0..*] 	Сведения о проведенных лабораторных исследованиях. 

		
		// Связанные документы
		Попытка
			Попытка
				// 1 	Товарно-транспортная накладная см. dt:DocumentType 
				ТипДокумента =  vetDocument.selectSingleNode("vd:referencedDocument").selectSingleNode("vd:type").text;;	
			Исключение
				ТипДокумента = "";	
			КонецПопытки;
			Попытка
				НомерДокумента =  vetDocument.selectSingleNode("vd:referencedDocument").selectSingleNode("vd:issueNumber").text;;	
			Исключение
				НомерДокумента = "";	
			КонецПопытки;
			Попытка
				СерияДокумента =  vetDocument.selectSingleNode("vd:referencedDocument").selectSingleNode("vd:issueSeries").text;;	
			Исключение
				СерияДокумента = "";	
			КонецПопытки;
			Попытка
				ДатаДокумента =  vetDocument.selectSingleNode("vd:referencedDocument").selectSingleNode("vd:issueDate").text;;	
			Исключение
				ДатаДокумента = "";	
			КонецПопытки;
			
			Попытка
				//1 	Сопроводительный документ. 	Complementary accompanying document.
				//2 	Предшествующий документ. 	Preceding document (Ancestor).
				//3 	Следующий документ. 	Subsequent/following document (Child).
				//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
				//5 	Документ, заменяющий текущий документ. 	Replaced by document.
				//6 	Связанный документ. 	Related document. 				
				ТипОтношенияДок =  vetDocument.selectSingleNode("vd:referencedDocument").selectSingleNode("vd:relationshipType").text;;	
			Исключение
				ТипОтношенияДок = "";	
			КонецПопытки;
		Исключение
			НомерДокумента="";
			ТипДокумента = "";
			СерияДокумента = "";
			ДатаДокумента = "";
			ТипОтношенияДок = "";
		КонецПопытки;
		
// ЖД - нет этих данных в ответе на производствнный ВСД
		Если ЭтоТранспортныйВСД = 0 Тогда
			consignorBusinessEntity = "";
			consignorEnterprise 	= "";
        	consigneeBusinessEntity = "";
			consigneeEnterprise		= "";
		КонецЕсли;
		
		докОбъект = НайтиВСДпоUUID( uuid ); // ЖД в 2.0
		докОбъект.UUID = uuid;
		докОбъект.applicationID = ГМ.Компонента.ApplicationId; 
		докОбъект.ДокОснование = докОснование;
		//результат лабораторного исследования/ВСЭ.
		//Возможные значения: VSEFULL, VSERAW, UNFULFILLED 
		//UNFULFILLED 	Не проводилось.
		//VSERAW 	ВСЭ подвергнуто сырьё, из которого произведена продукция.
		//VSEFULL 	Продукция подвергнута ВСЭ в полном объеме.
		//СзВСЭ = СоздатьОбъект("СписокЗначений"); // ЖД - добавить в ГМ?
		//СзВСЭ.ДобавитьЗначение(0,"UNFULFILLED");
		//СзВСЭ.ДобавитьЗначение(1,"VSERAW");
		//СзВСЭ.ДобавитьЗначение(2,"VSEFULL");
		
		//докОбъект.cargoExpertized = СзВСЭ.Получить(cargoExpertized);
		докОбъект.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(cargoExpertized);
		докОбъект.cargoInspected = ?(cargoInspected="true",1,0);
		
		Попытка 
			докОбъект.Отправитель_ХозСубъект 	= ГМ.НайтиХСпоGUID(consignorBusinessEntity);
		Исключение			
		КонецПопытки;
		Попытка			
			докОбъект.Отправитель_Площадка 		= ГМ.НайтиПлощадку(consignorEnterprise);
		Исключение			
		КонецПопытки;

		Попытка
			докОбъект.Получатель_ХозСубъект 	= ГМ.НайтиХСпоGUID(consigneeBusinessEntity);
		Исключение			
		КонецПопытки;

		Попытка			
			докОбъект.Получатель_Площадка 		= ГМ.НайтиПлощадку(consigneeEnterprise);
		Исключение			
		КонецПопытки;
		
		// ЖД GTIN и Артикул будем записывать?
		
		докОбъект.Производитель_Площадка 	= ГМ.НайтиПлощадку(producer);

		докОбъект.Продукция 	= ГМ.НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= ГМ.НайтиВидПродукции(subProduct);
		
		докОбъект.Продукция_Элемент = ГМ.Найти_Продукция_Элемент(productItem, productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		
		докОбъект.Количество 	= Число(volume);
		
		попытка
			докОбъект.КоличествоМестФас = Число(КолФас);
		Исключение	КонецПопытки;
        попытка
			Если ПустоеЗначение(ФасГУИД) = 0 Тогда
				ФормаУпаковкиФас 			= ГМ.НайтиФормуУпаковки( ФасГУИД, ФасИмя); 
			Иначе
				ФормаУпаковкиФас = "";
			КонецЕсли;
		Исключение	КонецПопытки;
		попытка	
			докОбъект.ФормаУпаковкиФас = ФормаУпаковкиФас;	
		Исключение	КонецПопытки;
		попытка	
			докОбъект.ОбъемФас = Число(ОбъемФас);
		Исключение	КонецПопытки;
		попытка 
			Если ПустоеЗначение(ЕдФас) = 0 Тогда
				докОбъект.ЕдиницаИзмеренияФас = ГМ.НайтиЕдИзмерения( ЕдФас );
			Иначе
				докОбъект.ЕдиницаИзмеренияФас = "";
			КонецЕсли;			
			
		Исключение	КонецПопытки;
		
		
		докОбъект.ЕдиницаИзмерения = ГМ.НайтиЕдИзмерения( unitGuid );
		
		докОбъект.Статус = st;	
		докОбъект.ФормаВСД = forma;
		докОбъект.типВСД = type;
		докОбъект.НаименованиеПродукции = productItem;
		докОбъект.ДатаИзготовления1 = ДатаИзготовления1;
		докОбъект.ДатаИзготовления2 = ДатаИзготовления2;
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2; 
		
		Если ЭтоТранспортныйВСД = 1 Тогда   //+ связанные документы, в трансп это ТТН
			докОбъект.номеравто = номеравто;

			докОбъект.термическоесостояние =  ГМ.ТермическиеУсловияПеревозки.найтизначение(термическоесостояние);
			докОбъект.ттнСерия = СерияДокумента;
			докОбъект.ттнномер = НомерДокумента;
			докОбъект.ттндата = СтрокаВДату(ДатаДокумента);
		
			Если ПустоеЗначение(ПеревозчикГУИД)=0 Тогда
	       	 докОбъект.Перевозчик_ХозСубъект 	= ГМ.НайтиХСпоGUID(ПеревозчикГУИД);
				Если ПустоеЗначение(докОбъект.Перевозчик_ХозСубъект)=1 Тогда
					Сообщить("- Остутствует в БД Перевозчик_ХС с ГУИД "+ПеревозчикГУИД);    
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		докОбъект.Местность = ВСДместность;
		докОбъект.особыеотметки = особыеотметки;
		
		
		//докОбъект.Фирма = глПользователь.ОсновнаяФирма; //ЖД Фирма
		//Вариант1   ЖД
		Попытка
//			поз = ГМ.ПараметрыФирм.НайтиЗначение(ГМ.СписокКонстант);	
//			стр = "";
//			ГМ.ПараметрыФирм.ПолучитьЗначение(поз,стр);
//			докОбъект.Фирма = ЗначениеИзСтроки(стр);
		Исключение
		КонецПопытки;
		// Вариант 2  ЖД
		Попытка
			докОбъект.Фирма = ДокОснование.Фирма;		
		Исключение
			Сообщить("Не удалось определить Фирму");
		КонецПопытки;
		
		докОбъект.Автор = глПользователь;
		Попытка
			докОбъект.Филиал = глПользователь.Филиал;
		Исключение
		КонецПопытки;
		
		докОбъект.ДатаДок = СтрокаВДату(createDate);
		Если ТЗУровни.КоличествоСтрок()>0 Тогда
			Попытка
		    докОбъект.УровниУпаковки = ЗначениеВСтроку(ТзУровни);
			Исключение 	КонецПопытки;
		КонецЕсли;
				
		докОбъект.Записать();
		докОбъект.Провести();

		Сообщить("Записан ВСД от "+докОбъект.ДатаДок+" ["+uuid+"]");
	КонецЦикла;
исключение
    Сообщить("НЕ Удалось прочитать ВСД");
	Сообщить(ОписаниеОшибки());
	Возврат "";
КонецПопытки;	
	Если (ПустоеЗначение(докОснование)=0) И 
	 	((СокрЛП(st)="COMPLETED") ИЛИ (СокрЛП(st)="CONFIRMED") ) Тогда 
		Попытка		
		// проведем только успешно выполненный запрос
			докОснованиеОбъект = СоздатьОбъект("Документ");
			докОснованиеОбъект.НайтиДокумент(ДокОснование);
			докОснованиеОбъект.Провести();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультат_ВСД_2(applicationID, докСсылка="" ) Экспорт
	
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	ГМ.Пауза( );
		
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = ГМ.Компонента.SendRequestResult( applicationID );

	Если ПустоеЗначение(докСсылка)=0 Тогда 
		ГМ.СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД2( ГМ.Компонента.LogFilename, докСсылка);  //ЖД новая ф-ция 2.0  - в ГМ отправить
	КонецЕсли;

    ЗагрузитьXML_Партии2( ГМ.Компонента.LogFilename, докСсылка ); //новая ф-ция 2.0   - в ГМ отправить
		
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции


//===========  Получить Партии  ===================================

Функция ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение=0) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии_ТекстЗапросаXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии_ТекстЗапросаXML(Отправитель_Площадка, Смещение);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	
	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e
	Запрос = "	
	|<SOAP-ENV:Envelope 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ГМ.СписокКонстант.Получить("param_api_key")+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:getStockEntryListRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>" + Смещение + "</bs:offset>
	|            </bs:listOptions>
	|            <dt:enterpriseGuid>"+СокрЛП(Отправитель_Площадка.GUID)+"</dt:enterpriseGuid>
	|          </merc:getStockEntryListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";	
		
	Возврат Запрос;
КонецФункции

Функция  ПолучитьПартии2(Отправитель_Площадка, Смещение=0) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии(Отправитель_Площадка, Смещение);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	//При объединении партий в Меркурии - старые партии пропадают, появляются новые
	// поэтому в 1С остаются "остатки", которые нужно удалять
	Если ГМ.СписокКонстант.Получить("ОчищатьСправочникВСД_Партии")=1 Тогда
		Состояние("Удаление справочника ВСД_Партии");
		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка"); 
		
		СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
		СпрПартия.ВыбратьЭлементы();
		Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
			Если СпрПартия.Получатель_Площадка = Отправитель_Площадка Тогда 
				СпрПартия.Удалить(0);
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;	
	
	ЗапросXML = ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение);

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
		
	appID = Получить_ApplicationID(ГМ.Компонента.LogFilename);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;	
	
КонецФункции

// ========================= Список ВСД ===========================


Функция ПолучитьСписокВСД_ТекстЗапросаXML(Площадка, _смещение=0)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications' 
|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base' 
|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common' 
|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
|   <soapenv:Header/>
|   <soapenv:Body>
|      <ws:submitApplicationRequest>
|       <ws:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</ws:apiKey>         
|         <app:application>
|            <app:serviceId>mercury-g2b.service</app:serviceId>
|             <app:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</app:issuerId>
|             <app:issueDate>"+ ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
|             <app:data>
|                <merc:getVetDocumentListRequest>
|                  <merc:localTransactionId>a10003</merc:localTransactionId>
|                  <merc:initiator>
|                      <com:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</com:login>
|                  </merc:initiator>
|                  <base:listOptions>
|               <base:count>1000</base:count>
|               <base:offset>"+ _смещение +"</base:offset>
|          </base:listOptions>
|                  <vet:vetDocumentType>INCOMING</vet:vetDocumentType>
//|                  <vet:vetDocumentStatus>UTILIZED</vet:vetDocumentStatus>
|          <ent:enterpriseGuid>"+ СокрЛП( ГМ.СписокКонстант.Получить("Отправитель_Площадка").GUID )+"</ent:enterpriseGuid>
|               </merc:getVetDocumentListRequest>
|            </app:data>
|         </app:application>
|      </ws:submitApplicationRequest>
|   </soapenv:Body>
|</soapenv:Envelope>
	|";
	
	Возврат Запрос;
КонецФункции

Функция ПолучитьСписокВСД( Отправитель_Площадка, типДок=4, СтатусДок=2, Смещение=0) Экспорт
	
	ЗапросXML = ПолучитьСписокВСД_ТекстЗапросаXML(Отправитель_Площадка, Смещение);

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
		
	appID = Получить_ApplicationID(ГМ.Компонента.LogFilename);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;		
КонецФункции

// ================== Лабораторные исследования =========================

Функция ВСД_ЛабораторныеИсследования_ЗапросXML(док)    
	//док = СоздатьОбъект("Документ.ВСД_ЛабораторныеИсследования");
	
	Запрос ="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.ДатаXML(док.ДатаДок, "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:updateVeterinaryEventsRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <vd:stockEntry>
	|              <bs:guid>"+ СокрЛП( док.Партия.GUID ) +"</bs:guid>
	|              <vd:vetEventList>
	|                <vd:laboratoryResearch>
	|                  <vd:actualDateTime>"+ ГМ.ДатаXML(док.ДатаОтбораПроб, "T00:00:00") +"</vd:actualDateTime>
	|                  <vd:operator>
	|                    <dt:name>" + док.НаименованиеЛаборатории + "</dt:name>
	|                  </vd:operator>
	|                  <vd:referencedDocument>
	|                    <vd:issueNumber>"+ СокрЛП(док.НомерАктаОтбораПроб) +"</vd:issueNumber>
	|                    <vd:issueDate>"+ ГМ.ДатаXML(док.ДатаОтбораПроб) +"</vd:issueDate>
	//|                    <vd:type>9</vd:type> 
	//|                    <vd:relationshipType>6</vd:relationshipType>
	|                  </vd:referencedDocument>
	|                  <vd:expertiseID>"+ СокрЛП(док.НомерЭкспертизы) +"</vd:expertiseID>
	|                  <vd:disease>
	|                    <dt:name>"+ СокрЛП(док.НаименованиеПоказателя) +"</dt:name>
	|                  </vd:disease>
	|                  <vd:method>
	|                    <dt:name>"+ СокрЛП(док.МетодИсследования) +"</dt:name>
	|                  </vd:method>
						//Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
	|                  <vd:result>"+ СокрЛП(док.РезультатИсследования.Идентификатор()) +"</vd:result>
	|                  <vd:conclusion>"+ СокрЛП(док.Заключение)  +"</vd:conclusion>
	|                </vd:laboratoryResearch>
	|              </vd:vetEventList>
	|            </vd:stockEntry>
	|          </merc:updateVeterinaryEventsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_ЛабораторныеИсследования( док ) Экспорт
	
	ЗапросXML = ВСД_ЛабораторныеИсследования_ЗапросXML(док);
	
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
		
	appID = Получить_ApplicationID(ГМ.Компонента.LogFilename);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;	
КонецФункции

// ========================== ВСД_транзакция 2 ==========================
Функция ВСД_транзакция_2_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_транзакция_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_транзакция_ЗапросXML(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//док = СоздатьОбъект("Документ.ВСД_транзакция");
	
	Запрос_Шапка = "<SOAP-ENV:Envelope
	| xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
    |<apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:prepareOutgoingConsignmentRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	
//************************
    delivery = "
    |       <merc:delivery>
    |          <vd:deliveryDate>" + ГМ.ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignee>
	|";
	
	consignment="";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		consignment = consignment+ "	
//        |      <vd:consignment id='id1'>
        |      <vd:consignment>
		|        <vd:volume>"+ Док.Количество +"</vd:volume>
        |        <vd:unit>
        |          <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
        |        </vd:unit>
        |";
		

	    // нужно по реквизитам строки пробежать и проверить наличие упаковок
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те
		
		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			consignment = consignment+ "
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				//НомУровня = Док.ПолучитьАтрибут("НомерУровняУпак"+кк);
				//Если НомУровня=0 Тогда
				//    Продолжить;
				//КонецЕсли;
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				consignment = consignment+ "
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";
				
				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					consignment = consignment+ "
					|                    <dt:productMarks class='"+КлассМарк+"'>"+знМарк+"</dt:productMarks>";
					
				КонецЦикла;		
				consignment = consignment+ "
    	   		|                  </dt:package>";
		    КонецЦикла;
			consignment = consignment+ "
			|                </vd:packageList>";
		КонецЕсли;
	

		
		consignment = consignment+ "	
		|        <vd:sourceStockEntry>
        |          <bs:guid>"+ СокрЛП(док.Партия.GUID) +"</bs:guid>
        |        </vd:sourceStockEntry>
        |      </vd:consignment>
		|";
	КонецЦикла; //по строкам документа		  
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5 		  
	ЗапросПодвал = "		  
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>
        |      <vd:transportInfo>
        |        <vd:transportType>1</vd:transportType>
        |        <vd:transportNumber>
        |          <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
        |        </vd:transportNumber>
        |      </vd:transportInfo>
        |      <vd:transportStorageType>"+ ГМ.ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</vd:transportStorageType>
        |      <vd:accompanyingForms>
        |        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
        |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
        |          <vd:issueDate>"+ ГМ.ДатаXML(док.ТтнДата) +"</vd:issueDate>
        |          <vd:type>1</vd:type>      
        |        </vd:waybill>
        |        <vd:vetCertificate>
        |          <vd:authentication>
        |            <vd:purpose>
        |              <bs:guid>"+ СокрЛП( ГМ.СписокКонстант.Получить("Цель").Guid ) +"</bs:guid>
        |            </vd:purpose>
        |            <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED 
		//СзВСЭ = СоздатьОбъект("СписокЗначений"); // ЖД - добавить в ГМ?
		//СзВСЭ.ДобавитьЗначение(0,"UNFULFILLED");
		//СзВСЭ.ДобавитьЗначение(1,"VSERAW");
		//СзВСЭ.ДобавитьЗначение(2,"VSEFULL");
		//стрВСЭ = "";
		//СзВСЭ.ПолучитьЗначение(док.cargoExpertized+1,стрВСЭ);
	ЗапросПодвал = ЗапросПодвал+ "		  
		|             <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
        |            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
        |          </vd:authentication>
        |        </vd:vetCertificate>
        |      </vd:accompanyingForms>
        |    </merc:delivery>
		|          </merc:prepareOutgoingConsignmentRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>
		|";






	Запрос = Запрос_Шапка+
		delivery+
		consignment+
//		accompanyingForms_Шапка+
//		vetCertificate+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции



Функция Отправить_ВСД_транзакция_2(док)  Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_транзакция2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_транзакция2(док);
	КонецЕсли;	
	//}
		
	//стандартное поведение функции	
//	Если Проверка_ВСД_транзакция(док)=0 Тогда 
//		Возврат 0;
//	КонецЕсли;	
	
	ГМ.Инициализация(док.Фирма);
	
	ЗапросXML = ВСД_транзакция_2_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
		
	appID = Получить_ApplicationID(ГМ.Компонента.LogFilename);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции

//=============================== ВСД_производство ==========================
Функция ВСД_производство_2_ЗапросXML(док)    
	//док = СоздатьОбъект("Документ.ВСД_производство");
	
	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:registerProductionOperationRequest>
		|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:productionOperation> ";
	
// НЗП
		Если (ПустоеЗначение(Док.operationId) = 0) Тогда 
			Запрос=Запрос+"
			|        <vd:operationId>"+ СокрЛП(Док.operationId) +"</vd:operationId>
			|";
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			//порядок добавления имеет значение -
			// 1. rawBatch = списание
			// Уровни упаковки можно использовать, пока без упаковки
			Если док.ВидДвижения=2 Тогда
				Запрос=Запрос+"
				| <vd:rawBatch>
				|    <vd:sourceStockEntry>
				|       <bs:guid>" + СокрЛП(док.Партия.guid) + "</bs:guid>
				|    </vd:sourceStockEntry>
				|    <vd:volume>"+ док.Количество +"</vd:volume>
				|    <vd:unit>
				|       <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.Guid) +"</bs:guid>
				|    </vd:unit>
				| </vd:rawBatch>
				|";
			КонецЕсли;
		КонецЦикла;		
		
		
		
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
	Если док.ВидДвижения=1 Тогда // Выпуск
		
	Запрос=Запрос+"		
		|              <vd:productiveBatch>
		|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
		|                <vd:product>
		|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
		|                </vd:product>
		|                <vd:subProduct>
		|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
		|                </vd:subProduct>
		|                <vd:productItem>
		// Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
		|                  <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
		|                </vd:productItem>
		|                <vd:volume>"+ Док.Количество +"</vd:volume>
		|                <vd:unit>
		|                  <bs:uuid>"+ СокрЛП(док.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                </vd:unit>
		|                <vd:dateOfProduction> ";
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос+ "
		|              <vd:firstDate>
		|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
		|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
		|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
		|                <dt:hour>0</dt:hour>
		|              </vd:firstDate> ";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос=Запрос+"		
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate> ";
		КонецЕсли;	
		Запрос=Запрос+"
		|            </vd:dateOfProduction>
		|            <vd:expiryDate> ";
		// !!! Не указывается для типа продукции "Живые животные".
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос=Запрос+"
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"				
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Запрос=Запрос+"
		|                </vd:expiryDate>
		//Уникальный идентификатор производственной партии продукции.
		|                <vd:batchID>"+ СокрЛП(Док.operationId) +"</vd:batchID>
		|                <vd:perishable>"+ ГМ.булево(док.Скоропортящийся)+"</vd:perishable>
		|                <vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo>
		|";
		
//   Уровни <dt:level>
//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
   
    Тест1 = 0;  // 1 - Запрос с исп УровниУпаковки, 0 - Реквизиты ТЧ
	Если Тест1=1 Тогда  // Запрос из Длинной строки
	    
	
	стрУровни = "";
	СЗУпаковки = ЗначениеИзСтроки(Док.УровниУпаковки);
	Если ТипЗначенияСтр(СЗУпаковки) = "СписокЗначений" Тогда
		стрУровни = СЗУпаковки.Получить(Док.НомерСтроки);
		Если ПустоеЗначение(СтрУровни) = 0 Тогда
			ЕстьСведенияПоСтроке = 1;
		Иначе
			стрУровни = "";
		КонецЕсли;
	КонецЕсли;
	
    ТЗУровни = ЗначениеИзСтроки(стрУровни);
	Если ТипЗначенияСтр(ТЗУровни) = "ТаблицаЗначений" Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";

		ТЗУровни.ВыбратьСтроки();
		Пока ТЗУровни.ПолучитьСтроку()=1 Цикл
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+ТЗУровни.НомерУровня+"</dt:level>
			|                    <dt:packingType>
			|                      <bs:guid>"+ СокрЛП(ТЗУровни.Упаковка.GUID) +"</bs:guid>
			|                    </dt:packingType>
			|                    <dt:quantity>"+ ТЗУровни.Колво +"</dt:quantity>";
			СзМарк = ЗначениеИзСтроки(ТЗУровни.Маркировки);
			Если ТипЗначенияСтр(СзМарк) = "СписокЗначений" Тогда
			    кк=0;
				Для кк=1 по СзМарк.РазмерСписка() Цикл
					стрМарк="";
					ЗнМарк = СзМарк.ПолучитьЗначение(кк,стрМарк);
					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";

		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";

	КонецЕсли;
	Иначе //ЖД Тест1=0  - сведения об уровнях упаковки в реквизитах Документа Производство
	    // нужно по реквизитам строки пробежать и проверить наличие упаковок
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те
		
		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			Запрос=Запрос+"
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				//НомУровня = Док.ПолучитьАтрибут("НомерУровняУпак"+кк);
				//Если НомУровня=0 Тогда
				//    Продолжить;
				//КонецЕсли;
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";
				
				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+КлассМарк+"'>"+знМарк+"</dt:productMarks>";
					
				КонецЦикла;		
				Запрос=Запрос+"
    	   		|                  </dt:package>";
		    КонецЦикла;
			Запрос=Запрос+"
			|                </vd:packageList>";
		КонецЕсли;
	
	КонецЕсли;//ЖД Варианты запроса по разным реквизитам
	
		Запрос=Запрос+"
		|              </vd:productiveBatch>"; 
	КонецЕсли; // производство 
	
	
	КонецЦикла;
    // завершение операции
		Запрос=Запрос+"
		|          <vd:finalizeOperation>"+ГМ.булево(док.ЗавершитьОперацию)+"</vd:finalizeOperation>";


	Запрос=Запрос+"
	|            </merc:productionOperation>
	|            <merc:vetDocument>
	|              <vd:authentication>
	|              <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED 
	Запрос=Запрос+"
	|                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>";

	Запрос=Запрос+"
	|              </vd:authentication>
	|            </merc:vetDocument>
	|          </merc:registerProductionOperationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
			
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_производство_2(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_производство(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//Если Проверка_ВСД_производство(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	
			
	ЗапросXML = ВСД_производство_2_ЗапросXML(док);
	
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
		
	appID = Получить_ApplicationID(ГМ.Компонента.LogFilename);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции  



//******************* Проверка условий Регионализации
Функция РегионализацияМаршрута_2_ЗапросXML(док)
	//СокрЛП(док.Партия.Продукция.GUID)
	//СокрЛП(док.Партия.ВидПродукции.GUID)
	//СокрЛП(док.Партия.Продукция_Элемент.GUID) 
	//? что подставлять - написано 3 уровень
Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:checkShipmentRegionalizationRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку()=1 Цикл
		Запрос = Запрос+"
		|            <dt:cargoType>
		|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>       
		|            </dt:cargoType>";	    
	КонецЦикла;
	//<vd:sqnId>1</vd:sqnId>
	//Порядовый номер точки маршрута.
    //Не обязателен для заполнения, будет сгенерирован автоматически в ответе	
	
	// <vd:enterprise>
	//Сведения о предприятии, которое является точкой маршрута.
    //Указывается в случае, если не указано значение location 	
	
	Запрос = Запрос+"
	|            <vd:shipmentRoute>
	|              <vd:routePoint>
	|                <vd:sqnId>1</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|              <vd:routePoint>
	|                <vd:sqnId>2</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
//	|              <vd:routePoint>
//	|                <vd:sqnId>2</vd:sqnId>
//	|                <vd:location>
//	|                  <dt:address>
//	|                    <dt:country>
//	|                      <bs:guid>74a3cbb1-56fa-94f3-ab3f-e8db4940d96b</bs:guid>
//	|                    </dt:country>
//	|                    <dt:region>
//	|                      <bs:guid>d00e1013-16bd-4c09-b3d5-3cb09fc54bd8</bs:guid>
//	|                    </dt:region>
//	|                    <dt:district>
//	|                      <bs:guid>f4ab6f10-4f56-4ebd-a881-4b767dbf4473</bs:guid>
//	|                    </dt:district>
//	|                    <dt:locality>
//	|                      <bs:guid>6f039940-2e3b-4857-a30e-c142865d859e</bs:guid>
//	|                    </dt:locality>
//	|                  </dt:address>
//	|                </vd:location>
//	|              </vd:routePoint>
	|            </vd:shipmentRoute>
	|          </merc:checkShipmentRegionalizationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла)
	//<dt:decision> 	dt:RegionalizationDecision
	//1 	Перемещение разрешено.
	//2 	Перемещение разрешено при обязательном соблюдении условий.
	//3 	Перемещение запрещено. 
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    


//                  <vd:r13nRouteSection>
//                     <vd:sqnId>1</vd:sqnId>
//                     <vd:appliedR13nRule>
//                        <dt:cargoType>
//                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
//                        </dt:cargoType>
//                        <dt:decision>1</dt:decision>
//                     </vd:appliedR13nRule>
//                  </vd:r13nRouteSection>
	
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
	
		
	Попытка		
		applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
		RouteSectionList = objDom.selectNodes("//*[local-name() = 'r13nRouteSection']") ;
	Исключение
		Сообщить("Не удалось прочитать ответ о разрешении");
		Возврат "";
		//Пример на ветисе корявый...
		applicationId = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectSingleNode("applicationId").text ;
	
		RouteSectionList = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectNodes("r13nRouteSection") ;
	КонецПопытки;
		
		
	Сообщить("Получено "+RouteSectionList.length+" записей","i");
    Для i1 = 0 По RouteSectionList.length - 1 Цикл     // по продукции - какая разрешена, какая нет
        RouteSection = RouteSectionList.item(i1);
		decision = RouteSection.selectSingleNode("vd:appliedR13nRule").selectSingleNode("dt:decision").text;
		Решение = Число(decision);
		Если Решение = 1 Тогда
			Сообщить("Перемещение разрешено.");    
		ИначеЕсли Решение = 2 Тогда
			Сообщить("Перемещение разрешено при обязательном соблюдении условий.");    
		Иначе
			Сообщить("Перемещение запрещено.");    
		КонецЕсли;
	КонецЦикла;

	Возврат Решение;
	
КонецФункции



Функция ПолучитьРезультат_Регион_2(applicationID, докСсылка ) Экспорт
	
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	ГМ.Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = ГМ.Компонента.SendRequestResult( applicationID );

	Если ПустоеЗначение(докСсылка)=0 Тогда 
	//	ГМ.СохранитьСтатусЗапроса(докСсылка);
	//	ЗагрузитьXML_ПеревозкаРазрешена_2( ГМ.Компонента.LogFilename, докСсылка);  
	КонецЕсли;

    МожноВезти = ЗагрузитьXML_ПеревозкаРазрешена_2( ГМ.Компонента.LogFilename ); 
		
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции


Функция ПроверитьВозможностьПеремещения(док) Экспорт

	ГМ.Инициализация(док.Фирма);
	
	ЗапросXML = РегионализацияМаршрута_2_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
		
	appID = Получить_ApplicationID(ГМ.Компонента.LogFilename);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_Регион_2(appID,док); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_Регион_2(appID,док); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
КонецФункции
// Конец Регионализация
//***************************************************

