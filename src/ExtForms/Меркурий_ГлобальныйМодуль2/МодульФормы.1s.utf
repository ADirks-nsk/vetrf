//Авторы: 
// Синявский Филипп phsin@kb99.pro
// Дмитрий Жуков zhukov@kb99.pro
// Все права защищены

//Перем Компонента Экспорт;
//Перем СписокКонстант Экспорт;
//Перем ПараметрыФирм Экспорт; // ЖД  Многофирм
//Перем базаДанных Экспорт;
//Перем ЭтоSQL Экспорт;
//Перем ТестовыйРежим Экспорт;
Перем ТаблицаПереопределенныхФункций;
//Перем ИмяDLL Экспорт; 
//Перем ТермическиеУсловияПеревозки Экспорт;
Перем ГМ;

Функция  ПолучитьПартии2(Отправитель_Площадка, Смещение=0, УдалятьПартии=1, ПартияНачПериода = "", ПартияКонПериода = "", ПартияНеНулевые = 0 ) Экспорт Далее
Функция Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции) Экспорт Далее

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Конструктор()
	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");
	
КонецПроцедуры

Процедура Деструктор() 
КонецПроцедуры
//

Процедура Инициализация(ГлобавльныйМодуль) Экспорт
	ГМ = ГлобавльныйМодуль;
КонецПроцедуры

//======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);
	
	
	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;	
	
	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;	
КонецФункции // МодульВыполнения
//======================================================================

//======= ФУНКЦИИ ПО СБОРУ ИНФОРМАЦИИ О КЛИЕНТЕ ==============
// ЕСТЬ В ГМ



//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============
Функция Дата_из_XML(dateXML, Дата1, Дата2, ДатаСтрока ) Экспорт 
	попытка			
		год = ""+dateXML.selectSingleNode("vd:firstDate").selectSingleNode("dt:year").text;
		мес = ""+dateXML.selectSingleNode("vd:firstDate").selectSingleNode("dt:month").text;
		день = ""+dateXML.selectSingleNode("vd:firstDate").selectSingleNode("dt:day").text;
		Дата1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСтрока = ""+dateXML.text;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	попытка
		год = ""+dateXML.selectSingleNode("vd:secondDate").selectSingleNode("dt:year").text;
		мес = ""+dateXML.selectSingleNode("vd:secondDate").selectSingleNode("dt:month").text;
		день = ""+dateXML.selectSingleNode("vd:secondDate").selectSingleNode("dt:day").text;
		Дата2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;

КонецФункции

Функция УровниУпаковки_из_XML(PList) Экспорт
	//Список физической упаковки. vd:packageList		
	// С уровнями
	//   Уровни <dt:level>
	//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
	//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
	//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
	//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
	//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
	//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
	ТЗУровни = Создатьобъект("ТаблицаЗначений");		
	ТЗУровни.НоваяКолонка("НомерУровня","Число",1,0,,2);
	ТЗУровни.НоваяКолонка("Упаковка","Справочник.ВСД_ФормыУпаковки");
	ТЗУровни.НоваяКолонка("КолВо","Число",9,0,,5);
	ТЗУровни.НоваяКолонка("Маркировки");
	
	Попытка
	    Для l1 = 0 По PList.length - 1 Цикл
			Узел = PList.item(l1);
			ТЗУровни.НоваяСтрока();
			ТЗУровни.НомерУровня = Узел.selectSingleNode("dt:level").text;   // Уровень упаковки
			//Попытка	ПГУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text; Исключение ПГУИД = ""; КонецПопытки;
			//Попытка	ПУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:uuid").text; Исключение ПУИД = "";	КонецПопытки;
			//dt:globalID  	Уникальный идентификатор упаковки.
			//Попытка ГлИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:globalID").text;Исключение	ГлИД = "";	КонецПопытки;
			// <dt:name>  	Наименование упаковки.
			//Попытка	ПакИмя = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text;Исключение ПакИмя = ""; КонецПопытки;
			// dt:quantity  	Количество единиц упаковки.
			Попытка ТЗУровни.КолВо = Число(Узел.selectSingleNode("dt:quantity").text);Исключение  КонецПопытки;
			
			Попытка ТЗУровни.Упаковка = ГМ.НайтиФормуУпаковки( Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text, Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text); Исключение  КонецПопытки;
			
			СзМаркировки = СоздатьОбъект("Списокзначений");
			//Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
                //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
			Попытка
               	Маркировки = Узел.selectNodes("dt:productMarks");
				
				Для кк =0 по Маркировки.length - 1 Цикл					
					МаркН = Маркировки.item(кк);
					МаркЗнач = МаркН.text;
					МаркКласс = МаркН.getattribute("class");
					СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.РазмерСписка()>0 Тогда
		        ТЗУровни.Маркировки = ЗначениеВСтроку(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;
 
	Если ТЗУровни.КоличествоСтрок()>0 Тогда
        Возврат ЗначениеВСтроку(ТЗУровни); 
	Иначе
		Возврат "";
    КонецЕсли;
КонецФункции

Функция СвязанныеДокументы_из_XML(DocList) Экспорт
	// Связанные документы - м.б. несколько, для гашения в тестовой версии достаточно ТТН
	// другие связанные документы не нашел куда включать в запросе на гашение
    // На всякий случай считаем их в ТЗ

    // ТипОтношенияДок
	//1 	Сопроводительный документ. 	Complementary accompanying document.
	//2 	Предшествующий документ. 	Preceding document (Ancestor).
	//3 	Следующий документ. 	Subsequent/following document (Child).
	//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
	//5 	Документ, заменяющий текущий документ. 	Replaced by document.
	//6 	Связанный документ. 	Related document. 				

	ТЗСвДокументов = СоздатьОбъект("ТаблицаЗначений");
	ТЗСвДокументов.НоваяКолонка("ТипДокумента","Число");
	ТЗСвДокументов.НоваяКолонка("НомерДокумента","Строка");
	ТЗСвДокументов.НоваяКолонка("СерияДокумента","Строка");
	ТЗСвДокументов.НоваяКолонка("ДатаДокумента","Строка");
	ТЗСвДокументов.НоваяКолонка("ТипОтношенияДок","Число");

	Попытка
	    Для l1 = 0 По DocList.length - 1 Цикл
			Узел = DocList.item(l1);
			ТЗСвДокументов.НоваяСтрока();
            Попытка ТЗСвДокументов.ТипДокумента = 		Узел.selectSingleNode("vd:type").text; Исключение КонецПопытки;
            Попытка ТЗСвДокументов.НомерДокумента =		Узел.selectSingleNode("vd:issueNumber").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.СерияДокумента =  	Узел.selectSingleNode("vd:issueSeries").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.ДатаДокумента =  	Узел.selectSingleNode("vd:issueDate").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.ТипОтношенияДок =	Узел.selectSingleNode("vd:relationshipType").text; Исключение КонецПопытки;
		КонецЦикла;
	Исключение КонецПопытки;
	
	Если ТЗСвДокументов.КоличествоСтрок()>0 Тогда
	    Возврат ЗначениеВСтроку(ТЗСвДокументов);
	Иначе
		Возврат "";
	КонецЕсли;
    
КонецФункции

Функция Производители_из_XML(ProducerList) Экспорт
	//Информация о предприятиях-производителях продукции.
   	//Если предприятие было задано из справочника, то вернутся uuid и guid
   	//Если предприятие было указано текстом, то вернется name 		

	ТзПроизводителей = СоздатьОбъект("ТаблицаЗначений");
	ТзПроизводителей.НоваяКолонка("Площадка","Справочник.ВСД_Площадка");
	ТзПроизводителей.НоваяКолонка("Роль","Строка",15);
	Попытка
	    Для l1 = 0 По ProducerList.length - 1 Цикл
			ГУидПроизводителя = ProducerList.item(l1).selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
			ТзПроизводителей.НоваяСтрока();
			ТзПроизводителей.Площадка = ГМ.НайтиПлощадку(ГУидПроизводителя);
			Попытка ТзПроизводителей.Роль =  ProducerList.item(l1).selectSingleNode("dt:role").text; Исключение ТзПроизводителей.Роль = "PRODUCER"; КонецПопытки; 
			//СпПроизводителей.ДобавитьЗначение(ГМ.НайтиПлощадку(ГУидПроизводителя));
		КонецЦикла;			
	Исключение 	КонецПопытки;
	Возврат  ЗначениеВСтроку(ТзПроизводителей);
КонецФункции

Процедура Фасовка_из_XML(packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт
	//<dt:packaging> Фасовка. 
	// Фасовка м.б. указана по требованию сети, Параметры фасовки привязаны к ВД_ПродукцияЭлемент
		// 	Тип упаковки. 
		//Попытка	ТипФасовки = packaging.selectSingleNode("dt:packagingType").text; Исключение ТипФасовки ="";	КонецПопытки;
		// 	Идентификатор версии типа упаковки.
		//Попытка ФасУИД =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:uuid").text; Исключение КонецПопытки;
		
	Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение 	КонецПопытки;
	Попытка ФасовкаФормаУпаковки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
	//  	Уникальный идентификатор упаковки.
	//Попытка	ФасУН =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
	//  	Количество единиц упаковки.
	Попытка	ФасовкаКоличество = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
	// Объём единицы упаковки товара.
	Попытка	ФасовкаОбъем = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
	// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name> 
	Попытка	ФасовкаЕдиницаИзм = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;			
КонецПроцедуры



// =========== Общие функции ==================


// Поиск документа по ууид
Функция НайтиВСДпоUUID( uuid, ВидДокумента="" ) Экспорт 

	Если ПустоеЗначение(UUID)=1 Тогда 
		Возврат "";
	КонецЕсли;
	Если ПустоеЗначение(ВидДокумента) = 1 Тогда
		ВидДокумента = "ВСД2";   
	КонецЕсли;
	

	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ГМ.ЭтоSQL=1 ТОгда 
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();     	
	
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД  
	  	|where 
	  	|	( $ДокВСД.UUID = :uuid)
	  	|";			
		RS.УстановитьТекстовыйПараметр("uuid", uuid);  
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select 	              
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД  
	  	|where 
	  	|	( ДокВСД.UUID = :uuid)
	  	|";	
		Запрос.Подставлять("uuid", uuid);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	//Возврат тз;
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда 
		Док.Новый();
		//Док.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
	Иначе		
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));		
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;	
	
	Возврат Док;	
КонецФункции

//================= Партии ============================


Функция ЗаписатьПартию2(stockEntry) //ЖД нужно ли делать изменения в ВСД_Партия (Уровни упаковки, Фасовка) ? Фасовка связана с ВСД_Продукция_Элемент

	//стандартное поведение функции
		//t = stockEntry.text;	
		active = stockEntry.selectSingleNode("bs:active").text;
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		
		Партия = ГМ.НайтиПартиюПоGUID(guid);
		
		Если active="false" Тогда 
			Сообщить("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна","i");
			Партия.Удалить(0);
			Возврат Партия;
		КонецЕсли;

		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("vd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);

		Партия.ВсдДата = ГМ.СтрокаВДату(createDate);		
		Партия.ДатаИзменения = ГМ.СтрокаВДату( updateDate );						
		Партия.Статус = st;		
		Партия.GUID = guid;
		Партия.UUID = uuid;
		Партия.НомерЗаписи = entryNumber;


		batch = stockEntry.selectSingleNode("vd:batch");
		
		product 	= batch.selectSingleNode("vd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vd:subProduct").selectSingleNode("bs:guid").text;
		Попытка	productItem = batch.selectSingleNode("*[local-name()='productItem'] ");	Исключение	productItem = "";	КонецПопытки;

		Партия.Продукция 	= ГМ.НайтиПродукцию(product);
		Партия.ВидПродукции = ГМ.НайтиВидПродукции(subProduct);		

		Партия.Продукция_Элемент = Найти_Продукция_Элемент2(productItem, Партия.Продукция, Партия.ВидПродукции);		
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
		Партия.НаименованиеПродукции = Партия.Продукция_Элемент.Наименование;


		//<dt:packaging> Фасовка. - думаю в Партии ненужна, т.к. связана с productItem
		
		//Попытка packaging = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='packaging']"); Исключение packaging=""	КонецПопытки; 	
		//Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение ФасовкаНаименование=""	КонецПопытки;
		//Попытка Партия.ФормаУпаковки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
		//Попытка	Партия.КоличествоМест = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
		//Попытка	Партия.ОбъемФас = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
		//Попытка	Партия.ЕдиницаИзмеренияФас = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;			
		
		
		//// Объем продукции

		volume 		= batch.selectSingleNode("vd:volume").text;
		//unit		= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;
		Попытка	unitGuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;Исключение	unitGuid = "";	КонецПопытки;
		Попытка	unitUuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:uuid").text;Исключение	unitUuid = ""; КонецПопытки;
		//еще есть Наименование единицы измерения. 	<dt:name>кг.</dt:name> 
		Партия.Количество 	= Число(volume);
		Партия.ЕдиницаИзмерения = ГМ.НайтиЕдИзмерения( unitGuid, unitUUID );;
		
		ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
		dateOfProduction = batch.selectSingleNode("vd:dateOfProduction");		
		Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);
		Партия.ДатаИзготовления1 = ДатаИзготовления1;
		Партия.ДатаИзготовления2 = ДатаИзготовления2;
		Партия.ДатаИзготовления =  ДатаИзготовления;
		
		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		expiryDate = batch.selectSingleNode("vd:expiryDate");
		Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);
		Партия.ДатаСрокГодности = ДатаСрокГодности;
		Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
		Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
		Попытка Партия.НомерПартии =  batch.selectSingleNode("vd:batchID").text; Исключение	КонецПопытки; //В спр нет реквизита
		
     // <vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 

	 //	Попытка	Скоропортящийся = batch.selectSingleNode("vd:perishable").text; Исключение	Скоропортящийся = ""; КонецПопытки;

		// <vd:origin> 	vd:BatchOrigin 	[0..1] 	Сведения о происхождении продукции. 
		//		vd:productItem> 	dt:ProductItem 	[1..1] 	Наименование продукции в номенклатуре производителя.
		//			<bs:uuid> 	bs:UUID 	[0..1] 	Идентификатор версии номенклатуры продукции. 
		//			<dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. 	<dt:globalID>85672854</dt:globalID>
		//			<dt:name> 	bs:String255 	[1..1] 	Наименование продукции. 
		//			<dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя. 
		//		<vd:country> 	dt:Country 	[1..1] 	Страна происхождения партии продукции.
		// сведения о стране


		//Информация о предприятие-производителе продукции.
		Попытка ПроизводителиСписок = Производители_из_XML(batch.selectSingleNode("vd:origin").selectNodes("vd:producer")); Исключение ПроизводителиСписок=""; КонецПопытки;
       	//А сли производителей несколько??
	   	Попытка
		   	СЗПроизводителей = ЗначениеИзСтроки(ПроизводителиСписок);
		   	Если СЗПроизводителей.КоличествоСтрок()>0 Тогда
	   			Партия.Производитель_Площадка = СЗПроизводителей.ПолучитьЗначение(1,1);    
	   		КонецЕсли;
	   	Исключение КонецПопытки;
			
		//Попытка Некач = batch.selectSingleNode("vd:lowGradeCargo").text; Исключение	Некач = "";	КонецПопытки;
	//Список физической упаковки. vd:packageList		
	// С уровнями
		Попытка Партия.УровниУпаковки = УровниУпаковки_из_XML(batch.selectSingleNode("vd:packageList").selectNodes("dt:package")); Исключение 	КонецПопытки;		

		Попытка Партия.Получатель_ХозСубъект = ГМ.НайтиХСпоGUID( batch.selectSingleNode("vd:owner").selectSingleNode("bs:guid").text); Исключение	КонецПопытки;

		Партия.Получатель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка"); 
		
		// batch закончился
        // vd:vetDocument> 	vd:VetDocument 	[0..*] 	Ветеринарный документ, связанный с записью журнала 
		// 	<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии ветеринарного документа
		
		// конец </vd:stockEntry> 

		// 23/01/18 - Фасовка в ВСД_ПродукцияЭлемент - в Партию не загружаем    Нужно определиться
		//Партия.Фирма = глПользователь.ОсновнаяФирма; // ЖД - продумать по фирмам
		//Вариант1  
		Если ПустоеЗначение(Партия.Фирма) = 1 Тогда
			Попытка
				поз = ГМ.ПараметрыФирм.НайтиЗначение(ГМ.СписокКонстант);	
				стр = "";
				ГМ.ПараметрыФирм.ПолучитьЗначение(поз,стр);
				Партия.Фирма = ЗначениеИзСтрокиВнутр(стр);
			Исключение
			КонецПопытки;
		КонецЕсли;

		Если ПустоеЗначение(Партия.Автор)=1 Тогда
			Партия.Автор = глПользователь;
		КонецЕсли;
		
		Попытка Партия.Филиал = глПользователь.Филиал; Исключение КонецПопытки;
		
		
		Если Партия.Количество=0 Тогда 
			
			Если ( ПустоеЗначение( Партия.ТекущийЭлемент() ) =0 ) Тогда
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
				Партия.Удалить(0);
			Иначе
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
		
		Партия.Записать();

		Возврат Партия;
КонецФункции // ЗаписатьПартию2


Функция ЗагрузитьXML_Партии2(имяФайла, докОснование="", Смещение = 0, НачПериода = "", КонПериода = "", Ненулевые = 0) Экспорт

	//стандартное поведение функции    
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
	
    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;	
	
	Сообщить("Получено "+stockEntryList.length+" записей","i");
	// ЖД посмотрим, сколько пришло партий
	Попытка ПришлоПартий = Число(stockEntryList.length); исключение ПришлоПартий = 1; КонецПопытки;
	
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
					
		Партия = ЗаписатьПартию2(stockEntry);
		
		Если ПустоеЗначение(докОснование)=0 Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;
	//Рекурсивный вызов		
	Если ПришлоПартий = 1000 Тогда
		ГМ.УдалитьXML( имяФайла ); //На случай рекурсивного вызова
		//Площадку берем из Констант, либо передавать в параметрах функции
		ПолучитьПартии2(ГМ.СписокКонстант.Получить("Отправитель_Площадка"), Смещение+1000, 0, НачПериода, КонПериода, Ненулевые);	
	КонецЕсли;
	
	Сообщить("Загрузка партий завершена");
	
	
КонецФункции


//================= Чтение ВСД ======================

Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="",докОбъект = "") Экспорт
	// Тестирование
	// Параметр докОбъект это ТаблицаЗначений, в которую загрузим ВСД, вместо создания документов в БД.

	//стандартное поведение функции	
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
	Если ГМ.НайтиОшибки(докОснование)>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
		
	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
	vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;
Попытка
    Для i1 = 0 По vetDocumentList.length - 1 Цикл
        vetDocument=vetDocumentList.item(i1);
		
		// ищем Сведения об измененных ВСД. 
		Попытка
			forma 	 = vetDocument.selectSingleNode("vd:vetDForm").text;
		Исключение
			Продолжить;//Это привязанный к партии ВСД
		КонецПопытки;
		uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;		
		
		Если ТипЗначенияСтр(докОбъект) = "ТаблицаЗначений" Тогда //Заполняем в ТЗ			
			докОбъект.НоваяСтрока();
			докОбъект.Пометка=1;
		иначе
			докОбъект = НайтиВСДпоUUID( uuid );
			докОбъект.applicationID = ГМ.Компонента.ApplicationId; 
			докОбъект.ДокОснование = докОснование;
		КонецЕсли;
		
		докОбъект.UUID = uuid;
        
		st = vetDocument.selectSingleNode("vd:vetDStatus").text;
		докОбъект.Статус = st;	
		докОбъект.ФормаВСД = forma;

		Попытка докОбъект.типВСД =  vetDocument.selectSingleNode("vd:vetDType").text; 	Исключение КонецПопытки;
		
   		Попытка докОбъект.ДатаДок = ГМ.СтрокаВДату(vetDocument.selectSingleNode("vd:issueDate").text);	Исключение КонецПопытки;
		
   		Попытка докОбъект.ВСДДата = ГМ.СтрокаВДату(vetDocument.selectSingleNode("vd:issueDate").text);	Исключение КонецПопытки;
		Попытка	докОбъект.ВсдСерия = vetDocument.selectSingleNode("vd:issueSeries").text; Исключение КонецПопытки; 		
		Попытка	докОбъект.ВСДНомер = vetDocument.selectSingleNode("vd:issueNumber").text; Исключение КонецПопытки;
		Попытка докОбъект.ВидВСД = ?(Пустоезначение(докОбъект.всдномер)=0,1,2);  Исключение КонецПопытки; //Бумаж/Электрон

			
		// Сертификат закрыт 
		//Попытка Завершен = vetDocument.selectSingleNode("vd:finalized").text; Исключение КонецПопытки;
		// дата время посл изменения
		//Попытка Lastupd = vetDocument.selectSingleNode("vd:lastUpdateDate").text; Исключение КонецПопытки;
		// Несколько иная структура у док-та ВСД результат
		// ответ от транспортного
		// vd:certifiedConsignment содержит сведения об отпр и получателе, трансп данные
		// Сертифицированная производственная партия продукции. 
		// Сведения о партии продукции.

		ЭтоТранспортныйВСД=0;
		Попытка
			batch = vetDocument.selectSingleNode("vd:certifiedBatch").selectSingleNode("vd:batch");  //Продуктивный ВСД
		Исключение
			Попытка
				//Сертифицированная партия.Сведения о партии продукции. 
				batch = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:batch");  //ЖД Транспортный ВСД -другая структура ответа
				ЭтоТранспортныйВСД=1;
			Исключение
			 	batch = "";
			КонецПопытки;
		КонецПопытки; 
		
		Если ЭтоТранспортныйВСД = 1 Тогда
			Попытка	докОбъект.Отправитель_ХозСубъект 	= ГМ.НайтиХСпоGUID(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignor").selectSingleNode("dt:businessEntity").selectSingleNode("bs:guid").text);	Исключение КонецПопытки;
			Попытка докОбъект.Отправитель_Площадка 		= ГМ.НайтиПлощадку(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignor").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text);	Исключение КонецПопытки;
			
			Попытка	докОбъект.Получатель_ХозСубъект 	= ГМ.НайтиХСпоGUID(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignee").selectSingleNode("dt:businessEntity").selectSingleNode("bs:guid").text);	Исключение	КонецПопытки;
			Попытка	докОбъект.Получатель_Площадка 		= ГМ.НайтиПлощадку(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignee").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text);		Исключение	КонецПопытки;
			Попытка докОбъект.Перевозчик_ХозСубъект 	= ГМ.НайтиХСпоGUID(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:broker").selectSingleNode("bs:guid").text); Исключение КонецПопытки;
			
			Попытка
				transportInfo = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:transportInfo");
				ТипТС = transportInfo.selectSingleNode("vd:transportType").text;//("*[local-name()='transportType'] ").text;
				Если ТипТС = "1" Тогда
					докОбъект.номеравто = transportInfo.selectSingleNode("vd:transportNumber").selectSingleNode("vd:vehicleNumber").text;
					Попытка докОбъект.номерПолуприцепа = transportInfo.selectSingleNode("vd:transportNumber").selectSingleNode("vd:trailerNumber").text; Исключение КонецПопытки;
					Попытка докОбъект.номерКонтейнера = transportInfo.selectSingleNode("vd:transportNumber").selectSingleNode("vd:containerNumber").text; Исключение КонецПопытки;
				Иначеесли ТипТС = "2" Тогда
					докОбъект.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='wagonNumber']").text;
				Иначеесли ТипТС = "3" Тогда
					докОбъект.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='flightNumber']").text;
				Иначеесли (ТипТС = "4") или (ТипТС = "5") или (ТипТС = "6") Тогда
					докОбъект.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
	//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
				
				КонецЕсли;
                Попытка докОбъект.ТипТС = ТипТС; Исключение	КонецПопытки;
			исключение	КонецПопытки;
	
			Попытка	докОбъект.термическоесостояние = ГМ.ТермическиеУсловияПеревозки.найтизначение(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:transportStorageType").text);Исключение	КонецПопытки;
		КонецЕсли;
			
		Попытка
			productItem = batch.selectSingleNode("*[local-name()='productItem'] ");
		Исключение
			Сообщить("Не удалось получить элемент [productItem]","!");
			productItem = "";
		КонецПопытки;
		
		//ЖД Для ГАШЕНИЯ  !!!!!
		// productItem здесь -  в	Сведения о партии продукции.  
		// и в подветке Origin -     	vd:BatchOrigin 	[0..1] 	Сведения о происхождении продукции. 
		// Если здесь нет Артикула и ГТИНа, а в origin есть - нужно ставить !!!!

		докОбъект.Продукция 	= ГМ.НайтиПродукцию(batch.selectSingleNode("vd:product").selectSingleNode("bs:guid").text);
		докОбъект.ВидПродукции 	= ГМ.НайтиВидПродукции(batch.selectSingleNode("vd:subProduct").selectSingleNode("bs:guid").text);
		//докОбъект.Продукция_Элемент = ГМ.Найти_Продукция_Элемент(productItem, productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(productItem, докОбъект.Продукция, докОбъект.ВидПродукции);
		Попытка 
			докОбъект.НаименованиеПродукции = productItem.selectSingleNode("*[local-name()='name']").text;
		Исключение
			докОбъект.НаименованиеПродукции = докОбъект.Продукция_Элемент.Наименование;
		КонецПопытки;
		
		//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
		Попытка докОбъект.GTIN = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:globalID").text;Исключение КонецПопытки;
        //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		Попытка докОбъект.Артикул = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:code").text;Исключение КонецПопытки;
        ////Наименование продукции. 
		//Попытка НаимПрции = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:name").text; Исключение КонецПопытки;

		// Фасовка
		// Не могу понять, почему указанный ниже код ничего не возвращает?????	
		//Попытка Фасовка_из_XML(batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='packaging']"),тз.ФасовкаНаименование,тз.ФасовкаФормаУпаковки,тз.ФасовкаКоличество,тз.ФасовкаОбъем,тз.ФасовкаЕдиницаИзм); Исключение КонецПопытки;
		Попытка packaging = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:packaging"); Исключение packaging=""	КонецПопытки; 	
		Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение ФасовкаНаименование=""	КонецПопытки;
        // ЖД  - отличие в наименовании реквизитов ТЗ и Документа, м.б. нужно привести в соответствие
		Если ТипЗначенияСтр(докОбъект) = "ТаблицаЗначений" Тогда // ТЗ в Гашении
			Попытка докОбъект.ФасовкаНаименование = ФасовкаНаименование;Исключение	КонецПопытки;
			Попытка докОбъект.ФасовкаФормаУпаковки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
			Попытка	докОбъект.ФасовкаКоличество = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
			Попытка	докОбъект.ФасовкаОбъем = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
			Попытка	докОбъект.ФасовкаЕдиницаИзм = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;			
		Иначе
			Попытка докОбъект.ФормаУпаковкиФас = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
			Попытка	докОбъект.КоличествоместФас = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
			Попытка	докОбъект.ОбъемФаc = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
			Попытка	докОбъект.ЕдиницаИзмеренияФас = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;			
        КонецЕсли;

		// Объем продукции
		// Единица измерения объема партии продукции. Глобальный идентификатор еиницы измерения.

		Попытка докОбъект.Количество 	= Число(batch.selectSingleNode("vd:volume").text);Исключение 	КонецПопытки;
		Попытка докОбъект.ЕдиницаИзмерения = ГМ.НайтиЕдИзмерения( batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text  );Исключение 	КонецПопытки;
		
		ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
		Попытка dateOfProduction = batch.selectSingleNode("vd:dateOfProduction");  Исключение	КонецПопытки;		
		Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);
		докОбъект.ДатаИзготовления1 = ДатаИзготовления1;
		докОбъект.ДатаИзготовления2 = ДатаИзготовления2;
		Попытка докОбъект.ДатаИзготовления =  ДатаИзготовления; Исключение	КонецПопытки; //В док-те нет реквизита
		
		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		Попытка expiryDate = batch.selectSingleNode("vd:expiryDate");  Исключение	КонецПопытки; // а вот бывает, что и нет такого тега
		Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);
		Попытка докОбъект.ДатаСрокГодности = ДатаСрокГодности; Исключение	КонецПопытки; //В док-те нет реквизита
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;
		Попытка докОбъект.НомерПартии =  batch.selectSingleNode("vd:batchID").text; Исключение	КонецПопытки; //В док-те нет реквизита
        //<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 

		//Информация о предприятиях-производителях продукции.
		Попытка ПроизводителиСписок = Производители_из_XML(batch.selectSingleNode("vd:origin").selectNodes("vd:producer")); Исключение ПроизводителиСписок=""; КонецПопытки;
       	//А сли производителей несколько куда сохранять??
	   	Попытка
		   	СЗПроизводителей = ЗначениеИзСтроки(ПроизводителиСписок);
		   	Если СЗПроизводителей.КоличествоСтрок()>0 Тогда
	   			докОбъект.Производитель_Площадка = СЗПроизводителей.ПолучитьЗначение(1,1);    
	   		КонецЕсли;
	   	Исключение КонецПопытки;

	   	//Это в ветке origin - !!!!!
	   	//В док-те нет таких реквизитов
	   	Если ТипЗначенияСтр(докОбъект) = "ТаблицаЗначений" Тогда
			Попытка	докОбъект.Скоропортящийся = ?(batch.selectSingleNode("vd:perishable").text = "true",1,0);	Исключение 	КонецПопытки;
		   	Попытка докОбъект.ПроизводителиСписок = ПроизводителиСписок; Исключение КонецПопытки;
			Попытка	докОбъект.GTIN 		=  batch.selectSingleNode("vd:origin").selectSingleNode("vd:productItem").selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
			Попытка докОбъект.Артикул 	= batch.selectSingleNode("vd:origin").selectSingleNode("vd:productItem").selectSingleNode("dt:code").text;  	Исключение КонецПопытки;
			Попытка	докОбъект.Некачественный = ?(batch.selectSingleNode("vd:lowGradeCargo").text="true",1,0); Исключение	КонецПопытки;
			Попытка докОбъект.страна_гуид = batch.selectSingleNode("vd:origin").selectSingleNode("vd:country").selectSingleNode("bs:guid").text;	Исключение	КонецПопытки;
			
			Попытка докОбъект.ВладелецХС = ГМ.НайтиХСпоGUID( batch.selectSingleNode("vd:owner").selectSingleNode("bs:guid").text); Исключение	КонецПопытки;
		    // ЖД проконтролировать
			Если ПустоеЗначение(докОбъект.ВладелецХС)=1 Тогда
				докОбъект.ВладелецХС = докОбъект.Отправитель_ХозСубъект;	
			КонецЕсли;
		КонецЕсли;
			
		//Список физической упаковки. vd:packageList		
		Попытка докОбъект.УровниУпаковки = УровниУпаковки_из_XML(batch.selectSingleNode("*[local-name()='packageList']").selectNodes("dt:package")); Исключение 	КонецПопытки;		
	
		Попытка докОбъект.cargoInspected = ?(vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:cargoInspected").text="true",1,0);	Исключение	КонецПопытки;
        Попытка	докОбъект.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:cargoExpertized").text);Исключение	КонецПопытки;
		Попытка	докОбъект.особыеотметки = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:specialMarks").text;	Исключение	КонецПопытки;
		
		Попытка	докОбъект.Местность = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:locationProsperity").text;Исключение	КонецПопытки;  
		Попытка	докОбъект.ВСДМестность = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:locationProsperity").text;Исключение	КонецПопытки;  
		// след блок Сделать ЖД
		//·······<vd:laboratoryResearch> 	vd:LaboratoryResearchEvent 	[0..*] 	Сведения о проведенных лабораторных исследованиях. 
		
		// Связанные документы
		Попытка СвязанныеДокументы = СвязанныеДокументы_из_XML( vetDocument.selectNodes("vd:referencedDocument")) ;Исключение 	КонецПопытки;
			
		//Выдернем ттн из списка связанных док-тов
		Попытка
			ТЗСвДокументов = ЗначениеИзСтроки(СвязанныеДокументы);
			стр = 0;// НайденДок = 1;
			Если ТЗСвДокументов.НайтиЗначение(1,стр,"ТипДокумента") = 1 Тогда
			ИначеЕсли ТЗСвДокументов.НайтиЗначение(2,стр,"ТипДокумента") = 1 Тогда
			ИначеЕсли ТЗСвДокументов.НайтиЗначение(3,стр,"ТипДокумента") = 1 Тогда
			ИначеЕсли ТЗСвДокументов.НайтиЗначение(4,стр,"ТипДокумента") = 1 Тогда
			ИначеЕсли ТЗСвДокументов.НайтиЗначение(5,стр,"ТипДокумента") = 1 Тогда
			Иначе
				//НайденДок = 0;	
			КонецЕсли;
			Если стр > 0 Тогда
				ТЗСвДокументов.ПолучитьСтрокуПоНомеру(стр);
				докОбъект.ттнСерия = ТЗСвДокументов.СерияДокумента;
				докОбъект.ттнномер = ТЗСвДокументов.НомерДокумента;
				докОбъект.ттндата = ГМ.СтрокаВДату(ТЗСвДокументов.ДатаДокумента);
				Попытка докОбъект.ттнТип = ТЗСвДокументов.ТипДокумента; Исключение КонецПопытки;
			КонецЕсли;
			// это для ТЗ
			Попытка докОбъект.СвязанныеДокументы = СвязанныеДокументы;Исключение КонецПопытки;
		Исключение КонецПопытки;
		

		//Вариант1  
		Попытка
//			поз = ГМ.ПараметрыФирм.НайтиЗначение(ГМ.СписокКонстант);	
//			стр = "";
//			ГМ.ПараметрыФирм.ПолучитьЗначение(поз,стр);
//			докОбъект.Фирма = ЗначениеИзСтроки(стр);
		Исключение
		КонецПопытки;
		// Вариант 2 
		Если ТипЗначенияСтр(докОбъект) = "Документ" Тогда 
			Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
				докОбъект.Фирма = ДокОснование.Фирма;
				Если Пустоезначение(докОбъект.Фирма) = 1 Тогда
					Сообщить("Не удалось определить Фирму");    
				КонецЕсли;					
			КонецЕсли;
			
			Попытка докОбъект.Автор = глПользователь;  Исключение КонецПопытки;
			Попытка докОбъект.Филиал = глПользователь.Филиал; Исключение КонецПопытки;
			докОбъект.Записать();
			докОбъект.Провести();
			Сообщить("Записан ВСД от "+докОбъект.ДатаДок+" ["+uuid+"]");			
		КонецЕсли;
	КонецЦикла;
исключение
    Сообщить("НЕ Удалось прочитать ВСД");
	Сообщить(ОписаниеОшибки());
	Возврат "";
КонецПопытки;

	Если (ПустоеЗначение(докОснование)=0) И 
	 	((СокрЛП(st)="COMPLETED") ИЛИ (СокрЛП(st)="CONFIRMED") ) Тогда 
		Попытка		
		// проведем только успешно выполненный запрос
			докОснованиеОбъект = СоздатьОбъект("Документ");
			докОснованиеОбъект.НайтиДокумент(ДокОснование);
			докОснованиеОбъект.Провести();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции


Функция ПолучитьРезультат_ВСД_2(applicationID, докСсылка="", Смещение = 0,  ПартияНачПериода = "", ПартияКонПериода = "", ПартияНеНулевые = 0 ) Экспорт
	//Реквизит Смещение добавлен для возможности рекурсивного вызова ПолучитьПартии2
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	ГМ.Пауза( );
		
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = ГМ.Компонента.SendRequestResult( applicationID );
    Файл_Ответа_XML = ГМ.Компонента.LogFilename;
	Если ПустоеЗначение(докСсылка)=0 Тогда 
		ГМ.СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД2( Файл_Ответа_XML, докСсылка); 
	КонецЕсли;

    ЗагрузитьXML_Партии2( Файл_Ответа_XML, докСсылка, Смещение, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые ); 
		
	ГМ.СохранитьОтветВДокументе(докСсылка);
	
	ГМ.УдалитьXML( Файл_Ответа_XML );
	
	Возврат Результат;
КонецФункции


//===========  Получить Партии  ===================================

Функция ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение=0, НачПериода = "", КонПериода = "", Ненулевые = 0) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии2_ТекстЗапросаXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение, НачПериода, КонПериода, Ненулевые);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	
	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e
	Запрос = "	
	|<SOAP-ENV:Envelope 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ГМ.СписокКонстант.Получить("param_api_key")+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:getStockEntryListRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>" + Смещение + "</bs:offset>
	|            </bs:listOptions>
	|            <dt:enterpriseGuid>"+СокрЛП(Отправитель_Площадка.GUID)+"</dt:enterpriseGuid>";
	Если (ПустоеЗначение(НачПериода) = 0) или (НеНулевые = 1) Тогда
		Запрос = Запрос +"
    	|            <merc:searchPattern>";
		Если НеНулевые = 1 Тогда
			Запрос = Запрос +"
	    	|              <vd:blankFilter>NOT_BLANK</vd:blankFilter>";
		КонецЕсли;
		Если ПустоеЗначение(НачПериода) = 0 Тогда
			Запрос = Запрос +"
	    	|              <vd:receiptDateInterval>
			|                 <bs:beginDate>"+ ГМ.ДатаXML(НачПериода, "T00:00:00") +"</bs:beginDate>
			|                 <bs:endDate>"+ ГМ.ДатаXML(КонПериода, "T23:59:59") +"</bs:endDate>
		    |              </vd:receiptDateInterval>";
		КонецЕсли;
		Запрос = Запрос +"
    	|            </merc:searchPattern>";	
	КонецЕсли;
	Запрос = Запрос +"
	|          </merc:getStockEntryListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";	
		
	Возврат Запрос;
КонецФункции

Функция  ПолучитьПартии2(Отправитель_Площадка, Смещение=0, УдалятьПартии=1, ПартияНачПериода = "", ПартияКонПериода = "", ПартияНеНулевые = 0 ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии2(Отправитель_Площадка, Смещение, УдалятьПартии, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	ЗапросXML = ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Если УдалятьПартии=1 Тогда 
			//При объединении партий в Меркурии - старые партии пропадают, появляются новые
			// поэтому в 1С остаются "остатки", которые нужно удалять
			Если ГМ.СписокКонстант.Получить("ОчищатьСправочникВСД_Партии")=1 Тогда
				Состояние("Удаление справочника ВСД_Партии");
				//Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка"); //ЖД - ошибочно будут записаны партии 
				
				СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
				СпрПартия.ВыбратьЭлементы();
				Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
					Если СпрПартия.Получатель_Площадка = Отправитель_Площадка Тогда 
						СпрПартия.Удалить(0);
					КонецЕсли;				
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
		Результат = ПолучитьРезультат_ВСД_2(appID,"",Смещение, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID,"", Смещение, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;	
	
КонецФункции

//******************* Список ВСД 
Функция ПолучитьСписокВСД2_ЗапросXML(Площадка, vetDocumentType, vetDocumentStatus, Смещение) Экспорт

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getVetDocumentListRequest>
	|            <merc:localTransactionId>a1</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+Смещение+"</bs:offset>
	|            </bs:listOptions>
	|            <vd:vetDocumentType>"+ vetDocumentType +"</vd:vetDocumentType>
	|            <vd:vetDocumentStatus>"+ vetDocumentStatus +"</vd:vetDocumentStatus>
	|            <dt:enterpriseGuid>"+ СокрЛП(Площадка.GUID) +"</dt:enterpriseGuid>
	|          </merc:getVetDocumentListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;
КонецФункции
             

Функция  ПолучитьСписокВСД(Предприятие, vetDocumentType	= "INCOMING", vetDocumentStatus = "CONFIRMED", Смещение=0) Экспорт
//	список ВСД может быть отфильтрован по следующим критериям
//	Тип ВСД:
//        входящий ВСД;				INCOMING
//        исходящий ВСД;			OUTGOING
//        производственный ВСД;		PRODUCTIVE
//        транспортный ВСД;			TRANSPORT
//        возвратный ВСД.			RETURNABLE 
//    Статус ВСД:
//        оформлен;		CONFIRMED 	Оформлен. Действующий сертификат, по которому разрешено совершать транзакцию с грузом. 
//        погашен;		UTILIZED 	Погашен. Действующий сертификат, по которому транзакция уже была совершена. 
//        аннулирован.	WITHDRAWN 	Аннулирован. Не действующий более сертификат.  

// В текущей ситуации документы в БД не загружаются и при отключенной отладке запросов файл ответа не сохранится
// ЖД Полагаю, чтобы загружать в БД в правильный вид документов, нужно передавать далее в параметрах ТипВСД = vetDocumentType

	Если ПустоеЗначение(Предприятие.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	                 
	ЗапросXML = ПолучитьСписокВСД2_ЗапросXML(Предприятие, vetDocumentType, vetDocumentStatus, Смещение);
	
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
    Результат = "";
	Если ПустоеЗначение(appID)=0 Тогда		
		Результат = ПолучитьРезультат_ВСД_2(appID ); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Возврат appID;
	
КонецФункции



// ================== Лабораторные исследования =========================

Функция ВСД_ЛабораторныеИсследования_ЗапросXML(док)    
	//док = СоздатьОбъект("Документ.ВСД_ЛабораторныеИсследования");
	
	Запрос ="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.ДатаXML(док.ДатаДок, "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:updateVeterinaryEventsRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <vd:stockEntry>
	|              <bs:guid>"+ СокрЛП( док.Партия.GUID ) +"</bs:guid>
	|              <vd:vetEventList>
	|                <vd:laboratoryResearch>
	|                  <vd:actualDateTime>"+ ГМ.ДатаXML(док.ДатаРезультата, "T00:00:00") +"</vd:actualDateTime>
	|                  <vd:operator>
	|                    <dt:name>" + СокрЛП(док.НаименованиеЛаборатории) + "</dt:name>
	|                  </vd:operator>
	|                  <vd:referencedDocument>
	|                    <vd:issueNumber>"+ СокрЛП(док.НомерАктаОтбораПроб) +"</vd:issueNumber>
	|                    <vd:issueDate>"+ ГМ.ДатаXML(док.ДатаОтбораПроб) +"</vd:issueDate>
	|                    <vd:type>9</vd:type> 
	//|                    <vd:relationshipType>6</vd:relationshipType>
	|                  </vd:referencedDocument>
	|                  <vd:expertiseID>"+ СокрЛП(док.НомерЭкспертизы) +"</vd:expertiseID>
	|                  <vd:disease>
	|                    <dt:name>"+ СокрЛП(док.НаименованиеПоказателя) +"</dt:name>
	|                  </vd:disease>
	|                  <vd:method>
	|                    <dt:name>"+ СокрЛП(док.МетодИсследования) +"</dt:name>
	|                  </vd:method>
						//Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
	|                  <vd:result>"+ СокрЛП(док.РезультатИсследования.Идентификатор()) +"</vd:result>
	|                  <vd:conclusion>"+ СокрЛП(док.Заключение)  +"</vd:conclusion>
	|                </vd:laboratoryResearch>
	|              </vd:vetEventList>
	|            </vd:stockEntry>
	|          </merc:updateVeterinaryEventsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_ЛабораторныеИсследования( док ) Экспорт
	
	ЗапросXML = ВСД_ЛабораторныеИсследования_ЗапросXML(док);
	
	метод = ГМ.Компонента.GetMethod(); 
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	ГМ.СохранитьЗапросВДокументе(док);
	
	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;	
КонецФункции

// ========================== ВСД_транзакция 2 ==========================
Функция ВСД2_транзакция_ЗапросXML(док, тзУсловияПеревозки)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_транзакция_2_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_транзакция_2_ЗапросXML(док, тзУсловияПеревозки);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//док = СоздатьОбъект("Документ.ВСД_транзакция");
	
	Запрос_Шапка = "<SOAP-ENV:Envelope
	| xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
    |<apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:prepareOutgoingConsignmentRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	
//************************
    delivery = "
    |       <merc:delivery>";
	
	Если ПустоеЗначение(док.ТтнДата) = 0 Тогда   // Есть ТТН
    	delivery = delivery + "
    	|          <vd:deliveryDate>" + ГМ.ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>";
	Иначе
    	delivery = delivery + "
    	|          <vd:deliveryDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</vd:deliveryDate>";
	КонецЕсли;
	
    delivery = delivery + "
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>";
	
	//<dt:globalID>4607009526782</dt:globalID> 	dt:GLNType 	[0..*]  [ ... ] Global Location Number - уникальный номер площадки
	delivery = delivery+"
    |          </vd:consignee>";
	
	consignment="";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
//        |      <vd:consignment id='id1'>
		consignment = consignment+ "
		|      <vd:consignment>";
        
		//Указание согласованного наименования и фасовки (указание записи журнала и productItem с наименованием/артикулом/GTIN получателя в запросе). 
//		Если (ПустоеЗначение(док.GTIN)= 0) или (ПустоеЗначение(док.КодПродукции)= 0) Тогда
			consignment = consignment+ "
    	    |        <vd:productItem>";
//			consignment = consignment+									"|          <bs:uuid>"+СокрЛП(док.Продукция_Элемент.UUID)+"</bs:uuid>
    	    consignment = consignment+?(ПустоеЗначение(док.Продукция_Элемент.GUID)= 0,	"          <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>","");
    	    consignment = consignment+?(ПустоеЗначение(док.GTIN)= 0,	"          <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>","");
        	consignment = consignment+									"          <dt:name>"+СокрЛП(док.НаименованиеПродукции)+"</dt:name>";
	        consignment = consignment+?(ПустоеЗначение(док.КодПродукции)= 0,	"          <dt:code>"+ СокрЛП(док.КодПродукции) +"</dt:code>","");

			Если ПустоеЗначение(док.ТипФасовки)=0 Тогда
				consignment = consignment+ "
    	    	|          <dt:packaging>
	        	|            <dt:packagingType>
		        |              <bs:guid>"+ СокрЛП(док.ТипФасовки.GUID) +"</bs:guid>
		//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки. 
    		    |            </dt:packagingType>
        		|            <dt:quantity>"+ док.КолВоЕдиницФасовки +"</dt:quantity>
		        |            <dt:volume>"+ док.ОбъемЕдиницыФасовки +"</dt:volume>
    		    |            <dt:unit>
        		|              <bs:guid>"+ СокрЛП(док.ЕдИзмОбъемаФасовки.GUID) +"</bs:guid>
		        |            </dt:unit>
    		    |          </dt:packaging>";		    
			КонецЕсли;		
		
			consignment = consignment+ "
    	    |        </vd:productItem>";
		
//		КонецЕсли;

		consignment = consignment+ "
		|        <vd:volume>"+ Док.Количество +"</vd:volume>
        |        <vd:unit>
        |          <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
        |        </vd:unit>
        |";
		

	    // нужно по реквизитам строки пробежать и проверить наличие упаковок
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те
		
		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			consignment = consignment+ "
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				//НомУровня = Док.ПолучитьАтрибут("НомерУровняУпак"+кк);
				//Если НомУровня=0 Тогда
				//    Продолжить;
				//КонецЕсли;
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				consignment = consignment+ "
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";
				
				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					consignment = consignment+ "
					|                    <dt:productMarks class='"+КлассМарк+"'>"+знМарк+"</dt:productMarks>";
					
				КонецЦикла;		
				consignment = consignment+ "
    	   		|                  </dt:package>";
		    КонецЦикла;
			consignment = consignment+ "
			|                </vd:packageList>";
		КонецЕсли;
	

		
		consignment = consignment+ "	
		|        <vd:sourceStockEntry>
        |          <bs:guid>"+ СокрЛП(док.Партия.GUID) +"</bs:guid>
        |        </vd:sourceStockEntry>
        |      </vd:consignment>
		|";
	КонецЦикла; //по строкам документа		  
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5
	ЗапросПодвал = "";
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
	ЗапросПодвал = "		  
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>";
	КонецЕсли;
	
//	Если ПустоеЗначение(док.номерАвто) = 0 Тогда // Смена владельца без перевозки
		ЗапросПодвал = ЗапросПодвал+"		  
        |      <vd:transportInfo>
        |        <vd:transportType>1</vd:transportType>
        |        <vd:transportNumber>
        |          <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
        |        </vd:transportNumber>
        |      </vd:transportInfo>
        |      <vd:transportStorageType>"+ ГМ.ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</vd:transportStorageType>";
//	КонецЕсли;
	ЗапросПодвал = ЗапросПодвал+"		  
		|      <vd:accompanyingForms>";
		
	Если ПустоеЗначение(док.ТтнДата) = 0 Тогда	// Без ТТН
		ЗапросПодвал = ЗапросПодвал+"		
        |        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
        |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
        |          <vd:issueDate>"+ ГМ.ДатаXML(док.ТтнДата) +"</vd:issueDate>
        |          <vd:type>1</vd:type>      
        |        </vd:waybill>";
	КонецЕсли;	
	ЗапросПодвал = ЗапросПодвал+"		  
        |        <vd:vetCertificate>
        |          <vd:authentication>
        |            <vd:purpose>
        |              <bs:guid>"+ СокрЛП( ГМ.СписокКонстант.Получить("Цель").Guid ) +"</bs:guid>
        |            </vd:purpose>
        |            <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>";
		
		Если ПустоеЗначение(тзУсловияПеревозки)=0 Тогда
			ЗапросПодвал = ЗапросПодвал+ "		  
			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>";
			тзУсловияПеревозки.ВыбратьСтроки();
			Пока тзУсловияПеревозки.ПолучитьСтроку() = 1 Цикл
				Если тзУсловияПеревозки.Пометка = 2 Тогда
					ЗапросПодвал=ЗапросПодвал+"
					|<vd:r13nClause>
					|<vd:condition>
					|<bs:guid>" + тзУсловияПеревозки.GUID + "</bs:guid>
					|</vd:condition>
					|</vd:r13nClause>
					|";	
				КонецЕсли;
			КонецЦикла;		
		Иначе
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED 
			
			ЗапросПодвал = ЗапросПодвал+ "
			|             <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
			|";
			
		КонецЕсли;
	ЗапросПодвал = ЗапросПодвал+ ?(Пустоезначение(док.особыеотметки) = 0, "            <vd:specialMarks>"+ СокрЛП(док.особыеотметки) +"</vd:specialMarks>","");	
	ЗапросПодвал = ЗапросПодвал+ "
        |          </vd:authentication>
        |        </vd:vetCertificate>";

	
		// Связанные документы
		// тип 16 = Заказ, 6 = ТОРГ12,  1 = ТрН
//        |          <vd:issueSeries>А</vd:issueSeries>
//        |          <vd:issueDate>2017-09-26</vd:issueDate>

		СвязанныеДокументы = "";
		Если ПустоеЗначение(Док.НомерЗаказаПокупателя) = 0 Тогда
			СвязанныеДокументы = "
			|        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.НомерЗаказаПокупателя)+"</vd:issueNumber>
			|          <vd:issueDate>"+ ГМ.ДатаXML(док.ДатаЗаказаПокупателя) +"</vd:issueDate>
    	    |          <vd:type>16</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |	     </vd:relatedDocument>";		    
		КонецЕсли;
		
		Если ПустоеЗначение(Док.ТОРГ12Номер) = 0 Тогда
	        СвязанныеДокументы = СвязанныеДокументы+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.ТОРГ12Номер)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ ГМ.ДатаXML(док.ТОРГ12Дата) +"</vd:issueDate>
    	    |          <vd:type>6</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |        </vd:relatedDocument>";
        КонецЕсли;
		
		Если ПустоеЗначение(СвязанныеДокументы) = 0 Тогда
			ЗапросПодвал = ЗапросПодвал+СвязанныеДокументы;	
		КонецЕсли;
		
	ЗапросПодвал = ЗапросПодвал+ "
		|      </vd:accompanyingForms>
        |    </merc:delivery>
		|          </merc:prepareOutgoingConsignmentRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>
		|";






	Запрос = Запрос_Шапка+
		delivery+
		consignment+
//		accompanyingForms_Шапка+
//		vetCertificate+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции



Функция Отправить_ВСД2_транзакция(док, тзУсловияПеревозки="")  Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_транзакция(док);
	КонецЕсли;	
	//}
		
	//стандартное поведение функции	
//	Если Проверка_ВСД_транзакция(док)=0 Тогда 
//		Возврат 0;
//	КонецЕсли;	

	//лишняя инициализация
	//Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
	//	ГМ.Инициализация(док.Фирма);
	//Иначе
	//	ГМ.Инициализация();
	//КонецЕсли;
	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Отправитель_Площадка);
	
	Попытка
		Если ПустоеЗначение(тзУсловияПеревозки) = 1 Тогда  // не переданы в параметре, посмотрим в документе
			тзУсловияПеревозки = ЗначениеИзСтроки(док.УсловияПеревозки); 
		КонецЕсли;
	Исключение	КонецПопытки;
	
	ЗапросXML = ВСД2_транзакция_ЗапросXML(док,тзУсловияПеревозки);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе(док);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции 


Функция ОтправитьВсе_ВСД2_Транзакция(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД2_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД2_Транзакция(СписокВСД,НачДата, КонДата);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	Состояние("Меркурий: отправка ВСД2 исходящие");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД2_Транзакция");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	КонецЕсли;
	
	
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
		//	Продолжить;
		//КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда 
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД2_транзакция( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецФункции


Функция ОформитьВСД2(РеализацияТоваров) Экспорт
	КонтФормы = "";
	ОткрытьФорму("Документ.ВСД2_транзакция",КонтФормы, РеализацияТоваров);
КонецФункции

//=============================== ВСД_производство ==========================
Функция ВСД2_производство_ЗапросXML(док)    
	//док = СоздатьОбъект("Документ.ВСД_производство");
	
	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:registerProductionOperationRequest>
		|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:productionOperation> ";
	
// НЗП
		Если (ПустоеЗначение(Док.operationId) = 0) Тогда 
			Запрос=Запрос+"
			|        <vd:operationId>"+ СокрЛП(Док.operationId) +"</vd:operationId>
			|";
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			//порядок добавления имеет значение -
			// 1. rawBatch = списание
			// Уровни упаковки можно использовать, пока без упаковки
			Если док.ВидДвижения=2 Тогда
				Запрос=Запрос+"
				| <vd:rawBatch>
				|    <vd:sourceStockEntry>
				|       <bs:guid>" + СокрЛП(док.Партия.guid) + "</bs:guid>
				|    </vd:sourceStockEntry>
				|    <vd:volume>"+ док.Количество +"</vd:volume>
				|    <vd:unit>
				|       <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.Guid) +"</bs:guid>
				|    </vd:unit>
				| </vd:rawBatch>
				|";
			КонецЕсли;
		КонецЦикла;		
		
		
		
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
	Если док.ВидДвижения=1 Тогда // Выпуск
		
	Запрос=Запрос+"		
		|              <vd:productiveBatch>
		|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
		|                <vd:product>
		|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
		|                </vd:product>
		|                <vd:subProduct>
		|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
		|                </vd:subProduct>
		|                <vd:productItem>
		// Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
		|                  <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
		|                </vd:productItem>
		|                <vd:volume>"+ Док.Количество +"</vd:volume>
		|                <vd:unit>
		|                  <bs:uuid>"+ СокрЛП(док.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                </vd:unit>
		|                <vd:dateOfProduction> ";
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос+ "
		|              <vd:firstDate>
		|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
		|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
		|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
		|                <dt:hour>0</dt:hour>
		|              </vd:firstDate> ";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос=Запрос+"		
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate> ";
		КонецЕсли;	
		Запрос=Запрос+"
		|            </vd:dateOfProduction>
		|            <vd:expiryDate> ";
		// !!! Не указывается для типа продукции "Живые животные".
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос=Запрос+"
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"				
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Запрос=Запрос+"
		|                </vd:expiryDate>
		//Уникальный идентификатор производственной партии продукции.
		|                <vd:batchID>"+ СокрЛП(Док.operationId) +"</vd:batchID>
		|                <vd:perishable>"+ ГМ.булево(док.Скоропортящийся)+"</vd:perishable>
		|                <vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo>
		|";
		
//   Уровни <dt:level>
   
    Тест1 = 0;  // 1 - Запрос с исп длинной строки УровниУпаковки, 0 - в реквизитах Документа
	Если Тест1=1 Тогда  // Запрос из Длинной строки
		стрУровни = "";
		СЗУпаковки = ЗначениеИзСтроки(Док.УровниУпаковки);
		Если ТипЗначенияСтр(СЗУпаковки) = "СписокЗначений" Тогда
			стрУровни = СЗУпаковки.Получить(Док.НомерСтроки);
			Если ПустоеЗначение(СтрУровни) = 0 Тогда
				ЕстьСведенияПоСтроке = 1;
			Иначе
				стрУровни = "";
			КонецЕсли;
		КонецЕсли;
	
	    ТЗУровни = ЗначениеИзСтроки(стрУровни);
		Если ТипЗначенияСтр(ТЗУровни) = "ТаблицаЗначений" Тогда
			Запрос=Запрос+"
			|                <vd:packageList>";
			ТЗУровни.ВыбратьСтроки();
			Пока ТЗУровни.ПолучитьСтроку()=1 Цикл
				Запрос=Запрос+"
				|                  <dt:package>
				|                    <dt:level>"+ТЗУровни.НомерУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(ТЗУровни.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ ТЗУровни.Колво +"</dt:quantity>";
				СзМарк = ЗначениеИзСтроки(ТЗУровни.Маркировки);
				Если ТипЗначенияСтр(СзМарк) = "СписокЗначений" Тогда
			    	кк=0;
					Для кк=1 по СзМарк.РазмерСписка() Цикл
						стрМарк="";
						ЗнМарк = СзМарк.ПолучитьЗначение(кк,стрМарк);
						Запрос=Запрос+"
						|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
					КонецЦикла;
				КонецЕсли;
				Запрос=Запрос+"
    	   		|                  </dt:package>";
			КонецЦикла;
			Запрос=Запрос+"
			|                </vd:packageList>";
		КонецЕсли;
	Иначе //ЖД Тест1=0  - сведения об уровнях упаковки в реквизитах Документа Производство
	    // нужно по реквизитам строки пробежать и проверить наличие упаковок
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те
		
		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			Запрос=Запрос+"
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				//НомУровня = Док.ПолучитьАтрибут("НомерУровняУпак"+кк);
				//Если НомУровня=0 Тогда
				//    Продолжить;
				//КонецЕсли;
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";
				
				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+КлассМарк+"'>"+знМарк+"</dt:productMarks>";
					
				КонецЦикла;		
				Запрос=Запрос+"
    	   		|                  </dt:package>";
		    КонецЦикла;
			Запрос=Запрос+"
			|                </vd:packageList>";
		КонецЕсли;
	
	КонецЕсли;//ЖД Варианты запроса УровнейУпаковки по разным реквизитам
	
		Запрос=Запрос+"
		|              </vd:productiveBatch>"; 
	КонецЕсли; // производство 
	
	
	КонецЦикла;
    // завершение операции
		Запрос=Запрос+"
		|          <vd:finalizeOperation>"+ГМ.булево(док.ЗавершитьОперацию)+"</vd:finalizeOperation>";


	Запрос=Запрос+"
	|            </merc:productionOperation>
	|            <merc:vetDocument>
	|              <vd:authentication>
	|              <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED 
	Запрос=Запрос+"
	|                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>";
	Запрос = Запрос+ ?(Пустоезначение(док.особыеотметки) = 0, "              <vd:specialMarks>"+ СокрЛП(док.особыеотметки) +"</vd:specialMarks>","");	
	Запрос=Запрос+"
	|              </vd:authentication>
	|            </merc:vetDocument>
	|          </merc:registerProductionOperationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
			
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_Производство(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_производство(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//Если Проверка_ВСД_производство(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	

	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Производитель_площадка);

	
	ЗапросXML = ВСД2_производство_ЗапросXML(док);
	
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	ГМ.СохранитьЗапросВДокументе(док);	
	
	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции  

Функция ОтправитьВсе_ВСД2_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД2_Производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД2_Производство(СписокВСД,НачДата, КонДата);
	КонецЕсли;	
	//}

	//стандартное поведение функции		
	Состояние("Меркурий: отправка ВСД Производство");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		Сообщить("отправляются ВСД производство за период "+ПериодСтр(НачДата, КонДата));

		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД2_Производство");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	Иначе
		Сообщить("отправляются ВСД производство "+СписокВСД.РазмерСписка()+" документов");
	КонецЕсли;
		
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
		//	Продолжить;
		//КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда 
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД2_производство( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецФункции



//******************* Проверка условий Регионализации
Функция РегионализацияМаршрута_2_ЗапросXML(док)
	//СокрЛП(док.Партия.Продукция.GUID)
	//СокрЛП(док.Партия.ВидПродукции.GUID)
	//СокрЛП(док.Партия.Продукция_Элемент.GUID) 
	//? что подставлять - написано 3 уровень
Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:checkShipmentRegionalizationRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку()=1 Цикл
		Запрос = Запрос+"
		|            <dt:cargoType>
		|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>       
		|            </dt:cargoType>";	    
	КонецЦикла;
	//<vd:sqnId>1</vd:sqnId>
	//Порядовый номер точки маршрута.
    //Не обязателен для заполнения, будет сгенерирован автоматически в ответе	
	
	// <vd:enterprise>
	//Сведения о предприятии, которое является точкой маршрута.
    //Указывается в случае, если не указано значение location 	
	
	Запрос = Запрос+"
	|            <vd:shipmentRoute>
	|              <vd:routePoint>
	|                <vd:sqnId>1</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|              <vd:routePoint>
	|                <vd:sqnId>2</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
//	|              <vd:routePoint>
//	|                <vd:sqnId>2</vd:sqnId>
//	|                <vd:location>
//	|                  <dt:address>
//	|                    <dt:country>
//	|                      <bs:guid>74a3cbb1-56fa-94f3-ab3f-e8db4940d96b</bs:guid>
//	|                    </dt:country>
//	|                    <dt:region>
//	|                      <bs:guid>d00e1013-16bd-4c09-b3d5-3cb09fc54bd8</bs:guid>
//	|                    </dt:region>
//	|                    <dt:district>
//	|                      <bs:guid>f4ab6f10-4f56-4ebd-a881-4b767dbf4473</bs:guid>
//	|                    </dt:district>
//	|                    <dt:locality>
//	|                      <bs:guid>6f039940-2e3b-4857-a30e-c142865d859e</bs:guid>
//	|                    </dt:locality>
//	|                  </dt:address>
//	|                </vd:location>
//	|              </vd:routePoint>
	|            </vd:shipmentRoute>
	|          </merc:checkShipmentRegionalizationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла) Экспорт 
	//<dt:decision> 	dt:RegionalizationDecision
	//1 	Перемещение разрешено.
	//2 	Перемещение разрешено при обязательном соблюдении условий.
	//3 	Перемещение запрещено. 
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    


//                  <vd:r13nRouteSection>
//                     <vd:sqnId>1</vd:sqnId>
//                     <vd:appliedR13nRule>
//                        <dt:cargoType>
//                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
//                        </dt:cargoType>
//                        <dt:decision>1</dt:decision>
//                     </vd:appliedR13nRule>
//                  </vd:r13nRouteSection>
	
	
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
	
		
	Попытка		
		applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
		RouteSectionList = objDom.selectNodes("//*[local-name() = 'r13nRouteSection']") ;
	Исключение
		Сообщить("Не удалось прочитать ответ о разрешении");
		Возврат "";
		//Пример на ветисе корявый...
		applicationId = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectSingleNode("applicationId").text ;
	
		RouteSectionList = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectNodes("r13nRouteSection") ;
	КонецПопытки;
		
	УсловияПеревозки = СоздатьОбъект("ТаблицаЗначений");
	УсловияПеревозки.НоваяКолонка("Пометка", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("ВидПродукции", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("Решение", , , , ,1,);
	УсловияПеревозки.НоваяКолонка("Название", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("UUID", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("GUID", , , , ,3,);
		
	Сообщить("Получено "+RouteSectionList.length+" записей по отрезкам маршрута","i");
    Для i1 = 0 По RouteSectionList.length - 1 Цикл     
        RouteSection = RouteSectionList.item(i1);
		RuleList = RouteSection.SelectNodes("vd:appliedR13nRule");
		Сообщить("Получено "+RuleList.length+" записей правил перемещения","i");
		Для k1 = 0 По RuleList.length - 1 Цикл
			appliedR13nRule = RuleList.item(k1);
			Решение = Число(appliedR13nRule.selectSingleNode("dt:decision").text);
			ВидПродукции = ГМ.НайтиВидПродукции( appliedR13nRule.selectSingleNode("dt:cargoType").selectSingleNode("bs:guid").text);
			
			requirements = appliedR13nRule.selectNodes("dt:requirement");
			Сообщить("Получено "+requirements.length+" записей по правилам для "+ВидПродукции,"i");
			Для i2 = 0 По requirements.length - 1 Цикл 
				conditionGroup = requirements.item(i2).selectNodes("dt:conditionGroup");
				Для i3=0 По conditionGroup.length - 1 Цикл
					conditionList = conditionGroup.item(i3).selectNodes("dt:condition");
					Для i4=0 По conditionList.length - 1 Цикл
						condition = conditionList.item(i4);
						УсловияПеревозки.НоваяСтрока();
						УсловияПеревозки.Пометка = 2;  
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						УсловияПеревозки.Название = condition.selectSingleNode("dt:text").text;
						УсловияПеревозки.UUID = condition.selectSingleNode("bs:uuid").text;
						УсловияПеревозки.GUID = condition.selectSingleNode("bs:guid").text;
						Если Решение = 1 Тогда
							Сообщить("Перемещение разрешено.");    
						ИначеЕсли Решение = 2 Тогда
							Сообщить("Перемещение разрешено при обязательном соблюдении условий." + УсловияПеревозки.Название);    
						Иначе
							Сообщить("Перемещение запрещено." +УсловияПеревозки.Название);    
						КонецЕсли;					
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;

	Возврат УсловияПеревозки;
	
КонецФункции



Функция ПолучитьРезультат_Регион_2(applicationID, докСсылка ) Экспорт
	
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	ГМ.Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = ГМ.Компонента.SendRequestResult( applicationID );

	Если ПустоеЗначение(докСсылка)=0 Тогда 
	//	ГМ.СохранитьСтатусЗапроса(докСсылка);
	//	ЗагрузитьXML_ПеревозкаРазрешена_2( ГМ.Компонента.LogFilename, докСсылка);  
	КонецЕсли;

    МожноВезти = ЗагрузитьXML_ПеревозкаРазрешена_2( ГМ.Компонента.LogFilename ); 
		
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Возврат МожноВезти;
КонецФункции


Функция ПроверитьВозможностьПеремещения(док) Экспорт

	//ГМ.Инициализация(док); //лишняя инициализация
	
	ЗапросXML = РегионализацияМаршрута_2_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
    Результат = "";
	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_Регион_2(appID,док); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_Регион_2(appID,док); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// Конец Регионализация
//***************************************************

// *********************Продукция 2.0

Функция ПолучитьРезультат_Список_Продукции(ФайлОтвета,продукцияЭлемент="") Экспорт

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ФайлОтвета);    
	    
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат "";
	КонецЕсли;		
		
    objDom.setProperty("SelectionNamespaces", "
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:v2='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|" );

	//applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
	productItemList = objDom.selectNodes("//*[local-name() = 'productItem']") ;    
	
    Для i1 = 0 По productItemList.length - 1 Цикл
        productItem = productItemList.item(i1);
		
		active 	 = productItem.selectSingleNode("bs:active").text;
		
		Если active="false" Тогда
			Продолжить;
		КонецЕсли;
		
		//st  	 = productItem.selectSingleNode("bs:status").text;
		//prodType = productItem.selectSingleNode("dt:productType").text;		

		СпрОбъект = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
		Если ПустоеЗначение(продукцияЭлемент)=0 Тогда
			СпрОбъект.НайтиЭлемент(продукцияЭлемент);
		Иначе
				
			Если СпрОбъект.НайтиПоРеквизиту("GUID", productItem.selectSingleNode("bs:guid").text,1)=0 Тогда 
				Если СпрОбъект.НайтиПоНаименованию( productItem.selectSingleNode("dt:name").text)=0 Тогда 
					СпрОбъект.Новый();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СпрОбъект.Наименование = productItem.selectSingleNode("dt:name").text;
		СпрОбъект.Продукция = ГМ.НайтиПродукцию(productItem.selectSingleNode("dt:product").selectSingleNode("bs:guid").text);
		СпрОбъект.ВидПродукции = ГМ.НайтиВидПродукции(productItem.selectSingleNode("dt:subProduct").selectSingleNode("bs:guid").text); 
		СпрОбъект.UUID = productItem.selectSingleNode("bs:uuid").text;
		СпрОбъект.GUID = productItem.selectSingleNode("bs:guid").text;
		Попытка СпрОбъект.СоответствуетГОСТу = ?(productItem.selectSingleNode("dt:correspondsToGost").text = "true",1,0); Исключение	КонецПопытки;
		Попытка СпрОбъект.Гост = productItem.selectSingleNode("dt:gost").text; Исключение	КонецПопытки;
		Попытка СпрОбъект.GTIN = productItem.selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
		Попытка СпрОбъект.Артикул	 = productItem.selectSingleNode("dt:code").text; Исключение КонецПопытки;
		СпрОбъект.ТермическиеУсловияПеревозки = ?(ПустоеЗначение(СпрОбъект.ТермическиеУсловияПеревозки) = 1,ГМ.СписокКонстант.Получить("ТермУсловияПеревозки"),СпрОбъект.ТермическиеУсловияПеревозки);
		// Фасовка
		Попытка packaging = productItem.selectSingleNode("*[local-name()='packaging']"); Исключение packaging=""	КонецПопытки; 	
		Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение ФасовкаНаименование=""	КонецПопытки;
		Попытка СпрОбъект.ТипФасовки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
		Попытка	СпрОбъект.КолВоЕдиницФасовки = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
		Попытка	СпрОбъект.ОбъемЕдиницыФасовки = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
		Попытка	СпрОбъект.ЕдИзмОбъемаФасовки = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;			
		
		//Площадка(и) производитель(и) - Пока в 1 экземпляре
		Попытка СпрОбъект.Площадка = ГМ.НайтиПлощадку(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки; 
			//ГМ.ЗагрузитьПлощадкуПоGUID(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки; 
		
		СпрОбъект.Записать();

		Сообщить("Записан ["+СпрОбъект.ТекущийЭлемент()+"] uuid =["+СпрОбъект.uuid+"]");
	КонецЦикла;
				
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Возврат "";
КонецФункции


Функция Продукция_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<soapenv:Envelope 
	|xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getProductItemByGuidRequest>
	|         <bs:guid>"+ СокрЛП(продукция.GUID) +"</bs:guid>
	|      </ws:getProductItemByGuidRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";
	
	Возврат запрос;
КонецФункции

Процедура Получить_Инфо_Продукции( Продукция ) Экспорт
	Если ПустоеЗначение(Продукция) = 1 Тогда
	    Сообщить("Не указана Продукция для получения инфо");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(Продукция.GUID) = 1 Тогда
	    Сообщить("У Продукции "+Продукция+" отсутствует GUID, запрос невозможен");
		Возврат;
	КонецЕсли;
	
	ЗапросXML = Продукция_Инфо_ЗапросXML( Продукция );

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.0/ProductService";
    метод.Action = "GetProductItemByGuid";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
		
	Результат = ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename,Продукция);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);	
	
КонецПроцедуры

Функция  ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID) Экспорт

	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	ГМ.Пауза( );
	
	Сообщить("Отправляем запрос ["+продукцияЭлемент+"]" );
	Результат = ГМ.Компонента.SendRequestResult( appID );

	Если ГМ.НайтиОшибки(ГМ.Компонента.LogFilename)>0 Тогда 
		Возврат Результат;
	КонецЕсли;		

	ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename,продукцияЭлемент);	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
  
	Возврат Результат;
КонецФункции

// документация - http://help.vetrf.ru/wiki/ModifyProducerStockListOperation_v2.0
Функция Изменить_Продукцию_ЗапросXML(продукцияЭлемент,RegisterModificationType)

	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:modifyProducerStockListRequest>
		|            <merc:localTransactionId>" + "Id1" + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:modificationOperation>
	    |          <vd:type>"+RegisterModificationType+"</vd:type>
	    |          <vd:resultingList>
	    |            <dt:productItem>"; 
	
		//При Модификации
//	    Если ПустоеЗначение(продукцияЭлемент.guid) = 0 Тогда
//			Запрос = Запрос + "
//    		|              <dt:guid>"+СокрЛП(продукцияЭлемент.guid)+"</dt:guid>";
//		КонецЕсли;
	    Если ПустоеЗначение(продукцияЭлемент.uuid) = 0 Тогда
			Запрос = Запрос + "
    		|              <bs:uuid>"+СокрЛП(продукцияЭлемент.uuid)+"</bs:uuid>";
		КонецЕсли;
		
		Попытка //Нет пока такого реквизита в справочнике
		    Если ПустоеЗначение(продукцияЭлемент.GTIN) = 0 Тогда
				Запрос = Запрос + "
    			|              <dt:globalID>"+ продукцияЭлемент.GTIN +"</dt:globalID>";
			КонецЕсли;
		Исключение КонецПопытки;
		Запрос = Запрос + "
	    |              <dt:name>"+СокрЛП(продукцияЭлемент.Наименование)+"</dt:name>";
	    Если ПустоеЗначение(продукцияЭлемент.Артикул) = 0 Тогда
			Запрос = Запрос + "
    		|              <dt:code>"+СокрЛП(продукцияЭлемент.Артикул)+"</dt:code>";
		КонецЕсли;
		Запрос = Запрос + "
	    |              <dt:productType>"+продукцияЭлемент.Продукция.Тип+"</dt:productType>
    	|              <dt:product>
	    |                <bs:guid>"+Сокрлп(продукцияЭлемент.Продукция.GUID)+"</bs:guid>
    	|              </dt:product>
	    |              <dt:subProduct>
    	|                <bs:guid>"+Сокрлп(продукцияЭлемент.ВидПродукции.GUID)+"</bs:guid>
	    |              </dt:subProduct>
		|              <dt:correspondsToGost>"+ГМ.Булево(продукцияЭлемент.СоответствуетГОСТу)+"</dt:correspondsToGost>";
	    Если продукцияЭлемент.СоответствуетГОСТу = 1 Тогда
			Запрос = Запрос + "
	    	|              <dt:gost>"+СокрЛП(продукцияЭлемент.Гост)+"</dt:gost>";
		КонецЕсли;
		// ХС Производитель и владелец ТМ		
		Запрос = Запрос + "
	    |              <dt:producer>
    	|                <bs:guid>"+Сокрлп(ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
	    |              </dt:producer>
	    |              <dt:tmOwner>
    	|                <bs:guid>"+Сокрлп(ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
	    |              </dt:tmOwner>";
		

//45 	·········<dt:producing> 	dt:ProductItemProducing 	[0..*] 	Список площадок, на которых выпускается данная продукция. 	
//46 	············<dt:location> 	dt:Enterprise 	[1..1] 	Площадка, осуществляющая выпуск продукции. 	
//47 	···············<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии предприятия. 	<bs:uuid>9c706614-b995-4bdd-bda3-8fa9de70803a</bs:uuid>
//48 	···············<bs:guid> 	bs:UUID 	[1..1] 	Глобальный идентификатор предприятия. 	<bs:guid>12f04ea3-e236-4b71-b427-e04d41b26de4</bs:guid>
//49 	············</dt:location> 				
//50 	·········</dt:producing> 			
		Запрос = Запрос + "
	    |              <dt:producing>
		|                <dt:location>
    	|                   <bs:guid>"+Сокрлп(продукцияЭлемент.Площадка.GUID)+"</bs:guid>
	    |                </dt:location>
	    |              </dt:producing>";
		
// ЖД ФАСОВКА
		Если ПустоеЗначение(продукцияЭлемент.ТипФасовки)= 0 Тогда
		Запрос = Запрос + "
		|              <dt:packaging>
	    |                <dt:packagingType>
    	|                  <bs:guid>"+Сокрлп(продукцияЭлемент.ТипФасовки.GUID)+"</bs:guid>
	    |                </dt:packagingType>
    	|                <dt:quantity>"+продукцияЭлемент.КолвоЕдиницФасовки+"</dt:quantity>
	    |                <dt:volume>"+продукцияЭлемент.ОбъемЕдиницыФасовки+"</dt:volume>
    	|                <dt:unit>
	    |                  <bs:guid>"+ СокрЛП(продукцияЭлемент.ЕдИзмОбъемаФасовки.Guid) +"</bs:guid>
    	|                </dt:unit>
	    |              </dt:packaging>";
		
		КонецЕсли;
		Запрос = Запрос + "
		|            </dt:productItem>
	    |          </vd:resultingList>
	    |        </merc:modificationOperation>
	    |      </merc:modifyProducerStockListRequest>
	    |    </apl:data>
	    |  </apl:application>
	    |</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";	
	
	
	Возврат Запрос;	
КонецФункции


Функция  Изменить_Продукцию( продукцияЭлемент , RegisterModificationType) Экспорт

	Если ПустоеЗначение(продукцияЭлемент.Площадка.GUID)=1 Тогда 
		Сообщить("В продукцияЭлемент.Площадка пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	                 
	ЗапросXML = Изменить_Продукцию_ЗапросXML(продукцияЭлемент, RegisterModificationType);
	
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";	
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	Результат = "";
	Если ПустоеЗначение(appID) = 0 Тогда
		Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции

Функция Получить_Список_Продукции_ЗапросXML(Площадка)
	
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |   <ws:getProductItemListRequest>
    |      <bs:listOptions>
    |         <bs:count>1000</bs:count>
    |         <bs:offset>0</bs:offset>
    |      </bs:listOptions>
    |      <dt:enterprise>
    |         <bs:guid>"+ СокрЛП(Площадка.GUID) +"</bs:guid>
    |      </dt:enterprise>
    |   </ws:getProductItemListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция Получить_Список_Продукции( Площадка ) Экспорт

	ЗапросXML = Получить_Список_Продукции_ЗапросXML( Площадка );

	метод = ГМ.Компонента.GetMethod();
	
	метод.Service = "platform/services/2.0/ProductService";
    метод.Action = "GetProductItemList";		
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	Если ГМ.НайтиОшибки(ГМ.Компонента.LogFilename)>0 Тогда 
		Возврат "";
	КонецЕсли;		
	ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename);
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);	
	Возврат appID;
		
КонецФункции


//*************** Окончание Продукция 
// ================================ Аннулирование ВСД Транспортного v2 ===========================


Функция ВСД2_Аннулирование_ЗапросXML(док)
	Запрос = "
	|<SOAP-ENV:Envelope 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:withdrawVetDocumentRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|            </merc:initiator>
	|            <merc:vetDocumentId>"+ СокрЛП(док.UUID) +"</merc:vetDocumentId>
	|            <merc:withdrawReason>Неверно указан объём продукции</merc:withdrawReason>
	|            <merc:withdrawDate>"+ ГМ.ДатаXML(док.ДатаДок, "T23:59:59") +"</merc:withdrawDate>
	|            <merc:specifiedPerson>
	|              <vd:login>"+ ГМ.СписокКонстант.Получить("param_vetdoctor_login")+"</vd:login>
	|            </merc:specifiedPerson>
	|          </merc:withdrawVetDocumentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";	
	
	Возврат Запрос;
КонецФункции


Функция Отправить_ВСД2_Аннулирование( док ) Экспорт
	//Аннулирование док-та ВСД2
	Если ПустоеЗначение(док)=1 Тогда
		Возврат 0;
	КонецЕсли;	

	Если СокрЛП(док.ТипВСД) = "PRODUCTIVE" Тогда
		Сообщить("Производственный ВСД не аннулируем " + Док);
		Возврат "";	
	КонецЕсли;

	Если ПустоеЗначение(док.uuid) = 1 Тогда
		Сообщить("В документе "+док+" не указан uuid, аннулирование невозможно");
		Возврат "";
	КонецЕсли;
	
	Если СокрЛП(док.Статус) = "Аннулирова" Тогда
		Сообщить("Документ "+док+" уже аннулирован");
		Возврат "";
	КонецЕсли;
	
	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Отправитель_Площадка);

	ЗапросXML = ВСД2_Аннулирование_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	ГМ.СохранитьЗапросВДокументе(док);	

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД_2(appID, док);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2( appID, док);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	докОбъект = СоздатьОбъект("Документ");
	докОбъект.НайтиДокумент( док );
	Если СокрЛП(докОбъект.Статус)= "WITHDRAWN" Тогда //условие на ответ - вдруг покупатель уже погасил, либо ошибка аннулирования
		докОбъект.Статус = "Аннулирован";
		докОбъект.Записать();
		докОбъект.Удалить(0);
	КонецЕсли;
	
	Возврат appID;		
КонецФункции


Процедура Аннулировать_ВСД2_транзакция( док ) Экспорт
	Если ПустоеЗначение(док) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкаАннулирования = 0; // Если не удалось аннулировать ВСЕ ВСД2, связанные с Транзакцией, не помечаем ее как Аннулирован

	тзВСД = ГМ.Выбрать_ВСД(док);
	
	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку()=1 Цикл
		Отправить_ВСД2_Аннулирование(тзВСД.Док);
		Если НЕ(Сокрлп(тзВСД.Док.Статус) = "Аннулирова") Тогда  // 10 символов, н не умещается
			ОшибкаАннулирования = 1;
			Сообщить("Не удалось Аннулировать "+тзВСД.Док+" для "+док);
		КонецЕсли;
	КонецЦикла;
	
	Если ОшибкаАннулирования = 0 Тогда
		докОбъект = СоздатьОбъект("Документ");
		докОбъект.НайтиДокумент( док );
		докОбъект.Статус = "Аннулирован";
		докОбъект.Записать();
		докОбъект.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры 

// **************** Аннулирование ВСД Транспортного окончание v2

// **************** Инвентаризация v2


Функция ВСД2_инвентаризация_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_инвентаризация_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_инвентаризация_ЗапросXML(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	//док = СоздатьОбъект("Документ.ВСД_инвентаризация");
	
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:resolveDiscrepancyRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <merc:inventoryDate>" + ГМ.ДатаXML(док.ДатаДок, "T00:00:00") + "</merc:inventoryDate>
	|            <merc:responsible>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:responsible>
	|            <merc:stockDiscrepancy id='test1'>
	|              <vd:resultingList>";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		Запрос = Запрос + "	
		|                <vd:stockEntry>";
	    Если ПустоеЗначение(Док.Партия)=0 Тогда // изменяем конкретную партию
			Запрос = Запрос + "
			|                <bs:uuid>" + СокрЛП(док.Партия.uuid) + "</bs:uuid>";	        
		КонецЕсли;
		
		Запрос = Запрос + "
		|                 <vd:batch>
		|                    <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
		|                    <vd:product>
		|                      <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
		|                    </vd:product>
		|                    <vd:subProduct>
		|                      <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
		|                    </vd:subProduct>
		|                    <vd:productItem>";
		Если ПустоеЗначение(док.Продукция_Элемент.GUID) = 0 Тогда
			Запрос = Запрос+ "
			|                      <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
		КонецЕсли;
   	    Запрос = Запрос+?(ПустоеЗначение(док.НаименованиеПродукции)= 0,	"          <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>","");
//    	    Запрос = Запрос+?(ПустоеЗначение(док.GTIN)= 0,	"          <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>","");
//        	Запрос = Запрос+									"|          <dt:name>"+СокрЛП(док.НаименованиеПродукции)+"</dt:name>";
//	        Запрос = Запрос+?(ПустоеЗначение(док.Артикул)= 0,	"          <dt:code>"+ СокрЛП(док.КодПродукции) +"</dt:code>","");

		Если ПустоеЗначение(док.ТипФасовки)=0 Тогда
			Запрос = Запрос+ "
   	    	|          <dt:packaging>
        	|            <dt:packagingType>
	        |              <bs:guid>"+ СокрЛП(док.ТипФасовки.GUID) +"</bs:guid>
	//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки. 
   		    |            </dt:packagingType>
       		|            <dt:quantity>"+ док.КолВоЕдиницФасовки +"</dt:quantity>
	        |            <dt:volume>"+ док.ОбъемЕдиницыФасовки +"</dt:volume>
   		    |            <dt:unit>
       		|              <bs:guid>"+ СокрЛП(док.ЕдИзмОбъемаФасовки.GUID) +"</bs:guid>
	        |            </dt:unit>
   		    |          </dt:packaging>";		    
		КонецЕсли;		

        Запрос = Запрос +"
		|                   </vd:productItem>
		|                    <vd:volume>"+ Док.Количество +"</vd:volume>
		|                    <vd:unit>
		|                      <bs:uuid>"+ СокрЛП(док.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                    </vd:unit>";
		
		Запрос = Запрос +"
		|                    <vd:dateOfProduction>";
		
		Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
			Запрос = Запрос+ "
		|              <vd:firstDate>
		|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
		|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
		|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
		|                <dt:hour>0</dt:hour>
		|              </vd:firstDate> ";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и 
				(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
			Запрос=Запрос+"		
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate> ";
		КонецЕсли;	
		Запрос=Запрос+"
		|            </vd:dateOfProduction>";
	
		Запрос = Запрос +"
		|            <vd:expiryDate> ";
		Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
			Запрос=Запрос+"
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и 
				(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"				
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Запрос=Запрос+"
		|                </vd:expiryDate>";

		Запрос=Запрос+"
//		|                    <vd:batchID>123</vd:batchID>
		|                    <vd:perishable>"+ ГМ.булево(док.Скоропортящийся)+"</vd:perishable>";
        // Добавляем Партию
//		Если (ПустоеЗначение(Док.Партия) = 1) и (ПустоеЗначение(док.Производитель_Площадка.GUID) = 0) и (ПустоеЗначение(док.Производитель_Страна) = 0)Тогда
			Запрос=Запрос+"
			|                    <vd:origin>";
		Если (ПустоеЗначение(док.Производитель_Страна) = 0)Тогда
			Запрос=Запрос+"
			|                    <vd:country>
			|                        <bs:uuid>"+СокрЛП(док.Производитель_Страна.uuid)+"</bs:uuid>
			|                      </vd:country>";
		КонецЕсли;
		Если (ПустоеЗначение(док.Производитель_Площадка.GUID) = 0)Тогда
			Запрос=Запрос+"
			|                       <vd:producer>
			|                      	<dt:enterprise>
			|                      	  <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
			|                      	</dt:enterprise>
			|                      </vd:producer>";
		КонецЕсли;
			Запрос=Запрос+"
			|                    </vd:origin>";
//		КонецЕсли;
		
		Запрос=Запрос+"
		|                    <vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo>";
        
		//УРОВНИ УПАКОВКИ
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те
		
		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			Запрос=Запрос+"
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";
				
				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+КлассМарк+"'>"+знМарк+"</dt:productMarks>";
					
				КонецЦикла;		
				Запрос=Запрос+"
    	   		|                  </dt:package>";
		    КонецЦикла;
			Запрос=Запрос+"
			|                </vd:packageList>";
		КонецЕсли;
		
		Запрос=Запрос+"
		|                    <vd:owner>
		|                      <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|                    </vd:owner>
		|                  </vd:batch>
		|                </vd:stockEntry>";
	КонецЦикла;
	Запрос = Запрос + "
	|              </vd:resultingList>
	|            </merc:stockDiscrepancy>
	|            <merc:discrepancyReport for='test1'>
//	|              <vd:issueSeries>777</vd:issueSeries>
	|              <vd:issueNumber>"+ Док.НомерДок +"</vd:issueNumber>
	|              <vd:issueDate>" + ГМ.ДатаXML(док.ДатаДок) + "</vd:issueDate>
	|              <vd:reason>
	|                <vd:name>"+СокрЛП(док.ПричинаРасхождения)+"</vd:name>
	|              </vd:reason>
	|              <vd:description>"+СокрЛП(док.ОписаниеНесоответствия)+"</vd:description>
	|            </merc:discrepancyReport>
	|          </merc:resolveDiscrepancyRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
    
	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_Инвентаризация(док)
	// дата изготовления и срок годности обязательны
	// при добавлении партии обязательны Страна и Производитель_Площадка
	Рез = 1;
	Если ПустоеЗначение(док.Владелец_ХозСубъект) = 1 Тогда
	    Сообщить("Не указан владелец ХС");
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Владелец_Площадка) = 1 Тогда
	    Сообщить("Не указана Площадка владельца");
		Возврат 0;
	КонецЕсли;
	
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку()=1 Цикл
		
        Если (ПустоеЗначение(док.Продукция)=1) или (ПустоеЗначение(док.ВидПродукции)=1) или (ПустоеЗначение(док.Продукция_Элемент)=1) Тогда
        	Сообщить("Не указаны Продукция, Вид Продукции или Продукция_Элемент");
			Возврат 0;
        КонецЕсли;
        
		Если (ПустоеЗначение(док.ЕдиницаИзмерения)=1) Тогда
        	Сообщить("Не указана Единица измерения");
			Возврат 0;
        КонецЕсли;
		
        Если (ПустоеЗначение(док.ДатаИзготовления1)=1) и (ПустоеЗначение(док.ДатаИзготовления2)=1) Тогда
        	Сообщить("Не указана Дата изготовления");
			Возврат 0;
        КонецЕсли;
        Если (ПустоеЗначение(док.ДатаСрокГодности1)=1) и (ПустоеЗначение(док.ДатаСрокГодности2)=1) Тогда
        	Сообщить("Не указан срок годности");
			Возврат 0;
        КонецЕсли;
	    Если ПустоеЗначение(док.Партия) = 1 Тогда
	        Если (ПустоеЗначение(док.Производитель_Страна)=1) и (ПустоеЗначение(док.Производитель_Площадка)=1) Тогда
    	    	Сообщить("Не указана Страна производителя или его Площадка");
				Возврат 0;
	        КонецЕсли;
		КонецЕсли;
		Если (ПустоеЗначение(док.ТипФасовки)=0) и (ПустоеЗначение(док.ЕдИзмОбъемаФасовки)=1) Тогда
        	Сообщить("Не указана Единица измерения Фасовки");
			Возврат 0;
        КонецЕсли;
	КонецЦикла;
    Возврат Рез;
КонецФункции

Функция Отправить_ВСД2_Инвентаризация(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_Инвентаризация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_Инвентаризация(док);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	
	Если Проверка_ВСД2_инвентаризация(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	//ГМ.ИнициализацияКомпоненты(док.Фирма);
	
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Владелец_Площадка);

	ЗапросXML = ВСД2_инвентаризация_ЗапросXML(док);
    //Текст = СоздатьОбъект("Текст");
	//Текст.ДобавитьСтроку(ЗапросXML);
	//Текст.Показать();
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	ГМ.СохранитьЗапросВДокументе(док);

	Если ПустоеЗначение(appID)=0 Тогда
	// по идее партии нужно получить	
		Результат = ПолучитьРезультат_ВСД_2(appID, док);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД_2( appID, док);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	докОбъект = СоздатьОбъект("Документ");
	докОбъект.НайтиДокумент( док );
	Если СокрЛП(докОбъект.Статус) = "COMPLETED" Тогда
		докОбъект.Записать();
		докОбъект.Провести();
	КонецЕсли;
	
	
	Возврат appID;
	
КонецФункции



Функция GetRussianEnterpriseList(Регион, Название, Смещение = 0)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getRussianEnterpriseListRequest>
	|     	<bs:listOptions>
	|            <bs:count>"+Смещение+"</bs:count>
	|            <bs:offset>0</bs:offset>
	|        </bs:listOptions>
	|     	<dt:enterprise>";
//	|            <bs:guid>"+СокрЛП(ХС.GUID)+"</bs:guid>";
	Если ПустоеЗначение(Название) = 0 Тогда
	    Запрос = Запрос + "
		|            <dt:name>"+СокрЛП(Название)+"</dt:name>";	
	КонецЕсли;
	Запрос = Запрос + "
	|            <dt:address>
	|               <dt:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|               </dt:region>
	|            </dt:address>
	|        </dt:enterprise>
	|      </ws:getRussianEnterpriseListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";	
	Возврат Запрос;
КонецФункции


Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкиПоНазванию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкиПоНазванию2_0( Регион, УточнитьНазвание);
	КонецЕсли;	
	//}

	//стандартное поведение функции	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		ГМ.ХС_ПолучитьGuid(ХС);
			
	КонецЕсли;
	
	Стр = ГМ.ПолучитьНаименованиеКлиента(ХС.Контрагент);
	
	ИНН = ГМ.ПолучитьИНН(ХС.Контрагент);
	Если СтрДлина( СокрЛП(ИНН) )=12 Тогда		
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ]","i");		
 	
	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");	
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");

	ПолученоЗаписей = 1000; Смещение = 0;
	
	Пока ПолученоЗаписей >= 1000 Цикл
    	ПолученоЗаписей = 0;
		ЗапросXML = GetRussianEnterpriseList( Регион, стр, Смещение);

		метод = ГМ.Компонента.GetMethod();
		метод.Service = "platform/services/2.0/EnterpriseService";
	    метод.Action = "GetRussianEnterpriseList";	
	
		appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

		Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);    
		
		
	    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
		objDom.load(ГМ.Компонента.LogFilename);    
		
		Если ГМ.НайтиОшибки()>0 Тогда 
			Возврат appID;
		КонецЕсли;		

		objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|xmlns:v2='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );

        Попытка
			enterpriseList =  objDom.selectNodes("//*[local-name() = 'enterprise']");
		
			ПолученоЗаписей = enterpriseList.length;
			
			Для i1 = 0 По enterpriseList.length - 1 Цикл
				enterprise=enterpriseList.item(i1);
		
				guid = enterprise.selectSingleNode("bs:guid").text;
				uuid = enterprise.selectSingleNode("bs:uuid").text;
				name = enterprise.selectSingleNode("dt:name").text;
				active = enterprise.selectSingleNode("bs:active").text;
		
				address = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:addressView").text;			
			
				тзПлощадки.НоваяСтрока();
				тзПлощадки.Наименование = name;
				тзПлощадки.адрес = address;
				//тз.Регион = region;
				тзПлощадки.guid = guid;
				тзПлощадки.uuid = uuid;
				тзПлощадки.активна = active;
				тзПлощадки.ХозСубъект = ХС;
				//Состояние("Загрузка площадок: "+(ПолученоЗаписей+i1));
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
	    КонецПопытки;
        Смещение = Смещение + 1000;
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	КонецЦикла;
	
	Сообщить("Загружено "+тзПлощадки.КоличествоСтрок()+" элементов","i");
		
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");	
	
	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
	ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	Возврат 1;
КонецФункции


Функция Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Найти_Продукция_Элемент2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции);
	КонецЕсли;	
	//}

	//стандартное поведение функции
	Попытка
		productItemName = productItem.selectSingleNode("*[local-name()='name']").text;
	Исключение
		//Сообщить("Не удалось получить элемент [productItem]","!");
		productItemName = "";
	КонецПопытки;

	Попытка
		productItemGuid = productItem.selectSingleNode("bs:guid").text;
	Исключение			
		productItemGuid="";
	КонецПопытки;

	Попытка
		productItemUuid = productItem.selectSingleNode("bs:uuid").text;
	Исключение			
		productItemUuid="";
	КонецПопытки;
	
		
	Рез = "";
	//Uuid = СокрЛП(Uuid);
	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
	если ПустоеЗначение(productItemGuid)=0 Тогда			
		
		Если Спр.НайтиПоРеквизиту("Guid",productItemGuid,1)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент GUID ["+productItemGuid+"] не найдена. Создан новый элемент. ");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = productItemGuid;
			Спр.GUID = productItemGuid;
			Спр.Uuid = productItemUuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = ГМ.СписокКонстант.Получить("ТермУсловияПеревозки");//1;
			Спр.Записать();
			
			//получим наименование и все остальные реквизиты
			Получить_Инфо_Продукции(Спр.ТекущийЭлемент())
		КонецЕсли;
	Иначе
		Если Спр.НайтиПоНаименованию(productItemName,0,0)=0 Тогда 
			Сообщить("ВСД_Продукция_Элемент название ["+productItemName+"] не найдена. Создан новый элемент.");
			//создать 
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = productItemName;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = ГМ.СписокКонстант.Получить("ТермУсловияПеревозки");//1;
			//Спр.Uuid = Uuid;
			Спр.Записать();
		КонецЕсли;
	КонецЕсли;
	рез = Спр.ТекущийЭлемент();
	
	Возврат рез;
КонецФункции

Функция ВСД2_Инвентаризация_ЗаполнитьТЧ(Док)  Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_Инвентаризация_ЗаполнитьТЧ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_Инвентаризация_ЗаполнитьТЧ(Док);
	КонецЕсли;	
	//}	
	
	Док.УдалитьСтроки();
	
	КолвоМакс =500;
	ВвестиЧисло(КолвоМакс, "Введите колво партий", 10, 0, );
	
	ДатаМакс = "";
	ВвестиДату(ДатаМакс, "Минимальный срок годности",  );

	СпрПартии = СоздатьОбъект("Справочник.ВСД_Партия");
	СпрПартии.ВыбратьЭлементы();
	колво=0;
	Пока СпрПартии.ПолучитьЭлемент()=1 Цикл		
		Если (СпрПартии.ПометкаУдаления()=1) Тогда 
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_Площадка <>  Док.Владелец_площадка) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_ХозСубъект <>  Док.Владелец_ХозСубъект) Тогда
			Продолжить;
		КонецЕсли;        
		
		Если ПустоеЗначение(ДатаМакс)=0 Тогда 
			Если ПустоеЗначение(СпрПартии.ДатаСрокГодности1)=0 Тогда 
				Если СпрПартии.ДатаСрокГодности1 > ДатаМакс Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		колво =колво+1;
		Док.НоваяСтрока();
		Док.Партия = СпрПартии.ТекущийЭлемент();
		//Док.ПриВыбореПартии();
		Док.Продукция = Док.Партия.Продукция;
		Док.ВидПродукции = Док.Партия.ВидПродукции;
		Док.ЕдиницаИзмерения = Док.Партия.ЕдиницаИзмерения;
		//Док.ФормаУпаковки = Партия.ФормаУпаковки;
		Док.НаименованиеПродукции = Док.Партия.НаименованиеПродукции;
		Док.ДатаИзготовления1 = Док.Партия.ДатаИзготовления1;
		Док.ДатаИзготовления2 = Док.Партия.ДатаИзготовления2;
		Док.ДатаСрокГодности1 = Док.Партия.ДатаСрокГодности1;
		Док.ДатаСрокГодности2 = Док.Партия.ДатаСрокГодности2;
		Док.Производитель_площадка = Док.Партия.Производитель_Площадка;
		Док.Продукция_Элемент = Док.Партия.Продукция_Элемент;
	
		если колво >= КолвоМакс Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции

