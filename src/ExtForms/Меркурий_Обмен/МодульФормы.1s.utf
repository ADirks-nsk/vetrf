Перем ГМ;
Перем ВыбФирма Экспорт; //для выбора площадки

Перем НомерТекущейФормы, СписокОтправки;

Процедура ПриИзмененииФирмы()
	ГМ.Инициализация(Контекст);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);
КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения)

	Если ЭлементДиалога = "ВыбПлощадка" Тогда
		ВремЭлем = ВыбХС;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Регион" Тогда
		ВремЭлем = Страна;
		ОткрытьФорму("Справочник.ВСД_Регион",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Район" Тогда
		ВремЭлем = Регион;
		ОткрытьФорму("Справочник.ВСД_Район",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Город" Тогда
		ВремЭлем = Регион;
		ОткрытьФорму("Справочник.ВСД_Город",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Улица" Тогда
		ВремЭлем = Город;
		ОткрытьФорму("Справочник.ВСД_Улица",ВремЭлем);
		ФлагПродолжения = 0;
	КонецЕсли;

КонецПроцедуры 

//======= ФУНКЦИИ ИНТЕРФЕЙСА ==============

 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки = "Параметры" Тогда
		Форма.ИспользоватьСлой(ЗначениеЗакладки);
 	Иначе
		Форма.ИспользоватьСлой("Основной,"+ЗначениеЗакладки);
 	КонецЕсли;
	
КонецПроцедуры 


//=========================== Площадки =================================

Процедура СоздатьНовуюПлощадку(ВыбХС)
	Если ПустоеЗначение(ВыбХС)=1 Тогда
		Предупреждение("Выберите Хоз субъект");
	КонецЕсли;
	ВидСтравочникаХС = Метаданные.Справочник("ВСД_ХозСубъект").Реквизит("Контрагент").Вид;
	ВидСтравочникаПЛ = Метаданные.Справочник("ВСД_Площадка").Реквизит("Контрагент").Вид;
	
	Если ВидСтравочникаХС = ВидСтравочникаПЛ Тогда
		СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");
		
		СпрПл.Новый();
		СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
		СпрПл.Контрагент = ВыбХС.Контрагент;
		СпрПл.Адрес = ГМ.ПолучитьФактАдрес(ВыбХС.Контрагент);
		СпрПл.GuidХозСубъекта = ВыбХС.GUID;
		СпрПл.Записать();
		Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());
		
		ВыбПлощадка = СпрПл.ТекущийЭлемент();
	Иначе
		Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Выбран() = 1 Тогда
			Спр = СоздатьОбъект("Справочник."+ВидСтравочникаПЛ);
			Спр.ИспользоватьВладельца(ВыбХС.Контрагент);
			Если Спр.Выбрать("Выберите грузополучателя",) = 1 Тогда
				СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");

				СпрПл.Новый();
				СпрПл.Наименование = Спр.Наименование;
				СпрПл.Контрагент = Спр.ТекущийЭлемент();
				СпрПл.Адрес = ГМ.ПолучитьФактАдрес(СпрПл.Контрагент);
				СпрПл.GuidХозСубъекта = ВыбХС.GUID;
				СпрПл.Записать();
				Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());
				
				ВыбПлощадка = СпрПл.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ГМ.Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	//Отладка();
		
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат;
	КонецЕсли;		

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);    	        
	
    businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
	guid = businessEntity.selectSingleNode("bs:guid").text;
	uuid = businessEntity.selectSingleNode("bs:uuid").text;			
	active = businessEntity.selectSingleNode("bs:active").text;		
	enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;		
	Сообщить("Успешно установлена связь ВСД_Площадка ["+enterprise+"] ВСД_ХозСубъект ["+guid+"]","i");
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка)
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда 
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустоеЗначение(Площадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]","i");		
	Результат = ГМ.Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	//Отладка();	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда				
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( ГМ.Компонента.ApplicationId)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	ГМ.Пауза();
	
	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ГМ.Компонента.SendRequestResult(СокрЛП(appID));

   	Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);        
    
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат;
	КонецЕсли;		
		
    enterprise=objDom.selectSingleNode("//merc:enterprise") ;								
	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;
	name = enterprise.selectSingleNode("ent:name").text;
	active = enterprise.selectSingleNode("bs:active").text;
				
	если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Спр.НайтиЭлемент(Площадка);
		спр.GUID = GUID;
		спр.uuid = uuid;
		спр.Записать();
		Сообщить("Успешно записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
		
		Площадка = Спр.ТекущийЭлемент();
	Иначе
		Сообщить("Пустой GUID Площадки");
	КонецЕсли;
		
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );	
	
	ГМ.Пауза();
	
	СоздатьСвязьХозсубъектПлощадка(Площадка);
				
КонецПроцедуры

Функция  СоздатьПлощадку_ЗапросXML(Площадка)
	ЗапросXML = "<modifyEnterpriseRequest xmlns:sch='http://www.w3.org/2001/XMLSchema' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП(param_intiator_login)+"</co:login>
	|        </initiator>
	|        <modificationOperation>
	|          <ent:type>CREATE</ent:type>
	|          <ent:affectedList count='0' total='0' offset='0' />
	|          <ent:resultingList count='1' total='1' offset='0'>
	|            <ent:enterprise>
	|              <ent:name>"+СокрЛП(Площадка.Наименование)+"</ent:name>
	|              <ent:type>1</ent:type>
	|              <ent:address>
	|                <ik:country>
	|                  <bs:guid>"+СокрЛП(Страна.GUID)+"</bs:guid>
	|                </ik:country>
	|                <ik:federalDistrict />
	|                <ik:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|                </ik:region>
	|";
	
	Если ПустоеЗначение(Район.GUID)=0 Тогда	
		ЗапросXML=ЗапросXML+"
		|                <ik:district>
		|                  <bs:guid>"+СокрЛП(Район.GUID)+"</bs:guid>
		|                </ik:district>
		|";
	Иначе
		ЗапросXML=ЗапросXML+"
		|<ik:district />
		|";
	КонецЕсли;
	ЗапросXML=ЗапросXML+"
	|                <ik:locality>
	|                  <bs:guid>"+СокрЛП(Город.GUID)+"</bs:guid>
	|                </ik:locality>
	|                <ik:subLocality />
	|                <ik:street />
	|                <ik:addressView>"+СокрЛП(Площадка.Адрес)+"</ik:addressView>
	|              </ent:address>
	|              <ent:activityList count='1' total='1' offset='0'>
	|                <ent:activity>
	|                  <ent:name>Продажа продуктов питания</ent:name>
	|                </ent:activity>
	|              </ent:activityList>
	|              <ent:owner>
	|                <bs:guid>"+СокрЛП(Площадка.GuidХозСубъекта)+"</bs:guid>
	|              </ent:owner>
	|            </ent:enterprise>
	|          </ent:resultingList>
	|          <ent:reason>Причина добавления субъекта в реестр.</ent:reason>
	|        </modificationOperation>
	|      </modifyEnterpriseRequest>
	|";

	Возврат ЗапросXML;
КонецФункции

Процедура СоздатьПлощадку(Площадка)
	
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Город.GUID)=1 Тогда
		Сообщить("Не указан Город.GUID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]","i");				
	ЗапросXML = СоздатьПлощадку_ЗапросXML(Площадка);
	
	appID = ГМ.ОтправитьЗапросXML(ЗапросXML);
	
	Если ПустоеЗначение(appID)=0 Тогда
		
		ПолучитьОтветПлощадка( appID, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

//=========================== ХозСубъекты =================================

Процедура ХС_Создать_Ответ( applicationID, ХС)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ГМ.Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);    
	
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат;
	КонецЕсли;
    
    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;
	active = enterprise.selectSingleNode("bs:active").text;
						
	если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура ХС_Создать(ХС)

	ИНН = ГМ.ПолучитьИНН(ХС.Контрагент);	
	КПП = ГМ.ПолучитьКПП(ХС.Контрагент);	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ГМ.ПолучитьОГРН(ХС);

	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда 
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;
	
	Адрес = ГМ.ПолучитьЮрАдрес(ХС.Контрагент);
	ПолноеНаименование = ГМ.ПолучитьНаименованиеКлиента(ХС.Контрагент); 
	
	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]","i");		
	Результат = ГМ.Компонента.CreateBusinessEntity(
			СокрЛП(хс.Наименование),  							// название
			СокрЛП(ПолноеНаименование), 	// полное название
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		ГМ.Пауза();
		
		ХС_Создать_Ответ( ГМ.Компонента.ApplicationId, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизацияСпрХС()
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда 
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;
  	
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	
	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда 
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда 
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;		
	  	
		ГМ.ХС_ПолучитьGuid(тз.id);
		
		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ГМ.НайтиПлощадкиПоНазванию(тз.id, 0 );
			ГМ.ЗагрузитьПлощадки( тз.id );
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//======================= Тестирование \ Проверка ==========================

//=========================================================================

//================================================================


//======================================================================
Процедура ПриИзмененииВидаДокумента()
	Если спВидДокумента.ТекущаяСтрока() <> 0 Тогда
		ВидДок = спВидДокумента.ПолучитьЗначение(спВидДокумента.ТекущаяСтрока());

		Форма.ВыбДокумент.НазначитьТип(ВидДок);

		НомерТекущейФормы = 1;
		СписокОтправки.УдалитьВсе();
		
		Если (ВидДок = "Документ.ВСД") ИЛИ (ВидДок = "Документ.ВСД2") Тогда
			СписокОтправки.ДобавитьЗначение("Аннулировать");
		Иначе
			СписокОтправки.ДобавитьЗначение("Отправить");
			Если (ВидДок = "Документ.ВСД_исходящий") ИЛИ (ВидДок = "Документ.ВСД2_исходящий") Тогда
				СписокОтправки.ДобавитьЗначение("Отправить все");
			КонецЕсли;
		КонецЕсли;
		Форма.КнопкаОтправить.Заголовок(СписокОтправки.ПолучитьЗначение(1));
	КонецЕсли;
КонецПроцедуры // ПриИзмененииВидаДокумента

//======================================================================
Процедура ПоКнопкеОтправить()
	ВидДок = спВидДокумента.ПолучитьЗначение(спВидДокумента.ТекущаяСтрока());
	
	Если ВидДок = "Документ.ВСД_входящий" Тогда ГМ.Отправить_ВСД_Входящий(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_исходящий" Тогда 
		Если НомерТекущейФормы = 1 Тогда ГМ.Отправить_ВСД_Входящий(ВыбДокумент);
		ИначеЕсли НомерТекущейФормы = 2 Тогда ГМ.ОтправитьВсе_ВСД_Исходящий("",НачДата, КонДата);
		КонецЕсли;
	ИначеЕсли ВидДок = "Документ.ВСД_транзакция" Тогда ГМ.Отправить_ВСД_транзакция(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_Производство" Тогда ГМ.Отправить_ВСД_производство(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_Инвентаризация" Тогда ГМ.Отправить_ВСД_Инвентаризация(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_ОбъединениеПартий" Тогда ГМ.Отправить_ВСД_ОбъединениеПартий(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД" Тогда ГМ.Отправить_ВСД_Аннулирование(ВыбДокумент);
	Иначе
		Предупреждение("Не реализовано!");
	КонецЕсли;
КонецПроцедуры // ПоКнопкеОтправить

//======================================================================
Процедура ВыборФормыОтправки()
	ВыбЗнач = ""; Поз = 0;
	Если СписокОтправки.ВыбратьЗначение(ВыбЗнач,,Поз,,1) = 1 Тогда
		Форма.КнопкаОтправить.Заголовок(ВыбЗнач);
		НомерТекущейФормы = Поз;
	КонецЕсли;
	ПоКнопкеОтправить();
КонецПроцедуры // ВыборФормыОтправки

//======================================================================
Процедура ПоКнопкеОтвет()
	ГМ.ПолучитьРезультат_ВСД( ВыбДокумент.applicationID, ВыбДокумент );
КонецПроцедуры // ПоКнопкеОтвет

// ========================================================================
Процедура ПоКнопкеПараметры()
   КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
   ОткрытьФорму("Отчет", , КаталогОбработки+"Меркурий_Параметры.ert");   	
КонецПроцедуры // ПоКнопкеПараметры

//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
		ГМ.Инициализация(Контекст);        
	    ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСФ

// ========================================================================
Процедура ПриОткрытии()
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты", "Хоз. субъекты");
	Форма.Закладки.ДобавитьЗначение("Партии", "Партии и ВСД");
	Форма.Закладки.ДобавитьЗначение("Документы", "Тестирование документов");
	Форма.Закладки.ДобавитьЗначение("Справочники", "Справочники и продукция");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	  
	Форма.Закладки.ТекущаяСтрока(1);
	ПриВыбореЗакладки(1, Форма.Закладки.ПолучитьЗначение(1));

	ИмяФайла="";
	КаталогОбработки="";  
	
	РасположениеФайла(КаталогОбработки, ИмяФайла);

    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
	ГМ.Инициализация(Контекст);        
	Если ПустоеЗначение(Отправитель_ХозСубъект) = 0 Тогда
		ВыбФирма = ГМ.ПолучитьФирмуПоХС(Отправитель_ХозСубъект);
		ГМ.Инициализация(Контекст);        
	КонецЕсли;
    ГМ.ЗагрузитьПараметрыВФорму(Контекст);
		
	
	НомерТекущейФормы	= 1;

	СписокОтправки = СоздатьОбъект("СписокЗначений");

	Для Индекс = 1 По Метаданные.Документ() Цикл
		Док = Метаданные.Документ(Индекс);
		Значение = Док.Идентификатор;
		Если Лев(Значение, 3) = "ВСД" Тогда
			Представление = Док.Представление();
			Комментарий = Док.Комментарий;
			Если ПустаяСтрока(Комментарий) = 0 Тогда
				Представление = Представление + " (" + Комментарий +")";
			КонецЕсли;
			спВидДокумента.ДобавитьЗначение("Документ."+Значение, Представление);
		КонецЕсли;
	КонецЦикла;
	спВидДокумента.ТекущаяСтрока(1);
	ПриИзмененииВидаДокумента();
	                       
	ГМ.СписокФирм.Выгрузить(СписокФирм);
	Если СписокФирм.РазмерСписка() = 0 Тогда
		Предупреждение("Нет сохраненных настроек, обмен невозможен!");
		Возврат; СтатусВозврата(0);
	Иначе            
		Поз = СписокФирм.НайтиЗначение(ВыбФирма);
		Если Поз <> 0 Тогда
			СписокФирм.ТекущаяСтрока(Поз);
		КонецЕсли;
		ПриИзмененииФирмы();
	КонецЕсли;
	
КонецПроцедуры

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;


НачДата = ТекущаяДата();
КонДата = НачДата;

productType = 1; //мясо 
ВыбФирма = "";
