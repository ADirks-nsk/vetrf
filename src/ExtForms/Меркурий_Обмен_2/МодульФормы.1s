
Перем ГМ;  // Глобальный модуль
Перем ГМ2; // Глобальный модуль для Ветис 2.0
Перем ВыбРеквизит; //для выбора площадки


//======= ФУНКЦИИ ИНТЕРФЕЙСА ==============

 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
 	ИначеЕсли ЗначениеЗакладки="ВСД_2" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД_версия_2");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;        
	
КонецПроцедуры 

Процедура ОткрытьПлощадкиПоХС(ВыбХС)
						
	тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);
	
	СписокОтбора = СоздатьОбъект("СписокЗначений");
	
	Тз.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСТроку()=1 Цикл
		СписокОтбора.ДобавитьЗначение(тз.id);
	КонецЦикла;			
			
	ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда 
		
		Отправитель_Площадка = Элемент;
		//Если ПустоеЗначение(GUID_ОтправительПлощадка)=1 Тогда 
		//	GUID_ОтправительПлощадка = Элемент.GUID;
		//Иначе
		//	Если НЕ(СокрЛП(GUID_ОтправительПлощадка) = СокрЛП(Элемент.GUID)) Тогда 
		//		Сообщить("Ошибка в GUID_ОтправительПлощадка, должно быть "+Элемент.GUID,"!");
		//	Иначе
		//		Сообщить("GUID_ОтправительПлощадка - правильно "+Элемент.Адрес,"i");
		//	КонецЕсли;
		//КонецЕсли;
		
		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры


//=========================== Площадки =================================

Процедура СоздатьНовуюПлощадку(ВыбХС)
	Если ПустоеЗначение(ВыбХС)=1 Тогда
		Предупреждение("Выберите Хоз субъект");
	КонецЕсли;
	СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");
	СпрПл.Новый();
	//СпрПл.Код = ;
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент;
	//СпрПл.GUID = ;
	//СпрПл.UUID = ;
	СпрПл.Адрес = ГМ.ПолучитьФактАдрес(ВыбХС.Контрагент);
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	СпрПл.Записать();
	Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());
	
	ВыбПлощадка = СпрПл.ТекущийЭлемент();
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ГМ.Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	//Отладка();
		
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат;
	КонецЕсли;		

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);    	        
	
    businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
	guid = businessEntity.selectSingleNode("base:guid").text;
	uuid = businessEntity.selectSingleNode("base:uuid").text;			
	active = businessEntity.selectSingleNode("base:active").text;		
	enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("base:guid").text;		
	Сообщить("Успешно установлена связь ВСД_Площадка ["+enterprise+"] ВСД_ХозСубъект ["+guid+"]","i");
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка)
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда 
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустоеЗначение(Площадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]","i");		
	Результат = ГМ.Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	//Отладка();	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда				
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( ГМ.Компонента.ApplicationId)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	ГМ.Пауза();
	
	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ГМ.Компонента.SendRequestResult(СокрЛП(appID));

   	Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);        
    
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат;
	КонецЕсли;		
		
    enterprise=objDom.selectSingleNode("//merc:enterprise") ;								
	guid = enterprise.selectSingleNode("base:guid").text;
	uuid = enterprise.selectSingleNode("base:uuid").text;
	name = enterprise.selectSingleNode("ent:name").text;
	active = enterprise.selectSingleNode("base:active").text;
				
	если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Спр.НайтиЭлемент(Площадка);
		спр.GUID = GUID;
		спр.uuid = uuid;
		спр.Записать();
		Сообщить("Успешно записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
		
		Площадка = Спр.ТекущийЭлемент();
	Иначе
		Сообщить("Пустой GUID Площадки");
	КонецЕсли;
		
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );	
	
	СоздатьСвязьХозсубъектПлощадка(Площадка);
				
КонецПроцедуры

Функция  СоздатьПлощадку_ЗапросXML(Площадка)
	ЗапросXML = "<modifyEnterpriseRequest xmlns:sch='http://www.w3.org/2001/XMLSchema' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП(param_intiator_login)+"</co:login>
	|        </initiator>
	|        <modificationOperation>
	|          <ent:type>CREATE</ent:type>
	|          <ent:affectedList count='0' total='0' offset='0' />
	|          <ent:resultingList count='1' total='1' offset='0'>
	|            <ent:enterprise>
	|              <ent:name>"+СокрЛП(Площадка.Наименование)+"</ent:name>
	|              <ent:type>1</ent:type>
	|              <ent:address>
	|                <ik:country>
	|                  <bs:guid>"+СокрЛП(Страна.GUID)+"</bs:guid>
	|                </ik:country>
	|                <ik:federalDistrict />
	|                <ik:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|                </ik:region>
	|";
	
	Если ПустоеЗначение(Район.GUID)=0 Тогда	
		ЗапросXML=ЗапросXML+"
		|                <ik:district>
		|                  <bs:guid>"+СокрЛП(Район.GUID)+"</bs:guid>
		|                </ik:district>
		|";
	Иначе
		ЗапросXML=ЗапросXML+"
		|<ik:district />
		|";
	КонецЕсли;
	Если ПустоеЗначение(Город)=0 Тогда		
		ЗапросXML=ЗапросXML+"
		|                <ik:locality>
		|                  <bs:guid>"+СокрЛП(Город.GUID)+"</bs:guid>
		|                </ik:locality>
		|";
	Иначе
		ЗапросXML=ЗапросXML+"
		|                <ik:locality />
		|";
	КонецЕсли;
	ЗапросXML=ЗапросXML+"
	|                <ik:subLocality />
	|                <ik:street />
	|                <ik:addressView>"+СокрЛП(Площадка.Адрес)+"</ik:addressView>
	|              </ent:address>
	|              <ent:activityList count='1' total='1' offset='0'>
	|                <ent:activity>
	|                  <ent:name>Продажа продуктов питания</ent:name>
	|                </ent:activity>
	|              </ent:activityList>
	|              <ent:owner>
	|                <bs:guid>"+СокрЛП(Площадка.GuidХозСубъекта)+"</bs:guid>
	|              </ent:owner>
	|            </ent:enterprise>
	|          </ent:resultingList>
	|          <ent:reason>Причина добавления субъекта в реестр.</ent:reason>
	|        </modificationOperation>
	|      </modifyEnterpriseRequest>
	|";

	Возврат ЗапросXML;
КонецФункции

Процедура СоздатьПлощадку(Площадка)
	
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	//Если ПустоеЗначение(Город.GUID)=1 Тогда
	//	Сообщить("Не указан Город.GUID");
	//	Возврат;
	//КонецЕсли;
	
	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]","i");				
	ЗапросXML = СоздатьПлощадку_ЗапросXML(Площадка);
	
	appID = ГМ.ОтправитьЗапросXML(ЗапросXML);
	
	Если ПустоеЗначение(appID)=0 Тогда
		
		ПолучитьОтветПлощадка( appID, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

//=========================== ХозСубъекты =================================

Процедура ХС_Создать_Ответ( applicationID, ХС)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ГМ.Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);    
	
	Если ГМ.НайтиОшибки()>0 Тогда 
		Возврат;
	КонецЕсли;
    
    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("base:guid").text;
	uuid = enterprise.selectSingleNode("base:uuid").text;
	active = enterprise.selectSingleNode("base:active").text;
						
	если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура ХС_Создать(ХС)

	ИНН = ГМ.ПолучитьИНН(ХС.Контрагент);	
	КПП = ГМ.ПолучитьКПП(ХС.Контрагент);	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ГМ.ПолучитьОГРН(ХС);

	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда 
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;
	
	Адрес = ГМ.ПолучитьЮрАдрес(ХС.Контрагент);
	ПолноеНаименование = ГМ.ПолучитьНаименованиеКлиента(ХС.Контрагент); 
	
	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]","i");		
	Результат = ГМ.Компонента.CreateBusinessEntity(
			СокрЛП(хс.Наименование),  							// название
			СокрЛП(ПолноеНаименование), 	// полное название
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		ГМ.Пауза();
		
		ХС_Создать_Ответ( ГМ.Компонента.ApplicationId, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизацияСпрХС()
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда 
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;
  	
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	
	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда 
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда 
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;		
	  	
		ГМ.ХС_ПолучитьGuid(тз.id);
		
		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ГМ.НайтиПлощадкиПоНазванию(тз.id, 0 );
			ГМ.ЗагрузитьПлощадки( тз.id );
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//======================= Тестирование \ Проверка ==========================

	
//_____________________________________________________________________________ 
//ТЕСТ  ЖД читаем из файла ответа
Процедура ПрочестьХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_ВСД2(Сокрлп(ФайлОтвета), докссылка)	
КонецПроцедуры


Процедура ПрочестьПартииХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_Партии2(Сокрлп(ФайлОтвета), докссылка)	
КонецПроцедуры


// ========================================================================
Процедура ПриОткрытии()
	
	ИмяФайла="";
	КаталогОбработки="";
	
	РасположениеФайла(КаталогОбработки, ИмяФайла);

   //{ Глобальный модуль + Интеграционный модуль для переопределения функций, плюс несколько базовых функций
    глМеркурийИнтеграция 		= СоздатьОбъект("МеркурийИнтеграция");

    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
    ГМ.Инициализация();        
	//ГМ.ЗагрузитьПараметры();
    ГМ.ЗагрузитьПараметрыВФорму(Контекст);

    //Переопределение функций, если они определены в модуле
    глМеркурийИнтеграция.Инициализация(ГМ);    

	// Глобавльный модуль Ветис.2.0
	ГМ2 = СоздатьОбъект("Меркурий_ГлобальныйМодуль2");
	ГМ2.Инициализация(ГМ);
	//}		
		
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Партии");
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты");
	Форма.Закладки.ДобавитьЗначение("ВСД");
	Форма.Закладки.ДобавитьЗначение("ВСД_2");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	          
	Форма.ИспользоватьСлой("Основной, Партии");	
	
	//{ оставлено для совместимости с предыдущими версиями, в дальнейшем - удалим
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда  
		
		Команда = Парам.Получить("Команда");
		
		Если Команда="ОтправитьВсдИсходящие" Тогда
			
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда 
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД исходящие за период "+ПериодСтр(НачДата, КонДата));
			
			СписокВСД = Парам.Получить("СписокВСД");
			ГМ.ОтправитьВсе_ВСД_Исходящий(СписокВСД, НачДата, КонДата);
						
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдТранзакции" Тогда
			
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда 
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД транзакции за период "+ПериодСтр(НачДата, КонДата));
			
			СписокВСД = Парам.Получить("СписокВСД");
			ГМ.ОтправитьВсе_ВСД_Транзакция(СписокВСД, НачДата, КонДата);
						
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдПроизводство" Тогда
			
			СписокВСД = Парам.Получить("СписокВСД");
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда 
				КонДата = ТекущаяДата();
			КонецЕсли;
			
			ГМ.ОтправитьВсе_ВСД_Производство(СписокВСД, НачДата, КонДата);
						
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ПолучитьПартии" Тогда
			Состояние("Меркурий: получение партий...");
			ГМ.ПолучитьПартии();
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ЗагрузитьПлощадки" Тогда
			
			выбХС = Парам.Получить("ХозСубъект");
			Сообщить("загрузка площадок "+ выбХС);
	
			ГМ.ХС_ПолучитьGuid(ВыбХС);

			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ВыбХС);
						
			ГМ.ЗагрузитьПлощадки(Спр.ТекущийЭлемент());			
						
			СтатусВозврата(0);
			Возврат;

		КонецЕсли;
	КонецЕсли;   
	//}
	
КонецПроцедуры

НачДата = ТекущаяДата();
КонДата = НачДата;

productType = 1; //мясо 

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;
