//Перем Компонента;
Перем ВыпМодуль;
Перем Филиал;
Перем ПутьГлобальныйМодуль;
Перем ВыбРеквизит; //для выбора площадки

//Перем базаДанных;
//Перем ЭтоSQL;

Процедура ЗагрузитьXML_ВсеПартииОтвет( имяФайла ) Далее
Процедура ЗагрузитьXML_Партии(имяФайла, докОснование="") Далее
Процедура ЗагрузитьXML_ВСД( имяФайла, докОснование, ВидДокумента ) Далее
Функция ПолучитьРезультат_ИсхВСД(докСсылка) Далее
Функция ПолучитьРезультат_ВходВСД( докСсылка ) далее


//******************************************************************************
 // предопределенная процедура
 //
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;        
	
КонецПроцедуры 

Процедура Пауза(ЗадержкаСекунд)
	ВыпМодуль.Компонента.Pause(ЗадержкаСекунд*1000); // в ms
КонецПроцедуры

Процедура УдалитьXML(ИмяФайла)
	Если ОтладкаЗапросовXML=0 Тогда 
		Попытка
			ФС.УдалитьФайл(ИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура Отладка();
	Сообщить("ApplicationId = "+ ВыпМодуль.Компонента.ApplicationId);
	Сообщить("Status = "+ ВыпМодуль.Компонента.Status);
	Если ПустоеЗначение(ВыпМодуль.Компонента.ErrorMessage)=0 Тогда 
		Сообщить("ErrorMessage = "+ ВыпМодуль.Компонента.ErrorMessage);
	КонецЕсли;

	appID = ВыпМодуль.Компонента.ApplicationId; 	
КонецПроцедуры

Процедура СохранитьСтатусЗапроса(док)
	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(док);

	ДокОб.applicationID = СокрЛП(ВыпМодуль.Компонента.ApplicationId);
	ДокОб.Статус 		= СокрЛП(ВыпМодуль.Компонента.Status);
	ДокОб.Комментарий = СокрЛП(ВыпМодуль.Компонента.ErrorMessage);		
	ДокОб.Записать();
	Сообщить(" статус = "+ДокОб.Статус );
	Если ПустоеЗначение(СокрЛП(ДокОб.Комментарий))=0 Тогда
		Сообщить("Ошибка: "+ДокОб.Комментарий);
	КонецЕсли;	
КонецПроцедуры

Функция ПроверкаВходВСД(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
	//	Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
	//	Возврат;
	//КонецЕсли;

	Если док.ВидВСД = 1 Тогда 
		//бумажный
		Если ПустоеЗначение(док.ВсдНомер)=1 Тогда 
			Сообщить("Не указан ВсдНомер ","!");
			результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ВсдДата)=1 Тогда 
			Сообщить("Не указан ВсдДата ","!");
			результат = 0;
		КонецЕсли;
	Иначе
		//электронный
		Если ПустоеЗначение(док.UUID)=1 Тогда 
			Сообщить("Не указан UUID ","!");
			результат = 0;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда 
		Сообщить("Не указана ЕдиницаИзмерения ","!");
		результат = 0;
	КонецЕсли;	
	Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
		Сообщить("Не указана ФормаУпаковки ","!");
		результат = 0;
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Процедура Отправить_ВходВСД(док) Экспорт
	
	Если ПроверкаВходВСД(док)=0 Тогда 
		Возврат;
	КонецЕсли;
		
	Сообщить("Отправляем запрос ВСД_Входящий ["+док+"]" ,"i");	
	Результат = ВыпМодуль.Компонента.Send_VSD_IN( Док );
			
	//Отладка();
	
	
	Попытка
		СохранитьСтатусЗапроса(док);
		УдалитьXML( ВыпМодуль.Компонента.LogFilename );
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ВходВСД( док );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ВходВСД( док );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
		
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

Функция ПроверкаИсхВСД(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда 
		Сообщить("Не указан Партия.ФормаУпаковки","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Продукция)=1 Тогда 
		Сообщить("Не указан Продукция","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.ВидПродукции)=1 Тогда 
		Сообщить("Не указан ВидПродукции","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.НаименованиеПродукции)=1 Тогда 
		Сообщить("Не указан НаименованиеПродукции","!");
		Результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда 
	//	Сообщить("Не указан ЕдиницаИзмерения","!");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан ФормаУпаковки","!");
	//	Результат = 0;
	//КонецЕсли;

	Если ПустоеЗначение(док.applicationID)=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда 
		Сообщить("ВСД уже отправлен "+док,"!");
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		Сообщить("не указано Количество "+док,"!");
		Результат = 0;
	КонецЕсли;
	Если док.КоличествоМест =0 Тогда 
		Сообщить("не указано Количество коробов"+док,"!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда 
		Сообщить("Не указан Партия.Продукция.Тип","!");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ПроверкаИсхВСД_транзакция(док)
	Результат = 1; //все в порядке
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		
		// Не обязательное условие
		//Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		//	Результат = 0;
		//КонецЕсли;		
	
		Если ПустоеЗначение(док.Партия.GUID)=1 Тогда 
			Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда 
			Сообщить("Не указан Партия.ВсдДата","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда 
			Сообщить("Не указан Партия.ФормаУпаковки","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда 
			Сообщить("Не указан ФормаУпаковки","!");
			Результат = 0;
		КонецЕсли;
		Если  док.Количество=0 Тогда 
			Сообщить("не указано Количество "+док,"!");
			Результат = 0;
		КонецЕсли;
		Если док.КоличествоМест =0 Тогда 
			Сообщить("не указано Количество коробов"+док,"!");
			Результат = 0;
		КонецЕсли;
	
		Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда 
			Сообщить("Не указан Партия.Продукция.Тип","!");
			Результат = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ПустоеЗначение(док.applicationID)=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док,"!");
	//	Результат = 0;
	//КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция Отправить_ИсхВСД(док) 
	
	Если ПроверкаИсхВСД(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Сообщить("Отправляем запрос ВСД_Исходящий ["+док+"]" ,"i");
	Результат = ВыпМодуль.Компонента.Send_VSD_OUT( док );
	
	//Отладка();
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Попытка
		СохранитьСтатусЗапроса(док);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ИсхВСД( док );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ИсхВСД( док );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции

Функция ПолучитьРезультат_ВСД_Производство( докСсылка ) 
	

	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(докСсылка);
	applicationID = СокрЛП(ДокОб.applicationID);
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Получает результат запроса ВСД_Производство ["+докСсылка+"]" );
	Результат = ВыпМодуль.Компонента.Send_VSD_Production_Result( applicationID );

	//Отладка();
	
	//Попытка
		СохранитьСтатусЗапроса(докСсылка);
		
		Если Результат="COMPLETED" Тогда

			ЗагрузитьXML_Партии( ВыпМодуль.Компонента.LogFilename );
			
			Если докСсылка.Вид()="ВСД_исходящий" Тогда 
				ДокОснование = докСсылка.ДокОснование;
			Иначе
				ДокОснование = докСсылка;
			КонецЕсли;
			
			ЗагрузитьXML_ВСД( ВыпМодуль.Компонента.LogFilename, ДокОснование, "ВСД_Производство");
			
			//проведём для красоты
			ДокОб = СоздатьОбъект("Документ");
			ДокОб.НайтиДокумент(докСсылка);
			ДокОб.Провести();						
			
		Иначе
			Сообщить(докСсылка.Комментарий);		
		КонецЕсли;

		
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
			
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции


Функция Отправить_ВСД_производство(док) 
	
	//Если ПроверкаИсхВСД(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	
	
	Сообщить("Отправляем запрос ВСД_производство ["+док+"]" ,"i");
	Результат = ВыпМодуль.Компонента.Send_VSD_Production( док );
	
	//Отладка();
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	//Попытка
		СохранитьСтатусЗапроса(док);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ВСД_Производство( док );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ВСД_Производство( док );
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	//Исключение
	//	Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	//КонецПопытки;		

	Возврат 1;
	
КонецФункции


Функция ПолучитьРезультат_ВСД_Инвентаризация( докСсылка ) 
	

	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(докСсылка);
	applicationID = СокрЛП(ДокОб.applicationID);
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Отправляем запрос "+докСсылка.Вид()+" ["+докСсылка+"]" ,"i");
	Результат = ВыпМодуль.Компонента.Send_VSD_Inventory_Result( applicationID );

	//Отладка();
	
	//Попытка
		СохранитьСтатусЗапроса(докСсылка);
		
		Если Результат="COMPLETED" Тогда

			ЗагрузитьXML_Партии( ВыпМодуль.Компонента.LogFilename );
			
			Если докСсылка.Вид()="ВСД_исходящий" Тогда 
				ДокОснование = докСсылка.ДокОснование;
			Иначе
				ДокОснование = докСсылка;
			КонецЕсли;
			
			ЗагрузитьXML_ВСД( ВыпМодуль.Компонента.LogFilename, ДокОснование, "ВСД_Инвентаризация");
			
			//проведём для красоты
			ДокОб = СоздатьОбъект("Документ");
			ДокОб.НайтиДокумент(докСсылка);
			ДокОб.Провести();						
			
		Иначе
			Сообщить(докСсылка.Комментарий);		
		КонецЕсли;

	//	
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
			
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция Отправить_ВСД_Инвентаризация(док) 
	
	//Если ПроверкаИсхВСД(док)=0 Тогда 
	//	Возврат 0;
	//КонецЕсли;	
	
	Сообщить("Отправляем запрос "+док.Вид()+" ["+док+"]" ,"i");
	Результат = ВыпМодуль.Компонента.Send_VSD_Inventory( док );
	
	//Отладка();
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Попытка
		СохранитьСтатусЗапроса(док);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ВСД_Инвентаризация( док );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ВСД_Инвентаризация( док );
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции


Функция Отправить_ВСД_транзакция(док) 
	
	Если ПроверкаИсхВСД_Транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Сообщить("Отправляем запрос Send_VSD_OUT_2 ["+док+"]" ,"i");
	Результат = ВыпМодуль.Компонента.Send_VSD_OUT_2( док );
	
	// 1
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
		партия = док.партия;
	КонецЦикла;

	// 2
	тз = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тз);
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		
	КонецЦикла;

	//Отладка();
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Попытка
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);

		СохранитьСтатусЗапроса(док);		
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Состояние("Пауза "+ПаузаСек+" сек");
			Пауза( ПаузаСек );			
			
			//tt2=_GetPerformanceCounter();			
			//Сообщить("Пауза = "+(tt2 - tt1));
			
			Результат = ПолучитьРезультат_ИсхВСД( ДокОб.ТекущийДокумент() );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Состояние("Пауза "+ПаузаСек+" сек");
					Пауза( ПаузаСек );
					//Сообщить("Пауза = "+(tt2 - tt1));
					Результат = ПолучитьРезультат_ИсхВСД( ДокОб.ТекущийДокумент() );
				КонецЕсли;
			КонецЦикла;
			
			//проведём для красоты
			ДокОб = СоздатьОбъект("Документ");
			ДокОб.НайтиДокумент(док);
			ДокОб.Провести();						
			
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции

//******************************** Список ВСД ******************************************************************

Функция  ПолучитьСписокВСДОтветXML()

	Результат = ВыпМодуль.Компонента.GetVetDocumentListResult(СокрЛП(appID));

	//Отладка();
	//УдалитьXML( ВыпМодуль.Компонента.LogFilename);
	
	Если Результат="COMPLETED" Тогда

		//	
		//СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
		//СпрПартия.ВыбратьЭлементы();
		//Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
		//	СпрПартия.Удалить(0);
		//КонецЦикла;
		
		//ЗагрузитьXML_ВсеПартииОтвет( ВыпМодуль.Компонента.LogFilename );
				
		УдалитьXML( ВыпМодуль.Компонента.LogFilename);
	КонецЕсли;		
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьСписокВСД()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

    //VetDocumentType {
    //    
    //    /// <remarks/>
    //    TRANSPORT, = 1
    //    
    //    /// <remarks/>
    //    PRODUCTIVE, = 2 
    //    
    //    /// <remarks/>
    //    RETURNABLE, = 3 
    //    
    //    /// <remarks/>
    //    INCOMING, = 4
    //    
    //    /// <remarks/>
    //    OUTGOING, = 5
    //}
	//INCOMING	Входящий ВСД.
	//OUTGOING	Исходящий ВСД.
	//PRODUCTIVE	Производственный ВСД.
	//RETURNABLE	Возвратный ВСД.
	//TRANSPORT	Транспортный ВСД.
	vetDocumentType	= 4;

    // VetDocumentStatus {
    //    
    //    /// <remarks/>
    //    CREATED, = 1
    //    
    //    /// <remarks/>
    //    CONFIRMED, = 2
    //    
    //    /// <remarks/>
    //    WITHDRAWN, = 3
    //    
    //    /// <remarks/>
    //    UTILIZED, = 4 
    //}
	vetDocumentStatus = 0;
	
	Результат = ВыпМодуль.Компонента.GetVetDocumentListOperation(СокрЛП(Отправитель_Площадка.GUID), vetDocumentType, vetDocumentStatus, Смещение);

	appID = ВыпМодуль.Компонента.ApplicationId;
	//Отладка();
	
	УдалитьXML( ВыпМодуль.Компонента.LogFilename);

	Результат = ПолучитьСписокВСДОтветXML();
	Пока Результат="IN_PROCESS" Цикл
		Пауза( ПаузаСек );				
		Результат = ПолучитьСписокВСДОтветXML();
	КонецЦикла;		
	
	УдалитьXML( ВыпМодуль.Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции



//******************************** Партии ******************************************************************


Функция  ПолучитьПартииОтветXML()

	Результат = ВыпМодуль.Компонента.GetStockListResult(СокрЛП(appID));

	//Отладка();
	//УдалитьXML( ВыпМодуль.Компонента.LogFilename);
	
	Если Результат="COMPLETED" Тогда

		//ДокПартия = СоздатьОбъект("Документ.ВСД_Партия");
		//ДокПартия.ВыбратьДокументы();
		//Попытка
		//	Пока ДокПартия.ПолучитьДокумент() = 1 Цикл
		//		ДокПартия.СделатьНеПроведенным();
		//	КонецЦикла;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
		
		СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
		СпрПартия.ВыбратьЭлементы();
		Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
			СпрПартия.Удалить(0);
		КонецЦикла;
		
		ЗагрузитьXML_ВсеПартииОтвет( ВыпМодуль.Компонента.LogFilename );
				
		УдалитьXML( ВыпМодуль.Компонента.LogFilename);
	КонецЕсли;		
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	Результат = ВыпМодуль.Компонента.GetStockList(СокрЛП(Отправитель_Площадка.GUID), Смещение);

	appID = ВыпМодуль.Компонента.ApplicationId;
	//Отладка();
	
	УдалитьXML( ВыпМодуль.Компонента.LogFilename);

	Результат = ПолучитьПартииОтветXML();
	Пока Результат="IN_PROCESS" Цикл
		Пауза( ПаузаСек );				
		Результат = ПолучитьПартииОтветXML();
	КонецЦикла;		
	
	УдалитьXML( ВыпМодуль.Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьПоследнююВерсиюПартии()
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("У Площадки пустой GUID");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбПартия.GUID)=1 Тогда 
		Сообщить("В выбранной партии пустой GUID");
		Возврат;
	КонецЕсли;	

	Результат = ВыпМодуль.Компонента.GetStockEntryVersionList(
		СокрЛП(ВыбПартия.GUID),
		СокрЛП(Отправитель_Площадка.GUID)
		);

	ВыпМодуль.Отладка();
			
КонецПроцедуры

Процедура ПолучитьПоследнююВерсиюПартииОтвет()

	Результат = ВыпМодуль.Компонента.GetStockEntryVersionListResult(СокрЛП(appID));

	ВыпМодуль.Отладка();
	
	Если Результат="COMPLETED" Тогда
						
		//тз = ЗагрузитьТЗ(Компонента.ResultString);
		//тз.ВыбратьСтроку();
		//ЗаписатьПартии(тз);
				
	КонецЕсли;		
		
	
КонецПроцедуры

//******************************** ******************************************************************

Функция ПолучитьРезультат_ВходВСД( докСсылка ) 
	
	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(докСсылка);
	applicationID = СокрЛП(ДокОб.applicationID);
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Сообщить("Отправляем запрос ВСД_Входящий_Результат ["+докСсылка+"]" );
	Результат = ВыпМодуль.Компонента.Send_VSD_IN_Result( applicationID );

	//Отладка();
	
	//Попытка		
		СохранитьСтатусЗапроса(докСсылка);					
		
		Если Результат="COMPLETED" Тогда

			ЗагрузитьXML_Партии( ВыпМодуль.Компонента.LogFilename , докСсылка );
		КонецЕсли;
			
		ЗагрузитьXML_ВСД( ВыпМодуль.Компонента.LogFilename, докСсылка, "ВСД_входящий");
			
		//проведём для красоты
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(докСсылка);
		ДокОб.Провести();
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;

	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьРезультат_ИсхВСД( докСсылка ) 
	

	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(докСсылка);
	applicationID = СокрЛП(ДокОб.applicationID);
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Отправляем запрос ВСД_Исходящий_Результат ["+докСсылка+"]" );
	Результат = ВыпМодуль.Компонента.Send_VSD_OUT_Result( applicationID );

	//Отладка();
	
	//Попытка

		СохранитьСтатусЗапроса(докСсылка);

		Если Результат="COMPLETED" Тогда

			ЗагрузитьXML_Партии( ВыпМодуль.Компонента.LogFilename );
			
			Если докСсылка.Вид()="ВСД_исходящий" Тогда 
				ДокОснование = докСсылка.ДокОснование;
			Иначе
				ДокОснование = докСсылка;
			КонецЕсли;
			
			ЗагрузитьXML_ВСД( ВыпМодуль.Компонента.LogFilename, ДокОснование, "ВСД_Исходящий");
			
		Иначе
			Сообщить(докСсылка.Комментарий);		
		КонецЕсли;
		
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
			
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции

Процедура ОтправитьВсеИсходящиеВСД(СписокВСД="")
		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_исходящий");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	КонецЕсли;
	
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
			Продолжить;
		КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ИсхВСД( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецПроцедуры

Процедура ОтправитьВсеВсдТранзакции(СписокВСД="")
		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");
	
	Если ПустоеЗначение(СписокВСД)=1 тогда 
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_исходящий");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		
			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
			
		КонецЦикла;
	КонецЕсли;
	
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
		//	Продолжить;
		//КонецЕсли;			
		Если ВСД.Проведен()=1 Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда 
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда 
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД_транзакция( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена","i");
КонецПроцедуры

Процедура ПолучитьОтветВсеИсходящиеВСД()
	Док = СоздатьОбъект("Документ.ВСД_исходящий");
	Док.ВыбратьДокументы(НачДата, КонДата);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен()=0 Тогда 
			ПолучитьРезультат_ИсхВСД(док);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура СоздатьНовуюПлощадку(ВыбХС)
	Если ПустоеЗначение(ВыбХС)=1 Тогда
		Предупреждение("Выберите Хоз субъект");
	КонецЕсли;
	СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");
	СпрПл.Новый();
	//СпрПл.Код = ;
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент;
	//СпрПл.GUID = ;
	//СпрПл.UUID = ;
	СпрПл.Адрес = ВыбХС.Контрагент.ЮрФизЛицо.ФактАдрес;;
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	СпрПл.Записать();
	Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());
	
	ВыбПлощадка = СпрПл.ТекущийЭлемент();
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ВыпМодуль.Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	//Отладка();
	
	Если Результат="COMPLETED" Тогда			
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(ВыпМодуль.Компонента.LogFilename);    	        
        businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
		guid = businessEntity.selectSingleNode("base:guid").text;
		uuid = businessEntity.selectSingleNode("base:uuid").text;			
		active = businessEntity.selectSingleNode("base:active").text;		
		enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("base:guid").text;		
		Сообщить("Успешно установлена связь ВСД_Площадка ["+enterprise+"] ВСД_ХозСубъект ["+guid+"]","i");
		//рез = Компонента.ResultString;				
	КонецЕсли;	
	
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка)
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда 
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустоеЗначение(Площадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]","i");		
	Результат = ВыпМодуль.Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	//Отладка();	
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Пауза(ПаузаСек);
		
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( ВыпМодуль.Компонента.ApplicationId)
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучитьОтветПлощадка( applicationID , Площадка)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ВыпМодуль.Компонента.CreateEnterpriseResult( СокрЛП(applicationID));

	//Отладка();
	
	Если Результат="COMPLETED" Тогда
			
	   Сообщить("Загрузка XML-файла: "+ВыпМодуль.Компонента.LogFilename);    
	    
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(ВыпМодуль.Компонента.LogFilename);        
    
        enterprise=objDom.selectSingleNode("//merc:enterprise") ;
									
		guid = enterprise.selectSingleNode("base:guid").text;
		uuid = enterprise.selectSingleNode("base:uuid").text;
		name = enterprise.selectSingleNode("ent:name").text;
		active = enterprise.selectSingleNode("base:active").text;
					
		если ПустоеЗначение(GUID)=0 Тогда			
			Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
			Спр.НайтиЭлемент(Площадка);
			спр.GUID = GUID;
			спр.uuid = uuid;
			спр.Записать();
			Сообщить("Успешно записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
			
			Площадка = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("Пустой GUID Площадки");
		КонецЕсли;
			
		УдалитьXML( ВыпМодуль.Компонента.LogFilename );
		Пауза(ПаузаСек);
		
		СоздатьСвязьХозсубъектПлощадка(Площадка);
		
	КонецЕсли;	

		
КонецПроцедуры

Процедура СоздатьПлощадку(Площадка)
	
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Город.GUID)=1 Тогда
		Сообщить("Не указан Город.GUID");
		Возврат;
	КонецЕсли;

	
	Адрес = Площадка.Контрагент.ЮрФизЛицо.ФактАдрес;
	
	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]","i");		
	Результат = ВыпМодуль.Компонента.CreateEnterprise(
			СокрЛП(Площадка.Контрагент.Наименование),
			Адрес, 
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID), 
			СокрЛП(Площадка.GuidХозСубъекта)
	);	
	//Отладка();	
		
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза(ПаузаСек);
		
		ПолучитьОтветПлощадка( ВыпМодуль.Компонента.ApplicationId, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветХС( applicationID, ХС)
	
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");		
	Результат = ВыпМодуль.Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+ВыпМодуль.Компонента.LogFilename);        
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ВыпМодуль.Компонента.LogFilename);    
    
    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("base:guid").text;
	uuid = enterprise.selectSingleNode("base:uuid").text;
	active = enterprise.selectSingleNode("base:active").text;
						
	если ПустоеЗначение(GUID)=0 Тогда			
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
	КонецЕсли;

	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
КонецПроцедуры

Процедура СоздатьХС(ХС)

	ИНН = ВыпМодуль.ПолучитьИНН(ХС.Контрагент);	
	КПП = ВыпМодуль.ПолучитьКПП(ХС.Контрагент);	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ВыпМодуль.ПолучитьОГРН(ХС);

	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда 
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;
	
	Адрес = ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	
	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]","i");		
	Результат = ВыпМодуль.Компонента.CreateBusinessEntity(
			хс.Контрагент.Наименование, 
			хс.Контрагент.ЮрФизЛицо.ПолнНаименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	//Отладка();	
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза(ПаузаСек);
		
		ПолучитьОтветХС( ВыпМодуль.Компонента.ApplicationId, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьGuidХС(ХС)

	ИНН = ВыпМодуль.ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН","!");
		Возврат "ERROR";
	КонецЕсли;	
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");		
	Результат = ВыпМодуль.Компонента.GetBusinessEntityByINN( ИНН );	
	//Отладка();
	
	Если Результат="SUCCESS" Тогда

	  	Сообщить("Загрузка XML-файла: "+ВыпМодуль.Компонента.LogFilename);    
	    
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(ВыпМодуль.Компонента.LogFilename);    
	    	
		Попытка			
			businessEntityList = objDom.selectSingleNode("//businessEntityList");
			total = businessEntityList.getAttribute("total");
			
			Если total="0" тогда 
				Сообщить("ХозСубъект с ИНН "+ИНН+" не найден");
			Иначе
			//enterpriseList  = objDom.selectSingleNode("//businessEntity");
			//Для i1 = 0 По businessEntityList.length - 1 Цикл
			
			    enterprise	= businessEntityList.selectSingleNode("//businessEntity") ;
				guid 		= enterprise.selectSingleNode("guid").text;
				uuid 		= enterprise.selectSingleNode("uuid").text;
				active 		= enterprise.selectSingleNode("active").text;
			
				Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
				Спр.НайтиЭлемент(ХС);
				спр.GUID = GUID;
				спр.UUID = uuid;
				спр.Записать();
				Сообщить("Записан Эл ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);		
			КонецЕсли;
		Исключение			
			Сообщить("ошибка в ответе GetBusinessEntityByINN","!");
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;
		
	КонецЕсли;	
		
	УдалитьXML( ВыпМодуль.Компонента.LogFilename );
	
	Возврат Результат;
	
КонецФункции

Процедура СинхронизацияСпрХС()
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда 
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;
  	
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	
	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда 
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда 
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;		
	  	
		ПолучитьGuidХС(тз.id);
		
		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ВыпМодуль.НайтиПлощадкиПоНазванию(тз.id, 0 );
			ВыпМодуль.ЗагрузитьПлощадки( тз.id );
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры


Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

Функция ЗаписатьПартию(stockEntry)

		//t = stockEntry.text;	
		active = stockEntry.selectSingleNode("bs:active").text;
		
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("ns2:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;
		
		batch = stockEntry.selectSingleNode("ns2:batch");
		
		product 	= batch.selectSingleNode("ns2:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("ns2:subProduct").selectSingleNode("bs:guid").text;

		Попытка
			productItem = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='name']").text;
		Исключение
			Сообщить("Не удалось получить элемент [productItem]","!");
			productItem = "";
		КонецПопытки;
		
		Попытка
			productItemUuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:uuid").text;
		Исключение			
			productItemUuid="";
		КонецПопытки;
		
		volume 		= batch.selectSingleNode("ns2:volume").text;
		unit		= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:guid").text;

		Попытка
			unitGuid	= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:guid").text;			
		Исключение
			unitGuid = "";			
		КонецПопытки;
		Попытка
			unitUuid	= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:uuid").text;			
		Исключение
			unitUuid = "";			
		КонецПопытки;
		
		Попытка
			packingFormUuid	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("bs:uuid").text;			
		Исключение
			Сообщить("Не удалось получить элемент [packingForm] [uuid]","!");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("*[local-name()='name']").text;			
		Исключение
			packingFormName="";
			Сообщить("Не удалось получить элемент [packingForm] [name]","!");
		КонецПопытки;

		packingAmount = batch.selectSingleNode("ns2:packingAmount").text;
			
		// dateOfProduction 1
		ДатаИзготовления1="";
		ДатаИзготовления="";
		попытка			
			год = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:day").text;
			ДатаИзготовления1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаИзготовления = ""+batch.selectSingleNode("ns2:dateOfProduction").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаИзготовления2="";
		попытка
			год = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:day").text;
			ДатаИзготовления2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		//ДатаСрокГодности
		попытка			
			год = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:day").text;
			ДатаСрокГодности1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаСрокГодности = ""+batch.selectSingleNode("ns2:expiryDate").text;
			Исключение				
			КонецПопытки;
		КонецПопытки;
		ДатаСрокГодности2="";
		попытка
			год = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:year").text;
			мес = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:month").text;
			день = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:day").text;
			ДатаСрокГодности2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		Попытка			
			producer = batch.selectSingleNode("ns2:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		
		Попытка				
			owner = batch.selectSingleNode("ns2:owner").selectSingleNode("bs:guid").text; //ХозСубъект
			ВладелецХС = ВыпМодуль.НайтиХСпоGUID(owner);
		Исключение
			ВладелецХС = "";
		КонецПопытки;

		Партия = ВыпМодуль.НайтиПартиюПоGUID(guid);
		
		Если active="false" Тогда 
			Сообщить("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна","i");
			Возврат Партия;
		КонецЕсли;
		
		Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);
		
		//Партия.ДатаДок = СтрокаВДату(createDate);
		Партия.ДатаИзменения = СтрокаВДату( updateDate );
						
		Партия.Получатель_ХозСубъект = ВладелецХС;
		Партия.Получатель_Площадка = Отправитель_Площадка;
		Партия.Производитель_Площадка = ВыпМодуль.НайтиПлощадку(producer);
		Попытка
			Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Партия.Продукция 	= ВыпМодуль.НайтиПродукцию(product);
		Партия.ВидПродукции = ВыпМодуль.НайтиВидПродукции(subProduct);
		
		Партия.Продукция_Элемент = ВыпМодуль.Найти_Продукция_Элемент(productItem, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
		Партия.СвойствоНоменклатурыЗначение = Партия.Продукция_Элемент.СвойствоНоменклатурыЗначение;
		
		Партия.Количество 	= Число(volume);
		Партия.КоличествоМест = Число(packingAmount);
		Партия.ФормаУпаковки = ВыпМодуль.НайтиФормуУпаковки( packingFormUuid, packingFormName);;

		Партия.ЕдиницаИзмерения = ВыпМодуль.НайтиЕдИзмерения( unitGuid, unitUUID );;
		
		Партия.ДатаИзготовления1 = ДатаИзготовления1;
		Партия.ДатаИзготовления2 = ДатаИзготовления2;
		Партия.ДатаИзготовления =  ДатаИзготовления;
		Партия.ДатаСрокГодности = ДатаСрокГодности;
		Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
		Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
		Партия.Статус = st;		
		Партия.GUID = guid;
		Партия.UUID = uuid;
		//Партия.ДатаИзменения = updateDate;
		Партия.НомерЗаписи = entryNumber;
		Партия.НаименованиеПродукции = productItem;
		Партия.Наименование = productItem;
		Партия.Фирма = глПользователь.ОсновнаяФирма;
		Партия.Автор = глПользователь;
		Если ПустоеЗначение(Филиал)=0 Тогда 
			Партия.Филиал = глПользователь.Филиал;
		КонецЕсли;
		
		Партия.ВсдДата = СтрокаВДату(createDate);
		
		Если Партия.Количество=0 Тогда 
			
			Если ( ПустоеЗначение( Партия.ТекущийЭлемент() ) =0 ) Тогда
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
				Партия.Удалить(0);
			Иначе
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
		
		Партия.Записать();

		Возврат Партия;
КонецФункции

//*********** работа с XML ********************************
Процедура ЗагрузитьXML_Партии(имяФайла, докОснование="")
    
    //tt1=_GetPerformanceCounter();
    
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common' 
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' 
		|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications' 
		|xmlns:vetd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|" );
	
    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;	
    //stockEntryList = objDom.selectNodes("//merc:stockEntry") ;
    //stockEntryList = objDom.selectNodes("//vetd:stockEntry") ;
	
	Сообщить("Получено "+stockEntryList.length+" записей","i");
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
					
		Партия = ЗаписатьПартию(stockEntry);
		
		Если ПустоеЗначение(докОснование)=0 Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;
	
    //tt2=_GetPerformanceCounter();
    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");     

КонецПроцедуры

Процедура ЗагрузитьXML_ВСД(имяФайла, докОснование, ВидДокумента)
	
	//objDom=СоздатьОбъект("MSXML2.DOMDocument");
    //objDom.load(имяФайла);    		    	

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common' 
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' 
		|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
		|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications' 
		|xmlns:vetd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );
		
	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
	
	//vetDocument = objDom.selectSingleNode("//merc:vetDocument") ;
	//vetDocumentList = objDom.selectNodes("//merc:vetDocument") ;
	vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;    
	
    Для i1 = 0 По vetDocumentList.length - 1 Цикл
        vetDocument=vetDocumentList.item(i1);
		//uuid = vetDocument.selectSingleNode("bs:uuid").text;
		uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;
				
		uuid = vetDocument.selectSingleNode("bs:uuid").text;
		//guid = vetDocument.selectSingleNode("bs:guid").text;
		st 	= vetDocument.selectSingleNode("vetd:status").text;
		//forma = vetDocument.selectSingleNode("vetd:form").text;
		//updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = vetDocument.selectSingleNode("vetd:issueDate").text;
		
		consignorBusinessEntity = vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		consignorEnterprise 	= vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		
		Попытка
			consigneeBusinessEntity = vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		Исключение
			consigneeBusinessEntity ="";
		КонецПопытки;
		Попытка
			consigneeEnterprise 	= vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			consigneeEnterprise = "";
		КонецПопытки;
		
		batch = vetDocument.selectSingleNode("vetd:batch");
		
		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;

		Попытка
			productItem = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='name']").text;
		Исключение
			Сообщить("Не удалось получить элемент [productItem]","!");
			productItem = "";
		КонецПопытки;
		
		Попытка
			productItemUuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:uuid").text;
		Исключение
			productItemUuid="";
		КонецПопытки;
		volume 		= batch.selectSingleNode("vetd:volume").text;
		unitGuid	= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
		
		Попытка
			packingFormUuid	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("bs:uuid").text;			
		Исключение
			Сообщить("Не удалось получить элемент [packingForm] [uuid]","!");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("*[local-name()='name']").text;			
		Исключение
			packingFormName="";
			Сообщить("Не удалось получить элемент [packingForm] [name]","!");
		КонецПопытки;

		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
						
		Попытка			
			producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;
		
		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
		ВладелецХС = ВыпМодуль.НайтиХСпоGUID(owner);
				
		докОбъект = ВыпМодуль.НайтиВсд(applicationId, uuid, ВидДокумента);
		докОбъект.UUID = uuid;
		Если докОбъект.ТекущийДокумент() <> докОснование Тогда 
			докОбъект.ДокОснование = докОснование;
		КонецЕсли;
		//док.UUID = Компонента.DocUUID;					
		
		Попытка 
			докОбъект.Отправитель_ХозСубъект 	= ВыпМодуль.НайтиХСпоGUID(consignorBusinessEntity);
		Исключение			
		КонецПопытки;
		Попытка			
			докОбъект.Отправитель_Площадка 		= ВыпМодуль.НайтиПлощадку(consignorEnterprise);
		Исключение			
		КонецПопытки;

		Попытка
			докОбъект.Получатель_ХозСубъект 	= ВыпМодуль.НайтиХСпоGUID(consigneeBusinessEntity);
		Исключение			
		КонецПопытки;

		Попытка			
			докОбъект.Получатель_Площадка 		= ВыпМодуль.НайтиПлощадку(consigneeEnterprise);
		Исключение			
		КонецПопытки;
			
		докОбъект.Производитель_Площадка 	= ВыпМодуль.НайтиПлощадку(producer);
		//Попытка
		//	докОбъект.Производитель_ХозСубъект = докОбъект.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;		
		//ДокПартия.Перевозчик_ХозСубъект = ;
		докОбъект.Продукция 	= ВыпМодуль.НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= ВыпМодуль.НайтиВидПродукции(subProduct);
		
		докОбъект.Продукция_Элемент = ВыпМодуль.Найти_Продукция_Элемент(productItem, productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		докОбъект.СвойствоНоменклатурыЗначение = докОбъект.Продукция_Элемент.СвойствоНоменклатурыЗначение;
		
		докОбъект.Количество 	= Число(volume);
		докОбъект.КоличествоМест = Число(packingAmount);
		ФормаУпаковки 			= ВыпМодуль.НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;	

		докОбъект.ЕдиницаИзмерения = ВыпМодуль.НайтиЕдИзмерения( unitGuid );;
		
		докОбъект.Статус = st;		
		докОбъект.НаименованиеПродукции = productItem;
		докОбъект.Фирма = глПользователь.ОсновнаяФирма;
		докОбъект.Автор = глПользователь;
		Если ПустоеЗначение(Филиал)=0 Тогда 
			докОбъект.Филиал = глПользователь.Филиал;
		КонецЕсли;
		
		докОбъект.ДатаДок = СтрокаВДату(createDate);
				
		докОбъект.Записать();
		докОбъект.Провести();

		Сообщить("Записан "+ВидДокумента+" от "+докОбъект.ДатаДок+" ["+uuid+"]");
	КонецЦикла;

		
КонецПроцедуры


Процедура ЗагрузитьXML_ВсеПартииОтвет(имяФайла)
    
    //tt1=_GetPerformanceCounter();
    
	Если ПустоеЗначение(имяФайла)=1 Тогда
		
	    ИмяФайла="C:\C#\logs\1.xml";
		
		Каталог = "";
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "XML (*.xml)|*.xml", , ) = 1 Тогда
		    ИмяФайла = Каталог + ИмяФайла;
		КонецЕсли;
	КонецЕсли;	

	//имяф=КаталогИБ()+"tovar3.xml";
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
    //objDom=СоздатьОбъект("MSXML2.DOMDocument");
	objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);    
    objDom.setProperty("SelectionNamespaces", "xmlns:bs='http://api.vetrf.ru/schema/cdm/base' xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common' xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document' xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications'" );
	
    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;
	//stockEntryList = objDom.selectNodes("//*:stockEntry") ;   --- не работает 
	//stockEntryList = objDom.selectNodes("//ns2:stockEntry") ;
	Сообщить("Получено "+stockEntryList.length+" записей","i");
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);
		
		ЗаписатьПартию(stockEntry);
			
    КонецЦикла;
    
    //tt2=_GetPerformanceCounter();
    //Сообщить("Время выполнения: "+(tt2-tt1)/1000+" секунд");     

КонецПроцедуры

Процедура ПриОткрытии()
	
	ИмяФайла="";
	КаталогОбработки="";
	
	РасположениеФайла(КаталогОбработки, ИмяФайла);
	
	ГлобМодуль=СоздатьОбъект("Текст");
	//ГлобМодуль.Открыть(КаталогИБ()+ПутьГлобальныйМодуль);
	ГлобМодуль.Открыть(КаталогОбработки+ПутьГлобальныйМодуль);
    Н=1; ТекстМодуля="";
	Для Н=1 по ГлобМодуль.КоличествоСтрок() Цикл
		Стр=ГлобМодуль.ПолучитьСтроку(Н); 
		ТекстМодуля=ТекстМодуля+Стр+РазделительСтрок;
	КонецЦикла;
	
	ВыпМодуль = СоздатьОбъект("ВыполняемыйМодуль");
	ВыпМодуль.УстановитьМодуль(ТекстМодуля);
	ВыпМодуль.НазначитьКонтекст(Контекст);
	ВыпМодуль.КомпилироватьМодуль();
	ВыпМодуль.ВыполнитьМодуль();
	
	ВыпМодуль.ПриОткрытии();
	
	//ВыборВерсииСистемы();	
	
	//Сообщить("Логи сохраняются в "+КаталогЛогов);
		
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Партии");
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты");
	//Форма.Закладки.ДобавитьЗначение("Площадки");
	Форма.Закладки.ДобавитьЗначение("ВСД");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	          
	Форма.ИспользоватьСлой("Основной, Партии");	
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда  
		
		Команда = Парам.Получить("Команда");
		
		Если Команда="ОтправитьВсдИсходящие" Тогда
			
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда 
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД исходящие за период "+ПериодСтр(НачДата, КонДата));
			
			СписокВСД = Парам.Получить("СписокВСД");
			ОтправитьВсеИсходящиеВСД(СписокВСД);
						
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдТранзакции" Тогда
			
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда 
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД транзакции за период "+ПериодСтр(НачДата, КонДата));
			
			СписокВСД = Парам.Получить("СписокВСД");
			ОтправитьВсеВсдТранзакции(СписокВСД);
						
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ПолучитьПартии" Тогда
			Состояние("Меркурий: получение партий...");
			ПолучитьПартии();
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ЗагрузитьПлощадки" Тогда
			
			выбХС = Парам.Получить("ХозСубъект");
			//Если ПустоеЗначение(НачДата)=1 Тогда
			//	НачДата = ТекущаяДата();
			//КонецЕсли;
			//Если ПустоеЗначение(КонДата)=1 Тогда 
			//	КонДата = ТекущаяДата();
			//КонецЕсли;
			Сообщить("загрузка площадок "+ выбХС);
	
			ПолучитьGuidХС(ВыбХС);

			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ВыбХС);
						
			ВыпМодуль.ЗагрузитьПлощадки(Спр.ТекущийЭлемент());			
						
			СтатусВозврата(0);
			Возврат;

		КонецЕсли;
	КонецЕсли;   

	//ЗаполнитьФормыУпаковки();
		
КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда 
		
		Отправитель_Площадка = Элемент;
		//Если ПустоеЗначение(GUID_ОтправительПлощадка)=1 Тогда 
		//	GUID_ОтправительПлощадка = Элемент.GUID;
		//Иначе
		//	Если НЕ(СокрЛП(GUID_ОтправительПлощадка) = СокрЛП(Элемент.GUID)) Тогда 
		//		Сообщить("Ошибка в GUID_ОтправительПлощадка, должно быть "+Элемент.GUID,"!");
		//	Иначе
		//		Сообщить("GUID_ОтправительПлощадка - правильно "+Элемент.Адрес,"i");
		//	КонецЕсли;
		//КонецЕсли;
		
		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

НачДата = ТекущаяДата();
КонДата = НачДата;
попытка
	Филиал = глПользователь.Филиал;
Исключение
	Филиал="";
КонецПопытки;

ПаузаСек = 10;
productType = 1; //мясо 

ЗагрузитьВнешнююКомпоненту("1cpp.dll");
ПутьГлобальныйМодуль = "Меркурий_ГлобальныйМодуль.txt"; 