
Перем ГМ Экспорт; //Глобальный модуль для процедур Меркурия
Перем ВыбРеквизит; //для выбора площадки
Перем ВыбФирма;

Процедура ЗарегистрироватьDLL()

	Попытка
 		текстБАТ = Создатьобъект("Текст");
 		текстБАТ.Очистить();
 		текстБАТ.КодоваяСтраница(1);

 		текстБАТ.ДобавитьСтроку("
 		//|@echo off
 		|%systemdrive%
 		|cd %systemroot%\Microsoft.NET\Framework
 		|for /d %%d in (v4*.*) do (
 		|cd %%%d 
 		|regasm """+КаталогБиблиотек+ГМ.ИмяDLL+".dll"" /codebase 		
 		|pause)
 		|exit /b 99");
		
 		текстБАТ.Записать(КаталогБиблиотек + "setupdll.bat");  
 		ЗапуститьПриложение(КаталогБиблиотек + "setupdll.bat");
 		//
 		//Таймер(10);
 		//
 		//Если ПроверитьDll()=1 Тогда
 		//	Форма.Закрыть(0);
 		//КонецЕсли;
 	Исключение
 		Сообщить(ОписаниеОшибки());
 	КонецПопытки;
	
КонецПроцедуры
 

Функция ПроверитьDll() 
	Попытка
		ГМ.Инициализация(Контекст);
		
		//Предупреждение("Библиотека SoapDLL_test.dll зарегистрирована ");
		Попытка 
			Предупреждение("Библиотека "+ГМ.ИмяDLL+".dll зарегистрирована, версия = "  + ГМ.Компонента.Версия);			
			Возврат 1;
		Исключение 
			Предупреждение("Библиотека "+ГМ.ИмяDLL+" не зарегистрированна!");
			Сообщить(ОписаниеОшибки());
			Возврат 0;
		Конецпопытки;	
	Исключение 
		Предупреждение("Библиотека "+ГМ.ИмяDLL+" не зарегистрированна!");
		Сообщить(ОписаниеОшибки());
		Возврат 0
	Конецпопытки;
КонецФункции

Процедура ПриОткрытии()
	
    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
	ГМ.Инициализация(Контекст);
	
	Если ГМ.ИмяФайлаНастроек() = КаталогИБ()+"Меркурий_Параметры.cfg" Тогда
		флПараметры = 2;
	Иначе
		флПараметры = 1;
	КонецЕсли;
	
	ГМ.СписокФирм.Выгрузить(СписокФирм);
	Если СписокФирм.РазмерСписка() <> 0 Тогда
		СписокФирм.ТекущаяСтрока(1);
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
	КонецЕсли;
	
    ГМ.ЗагрузитьПараметрыВФорму(Контекст);

	Если ПустоеЗначение(КаталогМодуля) = 1 Тогда   //ЖД
	    ИмяФайла="";
		РасположениеФайла(КаталогМодуля, ИмяФайла);
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Параметры 1");
	Форма.Закладки.ДобавитьЗначение("Параметры 2");
	          
	Форма.ИспользоватьСлой("Основной, Параметры1, Действия");	
	
КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда 		
		Отправитель_Площадка = Элемент;		
		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры


Процедура СохранитьПараметры()
	Если Метаданные.Справочник(НазваниеВидаСправочникаФирмы).Выбран() = 1 Тогда
		Если ПустоеЗначение(ВыбФирма) = 1 Тогда    //МногоФирм
		    Предупреждение("Укажите фирму!!!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокКонстант=СоздатьОбъект("СписокЗначений");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_username ), "param_username");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_password ) ,"param_password");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_issuer_id ), "param_issuer_id");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_service_id ), "param_service_id");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_api_key ), "param_api_key");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_intiator_login ), "param_intiator_login");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_vetdoctor_login ), "param_vetdoctor_login");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_vetdoctor_fio ), "param_vetdoctor_fio");	
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_vetdoctor_post ), "param_vetdoctor_post");	
	СписокКонстант.ДобавитьЗначение( ( Отправитель_Площадка ), "Отправитель_Площадка");
	СписокКонстант.ДобавитьЗначение( ( Отправитель_ХозСубъект ), "Отправитель_ХозСубъект");
	СписокКонстант.ДобавитьЗначение( ( Страна ), "Страна");
	СписокКонстант.ДобавитьЗначение( ( Регион ), "Регион");
	СписокКонстант.ДобавитьЗначение( ( Город ), "Город");
	СписокКонстант.ДобавитьЗначение( СокрЛП( ВСД_Экспертиза ), "ВСД_Экспертиза");
	СписокКонстант.ДобавитьЗначение( СокрЛП( ВСД_Местность ), "ВСД_Местность");
	СписокКонстант.ДобавитьЗначение( СокрЛП( ВСД_ОсобыеОтметки ), "ВСД_ОсобыеОтметки");
	СписокКонстант.ДобавитьЗначение( ( ПаузаСек ), "ПаузаСек");	
	СписокКонстант.ДобавитьЗначение( СокрЛП( НазваниеРеквизитаГрузополучатель ), "НазваниеРеквизитаГрузополучатель");	
	СписокКонстант.ДобавитьЗначение( ( ОтладкаЗапросовXML ), "ОтладкаЗапросовXML");	
	СписокКонстант.ДобавитьЗначение( ( Перевозчик_ХозСубъект ), "Перевозчик_ХозСубъект");		
	СписокКонстант.ДобавитьЗначение( СокрЛП( НазваниеРеквизитаКоличествоМест ), "НазваниеРеквизитаКоличествоМест");
	СписокКонстант.ДобавитьЗначение( ( ПропускатьПустыеСвойства ), "ПропускатьПустыеСвойства");		
	СписокКонстант.ДобавитьЗначение( СокрЛП( НазваниеВидаДокументаРеализация ), "НазваниеВидаДокументаРеализация");		
	СписокКонстант.ДобавитьЗначение( СокрЛП( НазваниеРеквизитаКоличество ), "НазваниеРеквизитаКоличество");
	СписокКонстант.ДобавитьЗначение( СокрЛП( КаталогЛогов ), "КаталогЛогов");
	СписокКонстант.ДобавитьЗначение( ( ПаузаСек ), "ПаузаСек");
	СписокКонстант.ДобавитьЗначение( ( ОчищатьСправочникВСД_Партии ), "ОчищатьСправочникВСД_Партии");		
	СписокКонстант.ДобавитьЗначение( СокрЛП( КаталогМодуля ), "КаталогМодуля");		
	СписокКонстант.ДобавитьЗначение( СокрЛП( КаталогБиблиотек ), "КаталогБиблиотек");		
	СписокКонстант.ДобавитьЗначение( ( ТестовыйРежим ), "ТестовыйРежим");
	СписокКонстант.ДобавитьЗначение( ( Цель ), "Цель");
	
	СписокКонстант.ДобавитьЗначение( ( ДобавлятьУпаковки ), "ДобавлятьУпаковки");
	
	СписокКонстант.ДобавитьЗначение( ( Поставщик_Площадка ), "Поставщик_Площадка");
	СписокКонстант.ДобавитьЗначение( ( Поставщик_ХозСубъект ), "Поставщик_ХозСубъект");
	СписокКонстант.ДобавитьЗначение( ( Поставщик_Фирма ), "Поставщик_Фирма");
	СписокКонстант.ДобавитьЗначение( ВСД_РезультатыИсследований, "ВСД_РезультатыИсследований");
	СписокКонстант.ДобавитьЗначение( СокрЛП(НазваниеВидаСправочникаФирмы), "НазваниеВидаСправочникаФирмы");
	ФормаВСД = "";
	Попытка		
		ФормаВСД = спФормаВСД.ПолучитьЗначение( спФормаВСД.ТекущаяСтрока()  );		
	Исключение
		ФормаВСД = "LIC2";
	КонецПопытки;
	СписокКонстант.ДобавитьЗначение(ФормаВСД, "ФормаВСД");		

	ТермУсловияПеревозки = "";
	Попытка		
		ТермУсловияПеревозки = спТермическиеУсловияПеревозки.ПолучитьЗначение( спТермическиеУсловияПеревозки.ТекущаяСтрока()  );		
	Исключение
		ТермУсловияПеревозки = 1;
	КонецПопытки;
	СписокКонстант.ДобавитьЗначение(ТермУсловияПеревозки, "ТермУсловияПеревозки");		
	
	
	ГМ.ПараметрыФирм.Установить(ЗначениеВСтрокуВнутр(ВыбФирма),СписокКонстант);

	ГМ.СохранитьПараметры();	
	
КонецПроцедуры

Процедура ОткрытьПлощадкиПоХС(ВыбХС)
						
		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Функция ЗаполнитьФормыУпаковки() Экспорт
	//http://help.vetrf.ru/wiki/PackingForm
	
	ГМ.НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8",	"банки");
	ГМ.НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8",	"биг бэги");
	ГМ.НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8",	"бочки");
	ГМ.НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8",	"жестяные банки");
	ГМ.НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8",	"картонные коробки");
	ГМ.НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8",	"крафтмешки");
	ГМ.НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8",	"мешки");
	ГМ.НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8",	"мешки полипропиленовые");
	ГМ.НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8",	"навалом");
	ГМ.НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8",	"насыпью");
	ГМ.НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8",	"пакеты");
	ГМ.НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8",	"полиблоки");
	ГМ.НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые ящики");
	ГМ.НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8",	"паллеты");
	ГМ.НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8",	"полиэтилен");
	ГМ.НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8",	"картон");
	ГМ.НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8",	"стокинеты");
	ГМ.НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8",	"коробки");
	ГМ.НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8",	"прицеп");
	ГМ.НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8",	"корзины");
	ГМ.НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8",	"автоцистерна");
	ГМ.НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8",	"мешки бумажные");
	ГМ.НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые коробки");
	ГМ.НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8",	"контейнер");
	ГМ.НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8",	"поддоны");
	ГМ.НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8",	"на подвесе");
	ГМ.НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8",	"кипы");
	ГМ.НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660",	"гофроящики");
	ГМ.НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660",	"пластмассовые ящики");
КонецФункции

Процедура ИнициализацияХС()
	
	Если ПустоеЗначение(param_username)=1 Тогда 
		Предупреждение("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_password)=1 Тогда 
		Предупреждение("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_issuer_id)=1 Тогда 
		Предупреждение("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьФормыУпаковки();
	
	ГМ.ИнициализацияХС_ЗагрузитьЦели();
	
	ГМ.ИнициализацияХС_ЗагрузитьСтраны();
	
	Для А=1 По 8 Цикл
		ГМ.ИнициализацияХС_ЗагрузитьПродукцию(А);
	КонецЦикла;
	
	Если ПустоеЗначение(Отправитель_ХозСубъект)=1 Тогда
		
		СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрКонтрагенты.Выбрать("Выберите фирму-отправитель вет справок",)=1 Тогда 
			ВыбКонтрагент = СпрКонтрагенты.ТекущийЭлемент();
			СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Если СпрХС.НайтиПоРеквизиту("Контрагент", ВыбКонтрагент ,1)=0 Тогда
				СпрХС.Новый();
				СпрХС.Наименование = ВыбКонтрагент .Наименование;
				СпрХС.Контрагент = ВыбКонтрагент ;
				СпрХС.ИНН = ГМ.ПолучитьИНН(ВыбКонтрагент);
				СпрХС.Записать();
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			Иначе
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			КонецЕсли;			
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Результат = ГМ.ХС_ПолучитьGuid(Отправитель_ХозСубъект);
	
	ИмяФайла = ГМ.Компонента.LogFilename;
	Если Результат="SUCCESS" Тогда
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(ИмяФайла);    
		Попытка
			be = objDom.selectSingleNode("//businessEntity");
		Исключение
			Сообщить("Получен пустой ответ сервера. Заполните параметры подключения.","!");
			Возврат;
		КонецПопытки;
		guid = be.selectSingleNode("guid").text;
		Попытка 
			name = be.selectSingleNode("name").text;
		Исключение 
			name = be.selectSingleNode("fio").text;
		КонецПопытки;
		country = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("guid").text;
		countryName = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("name").text;
		
		Страна 	= ГМ.НайтиСтрануПоGUID(country, countryName);
		
		ГМ.ИнициализацияХС_ЗагрузитьРегионы(Страна);	
	
		ГМ.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
			

		region = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("guid").text;
		regionName = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("name").text;
		
		Регион 	= ГМ.НайтиРегионПоGUID(region, regionName);			
		
		Попытка 
			locality = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("guid").text;		
			localityName = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("name").text;
		Исключение
			Сообщить("Площадка не выбрана. Создайте площадку в ГИС Меркурий","!!");
			Возврат;
		КонецПопытки;
		Город 	= ГМ.НайтиГородПоGUID(locality, localityName);
		
		Если ПустоеЗначение(param_issuer_id)=1 Тогда 
			param_issuer_id = guid;
		Иначе
			Если НЕ(param_issuer_id = guid) Тогда 
				Сообщить("Ошибка в param_issuer_id, должно быть "+guid,"!");
			Иначе
				Сообщить("param_issuer_id - правильно "+name,"i");
			КонецЕсли;
		КонецЕсли;		
		
		ГМ.ЗагрузитьПлощадки( Отправитель_ХозСубъект );
				
		ВыбРеквизит = "Отправитель_Площадка";
		ОткрытьПлощадкиПоХС(Отправитель_ХозСубъект);
		
	КонецЕсли;
		
КонецПроцедуры

// предопределенная процедура
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
		
	Если ЗначениеЗакладки="Параметры 1" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры1, Действия");
	Иначе
		Форма.ИспользоватьСлой("Основной, Параметры2, Действия");
	КонецЕсли;     
		
КонецПроцедуры 

Процедура ПриИзмененииФирмы()
	ГМ.Инициализация(Контекст);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	Если ПустоеЗначение(КаталогМодуля) = 1 Тогда   //ЖД
	    ИмяФайла="";
		РасположениеФайла(КаталогМодуля, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

//======================================================================
Процедура ПриЗакрытии()
	ВидСтравочникаХС = Метаданные.Справочник("ВСД_ХозСубъект").Реквизит("Контрагент").Вид;
	ВидСтравочникаПЛ = Метаданные.Справочник("ВСД_Площадка").Реквизит("Контрагент").Вид;

	Если ВидСтравочникаХС <> ВидСтравочникаПЛ Тогда
		Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Выбран() = 1 Тогда
			Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Идентификатор <> ВидСтравочникаХС Тогда
				Предупреждение("Неверный реквизит Контрагент в справочнике ВСД_Площадка!"+РазделительСтрок+"Проверьте подчиненность справочника.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ПриЗакрытии

//======================================================================
Процедура ПоКнопкеОК()
	Если СписокФирм.РазмерСписка() <> 0 Тогда
		Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
			ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
			ПриИзмененииФирмы();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ПоКнопкеОК

//======================================================================
Процедура ДобавитьПараметры()
	Если Метаданные.Справочник(НазваниеВидаСправочникаФирмы).Выбран() = 1 Тогда
		Спр = СоздатьОбъект("Справочник."+НазваниеВидаСправочникаФирмы);
		Если Спр.Выбрать("Выберите фирму",) = 1 Тогда
			ВыбФирма = Спр.ТекущийЭлемент();
			СписокФирм.ДобавитьЗначение(ВыбФирма);
			СписокФирм.ТекущаяСтрока(СписокФирм.РазмерСписка());
			ПриИзмененииФирмы();
			
			СохранитьПараметры();
		КонецЕсли;
	Иначе
		Если СписокФирм.РазмерСписка() = 0 Тогда
			ВыбФирма = "";
			СписокФирм.ДобавитьЗначение(ВыбФирма, "-=Основная фирма=-");
			ПриИзмененииФирмы();

			СохранитьПараметры();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ДобавитьПараметры

//======================================================================
Процедура УдалитьПараметры()
	Если СписокФирм.РазмерСписка() <> 0 Тогда
		Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
			Если Вопрос("Вы уверены?","Да+Нет",30) = "Да" Тогда
				ВремФирма = ЗначениеВСтрокуВнутр(СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока()));
				ВремСтр = "";
				Для СЦ = 1 По ГМ.ПараметрыФирм.РазмерСписка() Цикл
					ГМ.ПараметрыФирм.ПолучитьЗначение(СЦ, ВремСтр);
					Если ВремСтр = ВремФирма Тогда
					    ГМ.ПараметрыФирм.УдалитьЗначение(СЦ);
						ГМ.СохранитьПараметры();	
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				СписокФирм.УдалитьЗначение(СписокФирм.ТекущаяСтрока());
				Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
					ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
				Иначе
					ВыбФирма = "";
				КонецЕсли;
				ПриИзмененииФирмы();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // УдалитьПараметры

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,ФлагСтандОбр)
	Если ЭлементДиалога = "Отправитель_Площадка" Тогда
		ВремЭлем = Отправитель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()
                     
//******************************************************************************
Процедура ПриВыбореХС(Имя, ВыбХС)
	Если Имя = "Отправитель_ХозСубъект" Тогда
		Если Отправитель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Отправитель_Площадка = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриВыбореХС

//======================================================================
Процедура ПриВыбореВидаПараметров()
	Если флПараметры = 1 Тогда
		Если ФС.СуществуетФайл(КаталогИБ()+"Меркурий_Параметры.cfg") = 1 Тогда
			ФС.УдалитьФайл(КаталогИБ()+"Меркурий_Параметры.cfg");
		КонецЕсли;
	Иначе
		Ф = СоздатьОбъект("Текст");
		Ф.Записать(КаталогИБ()+"Меркурий_Параметры.cfg");
	КонецЕсли;
	ГМ.СохранитьПараметры();
КонецПроцедуры // ПриВыбореВидаПараметров()

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;

//ПараметрыФирм = СоздатьОбъект("СписокЗначений"); //Параметры по фирмам

ИмяФайла="";
//ЖД РасположениеФайла(КаталогМодуля, ИмяФайла);

// http://help.vetrf.ru/wiki/VetDocumentForm
спФормаВСД.ДобавитьЗначение("CERTCU1",	"Форма 1 ветеринарного сертификата ТС.");
спФормаВСД.ДобавитьЗначение("LIC1",		"Форма 1 ветеринарного свидетельства. Оформляется на живых животных, биологические объекты");
спФормаВСД.ДобавитьЗначение("CERTCU2",	"Форма 2 ветеринарного сертификата ТС.");
спФормаВСД.ДобавитьЗначение("LIC2",		"Форма 2 ветеринарного свидетельства. Оформляется на сырьё животного происхождения.");
спФормаВСД.ДобавитьЗначение("CERTCU3",	"Форма 3 ветеринарного сертификата ТС.");
спФормаВСД.ДобавитьЗначение("LIC3",		"Форма 3 ветеринарного свидетельства. Оформляется на техническое сырьё; корма; биологические");
спФормаВСД.ДобавитьЗначение("NOTE4",	"Форма 4 ветеринарной справки при перевозке любого вида продукции внутри одного района ");
спФормаВСД.ДобавитьЗначение("CERT5I",	"Форма 5i ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("CERT61",	"Форма 6.1 ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("CERT62",	"Форма 6.2 ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("CERT63",	"Форма 6.3 ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("PRODUCTIVE",	"Производственный сертификат");


спТермическиеУсловияПеревозки.ДобавитьЗначение(1,"Замороженный");
спТермическиеУсловияПеревозки.ДобавитьЗначение(2,"Охлажденный");
спТермическиеУсловияПеревозки.ДобавитьЗначение(3,"Охлаждаемый");
спТермическиеУсловияПеревозки.ДобавитьЗначение(4,"Вентилируемый");

ВыбФирма = "";