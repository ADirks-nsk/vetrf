
Перем ГМ Экспорт; //Глобальный модуль для процедур Меркурия
Перем глМеркурийИнтеграция Экспорт; // для переопределения функций = интеграция для вашей базы
Перем ВыбРеквизит; //для выбора площадки

Процедура ЗарегистрироватьDLL()

	Попытка
 		текстБАТ = Создатьобъект("Текст");
 		текстБАТ.Очистить();
 		текстБАТ.КодоваяСтраница(1);

 		текстБАТ.ДобавитьСтроку("
 		//|@echo off
 		|%systemdrive%
 		|cd %systemroot%\Microsoft.NET\Framework
 		|for /d %%d in (v4*.*) do (
 		|cd %%%d 
 		|regasm """+КаталогБиблиотек+ГМ.ИмяDLL+".dll"" /codebase 		
 		|pause)
 		|exit /b 99");
		
 		текстБАТ.Записать(КаталогБиблиотек + "setupdll.bat");  
 		ЗапуститьПриложение(КаталогБиблиотек + "setupdll.bat");
 		//
 		//Таймер(10);
 		//
 		//Если ПроверитьDll()=1 Тогда
 		//	Форма.Закрыть(0);
 		//КонецЕсли;
 	Исключение
 		Сообщить(ОписаниеОшибки());
 	КонецПопытки;
	
КонецПроцедуры
 

Функция ПроверитьDll() 
	Попытка
		ГМ.Инициализация();
		
		//Предупреждение("Библиотека SoapDLL_test.dll зарегистрирована ");
		Попытка 
			Предупреждение("Библиотека "+ГМ.ИмяDLL+".dll зарегистрирована, версия = "  + ГМ.Компонента.Версия);			
			Возврат 1;
		Исключение 
			Предупреждение("Библиотека "+ГМ.ИмяDLL+" не зарегистрированна!");
			Сообщить(ОписаниеОшибки());
			Возврат 0;
		Конецпопытки;	
	Исключение 
		Предупреждение("Библиотека "+ГМ.ИмяDLL+" не зарегистрированна!");
		Сообщить(ОписаниеОшибки());
		Возврат 0
	Конецпопытки;
КонецФункции

Процедура ПриОткрытии()
	
   //{ Глобальный + Интеграционный модуль для переопределения функций
    глМеркурийИнтеграция 		= СоздатьОбъект("МеркурийИнтеграция");

    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
	ГМ.Инициализация(); 
    ГМ.ЗагрузитьПараметрыВФорму(Контекст);

	Если ПустоеЗначение(КаталогМодуля) = 1 Тогда   //ЖД
	    ИмяФайла="";
		РасположениеФайла(КаталогМодуля, ИмяФайла);
	КонецЕсли;
    //Переопределение функций, если они определены в модуле
    глМеркурийИнтеграция.Инициализация(ГМ);    
    //}			


    // МногоФирм
	// Вот ВыбФирму нужно установить по загруженным настройкам
	стр = "";
	попытка
		к = ГМ.ПараметрыФирм.ПолучитьЗначение(1,стр);
		Если Пустоезначение(стр) = 0 Тогда
			ВыбФирма = ЗначениеИзСтрокиВнутр(стр);
		КонецЕсли;
	Исключение
	КонецПопытки;



	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Параметры 1");
	Форма.Закладки.ДобавитьЗначение("Параметры 2");
	          
	Форма.ИспользоватьСлой("Основной, Параметры1, Действия");		
	
КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда 		
		Отправитель_Площадка = Элемент;		
		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры


Процедура СохранитьПараметры()
	Если ПустоеЗначение(ВыбФирма) = 1 Тогда    //МногоФирм
	    Предупреждение("Укажите фирму!!!");
		Возврат;
	КонецЕсли;
	
	СписокКонстант=СоздатьОбъект("СписокЗначений");
	СписокКонстант.ДобавитьЗначение(param_username, "param_username");
	СписокКонстант.ДобавитьЗначение(param_password ,"param_password");
	СписокКонстант.ДобавитьЗначение(param_issuer_id, "param_issuer_id");
	СписокКонстант.ДобавитьЗначение(param_service_id, "param_service_id");
	СписокКонстант.ДобавитьЗначение(param_api_key, "param_api_key");
	СписокКонстант.ДобавитьЗначение(param_intiator_login, "param_intiator_login");
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_login, "param_vetdoctor_login");
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_fio, "param_vetdoctor_fio");	
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_post, "param_vetdoctor_post");	
	
	СписокКонстант.ДобавитьЗначение(Отправитель_Площадка, "Отправитель_Площадка");
	СписокКонстант.ДобавитьЗначение(Отправитель_ХозСубъект, "Отправитель_ХозСубъект");
	
	СписокКонстант.ДобавитьЗначение(Страна, "Страна");
	СписокКонстант.ДобавитьЗначение(Регион, "Регион");
	СписокКонстант.ДобавитьЗначение(Город, "Город");
	СписокКонстант.ДобавитьЗначение(ВСД_Экспертиза, "ВСД_Экспертиза");
	СписокКонстант.ДобавитьЗначение(ВСД_Местность, "ВСД_Местность");
	СписокКонстант.ДобавитьЗначение(ВСД_ОсобыеОтметки, "ВСД_ОсобыеОтметки");
	
	СписокКонстант.ДобавитьЗначение(ПаузаСек, "ПаузаСек");	
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаГрузополучатель, "НазваниеРеквизитаГрузополучатель");	
			
	СписокКонстант.ДобавитьЗначение(ОтладкаЗапросовXML, "ОтладкаЗапросовXML");	
	
	СписокКонстант.ДобавитьЗначение(Перевозчик_ХозСубъект, "Перевозчик_ХозСубъект");		
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаКоличествоМест, "НазваниеРеквизитаКоличествоМест");
	СписокКонстант.ДобавитьЗначение(ПропускатьПустыеСвойства, "ПропускатьПустыеСвойства");		
	СписокКонстант.ДобавитьЗначение(НазваниеВидаДокументаРеализация, "НазваниеВидаДокументаРеализация");		
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаКоличество, "НазваниеРеквизитаКоличество");
	
	СписокКонстант.ДобавитьЗначение(КаталогЛогов, "КаталогЛогов");
	СписокКонстант.ДобавитьЗначение(ПаузаСек, "ПаузаСек");
	
	СписокКонстант.ДобавитьЗначение(ОчищатьСправочникВСД_Партии, "ОчищатьСправочникВСД_Партии");		
	
	СписокКонстант.ДобавитьЗначение(КаталогМодуля, "КаталогМодуля");		
	СписокКонстант.ДобавитьЗначение(КаталогБиблиотек, "КаталогБиблиотек");		
	СписокКонстант.ДобавитьЗначение(ТестовыйРежим, "ТестовыйРежим");
	
	СписокКонстант.ДобавитьЗначение(Цель, "Цель");
	
	ФормаВСД = "";
	Попытка		
		ФормаВСД = спФормаВСД.ПолучитьЗначение( спФормаВСД.ТекущаяСтрока()  );		
	Исключение
		ФормаВСД = "LIC2";
	КонецПопытки;
	СписокКонстант.ДобавитьЗначение(ФормаВСД, "ФормаВСД");		

	ГМ.ПараметрыФирм.Установить(ЗначениеВСтрокуВнутр(ВыбФирма),СписокКонстант);
	ГМ.СохранитьПараметры();	
	
КонецПроцедуры

Процедура ОткрытьПлощадкиПоХС(ВыбХС)
						
		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Функция ЗаполнитьФормыУпаковки() Экспорт
	//http://help.vetrf.ru/wiki/PackingForm
	
	ГМ.НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8",	"банки");
	ГМ.НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8",	"биг бэги");
	ГМ.НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8",	"бочки");
	ГМ.НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8",	"жестяные банки");
	ГМ.НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8",	"картонные коробки");
	ГМ.НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8",	"крафтмешки");
	ГМ.НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8",	"мешки");
	ГМ.НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8",	"мешки полипропиленовые");
	ГМ.НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8",	"навалом");
	ГМ.НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8",	"насыпью");
	ГМ.НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8",	"пакеты");
	ГМ.НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8",	"полиблоки");
	ГМ.НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые ящики");
	ГМ.НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8",	"паллеты");
	ГМ.НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8",	"полиэтилен");
	ГМ.НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8",	"картон");
	ГМ.НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8",	"стокинеты");
	ГМ.НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8",	"коробки");
	ГМ.НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8",	"прицеп");
	ГМ.НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8",	"корзины");
	ГМ.НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8",	"автоцистерна");
	ГМ.НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8",	"мешки бумажные");
	ГМ.НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые коробки");
	ГМ.НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8",	"контейнер");
	ГМ.НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8",	"поддоны");
	ГМ.НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8",	"на подвесе");
	ГМ.НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8",	"кипы");
	ГМ.НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660",	"гофроящики");
	ГМ.НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660",	"пластмассовые ящики");
КонецФункции

Процедура ИнициализацияХС()
	
	Если ПустоеЗначение(param_username)=1 Тогда 
		Предупреждение("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_password)=1 Тогда 
		Предупреждение("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_issuer_id)=1 Тогда 
		Предупреждение("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьФормыУпаковки();
	
	ГМ.ИнициализацияХС_ЗагрузитьЦели();
	
	ГМ.ИнициализацияХС_ЗагрузитьСтраны();
	
	Для А=1 По 8 Цикл
		ГМ.ИнициализацияХС_ЗагрузитьПродукцию(А);
	КонецЦикла;
	
	Если ПустоеЗначение(Отправитель_ХозСубъект)=1 Тогда
		
		СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрКонтрагенты.Выбрать("Выберите фирму-отправитель вет справок",)=1 Тогда 
			ВыбКонтрагент = СпрКонтрагенты.ТекущийЭлемент();
			СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Если СпрХС.НайтиПоРеквизиту("Контрагент", ВыбКонтрагент ,1)=0 Тогда
				СпрХС.Новый();
				СпрХС.Наименование = ВыбКонтрагент .Наименование;
				СпрХС.Контрагент = ВыбКонтрагент ;
				СпрХС.ИНН = ГМ.ПолучитьИНН(ВыбКонтрагент);
				СпрХС.Записать();
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			Иначе
				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
			КонецЕсли;			
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Результат = ГМ.ХС_ПолучитьGuid(Отправитель_ХозСубъект);
	
	ИмяФайла = ГМ.Компонента.LogFilename;
	Если Результат="SUCCESS" Тогда
	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(ИмяФайла);    
		Попытка
			be = objDom.selectSingleNode("//businessEntity");
		Исключение
			Сообщить("Получен пустой ответ сервера. Заполните параметры подключения.","!");
			Возврат;
		КонецПопытки;
		guid = be.selectSingleNode("guid").text;
		Попытка 
			name = be.selectSingleNode("name").text;
		Исключение 
			name = be.selectSingleNode("fio").text;
		КонецПопытки;
		country = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("guid").text;
		countryName = be.selectSingleNode("juridicalAddress").selectSingleNode("country").selectSingleNode("name").text;
		
		Страна 	= ГМ.НайтиСтрануПоGUID(country, countryName);
		
		ГМ.ИнициализацияХС_ЗагрузитьРегионы(Страна);	
	
		ГМ.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
			

		region = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("guid").text;
		regionName = be.selectSingleNode("juridicalAddress").selectSingleNode("region").selectSingleNode("name").text;
		
		Регион 	= ГМ.НайтиРегионПоGUID(region, regionName);			
		
		Попытка 
			locality = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("guid").text;		
			localityName = be.selectSingleNode("juridicalAddress").selectSingleNode("locality").selectSingleNode("name").text;
		Исключение
			Сообщить("Площадка не выбрана. Создайте площадку в ГИС Меркурий","!!");
			Возврат;
		КонецПопытки;
		Город 	= ГМ.НайтиГородПоGUID(locality, localityName);
		
		Если ПустоеЗначение(param_issuer_id)=1 Тогда 
			param_issuer_id = guid;
		Иначе
			Если НЕ(param_issuer_id = guid) Тогда 
				Сообщить("Ошибка в param_issuer_id, должно быть "+guid,"!");
			Иначе
				Сообщить("param_issuer_id - правильно "+name,"i");
			КонецЕсли;
		КонецЕсли;		
		
		ГМ.ЗагрузитьПлощадки( Отправитель_ХозСубъект );
				
		ВыбРеквизит = "Отправитель_Площадка";
		ОткрытьПлощадкиПоХС(Отправитель_ХозСубъект);
		
	КонецЕсли;
		
КонецПроцедуры

// предопределенная процедура
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
		
	Если ЗначениеЗакладки="Параметры 1" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры1, Действия");
	Иначе
		Форма.ИспользоватьСлой("Основной, Параметры2, Действия");
	КонецЕсли;     
		
КонецПроцедуры 

Процедура ПриИзмененииФирмы()
	ГМ.Инициализация(ВыбФирма);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	Если ПустоеЗначение(КаталогМодуля) = 1 Тогда   //ЖД
	    ИмяФайла="";
		РасположениеФайла(КаталогМодуля, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;

//ПараметрыФирм = СоздатьОбъект("СписокЗначений"); //Параметры по фирмам

ИмяФайла="";
//ЖД РасположениеФайла(КаталогМодуля, ИмяФайла);

// http://help.vetrf.ru/wiki/VetDocumentForm
спФормаВСД.ДобавитьЗначение("CERTCU1",	"Форма 1 ветеринарного сертификата ТС.");
спФормаВСД.ДобавитьЗначение("LIC1",		"Форма 1 ветеринарного свидетельства. Оформляется на живых животных, биологические объекты");
спФормаВСД.ДобавитьЗначение("CERTCU2",	"Форма 2 ветеринарного сертификата ТС.");
спФормаВСД.ДобавитьЗначение("LIC2",		"Форма 2 ветеринарного свидетельства. Оформляется на сырьё животного происхождения.");
спФормаВСД.ДобавитьЗначение("CERTCU3",	"Форма 3 ветеринарного сертификата ТС.");
спФормаВСД.ДобавитьЗначение("LIC3",		"Форма 3 ветеринарного свидетельства. Оформляется на техническое сырьё; корма; биологические");
спФормаВСД.ДобавитьЗначение("NOTE4",	"Форма 4 ветеринарной справки при перевозке любого вида продукции внутри одного района ");
спФормаВСД.ДобавитьЗначение("CERT5I",	"Форма 5i ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("CERT61",	"Форма 6.1 ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("CERT62",	"Форма 6.2 ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("CERT63",	"Форма 6.3 ветеринарного сертификата.");
спФормаВСД.ДобавитьЗначение("PRODUCTIVE",	"Производственный сертификат");