Перем ВыпМодуль;
Перем ИмяDLL;
Перем ПутьГлобальныйМодуль;
//Перем Компонента;
//Перем базаДанных;
//Перем ЭтоSQL;

Перем ВыбРеквизит; //для выбора площадки

Процедура ЗарегистрироватьDLL()
	
	ИмяФайла="";
	КаталогОбработки="";
	
	РасположениеФайла(КаталогОбработки, ИмяФайла);

	 КаталогИсточник = КаталогОбработки;
	 Если Прав(КаталогИсточник,1)<>"\" Тогда
	 	КаталогИсточник = КаталогИсточник + "\";
	 КонецЕсли;                                  
	 
 	Попытка
 		текстБАТ = Создатьобъект("Текст");
 		текстБАТ.Очистить();
 		текстБАТ.КодоваяСтраница(0);

 		текстБАТ.ДобавитьСтроку("
 		//|@echo off
 		|%systemdrive%
 		|cd %systemroot%\Microsoft.NET\Framework
 		|for /d %%d in (v4*.*) do (
 		|cd %%%d 
 		|regasm "+КаталогОбработки+ИмяDLL+".dll /codebase
 		|pause)
 		|exit /b 99");
 		
 		текстБАТ.Записать(КаталогОбработки + "setupdll.bat");  
 		ЗапуститьПриложение(КаталогОбработки + "setupdll.bat");
 		//
 		//Таймер(10);
 		//
 		//Если ПроверитьDll()=1 Тогда
 		//	Форма.Закрыть(0);
 		//КонецЕсли;
 	Исключение
 		Сообщить(ОписаниеОшибки());
 	КонецПопытки;
	
КонецПроцедуры
 

Функция ПроверитьDll() 
	Попытка
		ВыпМодуль.ПриСменеВерсииСистемы();
		
		//Предупреждение("Библиотека SoapDLL_test.dll зарегистрирована ");
		Попытка 
			Предупреждение("Библиотека "+ИмяDLL+".dll зарегистрирована, версия = "  + ВыпМодуль.Компонента.Версия);
			Возврат 1;
		Исключение 
			Предупреждение("Библиотека "+ИмяDLL+" не зарегистрированна!");
			Возврат 0;
		Конецпопытки;	
	Исключение 
		Предупреждение("Библиотека "+ИмяDLL+" не зарегистрированна!");
		Возврат 0
	Конецпопытки;
КонецФункции

Процедура ПриОткрытии()
	
	ИмяФайла="";
	КаталогОбработки="";
	
	РасположениеФайла(КаталогОбработки, ИмяФайла);
	
	ГлобМодуль=СоздатьОбъект("Текст");
	//ГлобМодуль.Открыть(КаталогИБ()+ПутьГлобальныйМодуль);
	ГлобМодуль.Открыть(КаталогОбработки+ПутьГлобальныйМодуль);
    Н=1; ТекстМодуля="";
	Для Н=1 по ГлобМодуль.КоличествоСтрок() Цикл
		Стр=ГлобМодуль.ПолучитьСтроку(Н); 
		ТекстМодуля=ТекстМодуля+Стр+РазделительСтрок;
	КонецЦикла;
	
	ВыпМодуль = СоздатьОбъект("ВыполняемыйМодуль");
	ВыпМодуль.УстановитьМодуль(ТекстМодуля);
	ВыпМодуль.НазначитьКонтекст(Контекст);
	ВыпМодуль.КомпилироватьМодуль();
	ВыпМодуль.ВыполнитьМодуль();
	
	Попытка		
		ВыпМодуль.ПриОткрытии();
	Исключение
			Сообщить("Библиотека не зарегистрирована","!");
			Сообщить(ОписаниеОшибки());
			Возврат;		
	КонецПопытки;

КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда 
		
		Отправитель_Площадка = Элемент;
		//Если ПустоеЗначение(GUID_ОтправительПлощадка)=1 Тогда 
		//	GUID_ОтправительПлощадка = Элемент.GUID;
		//Иначе
		//	Если НЕ(СокрЛП(GUID_ОтправительПлощадка) = СокрЛП(Элемент.GUID)) Тогда 
		//		Сообщить("Ошибка в GUID_ОтправительПлощадка, должно быть "+Элемент.GUID,"!");
		//	Иначе
		//		Сообщить("GUID_ОтправительПлощадка - правильно "+Элемент.Адрес,"i");
		//	КонецЕсли;
		//КонецЕсли;
		
		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьПараметры()
	
	СписокКонстант=СоздатьОбъект("СписокЗначений");
	СписокКонстант.ДобавитьЗначение(param_username, "param_username");
	СписокКонстант.ДобавитьЗначение(param_password ,"param_password");
	СписокКонстант.ДобавитьЗначение(param_issuer_id, "param_issuer_id");
	СписокКонстант.ДобавитьЗначение(param_service_id, "param_service_id");
	СписокКонстант.ДобавитьЗначение(param_api_key, "param_api_key");
	СписокКонстант.ДобавитьЗначение(param_intiator_login, "param_intiator_login");
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_login, "param_vetdoctor_login");
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_fio, "param_vetdoctor_fio");	
	СписокКонстант.ДобавитьЗначение(param_vetdoctor_post, "param_vetdoctor_post");	
	
	СписокКонстант.ДобавитьЗначение(Отправитель_Площадка, "Отправитель_Площадка");
	СписокКонстант.ДобавитьЗначение(Отправитель_ХозСубъект, "Отправитель_ХозСубъект");
	
	СписокКонстант.ДобавитьЗначение(Страна, "Страна");
	СписокКонстант.ДобавитьЗначение(Регион, "Регион");
	СписокКонстант.ДобавитьЗначение(Город, "Город");
	СписокКонстант.ДобавитьЗначение(ВСД_Экспертиза, "ВСД_Экспертиза");
	СписокКонстант.ДобавитьЗначение(ВСД_Местность, "ВСД_Местность");
	СписокКонстант.ДобавитьЗначение(ВСД_ОсобыеОтметки, "ВСД_ОсобыеОтметки");
	
	СписокКонстант.ДобавитьЗначение(ПаузаСек, "ПаузаСек");	
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаГрузополучатель, "НазваниеРеквизитаГрузополучатель");	
			
	СписокКонстант.ДобавитьЗначение(ОтладкаЗапросовXML, "ОтладкаЗапросовXML");	
	
	СписокКонстант.ДобавитьЗначение(ВСД_Продукция_Свойство, "ВСД_Продукция_Свойство");
	СписокКонстант.ДобавитьЗначение(Перевозчик_ХозСубъект, "Перевозчик_ХозСубъект");		
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаКоличествоМест, "НазваниеРеквизитаКоличествоМест");
	СписокКонстант.ДобавитьЗначение(ПропускатьПустыеСвойства, "ПропускатьПустыеСвойства");		
	СписокКонстант.ДобавитьЗначение(НазваниеВидаДокументаРеализация, "НазваниеВидаДокументаРеализация");		
	СписокКонстант.ДобавитьЗначение(НазваниеРеквизитаКоличество, "НазваниеРеквизитаКоличество");		
	
	ЗначениеВФайл(ВыпМодуль.ИмяФайлаНастроек,СписокКонстант);
	//Предупреждение("Настройки сохранены!",3);
	Сообщить("Настройки сохранены в "+ВыпМодуль.ИмяФайлаНастроек,"i");
	
КонецПроцедуры

ПаузаСек = 10;
КаталогЛогов = КаталогИБ()+"logs\";
//НазваниеРеквизитаГрузополучатель = "Контрагент";

ЗагрузитьВнешнююКомпоненту("1cpp.dll");
ПутьГлобальныйМодуль = "Меркурий_ГлобальныйМодуль.txt"; 