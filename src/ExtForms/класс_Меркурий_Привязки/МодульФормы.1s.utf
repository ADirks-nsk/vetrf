
Перем КонтекстФормы;

//===  Привязки ==
Перем фОкноОткрыто;
Перем тзАтрибуты;

Перем фСохранятьРазмерыОкна;

Перем привВерх Экспорт;
Перем привВерхКНизу Экспорт;
Перем привНиз Экспорт;
Перем привНизКНизу Экспорт;

Перем привЛево Экспорт;
Перем привЛевоКПраво Экспорт;
Перем привПраво Экспорт;
Перем привПравоКПраво Экспорт;

Перем ШиринаФормы, ВысотаФормы;
Перем КоличествоИзмененийРазмера;

Перем фМожноПерепривязывать;

//=== Сплиттеры ==
Перем тзСплиттеры; //:ТаблицаЗначений
Перем фТрекинг, Мышь_Лево, Мышь_Верх;

Перем ориентВерт, ориентГор;
Перем курсорСтандарт, курсорВертСплиттер, курсорГорСплиттер;

//=== Общее ==
Перем МинШиринаАтрибута, МинВысотаАтрибута;
Перем МинРасстояниеОтКрая;
//_____________________________________________________________________________
Функция Сам(Конт) Возврат Конт; КонецФункции

//_____________________________________________________________________________
//Находит строку ТЗ по указанным колонкам и их значениям
//Возвращает 1 если строка найдена, и 0 в противном случае
Функция НайтиСтрокуТЗ(ТЗ, КолонкаПоиска, ЗначПоиска, КолонкаПоиска2="", ЗначПоиска2="") Экспорт
    Перем н;
	Если ТЗ.НайтиЗначение(ЗначПоиска, н, КолонкаПоиска)=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТЗ.ПолучитьСтрокуПоНомеру(н);
	Если КолонкаПоиска2="" Тогда Возврат 1; КонецЕсли;
	
	Пока н<=ТЗ.КоличествоСтрок() Цикл
		Если ТЗ.ПолучитьЗначение(н, КолонкаПоиска) = ЗначПоиска Тогда
			Если ТЗ.ПолучитьЗначение(н, КолонкаПоиска2) = ЗначПоиска2 Тогда
				ТЗ.ПолучитьСтрокуПоНомеру(н);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		н = н + 1;
	КонецЦикла;
	Возврат 0;
КонецФункции

///******************************** ADirks 07.08.2006
Функция СтрокуВСписок(_Стр_, Разделитель = ",", ОбрезатьПробелы = 0) Экспорт
	Перем Стр, Поз;
	Перем Сп, Зн;
	
	Сп = СоздатьОбъект("СписокЗначений");
	Стр = СтрЗаменить(_Стр_, Разделитель, РазделительСтрок);
	КоличествоСтрок = СтрКоличествоСтрок(Стр);
	Для н = 1 По КоличествоСтрок Цикл
		Зн = СтрПолучитьСтроку(Стр, н);
		Если ОбрезатьПробелы = 1 Тогда Зн = СокрЛП(Зн); КонецЕсли;
		Сп.ДобавитьЗначение(Зн, Зн);
	КонецЦикла;

	Возврат Сп;
КонецФункции
///******************************** ADirks 07.08.2006


//_____________________________________________________________________________
Процедура Инит_Сплиттеры()
	ориентВерт = 1;
	ориентГор = 2;
	
	//8 - IDC_SIZEWE;
	//9 - IDC_SIZENS;
	курсорСтандарт = 1;
	курсорВертСплиттер = 8;
	курсорГорСплиттер = 9;
	

	тзСплиттеры = СоздатьОбъект("ТаблицаЗначений");
	тзСплиттеры.НоваяКолонка("Ориентация", "Число");
	тзСплиттеры.НоваяКолонка("Идентификатор", "Строка");
	тзСплиттеры.НоваяКолонка("Атрибут");
	тзСплиттеры.НоваяКолонка("АтрибутыСлева");
	тзСплиттеры.НоваяКолонка("АтрибутыСправа");
	
	тзСплиттеры.НоваяКолонка("Ширина", "Число");
	тзСплиттеры.НоваяКолонка("Высота", "Число");
КонецПроцедуры

//_____________________________________________________________________________
Процедура Конструктор()
	привВерх = 1; привВерхКНизу = 2;
	привЛево = 4; привЛевоКПраво = 5;
	
	привНиз = 20; привНизКНизу = 21;
	привПраво = 30; привПравоКПраво = 31;
	
	МинШиринаАтрибута = 10;
	МинВысотаАтрибута = 10;
	МинРасстояниеОтКрая = 1;

	тзАтрибуты = СоздатьОбъект("ТаблицаЗначений");
	тзАтрибуты.НоваяКолонка("стрАтр");
	тзАтрибуты.НоваяКолонка("оАтр");
	тзАтрибуты.НоваяКолонка("Лево", "Число");
	тзАтрибуты.НоваяКолонка("Верх", "Число");
	тзАтрибуты.НоваяКолонка("Ширина", "Число");
	тзАтрибуты.НоваяКолонка("Высота", "Число");
	
	тзАтрибуты.НоваяКолонка("фКонтролироватьРазмеры", "Число");
	тзАтрибуты.НоваяКолонка("МинШирина", "Число");
	тзАтрибуты.НоваяКолонка("МинВысота", "Число");

	тзАтрибуты.НоваяКолонка("оАтрВерх");
	тзАтрибуты.НоваяКолонка("ТипВерх", "Число");
	тзАтрибуты.НоваяКолонка("СмещениеВерх", "Число");
	
	тзАтрибуты.НоваяКолонка("оАтрНиз");
	тзАтрибуты.НоваяКолонка("ТипНиз", "Число");
	тзАтрибуты.НоваяКолонка("СмещениеНиз", "Число");

	тзАтрибуты.НоваяКолонка("оАтрЛево");
	тзАтрибуты.НоваяКолонка("ТипЛево", "Число");
	тзАтрибуты.НоваяКолонка("СмещениеЛево", "Число");
	
	тзАтрибуты.НоваяКолонка("оАтрПраво");
	тзАтрибуты.НоваяКолонка("ТипПраво", "Число");
	тзАтрибуты.НоваяКолонка("СмещениеПраво", "Число");
	
	КоличествоИзмененийРазмера = 0;
	фОкноОткрыто = 0;
	фМожноПерепривязывать = 1;
	
	Инит_Сплиттеры();
КонецПроцедуры

///******************************** ADirks 25.06.2018 ************
Функция КонтекстФормы() Экспорт
	Возврат КонтекстФормы;
КонецФункции
///******************************** ADirks 25.06.2018 ************

Процедура УстановитьФорму(_Контекст) Экспорт
	Сам = Сам(Контекст);
	
	КонтекстФормы = _Контекст;
	
	Сам.ПолучитьБазовыйКласс("РасширениеФормы").УстановитьФорму(_Контекст.Форма);
	
	//Сам.ПолучитьБазовыйКласс("ТПерехватчик").Инит(_Контекст);
КонецПроцедуры

///******************************** ADirks 16.03.2012 ************
Процедура Инит(Конт, фСохранятьРазмеры = -1) Экспорт
	УстановитьФорму(Конт);
	
	фСохранятьРазмерыОкна = фСохранятьРазмеры;
КонецПроцедуры
///******************************** ADirks 16.03.2012 ************

//_____________________________________________________________________________
Процедура Отладка_Координаты() Экспорт
	Перем Лево, Верх, Ширина, Высота;
	
	Сообщить("========================================");
	тзАтрибуты.ВыбратьСтроки();
	Пока тзАтрибуты.ПолучитьСтроку() = 1 Цикл
		тзАтрибуты.оАтр.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
		Сообщить(тзАтрибуты.стрАтр+": "+Лево+", "+Верх+", "+Ширина+", "+Высота);
	КонецЦикла;
КонецПроцедуры

///******************************** ADirks 06.02.2008
Функция _ПолучитьАтрибут(ИмяАтр)
	Сам = Сам(Контекст);
	
	Если ИмяАтр = "ДеревоГруппФормыСпискаСправочника" Тогда
		фЕстьДерево = Сам.НайтиАтрибут(1, 8);
		Если фЕстьДерево=0 Тогда
			//#error Не найдено ДеревоГруппФормыСпискаСправочника
		КонецЕсли;
		оАтр = Сам.ТекущийАтрибут();
	Иначе
		оАтр = Сам.ПолучитьАтрибут(ИмяАтр);
	КонецЕсли;
	
	Возврат оАтр;
КонецФункции
///******************************** ADirks 06.02.2008

//_____________________________________________________________________________
Функция чТипПривязки(Знач ТипПривязки)
	Если ТипЗначения(ТипПривязки) = 1 Тогда
		Возврат ТипПривязки;
	КонецЕсли;
	
	ТипПривязки = Врег(ТипПривязки);
	
	//Лат. буквы - это как в классе Общие.Форма.Привязка. Для простоты перехода
	
	Если ТипПривязки = "Л" Тогда
		Возврат привЛево;
	ИначеЕсли ТипПривязки = "ЛЛ" Тогда
		Возврат привЛево;
	ИначеЕсли ТипПривязки = "ЛП" Тогда
		Возврат привЛевоКПраво;
	ИначеЕсли ТипПривязки = "L" Тогда //lat
		Возврат привЛевоКПраво;
	ИначеЕсли ТипПривязки = "П" Тогда
		Возврат привПраво;
	ИначеЕсли ТипПривязки = "ПЛ" Тогда
		Возврат привПраво;
	ИначеЕсли ТипПривязки = "ПП" Тогда
		Возврат привПравоКПраво;
	ИначеЕсли ТипПривязки = "W" Тогда //lat
		Возврат привПравоКПраво;
		
	ИначеЕсли ТипПривязки = "В" Тогда
		Возврат привВерх;
	ИначеЕсли ТипПривязки = "ВВ" Тогда
		Возврат привВерх;
	ИначеЕсли ТипПривязки = "ВН" Тогда
		Возврат привВерхКНизу;
	ИначеЕсли ТипПривязки = "T" Тогда //lat
		Возврат привВерхКНизу;
	ИначеЕсли ТипПривязки = "Н" Тогда
		Возврат привНиз;
	ИначеЕсли ТипПривязки = "НВ" Тогда
		Возврат привНиз;
	ИначеЕсли ТипПривязки = "НН" Тогда
		Возврат привНизКНизу;
	ИначеЕсли ТипПривязки = "H" Тогда //lat
		Возврат привНизКНизу;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

//_____________________________________________________________________________
Функция УстановитьПривязку(ТипПривязки, АтрПривязки)
	Сам = Сам(Контекст);
	
	ТипПривязки = чТипПривязки(ТипПривязки);
	
	Если ВРег(АтрПривязки) = "ФОРМА" Тогда
		оАтрПривязки = Сам.ПолучитьБазовыйКласс("РасширениеФормы");
	Иначе
		оАтрПривязки = _ПолучитьАтрибут(АтрПривязки);
	КонецЕсли;
	н = тзАтрибуты.НомерСтроки;
	СуффиксКолонок = "";
	
	Если ТипПривязки = привВерх Тогда
		СуффиксКолонок = "Верх";
	ИначеЕсли ТипПривязки = привВерхКНизу Тогда
		СуффиксКолонок = "Верх";

	ИначеЕсли ТипПривязки = привНиз Тогда
		СуффиксКолонок = "Низ";
	ИначеЕсли ТипПривязки = привНизКНизу Тогда
		СуффиксКолонок = "Низ";
	
	ИначеЕсли ТипПривязки = привЛево Тогда
		СуффиксКолонок = "Лево";
	ИначеЕсли ТипПривязки = привЛевоКПраво Тогда
		СуффиксКолонок = "Лево";
		
	ИначеЕсли ТипПривязки = привПраво Тогда
		СуффиксКолонок = "Право";
	ИначеЕсли ТипПривязки = привПравоКПраво Тогда
		СуффиксКолонок = "Право";
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
	тзАтрибуты.УстановитьЗначение(н, "оАтр"+СуффиксКолонок, оАтрПривязки);
	тзАтрибуты.УстановитьЗначение(н, "Тип"+СуффиксКолонок, ТипПривязки);

	Возврат 1;
КонецФункции

//_____________________________________________________________________________
Функция _Добавить(ИмяАтр, сзПараметры)
	Сам = Сам(Контекст);

	н = 0;
	Если тзАтрибуты.НайтиЗначение(ИмяАтр, н, "стрАтр") = 0 Тогда
		тзАтрибуты.НоваяСтрока();
		тзАтрибуты.стрАтр = ИмяАтр;
		тзАтрибуты.оАтр = _ПолучитьАтрибут(ИмяАтр);
		тзАтрибуты.фКонтролироватьРазмеры = 1;
		тзАтрибуты.МинШирина = МинШиринаАтрибута;
		тзАтрибуты.МинВысота = МинВысотаАтрибута;
		
	Иначе
		тзАтрибуты.ПолучитьСтрокуПоНомеру(н);
	КонецЕсли;
	
	нПривязка = 1;
	нПоследняяПривязка = сзПараметры.РазмерСписка()-1;
	Пока нПривязка <= нПоследняяПривязка Цикл
		ТипПривязки = сзПараметры.ПолучитьЗначение(нПривязка);
		АтрПривязки = сзПараметры.ПолучитьЗначение(нПривязка+1);
		//Сообщить(""+ТипПривязки+", "+АтрПривязки);
		Если ПустоеЗначение(АтрПривязки) = 1 Тогда
			АтрПривязки = "Форма";
		КонецЕсли;
		
		Если ПустоеЗначение(ТипПривязки) = 0 Тогда
			Если УстановитьПривязку(ТипПривязки, АтрПривязки) = 0 Тогда
				Сообщить("Тип привязки: <"+ТипПривязки+">", "!");
				//#error Неверный вид привязки
			КонецЕсли;
		КонецЕсли;

		нПривязка = нПривязка + 2;
	КонецЦикла;

	Возврат 1;
КонецФункции

//_____________________________________________________________________________
///<Синтаксис>Добавить(ИмяАтр, ...)</Синтаксис>
///<Описание>Привязывает атрибут формы к другим атрибутам. Параметры привязок должны передаваться после имени атрибута, и составлять пары (ТипПривязки, ИмяБазовогоАтрибута).
///Все привязки - это привязки края атрибута (верх, низ, лево, право) к краю другого атрибута. Вид привязки может задаваться как в виде строки, так и константой самого класса.
///Возможные виды привязок:
///  - ЛЛ (привЛево) - левый край к левому краю;
///  - ЛП (привЛевоКПраво) - левый край к правому;
///  - ПЛ (привПраво) - правый край к левому;
///  - ПП (привПравоКПраво) - правый край к правому;
///  - ВВ (привВерх) - верхний край к верхнему;
///  - ВН (привВерхКНизу) - верхний край к нижнему;
///  - НВ (привНиз) - нижний край к верхнему;
///  - НН (привНизКНизу) - нижний край к нижнему.
///В качестве базового атрибута (т.е. того, к которому осуществляется привязка) может использоваться любой атрибут формы, и сама форма.</Описание>
///<returns type = "Число">1 - атрибут добавлен в привязки, 0 - ошибка.</returns>
Функция Добавить(ИмяАтр) Экспорт
	Сам = Сам(Контекст);
	
	//В модальном режиме нифига хорошего не получится!
	Если Сам.ПолучитьФорму().МодальныйРежим() = 1 Тогда
		Возврат 0;
	КонецЕсли;

	сзПараметры = Сам.ПолучитьСписокПараметров("Добавить");
	
	Если Найти(ИмяАтр, ",") = 0 Тогда
		Возврат _Добавить(ИмяАтр, сзПараметры);
	КонецЕсли;
	
	сзАтр = СтрокуВСписок(ИмяАтр, ",", 1);
	Для н = 1 По сзАтр.РазмерСписка() Цикл
		Имя = сзАтр.ПолучитьЗначение(н);
		Если _Добавить(Имя, сзПараметры) <> 1 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 1;
КонецФункции

//_____________________________________________________________________________
Функция Привязка(ИмяАтр) Экспорт
	Сам = Сам(Контекст);
	
	//В модальном режиме нифига хорошего не получится!
	Если Сам.ПолучитьФорму().МодальныйРежим() = 1 Тогда
		Возврат 0;
	КонецЕсли;

	сзПараметры = Сам.ПолучитьСписокПараметров("Привязка");
	
	Возврат _Добавить(ИмяАтр, сзПараметры);
КонецФункции

//_____________________________________________________________________________
Процедура КонтролироватьРазмеры(ИмяАтр, флаг) Экспорт
	н = 0;
	Если тзАтрибуты.НайтиЗначение(ИмяАтр, н, "стрАтр") > 0 Тогда
		тзАтрибуты.ПолучитьСтрокуПоНомеру(н);
		тзАтрибуты.фКонтролироватьРазмеры = флаг;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Процедура МинимальныеРазмеры(ИмяАтр, МинШирина, МинВысота) Экспорт
	Перем Ширина, Высота;
	
	н = 0;
	Если тзАтрибуты.НайтиЗначение(ИмяАтр, н, "стрАтр") > 0 Тогда
		тзАтрибуты.ПолучитьСтрокуПоНомеру(н);
		
		тзАтрибуты.оАтр.ПолучитьКоординаты(,, Ширина, Высота);
		Если МинШирина < 0 Тогда
			МинШирина = Ширина;
		КонецЕсли;
		Если МинВысота < 0 Тогда
			МинВысота = Высота;
		КонецЕсли;
		
		тзАтрибуты.МинШирина = МинШирина;
		тзАтрибуты.МинВысота = МинВысота;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПолучитьКоординаты(оАтр, Лево, Верх, Ширина, Высота)
	Если ТипЗначенияСтр(оАтр) <> "АтрибутФормы" Тогда
		Лево = 0; Верх = 0; 
		Ширина = ШиринаФормы; Высота = ВысотаФормы;
	Иначе
		оАтр.ПолучитьКоординаты(Лево, Верх, Ширина, Высота)
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПолучитьКоординатыНов(оАтр, тзКоординаты, Лево, Верх, Ширина, Высота)
	Перем н;
	
	Если ТипЗначенияСтр(оАтр) <> "АтрибутФормы" Тогда
		Лево = 0; Верх = 0; 
		Ширина = ШиринаФормы; Высота = ВысотаФормы;
		Возврат;
	КонецЕсли;

	Если тзКоординаты.НайтиЗначение(оАтр.Идентификатор, н, "Идентификатор") = 0 Тогда
		оАтр.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
	Иначе
		тзКоординаты.ПолучитьСтрокуПоНомеру(н);
		Лево = тзКоординаты.Лево;
		Верх = тзКоординаты.Верх;
		Ширина = тзКоординаты.Ширина;
		Высота = тзКоординаты.Высота;
	КонецЕсли;
КонецПроцедуры

///******************************** ADirks 30.01.2008
Процедура ЗаполнитьСмещенияАтрВН()
	Перем Лево, Верх, Ширина, Высота;
	Перем базаЛево, базаВерх, базаШирина, базаВысота;

	оАтр = тзАтрибуты.оАтр;
	ПолучитьКоординаты(оАтр, Лево, Верх, Ширина, Высота);
	
	Если ПустоеЗначение(тзАтрибуты.оАтрВерх) = 0 Тогда
		ПолучитьКоординаты(тзАтрибуты.оАтрВерх, базаЛево, базаВерх, базаШирина, базаВысота);
		Если тзАтрибуты.ТипВерх = привВерх Тогда
			тзАтрибуты.СмещениеВерх = Верх - базаВерх;
		ИначеЕсли тзАтрибуты.ТипВерх = привВерхКНизу Тогда
			тзАтрибуты.СмещениеВерх = Верх - (базаВерх+базаВысота);
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(тзАтрибуты.оАтрНиз) = 0 Тогда
		ПолучитьКоординаты(тзАтрибуты.оАтрНиз, базаЛево, базаВерх, базаШирина, базаВысота);
		Если тзАтрибуты.ТипНиз = привНиз Тогда
			тзАтрибуты.СмещениеНиз = (Верх+Высота) - базаВерх;
		ИначеЕсли тзАтрибуты.ТипНиз = привНизКНизу Тогда
			тзАтрибуты.СмещениеНиз = (Верх+Высота) - (базаВерх+базаВысота);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 30.01.2008

///******************************** ADirks 30.01.2008
Процедура ЗаполнитьСмещенияАтрЛП()
	Перем Лево, Верх, Ширина, Высота;
	Перем базаЛево, базаВерх, базаШирина, базаВысота;

	оАтр = тзАтрибуты.оАтр;
	ПолучитьКоординаты(оАтр, Лево, Верх, Ширина, Высота);

		Если ПустоеЗначение(тзАтрибуты.оАтрЛево) = 0 Тогда
		ПолучитьКоординаты(тзАтрибуты.оАтрЛево, базаЛево, базаВерх, базаШирина, базаВысота);
		Если тзАтрибуты.ТипЛево = привЛево Тогда
			тзАтрибуты.СмещениеЛево = Лево - базаЛево;
		ИначеЕсли тзАтрибуты.ТипЛево = привЛевоКПраво Тогда
			тзАтрибуты.СмещениеЛево = Лево - (базаЛево+базаШирина);
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(тзАтрибуты.оАтрПраво) = 0 Тогда
		ПолучитьКоординаты(тзАтрибуты.оАтрПраво, базаЛево, базаВерх, базаШирина, базаВысота);
		Если тзАтрибуты.ТипПраво = привПраво Тогда
			тзАтрибуты.СмещениеПраво = (Лево+Ширина) - базаЛево;
		ИначеЕсли тзАтрибуты.ТипПраво = привПравоКПраво Тогда
			тзАтрибуты.СмещениеПраво = (Лево+Ширина) - (базаЛево+базаШирина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 30.01.2008

//_____________________________________________________________________________
Процедура ЗаполнитьСмещения()
	Перем Лево, Верх, Ширина, Высота;
	Перем базаЛево, базаВерх, базаШирина, базаВысота;
	
	Если фМожноПерепривязывать <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Сообщить("ЗаполнитьСмещения: "+ШиринаФормы+" х "+ВысотаФормы);
	тзАтрибуты.ВыбратьСтроки();
	Пока тзАтрибуты.ПолучитьСтроку() = 1 Цикл
		ЗаполнитьСмещенияАтрВН();
		ЗаполнитьСмещенияАтрЛП();
	КонецЦикла;
КонецПроцедуры

///******************************** ADirks 30.01.2008
Процедура ВыборочнаяПривязка(тзИзмененныеАтрибуты, ориент)
	тзИзмененныеАтрибуты.ВыбратьСтроки();
	Пока тзИзмененныеАтрибуты.ПолучитьСтроку() = 1 Цикл
		Идентификатор = тзИзмененныеАтрибуты.Идентификатор;
		н = 0;
		Если тзАтрибуты.НайтиЗначение(Идентификатор, н, "стрАтр") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ориент = ориентВерт Тогда
			ЗаполнитьСмещенияАтрЛП();
		Иначе
			ЗаполнитьСмещенияАтрВН();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
///******************************** ADirks 30.01.2008

//_____________________________________________________________________________
Функция тзКоординаты()
	тз = СоздатьОбъект("ТаблицаЗначений");
	тз.НоваяКолонка("Атр");
	тз.НоваяКолонка("Идентификатор", "Строка");
	тз.НоваяКолонка("Лево");
	тз.НоваяКолонка("Верх");
	тз.НоваяКолонка("Ширина");
	тз.НоваяКолонка("Высота");
	Возврат тз;
КонецФункции

//_____________________________________________________________________________
Процедура ЗаписатьКоординатыАтр(тзКоординаты, Атр, Лево, Верх, Ширина, Высота)
	Перем н;
	
	Если тзКоординаты.НайтиЗначение(Атр.Идентификатор, н, "Идентификатор") = 0 Тогда
		тзКоординаты.НоваяСтрока();
		тзКоординаты.Атр = Атр;
		тзКоординаты.Идентификатор = Атр.Идентификатор;
	Иначе
		тзКоординаты.ПолучитьСтрокуПоНомеру(н);
	КонецЕсли;
	
	тзКоординаты.Лево = Лево;
	тзКоординаты.Верх = Верх;
	тзКоординаты.Ширина = Ширина;
	тзКоординаты.Высота = Высота;
КонецПроцедуры

//_____________________________________________________________________________
Процедура УстановитьНовыеКоординаты(тзКоординаты)
	тзКоординаты.ВыбратьСтроки();
	Пока тзКоординаты.ПолучитьСтроку() = 1 Цикл
		тзКоординаты.Атр.УстановитьКоординаты(тзКоординаты.Лево, тзКоординаты.Верх, тзКоординаты.Ширина, тзКоординаты.Высота);
	КонецЦикла;
КонецПроцедуры

//_____________________________________________________________________________
Процедура Привязать() Экспорт
	ЗаполнитьСмещения();
КонецПроцедуры


//==============================================================================
//=========  Методы сплиттеров =================================================
//==============================================================================


///******************************** ADirks 15.01.2008
Функция сзАтрибутыИзСтроки(стрАтрибуты)
	Сам = Сам(Контекст);
	
	сз = СтрокуВСписок(стрАтрибуты);
	Для н = 1 По сз.РазмерСписка() Цикл
		ИмяАтр = сз.ПолучитьЗначение(н);
		сз.УстановитьЗначение(н, _ПолучитьАтрибут(ИмяАтр), ИмяАтр);
	КонецЦикла;
	
	Возврат сз;
КонецФункции
///******************************** ADirks 15.01.2008

///******************************** ADirks 15.01.2008
Функция Сплиттеры_ВычислитьШирину(оСплиттер, ШиринаСплиттера, АтрибутыСлева, АтрибутыСправа)
	Перем Лево, Ширина;
	
	МаксЛево = 0;
	МинПраво = 999999;
	
	Для н = 1 По АтрибутыСлева.РазмерСписка() Цикл
		оАтр = АтрибутыСлева.ПолучитьЗначение(н);
		оАтр.ПолучитьКоординаты(Лево,, Ширина);
		МаксЛево = Макс(МаксЛево, Лево+Ширина);
	КонецЦикла;
	
	Для н = 1 По АтрибутыСправа.РазмерСписка() Цикл
		оАтр = АтрибутыСправа.ПолучитьЗначение(н);
		оАтр.ПолучитьКоординаты(Лево,, Ширина);
		МинПраво = Мин(МинПраво, Лево);
	КонецЦикла;
	
	Если (МинПраво - МаксЛево - 1) <= 0 Тогда
		Лево = ПолучитьПустоеЗначение();
	Иначе
		Лево = МаксЛево + 1;
	КонецЕсли;
	Ширина = Макс(МинПраво - МаксЛево - 2, ШиринаСплиттера);
	
	оСплиттер.УстановитьКоординаты(Лево,, Ширина);

	Возврат Ширина;
КонецФункции
///******************************** ADirks 15.01.2008

///******************************** ADirks 15.01.2008
Функция Сплиттеры_ВычислитьВысоту(оСплиттер, ВысотаСплиттера, АтрибутыСверху, АтрибутыСнизу)
	Перем Верх, Высота;
	
	МаксВерх = 0;
	МинНиз = 999999;
	
	Для н = 1 По АтрибутыСверху.РазмерСписка() Цикл
		оАтр = АтрибутыСверху.ПолучитьЗначение(н);
		оАтр.ПолучитьКоординаты(, Верх,, Высота);
		МаксВерх = Макс(МаксВерх, Верх+Высота);
	КонецЦикла;
	
	Для н = 1 По АтрибутыСнизу.РазмерСписка() Цикл
		оАтр = АтрибутыСнизу.ПолучитьЗначение(н);
		оАтр.ПолучитьКоординаты(, Верх,, Высота);
		МинНиз = Мин(МинНиз, Верх);
	КонецЦикла;
	
	Если (МинНиз-МаксВерх-1) <= 0 Тогда
		Верх = ПолучитьПустоеЗначение();
	Иначе
		Верх = МаксВерх + 1;
	КонецЕсли;
	Высота = Макс(МинНиз-МаксВерх-2, ВысотаСплиттера);
	
	//Сообщить("Верх = "+Верх+", Высота = "+Высота);
	оСплиттер.УстановитьКоординаты(, Верх,, Высота);

	Возврат Высота;
КонецФункции
///******************************** ADirks 15.01.2008

//_____________________________________________________________________________
Процедура Сплиттеры_ПослеОткрытия()
	Сам = Сам(Контекст);
	
	тзСплиттеры.ВыбратьСтроки();
	Пока тзСплиттеры.ПолучитьСтроку() = 1 Цикл
		оСплиттер = _ПолучитьАтрибут(тзСплиттеры.Идентификатор);
		тзСплиттеры.Атрибут = оСплиттер;

		Если тзСплиттеры.Ориентация = ориентВерт Тогда
			тзСплиттеры.АтрибутыСлева = сзАтрибутыИзСтроки(тзСплиттеры.АтрибутыСлева);
			тзСплиттеры.АтрибутыСправа = сзАтрибутыИзСтроки(тзСплиттеры.АтрибутыСправа);
		
			Сплиттеры_ВычислитьШирину(оСплиттер, тзСплиттеры.Ширина, тзСплиттеры.АтрибутыСлева, тзСплиттеры.АтрибутыСправа);
		
			оСплиттер.УстановитьКурсор(курсорВертСплиттер);

		ИначеЕсли тзСплиттеры.Ориентация = ориентГор Тогда
			тзСплиттеры.АтрибутыСлева = сзАтрибутыИзСтроки(тзСплиттеры.АтрибутыСлева);
			тзСплиттеры.АтрибутыСправа = сзАтрибутыИзСтроки(тзСплиттеры.АтрибутыСправа);
		
			Сплиттеры_ВычислитьВысоту(оСплиттер, тзСплиттеры.Высота, тзСплиттеры.АтрибутыСлева, тзСплиттеры.АтрибутыСправа);
		
			оСплиттер.УстановитьКурсор(курсорГорСплиттер);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


///******************************** ADirks 15.01.2008
Процедура ДобавитьВертСплиттер(Идентификатор, стрЭлементыСлева, стрЭлементыСправа, Ширина) Экспорт
	Сам = Сам(Контекст);
	
	тзСплиттеры.НоваяСтрока();
	тзСплиттеры.Ориентация = ориентВерт;
	тзСплиттеры.Идентификатор = Идентификатор;
	тзСплиттеры.АтрибутыСлева = стрЭлементыСлева;
	тзСплиттеры.АтрибутыСправа = стрЭлементыСправа;
	тзСплиттеры.Ширина = Ширина;
	
	КонтролироватьРазмеры(Идентификатор, 0);
КонецПроцедуры
///******************************** ADirks 15.01.2008

///******************************** ADirks 15.01.2008
Процедура ДобавитьГорСплиттер(Идентификатор, стрАтрибутыСверху, стрАтрибутыСнизу, Высота) Экспорт
	Сам = Сам(Контекст);
	
	тзСплиттеры.НоваяСтрока();
	тзСплиттеры.Ориентация = ориентГор;
	тзСплиттеры.Идентификатор = Идентификатор;
	тзСплиттеры.АтрибутыСлева = стрАтрибутыСверху;
	тзСплиттеры.АтрибутыСправа = стрАтрибутыСнизу;
	тзСплиттеры.Высота = Высота;
	
	КонтролироватьРазмеры(Идентификатор, 0);
КонецПроцедуры
///******************************** ADirks 15.01.2008

///******************************** ADirks 07.02.2008
Функция СдвинутьВертСплиттер(Смещение)
	Перем Лево, Ширина;

	Сам = Сам(Контекст);

	//Двигаем сплиттер
	оАтрСплиттер = тзСплиттеры.Атрибут;
	оАтрСплиттер.ПолучитьКоординаты(Лево);
	Лево = Лево + Смещение;
	
	Если Лево < МинРасстояниеОтКрая Тогда
		фТрекинг = 0;
		Возврат 0;
	ИначеЕсли (Лево+Ширина) > (Сам.Ширина-МинРасстояниеОтКрая) Тогда
		фТрекинг = 0;
		Возврат 0;
	КонецЕсли;
	
	тзКоординаты = тзКоординаты();
	фОшибокНет = 1;
	
	ЗаписатьКоординатыАтр(тзКоординаты, оАтрСплиттер, Лево,,,);
	
	//Атрибуты слева
	сзАтрСлева = тзСплиттеры.АтрибутыСлева;
	Для н = 1 По сзАтрСлева.РазмерСписка() Цикл
		оАтр = сзАтрСлева.ПолучитьЗначение(н);
		оАтр.ПолучитьКоординаты(,, Ширина);
		
		Ширина = Ширина + Смещение;
		Если Ширина < МинШиринаАтрибута Тогда
			фОшибокНет = 0;
			Прервать;
		КонецЕсли;
		ЗаписатьКоординатыАтр(тзКоординаты, оАтр,,, Ширина,);
	КонецЦикла;

	//Атрибуты справа
	Если фОшибокНет = 1 Тогда
		сзАтрСправа = тзСплиттеры.АтрибутыСправа;
		Для н = 1 По сзАтрСправа.РазмерСписка() Цикл
			оАтр = сзАтрСправа.ПолучитьЗначение(н);
			оАтр.ПолучитьКоординаты(Лево,, Ширина);
	
			Лево = Лево + Смещение;
			Ширина = Ширина - Смещение;
			Если Ширина < МинШиринаАтрибута Тогда
				фОшибокНет = 0;
				Прервать;
			КонецЕсли;
			ЗаписатьКоординатыАтр(тзКоординаты, оАтр, Лево,, Ширина,);
		КонецЦикла;
	КонецЕсли;
	
	//Атрибуты, привязанные непостредственно к сплиттеру
	тзАтрибуты.ВыбратьСтроки();
	Пока тзАтрибуты.ПолучитьСтроку() = 1 Цикл
		оАтр = тзАтрибуты.оАтр;
		оАтр.ПолучитьКоординаты(Лево, , Ширина);
		фИзменено = 0;
		
		Если ТипЗначенияСтр(тзАтрибуты.оАтрЛево) = "АтрибутФормы" Тогда
			Если тзАтрибуты.оАтрЛево.Идентификатор = оАтрСплиттер.Идентификатор Тогда
				Лево = Лево + Смещение;
				фИзменено = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗначенияСтр(тзАтрибуты.оАтрПраво) = "АтрибутФормы" Тогда
			Если тзАтрибуты.оАтрПраво.Идентификатор = оАтрСплиттер.Идентификатор Тогда
				Ширина = Ширина - Смещение;
				фИзменено = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если фИзменено <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если тзАтрибуты.фКонтролироватьРазмеры = 1 Тогда
			Если Ширина < тзАтрибуты.МинШирина Тогда
				Ширина = тзАтрибуты.МинШирина;
				фОшибокНет = 0;
				Прервать;
			КонецЕсли;
		КонецЕсли;

		Если (Лево < МинРасстояниеОтКрая) или ((Лево+Ширина) < МинРасстояниеОтКрая) Тогда
			фОшибокНет = 0;
			Прервать;
		КонецЕсли;

		ЗаписатьКоординатыАтр(тзКоординаты, оАтр, Лево, , Ширина, );
	КонецЦикла;
	
	
	Если фОшибокНет = 1 Тогда
		УстановитьНовыеКоординаты(тзКоординаты);
		ЗаполнитьСмещения();
		
		//Сам.ПриИзмененииРазмераОкна(1, , );
		//ВыборочнаяПривязка(тзКоординаты, ориентВерт);
	КонецЕсли;
	
	Возврат фОшибокНет;
КонецФункции
///******************************** ADirks 07.02.2008

///******************************** ADirks 15.01.2008
Процедура ТрекингВертСплиттер(ЛевоМ)
	Смещение = ЛевоМ - Мышь_Лево;
	
	Если СдвинутьВертСплиттер(Смещение) <> 1 Тогда
		фТрекинг = 0;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 15.01.2008

///******************************** ADirks 07.02.2008
Функция СдвинутьГорСплиттер(Смещение)
	Перем Верх, Высота;

	Сам = Сам(Контекст);
	
	//Двигаем сплиттер
	оАтрСплиттер = тзСплиттеры.Атрибут;
	оАтрСплиттер.ПолучитьКоординаты(, Верх);
	Верх = Верх + Смещение;

	Если Верх < МинРасстояниеОтКрая Тогда
		Возврат 0;
	ИначеЕсли (Верх+Высота) > (Сам.Высота-МинРасстояниеОтКрая) Тогда
		Возврат 0;
	КонецЕсли;

	тзКоординаты = тзКоординаты();
	фОшибокНет = 1;

	ЗаписатьКоординатыАтр(тзКоординаты, оАтрСплиттер,, Верх,,);
	
	//Атрибуты сверху
	сзАтрСлева = тзСплиттеры.АтрибутыСлева;
	Для н = 1 По сзАтрСлева.РазмерСписка() Цикл
		оАтр = сзАтрСлева.ПолучитьЗначение(н);
		оАтр.ПолучитьКоординаты(, Верх,, Высота);
		
		Высота = Высота + Смещение;
		Если Высота < МинВысотаАтрибута Тогда
			фОшибокНет = 0;
			Прервать;
		КонецЕсли;
		
		ЗаписатьКоординатыАтр(тзКоординаты, оАтр,, Верх,, Высота);
	КонецЦикла;

	//Атрибуты снизу
	Если фОшибокНет = 1 Тогда
		сзАтрСправа = тзСплиттеры.АтрибутыСправа;
		Для н = 1 По сзАтрСправа.РазмерСписка() Цикл
			оАтр = сзАтрСправа.ПолучитьЗначение(н);
			оАтр.ПолучитьКоординаты(, Верх,, Высота);
	
			Верх = Верх + Смещение;
			Высота = Высота - Смещение;
			
			Если Высота < МинВысотаАтрибута Тогда
				фОшибокНет = 0;
				Прервать;
			КонецЕсли;
			
			ЗаписатьКоординатыАтр(тзКоординаты, оАтр,, Верх,, Высота);
		КонецЦикла;
	КонецЕсли;
	

	//Атрибуты, привязанные непостредственно к сплиттеру
	тзАтрибуты.ВыбратьСтроки();
	Пока тзАтрибуты.ПолучитьСтроку() = 1 Цикл
		оАтр = тзАтрибуты.оАтр;
		оАтр.ПолучитьКоординаты(, Верх, , Высота);
		
		фИзменено = 0;
		
		Если ТипЗначенияСтр(тзАтрибуты.оАтрВерх) = "АтрибутФормы" Тогда
			Если тзАтрибуты.оАтрВерх.Идентификатор = оАтрСплиттер.Идентификатор Тогда
				Верх = Верх + Смещение;
				фИзменено = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗначенияСтр(тзАтрибуты.оАтрНиз) = "АтрибутФормы" Тогда
			Если тзАтрибуты.оАтрНиз.Идентификатор = оАтрСплиттер.Идентификатор Тогда
				Высота = Высота - Смещение;
				фИзменено = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если фИзменено <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если тзАтрибуты.фКонтролироватьРазмеры = 1 Тогда
			Если Высота < тзАтрибуты.МинВысота Тогда
				Высота = тзАтрибуты.МинВысота;
				фОшибокНет = 0;
				Прервать;
			КонецЕсли;
		КонецЕсли;

		Если (Верх < МинРасстояниеОтКрая) или ((Верх+Высота) < МинРасстояниеОтКрая) Тогда
			фОшибокНет = 0;
			Прервать;
		КонецЕсли;

		ЗаписатьКоординатыАтр(тзКоординаты, оАтр,, Верх,, Высота);
	КонецЦикла;

	Если фОшибокНет = 1 Тогда
		УстановитьНовыеКоординаты(тзКоординаты);
		//ВыборочнаяПривязка(тзКоординаты, ориентГор);
		ЗаполнитьСмещения();
	КонецЕсли;
	
	Возврат фОшибокНет;
КонецФункции
///******************************** ADirks 07.02.2008

///******************************** ADirks 15.01.2008
Процедура ТрекингГорСплиттер(ВерхМ)
	СмещениеВерт = ВерхМ - Мышь_Верх;
	Если СдвинутьГорСплиттер(СмещениеВерт) <> 1 Тогда
		фТрекинг = 0;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 15.01.2008


///********************************Олег (RiK тел. 213-15-29) 18.01.2008
Процедура ПриИзмененииВидимости() Экспорт
	тзСплиттеры.ВыбратьСтроки();
	Пока тзСплиттеры.ПолучитьСтроку() = 1 Цикл
		оСплиттер = тзСплиттеры.Атрибут;
		Если оСплиттер.Видимость = 1 Тогда
			Если тзСплиттеры.Ориентация = ориентГор Тогда
				оСплиттер.УстановитьКурсор(курсорГорСплиттер);
			Иначе
				оСплиттер.УстановитьКурсор(курсорВертСплиттер);
			КонецЕсли;
		Иначе
			оСплиттер.УстановитьКурсор(курсорСтандарт);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
///********************************Олег (RiK тел. 213-15-29) 18.01.2008


///******************************** ADirks 07.02.2008
Функция СостояниеСплиттеров() Экспорт
	Перем ВысотаЛ, ШиринаЛ, ВысотаП, ШиринаП;
	
	ит = СоздатьОбъект("ИндексированнаяТаблица");
	ит.НоваяКолонка("Идентификатор");
	ит.НоваяКолонка("АтрСлева");
	ит.НоваяКолонка("АтрСправа");
	ит.НоваяКолонка("Соотношение");
	
	тзСплиттеры.ВыбратьСтроки();
	Пока тзСплиттеры.ПолучитьСтроку() = 1 Цикл
		оАтрСлева = тзСплиттеры.АтрибутыСлева.ПолучитьЗначение(1);
		оАтрСлева.ПолучитьКоординаты(,, ШиринаЛ, ВысотаЛ);
		оАтрСправа = тзСплиттеры.АтрибутыСправа.ПолучитьЗначение(1);
		оАтрСправа.ПолучитьКоординаты(,, ШиринаП, ВысотаП);
		
		ит.НоваяСтрока();
		ит.Идентификатор = тзСплиттеры.Идентификатор;
		ит.АтрСлева = оАтрСлева.Идентификатор;
		ит.АтрСправа = оАтрСправа.Идентификатор;
		
		Если тзСплиттеры.Ориентация = ориентВерт Тогда
			ит.Соотношение = ШиринаЛ / (ШиринаЛ + ШиринаП);
		Иначе
			ит.Соотношение = ВысотаЛ / (ВысотаЛ + ВысотаП);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ит;
КонецФункции
///******************************** ADirks 07.02.2008

///******************************** ADirks 07.02.2008
Функция _АтрИзСписка(сз, Имя)
	оАтр = сз.Получить();
КонецФункции
///******************************** ADirks 07.02.2008

///******************************** ADirks 07.02.2008
Процедура ВосстановитьСостояниеСплиттеров(Настройки) Экспорт
	Перем ВысотаЛ, ШиринаЛ, ВысотаП, ШиринаП;

	Если ТипЗначенияСтр(Настройки) = "ИндексированнаяТаблица" Тогда
		итНастройки = Настройки;
	Иначе
		Если ПустаяСтрока(Настройки) = 0 Тогда
			итНастройки = СоздатьОбъект("ИндексированнаяТаблица");
			итНастройки.ИзСтроки(Настройки);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗначенияСтр(итНастройки) <> "ИндексированнаяТаблица" Тогда
		Возврат;
	КонецЕсли;

	Сам = Сам(Контекст);
	
	Если итНастройки.КоличествоКолонок() <> 4 Тогда
		Возврат;
	КонецЕсли;
	
	итНастройки.ВыбратьСтроки();
	Пока итНастройки.ПолучитьСтроку() = 1 Цикл
		Если НайтиСтрокуТЗ(тзСплиттеры, "Идентификатор", итНастройки.Идентификатор) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		оАтрЛ = тзСплиттеры.АтрибутыСлева.Получить(итНастройки.АтрСлева);
		Если ПустоеЗначение(оАтрЛ) = 1 Тогда Продолжить; КонецЕсли;
		оАтрП = тзСплиттеры.АтрибутыСправа.Получить(итНастройки.АтрСправа);
		Если ПустоеЗначение(оАтрП) = 1 Тогда Продолжить; КонецЕсли;

		оАтрЛ.ПолучитьКоординаты(,, ШиринаЛ, ВысотаЛ);
		оАтрП.ПолучитьКоординаты(,, ШиринаП, ВысотаП);
		
		Если тзСплиттеры.Ориентация = ориентВерт Тогда
			НоваяШиринаЛ = Окр((ШиринаЛ + ШиринаП) * итНастройки.Соотношение, 0);
			СдвинутьВертСплиттер(НоваяШиринаЛ - ШиринаЛ);
		Иначе
			НоваяВысотаЛ = Окр((ВысотаЛ + ВысотаП) * итНастройки.Соотношение, 0);
			СдвинутьГорСплиттер(НоваяВысотаЛ - ВысотаЛ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
///******************************** ADirks 07.02.2008

//_____________________________________________________________________________
Функция _ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	Перем оАтр; //:АтрибутФормы
	Перем Лево, Верх, Ширина, Высота;
	Перем базаЛево, базаВерх, базаШирина, базаВысота;
	
	Сам = Сам(Контекст);
	
	Если фОкноОткрыто <> 1 Тогда //Пока окно не открыто просто запоминаем высоту и ширину
		Если КоличествоИзмененийРазмера = 0 Тогда
			ШиринаФормы = Сам.Ширина;
			ВысотаФормы = Сам.Высота;
		КонецЕсли;
		КоличествоИзмененийРазмера = КоличествоИзмененийРазмера + 1;
		Возврат 1;
	КонецЕсли;

	ШиринаФормы = Сам.Ширина;
	ВысотаФормы = Сам.Высота;
	
	тзКоординаты = тзКоординаты();
	фОшибокНет = 1;
	
	тзАтрибуты.ВыбратьСтроки();
	Пока тзАтрибуты.ПолучитьСтроку() = 1 Цикл
		оАтр = тзАтрибуты.оАтр;
		оАтр.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
		
		//Вертикаль
		Если ПустоеЗначение(тзАтрибуты.оАтрВерх) = 0 Тогда
			ПолучитьКоординатыНов(тзАтрибуты.оАтрВерх, тзКоординаты, базаЛево, базаВерх, базаШирина, базаВысота);
			Если тзАтрибуты.ТипВерх = привВерхКНизу Тогда
				Верх = (базаВерх+базаВысота) + тзАтрибуты.СмещениеВерх;
			Иначе
				Верх = базаВерх + тзАтрибуты.СмещениеВерх;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(тзАтрибуты.оАтрНиз) = 0 Тогда
			ПолучитьКоординатыНов(тзАтрибуты.оАтрНиз, тзКоординаты, базаЛево, базаВерх, базаШирина, базаВысота);
			Если тзАтрибуты.ТипНиз = привНизКНизу Тогда
				Низ = (базаВерх+базаВысота) + тзАтрибуты.СмещениеНиз;
			Иначе
				Низ = базаВерх + тзАтрибуты.СмещениеНиз;
			КонецЕсли;
			Высота = Низ - Верх;
		КонецЕсли;

		//Горизонталь
		Если ПустоеЗначение(тзАтрибуты.оАтрЛево) = 0 Тогда
			ПолучитьКоординатыНов(тзАтрибуты.оАтрЛево, тзКоординаты, базаЛево, базаВерх, базаШирина, базаВысота);
			Если тзАтрибуты.ТипЛево = привЛевоКПраво Тогда
				Лево = (базаЛево+базаШирина) + тзАтрибуты.СмещениеЛево;
			Иначе
				Лево = базаЛево + тзАтрибуты.СмещениеЛево;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(тзАтрибуты.оАтрПраво) = 0 Тогда
			ПолучитьКоординатыНов(тзАтрибуты.оАтрПраво, тзКоординаты, базаЛево, базаВерх, базаШирина, базаВысота);
			Если тзАтрибуты.ТипПраво = привПравоКПраво Тогда
				Право = (базаЛево+базаШирина) + тзАтрибуты.СмещениеПраво;
			Иначе
				Право = базаЛево + тзАтрибуты.СмещениеПраво;
			КонецЕсли;
			Ширина = Право - Лево;
		КонецЕсли;
		
		Если тзАтрибуты.фКонтролироватьРазмеры = 1 Тогда
			Если Ширина < тзАтрибуты.МинШирина Тогда
				Ширина = тзАтрибуты.МинШирина;
				фОшибокНет = 0;
				Прервать;
			КонецЕсли;
			Если Высота < тзАтрибуты.МинВысота Тогда
				Высота = тзАтрибуты.МинВысота;
				фОшибокНет = 0;
				Прервать;
			КонецЕсли;
		КонецЕсли;

		Если (Лево < МинРасстояниеОтКрая) или ((Лево+Ширина) < МинРасстояниеОтКрая) Тогда
			фОшибокНет = 0;
			Прервать;
		КонецЕсли;
		Если (Верх < МинРасстояниеОтКрая) или ((Верх+Высота) < МинРасстояниеОтКрая) Тогда
			фОшибокНет = 0;
			Прервать;
		КонецЕсли;

		ЗаписатьКоординатыАтр(тзКоординаты, оАтр, Лево, Верх, Ширина, Высота);
	КонецЦикла;
	
	Если фОшибокНет = 1 Тогда
		УстановитьНовыеКоординаты(тзКоординаты);
		//Сам.Обновить();
	КонецЕсли;
	
	фМожноПерепривязывать = фОшибокНет;
	
	Возврат 1 - фОшибокНет;
КонецФункции

Функция _ПриНажатииЛевойКнопки(Сост, ЛевоМ, ВерхМ, ФСО) Экспорт
	Перем Лево, Верх, Ширина, Высота;
	
	фТрекинг = 0;
	
	тзСплиттеры.ВыбратьСтроки();
	Пока тзСплиттеры.ПолучитьСтроку() = 1 Цикл
		оАтр = тзСплиттеры.Атрибут;
		
		Если оАтр.Видимость = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		оАтр.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
		
		Если ЛевоМ < Лево Тогда
			Продолжить;
		ИначеЕсли ЛевоМ > (Лево+Ширина) Тогда
			Продолжить;
		ИначеЕсли ВерхМ < Верх Тогда
			Продолжить;
		ИначеЕсли ВерхМ > (Верх+Высота) Тогда
			Продолжить;
		КонецЕсли;
		
		фТрекинг = 1;
		Мышь_Лево = ЛевоМ;
		Мышь_Верх = ВерхМ;
		
		Прервать;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

//_____________________________________________________________________________
Функция _ПриДвиженииМыши(Сост, ЛевоМ, ВерхМ, ФСО) Экспорт
	Если Сост=0 Тогда
		фТрекинг = 0;
	ИначеЕсли фТрекинг = 1 Тогда
		Если тзСплиттеры.Ориентация = ориентВерт Тогда
			ТрекингВертСплиттер(ЛевоМ);
		Иначе
			ТрекингГорСплиттер(ВерхМ);
		КонецЕсли;
		
		Мышь_Лево = ЛевоМ;
		Мышь_Верх = ВерхМ;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

//_____________________________________________________________________________
Функция _ПриОтжатииЛевойКнопки(Сост, ЛевоМ, ВерхМ, ФСО) Экспорт
	Если фТрекинг = 1 Тогда
		Привязать();
	КонецЕсли;
	
	фТрекинг = 0;
	
	Возврат 0;
КонецФункции

//_____________________________________________________________________________
Функция _ПослеОткрытия() Экспорт
	фОкноОткрыто = 1;

	ЗаполнитьСмещения();
	Сплиттеры_ПослеОткрытия();
	
	Если фСохранятьРазмерыОкна = -1 Тогда
		Сам = Сам(Контекст);
		Префикс = Сам.ПолныйТипОбъекта();
		//Сообщить("П:"+Префикс);
		Если Лев(Префикс, 10) = "Обработка." Тогда
			фСохранятьРазмерыОкна = 1;
		ИначеЕсли Лев(Префикс, 6) = "Отчет." Тогда
			фСохранятьРазмерыОкна = 1;
		ИначеЕсли Префикс = "ВнешнийОтчет" Тогда
			фСохранятьРазмерыОкна = 1;
		Иначе
			фСохранятьРазмерыОкна = 0;
		КонецЕсли;
	КонецЕсли;

	//Сообщить(""+фСохранятьРазмерыОкна+", "+КоличествоИзмененийРазмера);
	Если КоличествоИзмененийРазмера <= 2 Тогда //почему 2? а хер его знает... 
		Если фСохранятьРазмерыОкна = 1 Тогда
			Сам = Сам(Контекст);
			Префикс = Сам.ПолныйТипОбъекта();
			Если Префикс = "ВнешнийОтчет" Тогда
				Сам.КонтекстФормы().РасположениеФайла(, Префикс);
			КонецЕсли;
			
			Ширина = ВосстановитьЗначение(Префикс+"_Ширина");
			Если ТипЗначения(Ширина) = 1 Тогда
				Сам.Лево = ВосстановитьЗначение(Префикс+"_Лево");
				Сам.Верх = ВосстановитьЗначение(Префикс+"_Верх");

				Сам.Ширина = Ширина;
				Сам.Высота = ВосстановитьЗначение(Префикс+"_Высота");
				Сам._ПриИзмененииРазмераОкна(0, Сам.Ширина, Сам.Высота);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если КоличествоИзмененийРазмера > 1 Тогда //максимизация сразу после открытия
		_ПриИзмененииРазмераОкна(0, 0, 0);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция _ПриЗакрытии() Экспорт
	Сам = Сам(Контекст);
	Если (фСохранятьРазмерыОкна = 1) И (Сам.Максимизирована <> 1) Тогда
		Префикс = Сам.ПолныйТипОбъекта();
		Если Префикс = "ВнешнийОтчет" Тогда
			Сам.КонтекстФормы().РасположениеФайла(, Префикс);
		КонецЕсли;
		СохранитьЗначение(Префикс+"_Лево", Сам.Лево);
		СохранитьЗначение(Префикс+"_Верх", Сам.Верх);
		СохранитьЗначение(Префикс+"_Ширина", Сам.Ширина);
		СохранитьЗначение(Префикс+"_Высота", Сам.Высота);
	КонецЕсли;
	
	Возврат 1;
КонецФункции


//_____________________________________________________________________________
Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	_ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры

Процедура ПриНажатииЛевойКнопки(Сост, ЛевоМ, ВерхМ, ФСО) Экспорт
	_ПриНажатииЛевойКнопки(Сост, ЛевоМ, ВерхМ, ФСО);
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПриДвиженииМыши(Сост, ЛевоМ, ВерхМ, ФСО) Экспорт
	_ПриДвиженииМыши(Сост, ЛевоМ, ВерхМ, ФСО);
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПриОтжатииЛевойКнопки(Сост, ЛевоМ, ВерхМ, ФСО) Экспорт
	_ПриОтжатииЛевойКнопки(Сост, ЛевоМ, ВерхМ, ФСО);
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПослеОткрытия() Экспорт
	_ПослеОткрытия();
КонецПроцедуры


///******************************** ADirks 20.08.2013 ************
Процедура ОбновитьКоординаты() Экспорт
	ЗаполнитьСмещения();
КонецПроцедуры
///******************************** ADirks 20.08.2013 ************

