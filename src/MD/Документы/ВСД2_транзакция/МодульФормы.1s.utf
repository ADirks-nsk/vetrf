 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НомерТекущейФормы;
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем ГМ;
Перем ИмяПеременной;

Перем ПараПараметров; // Для отправки из формы
 
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции


Процедура ПоКнопкеПодбор()
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Отправитель_ХозСубъект,			"Отправитель_ХозСубъект");
	Параметры.ДобавитьЗначение(Отправитель_Площадка,			"Отправитель_Площадка");
	Параметры.ДобавитьЗначение(ДокОснование,					"ДокОснование");
	Параметры.ДобавитьЗначение(Текущийдокумент(),               "ТекущийДокумент");
	Параметры.ДобавитьЗначение("Подбор Партий в документ " + Текущийдокумент() + " № " + НомерДок, "Заголовок");
	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
   	ОткрытьФорму("Отчет", Параметры, КаталогОбработки+"Меркурий_ПодборПартий.ert");
КонецПроцедуры


//Процедура ПриВыбореВСЭ()
//	cargoExpertized = СзВСЭ.ПолучитьЗначение(СзВСЭ.ТекущаяСтрока());	
//КонецПроцедуры
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
    Если ЭлементДиалога = "Партия" Тогда
        парам = создатьОбъект("СписокЗначений");
        Парам.Установить("ВСД_Продукция_Элемент",Продукция_Элемент);
        Парам.Установить("Площадка",Отправитель_Площадка);
        ОткрытьФорму("Справочник.ВСД_Партия", Парам);
        Флаг = 0;
    КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииНоменклатуры()
	Продукция_Элемент = Номенклатура.ВСД_Продукция_Элемент;
	Партия = ГМ.НайтиПервуюПартию(Продукция_Элемент,Отправитель_Площадка);
	Если ПустоеЗначение(Партия) = 1 Тогда
		Продукция = Продукция_Элемент.Продукция;
		ВидПродукции = Продукция_Элемент.ВидПродукции;
		ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
	Иначе
		Продукция = Партия.Продукция;
		ВидПродукции = Партия.ВидПродукции;
		ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	КонецЕсли;
	ТермическоеСостояние = Мин(Продукция_Элемент.ТермическиеУсловияПеревозки,ТермическоеСостояние); //заморозка в приоритете
	НаименованиеПродукции = Продукция_Элемент.Наименование;
КонецПроцедуры

Процедура ПриИзмененииПродукцияЭлемент()
	Партия = ГМ.НайтиПервуюПартию(Продукция_Элемент,Отправитель_Площадка);
	Если ПустоеЗначение(Партия) = 1 Тогда
		Продукция = Продукция_Элемент.Продукция;
		ВидПродукции = Продукция_Элемент.ВидПродукции;
		ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
	Иначе
		Продукция = Партия.Продукция;
		ВидПродукции = Партия.ВидПродукции;
		ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	КонецЕсли;
	ТермическоеСостояние = Мин(Продукция_Элемент.ТермическиеУсловияПеревозки,ТермическоеСостояние); //заморозка в приоритете
	НаименованиеПродукции = Продукция_Элемент.Наименование;
КонецПроцедуры

Процедура ПриИзмененииПартии()
	Если ПустоеЗначение(Партия) = 0 Тогда
		Продукция_Элемент = Партия.Продукция_Элемент;
		Продукция = Партия.Продукция;
		ВидПродукции = Партия.ВидПродукции;
		ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
		ТермическоеСостояние = Мин(Продукция_Элемент.ТермическиеУсловияПеревозки,ТермическоеСостояние); //заморозка в приоритете
		НаименованиеПродукции = Продукция_Элемент.Наименование;
	КонецЕсли;
КонецПроцедуры



Процедура Регионализация()
	УсловияПеревозки="";	
	// Глобавльный модуль Ветис.2.0
	ГМ2 = СоздатьОбъект("Меркурий_ГлобальныйМодуль2");
	ГМ2.Инициализация(ГМ);
	
	Рез = ГМ2.ПроверитьВозможностьПеремещения( ТекущийДокумент() );
	Если ТипЗначенияСтр(Рез) = "ТаблицаЗначений" Тогда 
		УсловияПеревозки = ЗначениеВСтроку(Рез);
		//Сообщить("Получено "+Рез.КоличествоСтрок()+" условий");
		Если Рез.КоличествоСтрок() = 0 Тогда
			УсловияПеревозки = "";
			Сообщить("Перевозка разрешена без условий");
		КонецЕсли;
	Иначе
		Сообщить("Перевозка разрешена без условий");
	КонецЕсли;
КонецПроцедуры 

Процедура ПоказатьУсловияПеревозки()
	ТзУсловияПеревозки = ЗначениеИзСтроки(УсловияПеревозки);
	Если ТипЗначенияСтр(ТзУсловияПеревозки) = "ТаблицаЗначений" Тогда
		стр = "";
		ТзУсловияПеревозки.ВыбратьСтроку(стр,"Условия Перевозки");
	КонецЕсли;
КонецПроцедуры


Процедура ПриВыбореФирмы()
	попытка
		ГМ.Инициализация(Контекст);
		//ГМ.ЗагрузитьПараметры(Фирма); 
		Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
		Экспертиза = ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность = ГМ.СписокКонстант.Получить("ВСД_Местность");
		Особыеотметки = ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	Исключение
		
	КонецПопытки
	
КонецПроцедуры


Процедура ДоступностьЭлементов()
	Если Проведен()=1 Тогда 
		Форма.ТолькоПросмотр(1); 
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОтправить.Доступность(0);	
	КонецЕсли;
	//СзВСЭ.ТекущаяСтрока(СзВСЭ.НайтиЗначение(cargoExpertized));

КонецПроцедуры

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	UUID = "";
	applicationID = "";
	Статус = "";
	Если Скопирован = 0 Тогда
		
		Попытка Фирма = ГМ.глЗначениеПоУмолчанию("ОсновнаяФирма"); Исключение КонецПопытки;
		ПриВыбореФирмы();
		
		РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.VSEFULL;
		cargoInspected  	= 1;
		ТермическоеСостояние = 1;
	КонецЕсли; 
	Попытка	Автор = ГМ.ПолучитьАвтора();	Исключение	КонецПопытки;
	Попытка	Филиал = Автор.Филиал;			Исключение	КонецПопытки;
КонецПроцедуры

Процедура ПослеОткрытия()
	ГМ.Инициализация(Контекст);        
КонецПроцедуры

Процедура ПриОткрытии()
	//из типовой ЖД
	//НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("ТабличнаяЧасть");
	
	//глАктивизироватьРеквизит(Контекст);		
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	
	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
	
	ДоступностьЭлементов();
	
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	ИначеЕсли ЗначениеЗакладки="ТабличнаяЧасть" Тогда
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Попытка Параметры.ДобавитьЗначение(?((Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0), ТекущийДокумент(), ГМ.глВзятьКонтекст(Контекст)), "Контекст"); Исключение КонецПопытки;
	Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
	Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");

	ОткрытьФорму("Отчет", ТекущийДокумент(), КаталогОбработки+"ПечФорма_ВСД2_Транзакция.ert");
	
КонецПроцедуры // ПоКнопкеПечать()

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если Элемент.Вид()="ВСД_Площадка" Тогда
		УстановитьАтрибут(ИмяПеременной, Элемент);
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура Выбрать_Площадку_ПоХС(Имя, ВыбХС)
						
		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ИмяПеременной = Имя;
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры



Процедура ОткрытьПартии()
	ОткрытьФормуМодально("Справочник.ВСД_Партия", ТекущийДокумент());	
КонецПроцедуры


//******************************************************************************
//******************************   ОТПРАВКА 


Процедура Отправить()

	Если Проведен()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(applicationID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Записать();
	Если (Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0) Тогда
	    
	иначе
		Предупреждение("Запишите документ");
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка ВСД транзакция "+НомерДок+" от "+ДатаДок);
	
   ПараПараметров = СоздатьОбъект("СписокЗначений");
   ПараПараметров.Установить("КонтекстДокумента", Контекст);
   ПараПараметров.Установить("ГМ", ГМ);
   
   КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
   ОткрытьФорму("Отчет", ПараПараметров, КаталогОбработки+"ВСД_ОтправкаИзФормы.ert");
   	
КонецПроцедуры

// ** сервисные для ввода на основании реализации 




Функция ЗаполнитьВСДТранзакция(ДокР)
	
	
	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");

	// заполнение кастомного ВСД  - ЖД Доработать в этом случае отменить Ввод на основании и открыть Созданный док
	Если ФС.СуществуетФайл(КаталогОбработки+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД2_транзакция.ert")=1 Тогда
		//{ переопределение функции создания ВСД 
			// интеграция переопределяется в Меркурий_Подключаемый_Создание_ВСД_Производство.ert
			//
//			НазваниеРеквизитаГрузополучатель = ГМ.СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
//			Попытка
//				_Получатель_ХозСубъект = ГМ.НайтиХозСубъект(ДокР.Контрагент); //ХС Получателя
//			Исключение
//				_Получатель_ХозСубъект = ГМ.НайтиХозСубъект(ДокР.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
//			КонецПопытки;
			
			СписокПараметров = СоздатьОбъект("СписокЗначений");
			СписокПараметров.ДобавитьЗначение(ДокР.ТекущийДокумент(),				"ДокОснование");
			СписокПараметров.ДобавитьЗначение(Отправитель_ХозСубъект,				"Отправитель_ХозСубъект");    
			СписокПараметров.ДобавитьЗначение(Отправитель_Площадка,					"Отправитель_Площадка");
			СписокПараметров.ДобавитьЗначение(Перевозчик_ХозСубъект,	"Перевозчик_ХозСубъект");
			СписокПараметров.ДобавитьЗначение(Получатель_ХозСубъект,				"ХС"); 
			СписокПараметров.ДобавитьЗначение(Получатель_Площадка,					"Площадка");
			//
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Экспертиза"),	"ВСД_Экспертиза");    
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Местность"),		"ВСД_Местность");
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки"),	"ВСД_ОсобыеОтметки");    

			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"НачДата");
			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"КонДата");    
			
			//СписокПараметров.ДобавитьЗначение( ТЗПартий,					"СписокПартий");    
				
			ОткрытьФормуМодально("Отчет",СписокПараметров,КаталогОбработки+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД2_транзакция.ert");
			
			ДокументСсылка = "";
			
			Если ТипЗначенияСтр(СписокПараметров)  = "СписокЗначений" Тогда				
				ДокументСсылка = СписокПараметров.Получить("ДокументСсылка");				
			КонецЕсли;  
			
			Если ПустоеЗначение(ДокументСсылка)=1 Тогда
				Предупреждение("В подключаемом модуле не удалось создать ВСД","!");
				Возврат ""; 
			Иначе
				Возврат ДокументСсылка; 
			КонецЕсли;
			//}

	Иначе
		ДокОснование = ДокР.ТекущийДокумент();			

		Попытка ТТН = ДокОснование.Маршрут;	Исключение	КонецПопытки;
					
		//ТтнСерия = ""; //ТТН.Серия;
		//ТтнНомер = ДокР.НомерДок;
		//ТтнДата = ДокР.ДатаДок;
		Попытка				
			номерАвто = ГМ.ПолучитьНомерАвто(ДокОснование);//ТТН.Авто.НомернойЗнак;
			Если ПустоеЗначение(номерАвто)=1 Тогда
				номерАвто = "не используется";
			КонецЕсли;
		Исключение
			номерАвто = "не используется";
		КонецПопытки;
		
		Попытка
			СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТТН");
			ТтнСерия = СзРеквДокумента.Получить("ДокСерия");
			ТтнНомер = СзРеквДокумента.Получить("ДокНомер");
			ТтнДата = СзРеквДокумента.Получить("ДокДата");
		Исключение 	КонецПопытки;
		
		Попытка
			СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"Заказ");  
			НомерЗаказаПокупателя = СзРеквДокумента.Получить("ДокНомер");
			ДатаЗаказаПокупателя = СзРеквДокумента.Получить("ДокДата");
		Исключение 	КонецПопытки;
		
		Попытка
			СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТОРГ12");  
			ТОРГ12Номер = СзРеквДокумента.Получить("ДокНомер");
			ТОРГ12Дата = СзРеквДокумента.Получить("ДокДата");
		Исключение 	КонецПопытки;
			
		ФормаВСД = 1;			
		//Экспертиза 		= ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность 		= ГМ.СписокКонстант.Получить("ВСД_Местность");
		ОсобыеОтметки 	= ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		cargoExpertized  = 1;
		cargoInspected  	= 1;			
		РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.VSEFULL;
		ТермическоеСостояние = 4;
		ПропускатьПустыеСвойства = ГМ.СписокКонстант.Получить("ПропускатьПустыеСвойства");
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
		    Если (ПропускатьПустыеСвойства = 1) и (ПустоеЗначение(ДокОснование.Номенклатура.ВСД_Продукция_Элемент) = 1) Тогда
				Сообщить("Не указан ВСД_Продукция_Элемент у "+ДокОснование.Номенклатура+". Пропускаем","i");
				Продолжить;
		    КонецЕсли;
			
			ВрПартия = ГМ.НайтиПервуюПартию(ДокОснование.Номенклатура.ВСД_Продукция_Элемент,Отправитель_Площадка);//ТЗПартий.Партия;
			Если ПустоеЗначение(ВрПартия) = 1 Тогда
				Сообщить("Нет партий для "+ДокОснование.Номенклатура+". Проверьте!","!!");				
			    //Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			Номенклатура = ДокОснование.Номенклатура;
			
			Попытка 
				КСписанию = ДокОснование.Количество*ДокОснование.Единица.Вес; 
			Исключение 	КСписанию=0; Сообщить("Нестандартная конфигурация!!!","!!"); Возврат ""; КонецПопытки;
			
			Если ПустоеЗначение(ВрПартия) = 0 Тогда
				Если ВрПартия.Количество < КСписанию Тогда
					Сообщить("В партии "+ВрПартия+" недостаточно веса, будет списано "+ВрПартия.Количество,"!");
			    	КСписанию = ВрПартия.Количество;
				Иначе
					КСписанию = ДокОснование.Количество*ДокОснование.Единица.Вес;
				КонецЕсли;
			КонецЕсли;
			
			Партия = ВрПартия;
			Количество = КСписанию;
			ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
			Продукция = Партия.Продукция;
			ВидПродукции = Партия.ВидПродукции;
			Продукция_Элемент 	= Номенклатура.ВСД_Продукция_Элемент;
			ТермическоеСостояние = Мин(Продукция_Элемент.ТермическиеУсловияПеревозки,ТермическоеСостояние); //заморозка в приоритете
			НаименованиеПродукции = Продукция_Элемент.Наименование;
		КонецЦикла;			
		ТермическоеСостояние = ?(ТермическоеСостояние=0,1,ТермическоеСостояние);
        Если КоличествоСтрок()=0 Тогда
            Предупреждение("Нет партий для списания!");
        КонецЕсли;
		Возврат "";
	КонецЕсли;


    
КонецФункции



Функция НайтиВСД_Транзакция(Докум)
	//Продумать, что делать с Rejected Документами
	Рез ="";
	
	ДокТ = СоздатьОбъект("Документ");
	ДокТ.ВыбратьПодчиненныедокументы(,,Докум.ТекущийДокумент());
	Пока ДокТ.ПолучитьДокумент()=1 Цикл
	    Если (ДокТ.Вид() = "ВСД2_транзакция") и (ДокТ.ПометкаУдаления()=0) Тогда
			Если (ПустоеЗначение(ДокТ.Статус)=1) или (СокрЛП(докТ.Статус) = "COMPLETED") Тогда
	        	Рез = ДокТ.текущийДокумент();
				Прервать;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;

	Возврат Рез;
КонецФункции // ()


Функция ЗаполнитьШапку(Докум)
	//Выполняет поиск Грузополучателя
	Рез = "";
	Если ПустоеЗначение(Докум) = 1 Тогда
	    Возврат Рез;
	КонецЕсли;
// в стандарте д.б. Контрагент - самопис - все что угодно
// Либо для исключения ошибки искать ХС по Площадке - по реквизиту GUIDХозСубъекта
	Попытка
		НазваниеРеквизитаГрузополучатель = ГМ.СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
		
		Если Докум.Вид() = "ПеремещениеТМЦ" Тогда
			Получатель_ХозСубъект = ГМ.ПолучитьХСПоФирме(Докум.ФирмаПолучатель); 
			Получатель_Площадка = ГМ.НайтиПлощадкуПоСкладу(Докум.СкладПолучатель,Получатель_ХозСубъект);
		
			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
				Сообщить("Не удалось найти площадку ГрузоПолучателя по складу "+Докум.СкладПолучатель,"!");
				Возврат Рез;
			КонецЕсли;
			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
				Сообщить("нет сведений о Получателе "+ Докум.СкладПолучатель +" в справочнике ВСД_ХозСубъекты","!");
				Возврат рез;
			КонецЕсли;		
			
		Иначе
			Попытка
				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.Контрагент);
			Исключение
				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
			КонецПопытки;
		
			Попытка Получатель_Площадка = ГМ.НайтиПлощадкуПоКонтрагенту(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)); Исключение КонецПопытки;
		
			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
				Сообщить("нет сведений о площадке ГрузоПолучателя "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_Площадки","!");
				Возврат Рез;
			КонецЕсли;		

			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
				Сообщить("нет сведений о Получателе "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_ХозСубъекты","!");
				Возврат рез;
			КонецЕсли;		

		КонецЕсли;
	
	Исключение
		Сообщить("Не удалось получить сведения о Получателе","!");
		Возврат 0;
	КонецПопытки;	

	Возврат 1;
	
КонецФункции // ОбработатьРеализацию()



//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)

	ДатаДок = ДокументОснование.ДатаДок;		
	
	// Поищем есть ли уже введенный и проведенный
	Рез = НайтиВСД_Транзакция(ДокументОснование);
	Если ПустоеЗначение(Рез) =  0 Тогда
		ОткрытьФорму(Рез,"");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;		
	Попытка Фирма = ДокументОснование.Фирма; Исключение КонецПопытки;
	ГМ.Инициализация(Контекст);
	
	// проверим ошибки реквизитов и есть ли партии
	Если ПустоеЗначение(ЗаполнитьШапку(ДокументОснование)) = 1 Тогда
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");    
	Перевозчик_ХозСубъект = ГМ.СписокКонстант.Получить("Перевозчик_ХозСубъект");
	Попытка
		Отправитель_Площадка = ГМ.НайтиПлощадкуПоСкладу(ДокументОснование.Склад,Отправитель_ХозСубъект);
		Если ПустоеЗначение(Отправитель_Площадка) = 1 Тогда
			Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");    
		КонецЕсли;
	Исключение
		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");	
	КонецПопытки;
// api2 заполняем построчно с Номенклатурой

//	ТЗПартий = ГМ.ЗаполнитьПартииПоТЧДокумента(ДокументОснование,Отправитель_Площадка);
//	Если ТЗПартий.КоличествоСтрок()=0 Тогда
//	    Сообщить("Нет партий для списания");
	    //СтатусВозврата(0);
		//Возврат;
//	КонецЕсли;
	Попытка	Автор = ГМ.ПолучитьАвтора();	Исключение	КонецПопытки;
	Попытка	Филиал = Автор.Филиал;			Исключение	КонецПопытки;
	
	ДокСсылка = ЗаполнитьВСДТранзакция(ДокументОснование);
	Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
		ОткрытьФорму(ДокСсылка);
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
КонецПроцедуры // ВводНаОсновании()


Процедура ПриЗакрытии()
   Если ТипЗначенияСтр(ПараПараметров) = "ГрупповойКонтекст" Тогда
// форма обработки открыта
      ПараПараметров.Форма.Закрыть();
// закрываем форму обработки
   КонецЕсли;
КонецПроцедуры // ПриЗакрытии




Процедура ДействияВСД()
	
	//меню
	СписокДействийВСД = СоздатьОбъект("СписокЗначений");
	СписокДействийВСД.ДобавитьЗначение("ПогаситьВСД","Погасить ВСД");
	СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД"); 
	СписокДействийВСД.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
	СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");
//	СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
	СписокДействийВСД.ДобавитьЗначение("Регионализация","Запросить условия Перевозки");
	СписокДействийВСД.ДобавитьЗначение("ПоказатьУсловияПеревозки","Показать условия Перевозки");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");
			
	стр=0; Зн="";
	Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
		
		Если Зн ="ПогаситьВСД"  Тогда 
			ГМ.ПогаситьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД" Тогда 
			ГМ.ПечатьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД_Тест" Тогда 
			ГМ.ПечатьВСД_Тест(ТекущийДокумент());
		ИначеЕсли Зн = "ОткрытьВсдВГис" Тогда
			ГМ.ОткрытьВсдВГис( ТекущийДокумент() );		
		ИначеЕсли Зн = "СписокВСД" Тогда
			ГМ.ОткрытьСписокВсд( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОтправитьВСД" Тогда 
			Отправить();
		ИначеЕсли Зн = "АннулироватьВСД" Тогда 
			ГМ.Аннулировать_ВСД_транзакция( ТекущийДокумент() );
		ИначеЕсли Зн = "ОткрытьЗапрос" Тогда 
			ГМ.ОткрытьЗапрос( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОткрытьОтвет" Тогда 
			ГМ.ОткрытьОтвет( ТекущийДокумент() );		
		ИначеЕсли Зн = "Регионализация" Тогда 
			Регионализация();			
		ИначеЕсли Зн = "ПоказатьУсловияПеревозки" Тогда 
			ПоказатьУсловияПеревозки();			
		ИначеЕсли Зн = "ПечатьСокрФормыВСД" Тогда 
			КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
   			ОткрытьФорму("Отчет", ТекущийДокумент(), КаталогОбработки+"ПечФорма_ВСД_Сокращенная.ert");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");