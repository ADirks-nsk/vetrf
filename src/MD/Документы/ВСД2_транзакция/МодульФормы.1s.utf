 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НомерТекущейФормы;
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем ИмяПеременной;
Перем ПараПараметров; // Для отправки из формы
Перем ВыбФирма;
Перем оПривязки; //:Меркурий.Привязки

//Функция Этот(Конт) 	Возврат Конт; КонецФункции
//Функция Сам() 	Возврат Этот(Контекст); КонецФункции

 
Функция ПоказатьНомерПартии()
    Если Партия.Выбран() = 1 Тогда
        Возврат СокрЛП(Партия.НомерПартии);
	Иначе
		Возврат "";
    КонецЕсли;
КонецФункции
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,ФлагСтандОбр)
	Если ЭлементДиалога = "Отправитель_Площадка" Тогда
		ВремЭлем = Отправитель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
	ИначеЕсли ЭлементДиалога = "Получатель_Площадка" Тогда
		ВремЭлем = Получатель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
    ИначеЕсли ЭлементДиалога = "Партия" Тогда
        парам = создатьОбъект("СписокЗначений");
        Парам.Установить("ВСД_Продукция_Элемент",Продукция_Элемент);
        Парам.Установить("Площадка",Отправитель_Площадка);
		Парам.Установить("ХозСубъект",Отправитель_ХозСубъект);
        ОткрытьФорму("Справочник.ВСД_Партия", Парам);
        ФлагСтандОбр = 0;
	ИначеЕсли Найти(ЭлементДиалога, "КлассМаркировки") <> 0 Тогда
		Рез = "";
		Если ГМ.КлассыМаркировки.ВыбратьЗначение(Рез,,,,1) <> 0 Тогда
			УстановитьАтрибут(ЭлементДиалога, Рез);
		КонецЕсли;
        ФлагСтандОбр = 0;
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

Процедура ПриИзмененииНоменклатуры()
	Продукция_Элемент = Номенклатура.ВСД_Продукция_Элемент;
	Партия = ГМ.НайтиПервуюПартию(Продукция_Элемент,Отправитель_Площадка, Отправитель_ХозСубъект);
	Если ПустоеЗначение(Партия) = 1 Тогда
		Продукция = Продукция_Элемент.Продукция;
		ВидПродукции = Продукция_Элемент.ВидПродукции;
		ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
	Иначе
		Продукция = Партия.Продукция;
		ВидПродукции = Партия.ВидПродукции;
		ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	КонецЕсли;

	ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние(Контекст);
	НаименованиеПродукции = Продукция_Элемент.Наименование;
КонецПроцедуры

Процедура ПриИзмененииПродукцияЭлемент()
	Партия = ГМ.НайтиПервуюПартию(Продукция_Элемент,Отправитель_Площадка, Отправитель_ХозСубъект);
	Если ПустоеЗначение(Партия) = 1 Тогда
		Продукция = Продукция_Элемент.Продукция;
		ВидПродукции = Продукция_Элемент.ВидПродукции;
		ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
	Иначе
		Продукция = Партия.Продукция;
		ВидПродукции = Партия.ВидПродукции;
		ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	КонецЕсли;
	ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние(Контекст);
	НаименованиеПродукции = Продукция_Элемент.Наименование;
КонецПроцедуры

Процедура ПриИзмененииПартии()
	Если ПустоеЗначение(Партия) = 0 Тогда
		Продукция_Элемент = Партия.Продукция_Элемент;
		Продукция = Партия.Продукция;
		ВидПродукции = Партия.ВидПродукции;
		ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
		НаименованиеПродукции = Продукция_Элемент.Наименование;
		
		ГМ.ЗаполнитьСтрокуДокумента(Контекст, Контекст, Контекст);
		ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние(Контекст);		
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьУсловияПеревозки()
	ТзУсловияПеревозки.очистить();
	Если ПустаяСтрока(ИмяФайлаРегионализация) = 0 Тогда

		Если ФС.СуществуетФайл(ИмяФайлаРегионализация) = 1 Тогда
		//	стр = "";
			Попытка 
				ТзУсловияПеревозки.Загрузить( ЗначениеИзФайла(ИмяФайлаРегионализация) );  
			Исключение 
				Сообщить("Ошибка при выводе данных на форму"); 
			    Возврат;
			КонецПопытки;
			ТзУсловияПеревозки.ВыводитьПиктограммы("Пометка");
			ТзУсловияПеревозки.ТекущаяСтрока(1);
		//	ТзУсловияПеревозки.ВыбратьСтроку(стр,"Условия перевозки");
		Иначе
			Сообщить("Условия перевозки не получены либо перевозка разрешена без условий!");
		КонецЕсли;
	Иначе
		Сообщить("Условия перевозки не получены либо перевозка разрешена без условий!");
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьСписокВСД()
	ТзСписокВСД.очистить();
	Записать();
	ТзСписокВСД.Загрузить(ГМ.Выбрать_ВСД(ТекущийДокумент()));
	Если ТзСписокВСД.КоличествоСтрок() = 0 Тогда
	    Возврат;
	КонецЕсли;
	ТзСписокВСД.НоваяКолонка("Статус","Строка",10);
	ТзСписокВСД.НоваяКолонка("Тип","Строка",10); 
	ТзСписокВСД.ВыбратьСтроки();
	Пока ТзСписокВСД.ПолучитьСтроку() = 1 Цикл
		ТзСписокВСД.Статус = ТзСписокВСД.док.Статус;
		ТзСписокВСД.Тип = ТзСписокВСД.док.ТипВСД;
	КонецЦикла;
	ТзСписокВСД.ТекущаяСтрока(1);
КонецПроцедуры

Процедура кликТзСписокВСД()
	Если ТзСписокВСД.КоличествоСтрок() = 0 Тогда
	    Возврат;
	КонецЕсли;
    ОткрытьФорму(ТзСписокВСД.Док);
КонецПроцедуры


Процедура Регионализация()
	УсловияПеревозки="";	
	// Глобальный модуль Ветис.2.0
	//ГМ2 = СоздатьОбъект("Меркурий_ГлобальныйМодуль2"); = определение перенесено в ПриНачалеРаботыСистемы() Глобальный Модуль конфигурации
	//ГМ2.Инициализация(ГМ);
	
	Записать();
	Рез = ГМ2.ПроверитьВозможностьПеремещения( ТекущийДокумент() );
	Если ТипЗначенияСтр(Рез) = "ТаблицаЗначений" Тогда 
		Если Рез.КоличествоСтрок() = 0 Тогда
			УсловияПеревозки = "";
			Сообщить("Перевозка разрешена без условий");
		Иначе
			ИмяФайлаРегионализация = ГМ2.ПолучитьИмяФайлаРегионализация( ТекущийДокумент() );
			ЗначениеВФайл(ИмяФайлаРегионализация, Рез);
		КонецЕсли;
	Иначе
		Сообщить("Перевозка разрешена без условий");
	КонецЕсли;
	ПоказатьУсловияПеревозки();
КонецПроцедуры 


Процедура ПриВыбореФирмы()
	попытка
		ГМ.Инициализация(Контекст);
		//ГМ.ЗагрузитьПараметры(Фирма); 
		Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
		Экспертиза = ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность = ГМ.СписокКонстант.Получить("ВСД_Местность");
		Особыеотметки = ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	Исключение
		
	КонецПопытки
	
КонецПроцедуры


//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());

		ФирмаИмяРеквизита = "";
		ГМ.ПолучитьИмяРеквизитаФирма(Вид(), ФирмаИмяРеквизита);
		Попытка УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);  Исключение КонецПопытки;

		ПриВыбореФирмы();
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСФ

Процедура ДоступностьЭлементов()
	Если Проведен()=1 Тогда 
		Форма.ТолькоПросмотр(1); 
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОтправить.Доступность(0);	
	КонецЕсли;
	//СзВСЭ.ТекущаяСтрока(СзВСЭ.НайтиЗначение(cargoExpertized));

КонецПроцедуры

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	UUID = "";
	applicationID = "";
	Статус = "";
	Если Скопирован = 0 Тогда
		
		Попытка Фирма = ГМ.глЗначениеПоУмолчанию("ОсновнаяФирма"); Исключение КонецПопытки;
		ПриВыбореФирмы();
		
		РезультатыИсследований = ГМ.СписокКонстант.Получить("ВСД_РезультатыИсследований");//Перечисление.ВСД2_РезультатИсследований.VSEFULL;
		cargoInspected  	= 1;
		ТермическоеСостояние = 	ГМ.ПолучитьКонстанту("ТермУсловияПеревозки");

	КонецЕсли; 
	Автор = ГМ.ПолучитьАвтора();
	Попытка	Филиал = Автор.Филиал;			Исключение	КонецПопытки;
		
	ИмяФайлаЗапрос = "";
	ИмяФайлаОтвет = "";
	ИмяФайлаРегионализация = "";
	ИмяФайлаМаршрутДоставки = "";
КонецПроцедуры

//Процедура ПослеОткрытия()
//	ГМ._ПослеОткрытия(Контекст);
//КонецПроцедуры

Процедура ПриОткрытии()
	ГМ._ПриОткрытии(Контекст);

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("ТабличнаяЧасть", "Табличная часть");
	Форма.Закладки.ДобавитьЗначение("УсловияПеремещения", "Условия Перемещения");
	Форма.Закладки.ДобавитьЗначение("ВСД", "ВСД");
	//глАктивизироватьРеквизит(Контекст);		
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	
	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
	
	ДоступностьЭлементов();
	
	//Если Форма.МодальныйРежим() = 0 Тогда
	//	оПривязки.Привязка("ТзУсловияПеревозки", "TH", "Форма", "LW", "Форма");
	//	оПривязки.Привязка("ТзСписокВСД", "H", "Комментарий", "W", "Форма");
	//	оПривязки.Привязка("кнЗакрыть","T","Форма");
	//КонецЕсли;
	//
	
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	ИначеЕсли ЗначениеЗакладки="ТабличнаяЧасть" Тогда
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	ИначеЕсли ЗначениеЗакладки="УсловияПеремещения" Тогда
		Форма.ИспользоватьСлой("Шапка,УсловияПеремещения,Подвал");
		ПоказатьУсловияПеревозки();
	ИначеЕсли ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Шапка,ВСД,Подвал");
		ПоказатьСписокВСД();
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	ГМ.ПечатьСокрВСД( ТекущийДокумент() );
	
КонецПроцедуры // ПоКнопкеПечать()
              

Процедура Выбрать_Площадку_ПоХС(Имя, ВыбХС)
		// Это еще надо?
		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ИмяПеременной = Имя;
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры



Процедура ОткрытьПартии()
	ОткрытьФормуМодально("Справочник.ВСД_Партия", ТекущийДокумент());	
КонецПроцедуры


//******************************************************************************
//******************************   ОТПРАВКА 


Процедура Отправить()

	Если Проведен()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(applicationID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Записать();
	//Если (Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0) Тогда
	//    
	//иначе
	//	Предупреждение("Запишите документ");
	//	Возврат;
	//КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка ВСД транзакция "+НомерДок+" от "+ДатаДок);
	
   ПараПараметров = СоздатьОбъект("СписокЗначений");
   ПараПараметров.Установить("КонтекстДокумента", Контекст);
   ПараПараметров.Установить("ГМ", ГМ);
   
   ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы.ert");
   	
КонецПроцедуры

// ** сервисные для ввода на основании реализации 



//Функция ЗаполнитьВСДТранзакция(ДокР)
//	
//	
//	// заполнение кастомного ВСД  - ЖД Доработать в этом случае отменить Ввод на основании и открыть Созданный док
//	Если ФС.СуществуетФайл(ГМ.КаталогМодуля+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД2_транзакция.ert")=1 Тогда
//		//{ переопределение функции создания ВСД 
//		// интеграция переопределяется в Меркурий_Подключаемый_Создание_ВСД_Производство.ert
//		
//		СписокПараметров = СоздатьОбъект("СписокЗначений");
//		СписокПараметров.ДобавитьЗначение(ДокР.ТекущийДокумент(),	"ДокОснование");
//		СписокПараметров.ДобавитьЗначение(Отправитель_ХозСубъект,	"Отправитель_ХозСубъект");    
//		СписокПараметров.ДобавитьЗначение(Отправитель_Площадка,		"Отправитель_Площадка");
//		СписокПараметров.ДобавитьЗначение(Перевозчик_ХозСубъект,	"Перевозчик_ХозСубъект");
//		СписокПараметров.ДобавитьЗначение(Получатель_ХозСубъект,	"ХС"); 
//		СписокПараметров.ДобавитьЗначение(Получатель_Площадка,		"Площадка");
//		//
//		СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Экспертиза"),	"ВСД_Экспертиза");    
//		СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Местность"),		"ВСД_Местность");
//		СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки"),	"ВСД_ОсобыеОтметки");    
//
//		СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок, "НачДата");
//		СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок, "КонДата");    
//		
//		СписокПараметров.ДобавитьЗначение( ГМ, "ГМ"); 
//					
//		ОткрытьФормуМодально("Отчет",СписокПараметров,ГМ.КаталогМодуля+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД2_транзакция.ert");
//		
//		ДокументСсылка = "";
//		
//		Если ТипЗначенияСтр(СписокПараметров)  = "СписокЗначений" Тогда				
//			ДокументСсылка = СписокПараметров.Получить("ДокументСсылка");				
//		КонецЕсли;  
//		
//		Если ПустоеЗначение(ДокументСсылка)=1 Тогда
//			Предупреждение("В подключаемом модуле не удалось создать ВСД","!");
//			Возврат ""; 
//		Иначе
//			Возврат ДокументСсылка; 
//		КонецЕсли;
//		//}
//
//	Иначе
//		ДокОснование = ДокР.ТекущийДокумент();			
//
//		// стандартное создание ВСД
//			
//		Автор = ГМ.ПолучитьАвтора();
//		Попытка Фирма = ДокОснование.Фирма; Исключение КонецПопытки;
//		Попытка	Филиал = Автор.Филиал;	Исключение 	КонецПопытки;
//			
//		ДатаДок = ДокОснование.ДатаДок;			
//		ТтнСерия = "";
//		ТтнНомер = ДокОснование.НомерДок; 
//		ТтнДата = ДокОснование.ДатаДок;
//		номерАвто = ГМ.ПолучитьНомерАвто( ДокОснование );
//		cargoExpertized = 1;
//		cargoInspected  = 1;		
//		Местность 		= ГМ.СписокКонстант.Получить("ВСД_Местность");
//		ОсобыеОтметки 	= ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");		
//		РезультатыИсследований = ГМ.СписокКонстант.Получить("ВСД_РезультатыИсследований");
//					
//		тз = ГМ.ЗаполнитьТчДокументаПоАктуальнымПартиям( ДокОснование, Отправитель_Площадка, Отправитель_ХозСубъект);
//		ЗагрузитьТабличнуюЧасть(тз);
//
//		ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние(Контекст);
//		
//		Попытка
//			СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТТН");
//			ТтнСерия = СзРеквДокумента.Получить("ДокСерия");
//			ТтнНомер = СзРеквДокумента.Получить("ДокНомер");
//			ТтнДата = СзРеквДокумента.Получить("ДокДата");
//		Исключение 	КонецПопытки;
//		
//		Попытка
//			СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"Заказ");  
//			НомерЗаказаПокупателя = СзРеквДокумента.Получить("ДокНомер");
//			ДатаЗаказаПокупателя = СзРеквДокумента.Получить("ДокДата");
//		Исключение 	КонецПопытки;
//		
//		Попытка
//			СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТОРГ12");  
//			ТОРГ12Номер = СзРеквДокумента.Получить("ДокНомер");
//			ТОРГ12Дата = СзРеквДокумента.Получить("ДокДата");
//		Исключение 	КонецПопытки;
//			
//        Если КоличествоСтрок()=0 Тогда
//            Предупреждение("Нет партий для списания!");
//        КонецЕсли;
//		Возврат "";
//	КонецЕсли;
//    
//КонецФункции



//Функция НайтиВСД_Транзакция(Докум)
//	//Продумать, что делать с Rejected Документами
//	Рез ="";
//	
//	ДокТ = СоздатьОбъект("Документ");
//	ДокТ.ВыбратьПодчиненныедокументы(,,Докум.ТекущийДокумент());
//	Пока ДокТ.ПолучитьДокумент()=1 Цикл
//	    Если (ДокТ.Вид() = "ВСД2_транзакция") и (ДокТ.ПометкаУдаления()=0) Тогда
//			Если (ПустоеЗначение(ДокТ.Статус)=1) или (СокрЛП(докТ.Статус) = "COMPLETED") Тогда
//	        	Рез = ДокТ.текущийДокумент();
//				Прервать;
//			КонецЕсли;
//	    КонецЕсли;
//	КонецЦикла;
//
//	Возврат Рез;
//КонецФункции // ()


//Функция ЗаполнитьШапку(Докум)
//	//Выполняет поиск Грузополучателя
//	Рез = "";
//	Если ПустоеЗначение(Докум) = 1 Тогда
//	    Возврат Рез;
//	КонецЕсли;
//	
//	Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");    
//	Перевозчик_ХозСубъект = ГМ.СписокКонстант.Получить("Перевозчик_ХозСубъект");
//	Попытка
//		Отправитель_Площадка = ГМ.НайтиПлощадкуПоСкладу(Докум.Склад,Отправитель_ХозСубъект);
//		Если ПустоеЗначение(Отправитель_Площадка) = 1 Тогда
//			Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");    
//		КонецЕсли;
//	Исключение
//		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");	
//	КонецПопытки;
//
//	Попытка	Автор = ГМ.ПолучитьАвтора();	Исключение	КонецПопытки;
//	Попытка	Филиал = Автор.Филиал;			Исключение	КонецПопытки;
//	
//	//Цель = ГМ.СписокКонстант.Получить("Цель");	
//		
//// в стандарте д.б. Контрагент - самопис - все что угодно
//// Либо для исключения ошибки искать ХС по Площадке - по реквизиту GUIDХозСубъекта
//	Попытка
//		НазваниеРеквизитаГрузополучатель = ГМ.СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
//		
//		Если Докум.Вид() = "ПеремещениеТМЦ" Тогда
//			Получатель_ХозСубъект = ГМ.ПолучитьХСПоФирме(Докум.ФирмаПолучатель); 
//			Получатель_Площадка = ГМ.НайтиПлощадкуПоСкладу(Докум.СкладПолучатель,Получатель_ХозСубъект);
//		
//			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
//				Сообщить("Не удалось найти площадку ГрузоПолучателя по складу "+Докум.СкладПолучатель,"!");
//				Возврат Рез;
//			КонецЕсли;
//			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
//				Сообщить("нет сведений о Получателе "+ Докум.СкладПолучатель +" в справочнике ВСД_ХозСубъекты","!");
//				Возврат рез;
//			КонецЕсли;		
//			
//		Иначе
//			Попытка
//				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.Контрагент);
//			Исключение
//				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
//			КонецПопытки;
//		
//			Попытка Получатель_Площадка = ГМ.НайтиПлощадкуПоКонтрагенту(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)); Исключение КонецПопытки;
//		
//			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
//				Сообщить("нет сведений о площадке ГрузоПолучателя "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_Площадки","!");
//				Возврат Рез;
//			КонецЕсли;		
//
//			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
//				Сообщить("нет сведений о Получателе "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_ХозСубъекты","!");
//				Возврат рез;
//			КонецЕсли;		
//
//		КонецЕсли;
//	
//	Исключение
//		Сообщить("Не удалось получить сведения о Получателе","!");
//		Возврат 0;
//	КонецПопытки;	
//
//	Возврат 1;
//	
//КонецФункции // ОбработатьРеализацию()



//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)

	// Поищем есть ли уже введенный и проведенный
	ВСД = ГМ.Выбрать_ВСД_транзакция( ДокументОснование );
	Если ПустоеЗначение(ВСД) =  0 Тогда
		ОткрытьФорму(ВСД);
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;		
	
	ДокСсылка = ГМ2.ЗаполнитьВСД2_Транзакция(Контекст, ДокументОснование);
	Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
		ОткрытьФорму(ДокСсылка);
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
КонецПроцедуры // ВводНаОсновании()


Процедура ПриЗакрытии()
   Если ТипЗначенияСтр(ПараПараметров) = "ГрупповойКонтекст" Тогда
// форма обработки открыта
      ПараПараметров.Форма.Закрыть();
// закрываем форму обработки
   КонецЕсли;
КонецПроцедуры // ПриЗакрытии

Процедура ДействияВСД()
	//меню
	СписокДействийВСД = СоздатьОбъект("СписокЗначений");
	СписокДействийВСД.ДобавитьЗначение("ПогаситьВСД","Погасить ВСД");
	СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД"); 
	СписокДействийВСД.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
	СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");
	СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
	СписокДействийВСД.ДобавитьЗначение("Регионализация","Запросить условия Перевозки");
	СписокДействийВСД.ДобавитьЗначение("ПоказатьУсловияПеревозки","Показать условия Перевозки");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");
	СписокДействийВСД.ДобавитьЗначение("Мультимодальная","Мультимодальная перевозка");
	СписокДействийВСД.ДобавитьЗначение("ПолучитьОтветВетис","Получить ответ ВЕТИС");
			
	стр=0; Зн="";
	Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
		
		Записать();
		
		//ГМ.Инициализация(Контекст);    Инициализировано в ПриОткрытии
			
		Если Зн ="ПогаситьВСД"  Тогда 
			ГМ.ПогаситьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД" Тогда 
			ГМ.ПечатьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД_Тест" Тогда 
			ГМ.ПечатьВСД_Тест(ТекущийДокумент());
		ИначеЕсли Зн = "ОткрытьВсдВГис" Тогда
			ГМ.ОткрытьВсдВГис( ТекущийДокумент() );		
		ИначеЕсли Зн = "СписокВСД" Тогда
			ГМ.ОткрытьСписокВсд( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОтправитьВСД" Тогда 
			Отправить();
		ИначеЕсли Зн = "АннулироватьВСД" Тогда 
		   	ПараПараметров = СоздатьОбъект("СписокЗначений");
		   	ПараПараметров.Установить("КонтекстДокумента", Контекст);
		   	ПараПараметров.Установить("ГМ", ГМ);
			ПараПараметров.Установить("Действие", "Аннулировать");		   		   
		   	ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы.ert");		
		ИначеЕсли Зн = "ОткрытьЗапрос" Тогда 
			ГМ.ОткрытьЗапрос( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОткрытьОтвет" Тогда 
			ГМ.ОткрытьОтвет( ТекущийДокумент() );		
		ИначеЕсли Зн = "Регионализация" Тогда 
			Регионализация();			
		ИначеЕсли Зн = "ПоказатьУсловияПеревозки" Тогда 
			ПоказатьУсловияПеревозки();			
		ИначеЕсли Зн = "ПечатьСокрФормыВСД" Тогда 
   			ОткрытьФорму("Отчет", ТекущийДокумент(), ГМ.КаталогМодуля+"ПечФорма_ВСД_Сокращенная.ert");
		ИначеЕсли Зн = "Мультимодальная" Тогда 
			Если ПустаяСтрока(ИмяФайлаМаршрутДоставки) = 1 Тогда
				ГМ2 = СоздатьОбъект("Меркурий_ГлобальныйМодуль2");
				ГМ2.Инициализация(ГМ);
				ИмяФайлаМаршрутДоставки = ГМ2.ПолучитьИмяФайла_МаршрутДоставки( ТекущийДокумент() );
				Записать();
			КонецЕсли;

			СписокПараметров = СоздатьОбъект("СписокЗначений");
			СписокПараметров.Установить("Документ", ТекущийДокумент());
			СписокПараметров.Установить("ГМ", ГМ);
   			ОткрытьФорму("Отчет", СписокПараметров, ГМ.КаталогМодуля+"Меркурий_МультимодальнаяПеревозка.ert");
		ИначеЕсли Зн = "ПолучитьОтветВетис" Тогда 			
		   	ПараПараметров = СоздатьОбъект("СписокЗначений");
		   	ПараПараметров.Установить("КонтекстДокумента", Контекст);
		   	ПараПараметров.Установить("ГМ", ГМ);
			ПараПараметров.Установить("Действие", "ПолучитьОтвет");		   		   
		   	ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы.ert");		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры   
                     
//******************************************************************************
Процедура ПриВыбореХС(Имя, ВыбХС)
	Если Имя = "Отправитель_ХозСубъект" Тогда
		Если Отправитель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Отправитель_Площадка = "";
		КонецЕсли;
	ИначеЕсли Имя = "Получатель_ХозСубъект" Тогда
		Если Получатель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Получатель_Площадка = "";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриВыбореХС

//КРОЛ
Процедура ОбработкаПодбораПартий(ВыбЗнач)   
	УдалитьСтроки();
	табРезультат = ВыбЗнач.Получить("ТаблицаПодбора");
	табРезультат.ВыбратьСтроки();
	Пока табРезультат.ПолучитьСтроку()=1 Цикл  
		Попытка			
			табРезультат.Партии.ВыбратьСтроки();
			Пока табРезультат.Партии.ПолучитьСтроку()=1 Цикл
				
				НоваяСтрока();
				Номенклатура = табРезультат.Номенклатура;
				
				Партия = табРезультат.Партии.Партия;
				Количество = табРезультат.Партии.Количество;
				ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
				Продукция = Партия.Продукция;
				ВидПродукции = Партия.ВидПродукции;
				Продукция_Элемент 	= Номенклатура.ВСД_Продукция_Элемент;
				НаименованиеПродукции = табРезультат.Продукция_Элемент;
			
				ГМ.ЗаполнитьСтрокуДокумента(Контекст, Контекст, Контекст);
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние(Контекст);
КонецПроцедуры
               
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормы)
	
	Если ТипЗначенияСтр(ВыбЗнач)="СписокЗначений" Тогда
		ОбработкаПодбораПартий(ВыбЗнач);
		
	Иначе	
		Если ВыбЗнач.Вид()="ВСД_Площадка" Тогда
			УстановитьАтрибут(ИмяПеременной, ВыбЗнач);
			КонтФормы.Форма.Закрыть();   
		КонецЕсли;
	КонецЕсли;     
	
КонецПроцедуры

            

Процедура Подбор(Параметры="")  Экспорт
	                                                            
	Если ТипЗначенияСтр(Параметры) <> "СписокЗначений" Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	// открываем форму подбора
	ОткрытьПодбор("ВСД_Партия", "ДляПодбора", Параметры);
	
КонецПроцедуры // глПодбор()   

Процедура ПоКнопкеПодбор(Зн="")
	
	СпПодбора = СоздатьОбъект("СписокЗначений");
	СпПодбора.ДобавитьЗначение("Подбор1","Подбор 1");
	СпПодбора.ДобавитьЗначение("Подбор2","Подбор 2");
	
	Зн="";
	СпПодбора.ВыбратьЗначение(Зн,,,,1);
	        
	Если Зн="Подбор2" Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		//Параметры.ДобавитьЗначение(Продукция_Элемент,     "Продукция_Элемент");
		Параметры.ДобавитьЗначение(Отправитель_Площадка,  "Отправитель_Площадка");
		Параметры.ДобавитьЗначение(ДокОснование,  "ДокОснование");
		
		Параметры.ДобавитьЗначение("Подбор партий в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
		Подбор(Параметры);
	
    Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Отправитель_ХозСубъект,			"Отправитель_ХозСубъект");
		Параметры.ДобавитьЗначение(Отправитель_Площадка,			"Отправитель_Площадка");
		Параметры.ДобавитьЗначение(ДокОснование,					"ДокОснование");
		Параметры.ДобавитьЗначение(Контекст,               "ТекущийДокумент");
		Параметры.ДобавитьЗначение("Подбор Партий в документ " + Текущийдокумент() + " № " + НомерДок, "Заголовок");
	   	ОткрытьФорму("Отчет", Параметры, ГМ.КаталогМодуля+"Меркурий_ПодборПартий.ert");
	КонецЕсли;	
	
КонецПроцедуры // ПоКнопкеПодбор()
//КРОЛ

ВыбФирма = "";
