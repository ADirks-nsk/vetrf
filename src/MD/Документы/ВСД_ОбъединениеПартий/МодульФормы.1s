 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НомерТекущейФормы;
Перем ТаблицаПечФорм;  // список печатных форм документа

Перем ИмяПеременной;
 
//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	UUID = "";
	applicationID = "";
	Статус = "";
КонецПроцедуры

Процедура ПриОткрытии()
	//
	//Форма.ИспользоватьЗакладки(1);
	//Форма.Закладки.ДобавитьЗначение("Основной");
	////Форма.Закладки.ДобавитьЗначение("Товары");
	////Форма.Закладки.ДобавитьЗначение("Запрос");	
	////Форма.Закладки.ДобавитьЗначение("Результат");	
	
	//Если Выбран() = 0 Тогда
		//глАктивизироватьРеквизит(Контекст);		
		//Форма.Закладки.ТекущаяСтрока(1);
		//Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	//Иначе
	//	// введенный документ открываем на второй закладке
	//	Форма.Закладки.ТекущаяСтрока(2);
	//	Форма.ИспользоватьСлой("Шапка,Запрос,Подвал");
	//КонецЕсли;
	
	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
		
	Если Проведен()=1 Тогда 
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	//ИначеЕсли НомерЗакладки=2 Тогда
	//	Форма.ИспользоватьСлой("Шапка,Товары,Подвал");		
	//ИначеЕсли НомерЗакладки=3 Тогда
	//	//ОбновитьНадписи();
	//	Форма.ИспользоватьСлой("Шапка,Запрос,Подвал");
	ИначеЕсли ЗначениеЗакладки="Результат" Тогда
		Форма.ИспользоватьСлой("Шапка,Результат,Подвал");
	КонецЕсли;       
	//УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если (Проведен()=0) 
  	Или ((Проведен()=1) И (Модифицированность()=1)) Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	//
	//Если НомерТекущейФормы = 1  Тогда
	//	Печать(СразуНаПринтер, КолЭкз);
	//ИначеЕсли НомерТекущейФормы = 2  Тогда
	//	Печать(СразуНаПринтер, КолЭкз, 1);
	//Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(?((Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0), ТекущийДокумент(), глВзятьКонтекст(Контекст)), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	//КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Процедура ОткрытьМеркурий()
	//Если ПустоеЗначение(UUID)=1 Тогда
	//	Предупреждение("Не указан UUID документа ВСД");
	//Иначе
	//	ВерсияСистемы = ВосстановитьЗначение("ВСД_ВерсияСистемы");	
	//	Если ВерсияСистемы=2 Тогда 
	//		//рабочая
			ЗапуститьПриложение("https://t2-mercury.vetrf.ru/gve/operatorui?_action=listInventory&_language=ru&stateMenu=0&all=true");	
	//	Иначе
	//		//тестовая
	//		ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+UUID);	
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если Элемент.Вид()="ВСД_Площадка" Тогда
		УстановитьАтрибут(ИмяПеременной, Элемент);
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьВсеПлощадкиХС(ХС)
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";
	
	ВыбGuidХозСубъекта = (ХС.GUID)	;
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	//ТЗ.ВыбратьСтроку();	
	
	Возврат тз;
	
КонецФункции

Процедура Выбрать_Площадку_ПоХС(Имя, ВыбХС)
						
		тз = ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ИмяПеременной = Имя;
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;            

	ДатаДок = ДокументОснование.ДатаДок;		
	
//	
//	Если ДокументОснование.Вид()="ПеремещениеТМЦ" Тогда 
//		
//	Иначе
//
//	КонецЕсли;
	
	//Если ПустоеЗначение(Результат) = 0 Тогда
	//	Сообщить(Результат);
	//	СтатусВозврата(0);
	//КонецЕсли;
	//
КонецПроцедуры // ВводНаОсновании()

Процедура ПриВыбореПартии()
	
	Продукция = Партия.Продукция;
	ВидПродукции = Партия.ВидПродукции;
	ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	ФормаУпаковки = Партия.ФормаУпаковки;
	НаименованиеПродукции = Партия.НаименованиеПродукции;
	ДатаИзготовления1 = Партия.ДатаИзготовления1;
	ДатаИзготовления2 = Партия.ДатаИзготовления2;
	ДатаСрокГодности1 = Партия.ДатаСрокГодности1;
	ДатаСрокГодности2 = Партия.ДатаСрокГодности2;
	Производитель_площадка = Партия.Производитель_Площадка;
	
КонецПроцедуры

Процедура ЗаполнитьТЧ()
	СпрПартии = СоздатьОбъект("Справочник.ВСД_Партия");
	СпрПартии.ВыбратьЭлементы();
	Пока СпрПартии.ПолучитьЭлемент()=1 Цикл
		Если СпрПартии.ПометкаУдаления()=0 Тогда
			НоваяСтрока();
			Партия = СпрПартии.ТекущийЭлемент();
			ПриВыбореПартии();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОткрытьВСД()
	тз = СоздатьОбъект("ТаблицаЗначений");
	тз.НоваяКолонка("ВСД",,,,,50);
	
	Спр = СоздатьОбъект("Справочник.ВСД_Партия");
	//Док.ВыбратьПодчиненныеДокументы(ДатаДок, ДатаДок, ТекущийДокумент());
	Спр.ВыбратьЭлементыПоРеквизиту("ДокОснование", ТекущийДокумент(), 0, 0);
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		тз.НоваяСтрока();
		тз.ВСД = Спр.ТекущийЭлемент();
	КонецЦикла;
	
	стр=0;
	Если тз.ВыбратьСтроку(стр,"ВСД")=1 Тогда 
		тз.ПолучитьСтрокуПоНомеру(стр);
		ОткрытьФорму(тз.ВСД);
	КонецЕсли;
КонецПроцедуры

НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");