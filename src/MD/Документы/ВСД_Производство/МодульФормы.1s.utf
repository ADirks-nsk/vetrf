 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НомерТекущейФормы;
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем ГМ;
Перем ИмяПеременной;
 

Процедура ПриВыбореФирмы()
	попытка
		ГМ.Инициализация(Контекст);
		//ГМ.ЗагрузитьПараметры(Фирма); 
		Производитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Производитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
		Экспертиза = ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность = ГМ.СписокКонстант.Получить("ВСД_Местность");
		Особыеотметки = ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	Исключение
		
	КонецПопытки
	
КонецПроцедуры
//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	UUID = "";
	applicationID = "";
	Статус = "";
	Если Скопирован = 0 Тогда
		Попытка
			Фирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
			ПриВыбореФирмы();
		Исключение КонецПопытки;
	Конецесли;	
КонецПроцедуры

Процедура ПослеОткрытия()
	ГМ.Инициализация(Контекст);        
КонецПроцедуры

Процедура ПриОткрытии()

	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений"); 
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
		
	Если Проведен()=1 Тогда 
		Форма.ТолькоПросмотр(1);
		Форма.кнПриход.Доступность(0);
		Форма.кнРасход.Доступность(0);
	КонецЕсли;

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("ТабличнаяЧасть");
		
	глАктивизироватьРеквизит(Контекст);		
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	
КонецПроцедуры


//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	ИначеЕсли ЗначениеЗакладки="ТабличнаяЧасть" Тогда
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если (Проведен()=0) 
  	Или ((Проведен()=1) И (Модифицированность()=1)) Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	//
	//Если НомерТекущейФормы = 1  Тогда
	//	Печать(СразуНаПринтер, КолЭкз);
	//ИначеЕсли НомерТекущейФормы = 2  Тогда
	//	Печать(СразуНаПринтер, КолЭкз, 1);
	//Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(?((Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0), ТекущийДокумент(), глВзятьКонтекст(Контекст)), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	//КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если Элемент.Вид()="ВСД_Площадка" Тогда
		УстановитьАтрибут(ИмяПеременной, Элемент);
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьВсеПлощадкиХС(ХС)
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";
	
	ВыбGuidХозСубъекта = (ХС.GUID)	;
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	//ТЗ.ВыбратьСтроку();	
	
	Возврат тз;
	
КонецФункции

Процедура Выбрать_Площадку_ПоХС(Имя, ВыбХС)
						
		тз = ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ИмяПеременной = Имя;
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
	
Функция НайтиВСД_Производство(Докум)
	//Продумать, что делать с Rejected Документами
	Рез ="";
	
	ДокТ = СоздатьОбъект("Документ");
	ДокТ.ВыбратьПодчиненныедокументы(,,Докум.ТекущийДокумент());
	Пока ДокТ.ПолучитьДокумент()=1 Цикл
	    Если (ДокТ.Вид() = "ВСД_Производство") и (ДокТ.ПометкаУдаления()=0) Тогда
			Если (ПустоеЗначение(ДокТ.Статус)=1) или (СокрЛП(докТ.Статус) = "COMPLETED") Тогда
	        	Рез = ДокТ.текущийДокумент();
				Прервать;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;

	Возврат Рез;
КонецФункции // ()


Функция ЗаполнитьВСДПроизводство(ДокР,ТЗЭлементов)
	
	
	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");

	// заполнение кастомного ВСД  - ЖД Доработать в этом случае отменить Ввод на основании и открыть Созданный док
	Если ФС.СуществуетФайл(КаталогОбработки+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_Производство.ert")=1 Тогда
		//{ переопределение функции создания ВСД 
			// интеграция переопределяется в Меркурий_Подключаемый_Создание_ВСД_Производство.ert
			СписокПараметров = СоздатьОбъект("СписокЗначений");
			СписокПараметров = СоздатьОбъект("СписокЗначений");
			СписокПараметров.ДобавитьЗначение(ДокР.ТекущийДокумент(),				"ДокОснование");
			СписокПараметров.ДобавитьЗначение(Производитель_ХозСубъект,	"Производитель_ХозСубъект");    
			СписокПараметров.ДобавитьЗначение(Производитель_Площадка,	"Производитель_Площадка");
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Экспертиза"),		"ВСД_Экспертиза");    
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Местность"),		"ВСД_Местность");
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки"),	"ВСД_ОсобыеОтметки");    
			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"НачДата");
			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"КонДата");    
			СписокПараметров.ДобавитьЗначение( ТЗЭлементов ,				"ТЗПродукция_Элемент"); 
				
			ОткрытьФормуМодально("Отчет",СписокПараметров,КаталогОбработки+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_Производство.ert");
			
			ДокументСсылка = "";
			
			Если ТипЗначенияСтр(СписокПараметров)  = "СписокЗначений" Тогда				
				ДокументСсылка = СписокПараметров.Получить("ДокументСсылка");				
			КонецЕсли;  
			
			Если ПустоеЗначение(ДокументСсылка)=1 Тогда
				Предупреждение("В подключаемом модуле не удалось создать ВСД","!");
				Возврат ""; 
			Иначе
				Возврат ДокументСсылка; 
			КонецЕсли;
			//}
	Иначе
		ДокОснование = ДокР.ТекущийДокумент();			
		ДатаДок = ДокОснование.ДатаДок;			
		//Производитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		//Производитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");			
		ЗавершитьОперацию = 1;
		Местность 		= ГМ.СписокКонстант.Получить("ВСД_Местность");
		ОсобыеОтметки 	= ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		Экспертиза 		= ГМ.СписокКонстант.Получить("ВСД_Экспертиза");

		cargoExpertized  = 1;
		cargoInspected  	= 1;			
		ТЗЭлементов.ВыбратьСтроки();
		Пока ТЗЭлементов.ПолучитьСтроку() = 1 Цикл 
			НоваяСтрока();
			Продукция_Элемент 	= ТЗЭлементов.ВСД_Продукция_Элемент;
			Количество 			= ТЗЭлементов.Количество;
			ЕдиницаИзмерения 	= Продукция_Элемент.ЕдиницаИзмерения;
			Продукция 			= Продукция_Элемент.Продукция;
			ВидПродукции 		= Продукция_Элемент.ВидПродукции;
			ВидДвижения 			= 1;
			НаименованиеПродукции = Продукция_Элемент.Наименование;
			ДатаИзготовления1 = ДатаДок;
			ДатаСрокГодности1 = ДатаИзготовления1+Продукция_Элемент.СрокГодности;
		КонецЦикла;			
		
        Если КоличествоСтрок()=0 Тогда
            Предупреждение("Нет элементов для создания!","!!");
        КонецЕсли;
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ОбработатьОснование(Докум)
	Рез = "";
	Если ПустоеЗначение(Докум) = 1 Тогда
	    Возврат Рез;
	КонецЕсли;
// в стандарте д.б. Контрагент - самопис - все что угодно
// Либо для исключения ошибки искать ХС по Площадке - по реквизиту GUIDХозСубъекта
	Возврат 1;
	
КонецФункции // ОбработатьОснование()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;            
	// Поищем есть ли уже введенный и проведенный
	Рез = НайтиВСД_Производство(ДокументОснование);
	Если ПустоеЗначение(Рез) =  0 Тогда
		ОткрытьФорму(Рез,"");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;		

	// подтянуть реквизиты для Меркурия по Фирме
	Попытка Фирма = ДокументОснование.Фирма; Исключение КонецПопытки;

	ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
	ГМ.Инициализация(Контекст); 

	Попытка
		Производитель_Площадка = ГМ.НайтиПлощадкуПоСкладу(ДокументОснование.Склад);
		Если ПустоеЗначение(Производитель_Площадка) = 1 Тогда
			Производитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");    
		КонецЕсли;
	Исключение
		Производитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");	
	КонецПопытки;
	
	Производитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");

	Попытка	Автор = глПользователь;	Исключение	КонецПопытки;
	Попытка	Филиал = глПользователь.Филиал;	Исключение	КонецПопытки;
	
	// проверим ошибки реквизитов и есть ли партии
	//Если ПустоеЗначение(ОбработатьОснование(ДокументОснование)) = 1 Тогда
	//    СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;
	
    ТЗЭлементов = ГМ.СвернутьТЧ(ДокументОснование);
	
	ДокСсылка = ЗаполнитьВСДПроизводство(ДокументОснование,ТЗЭлементов);
	Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
		ОткрытьФорму(ДокСсылка);
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВводНаОсновании()


Процедура ПриВыбореПартии()
	Если ВидДвижения = 1 Тогда
		Партия = "";
		Возврат;
	КонецЕсли;
	
	Продукция = Партия.Продукция;
	ВидПродукции = Партия.ВидПродукции;
	ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	ФормаУпаковки = Партия.ФормаУпаковки;
	НаименованиеПродукции = Партия.НаименованиеПродукции;
	Продукция_Элемент = Партия.Продукция_Элемент;
КонецПроцедуры


Процедура ПриВводеСтроки()
	СтатусВозврата(0);
КонецПроцедуры

Процедура ДобавитьПриход()
	НоваяСтрока();
	ВидДвижения = 1;	
КонецПроцедуры

Процедура ДобавитьРасход()
	НоваяСтрока();
	ВидДвижения = 2;	
КонецПроцедуры

Функция ПоказатьЗнакДвижения()
	Если ВидДвижения=1 Тогда 
		Возврат "+";
	Иначе
		Возврат "-";
	КонецЕсли;
КонецФункции

Процедура ОткрытьВСД()
	тз = СоздатьОбъект("ТаблицаЗначений");
	тз.НоваяКолонка("ВСД",,,,,50);
	
	Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(ДатаДок, ДатаДок, ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл
		тз.НоваяСтрока();
		тз.ВСД = Док.ТекущийДокумент();
	КонецЦикла;
	
	стр=0;
	Если тз.ВыбратьСтроку(стр,"ВСД")=1 Тогда 
		тз.ПолучитьСтрокуПоНомеру(стр);
		ОткрытьФорму(тз.ВСД);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьПартии()
	ОткрытьФормуМодально("Справочник.ВСД_Партия", ТекущийДокумент());	
КонецПроцедуры


//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

Процедура ЗавершитьОперацию()
	Если ЗавершитьОперацию=0 Тогда 
		Если operationId="" Тогда 
			operationId=НомерДок;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Отправить()

	Если Проведен()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(applicationID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0) Тогда
	    
	иначе
		Предупреждение("Запишите документ");
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка ВСД транзакция "+НомерДок+" от "+ДатаДок);
	
	ПараПараметров = СоздатьОбъект("СписокЗначений");
	ПараПараметров.Установить("КонтекстДокумента", Контекст);
	ПараПараметров.Установить("ГМ", ГМ);

	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
	ОткрытьФорму("Отчет", ПараПараметров, КаталогОбработки+"ВСД_ОтправкаИзФормы.ert");
   	
КонецПроцедуры

НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
