 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НомерТекущейФормы;
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем ГМ;
Перем ИмяПеременной;
Перем Типытранспорта;

Процедура ПриВыбореФирмы()
	попытка
		ГМ.Инициализация(Контекст);
		Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
		Экспертиза = ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность = ГМ.СписокКонстант.Получить("ВСД_Местность");
		Особыеотметки = ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	Исключение
		
	КонецПопытки
	
КонецПроцедуры


Процедура КликПроизводители()
	Сп = ЗначениеИзСтроки(ПроизводительСписок); 
	зн="";
	Сп.ВыбратьЗначение(зн,"Производители");
	
КонецПроцедуры

Процедура КликМаркировка()
	Сп = ЗначениеИзСтроки(МаркировкаСписок); 
	зн="";
	Попытка		
		Сп.ВыбратьЗначение(зн,"Маркировка");
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция ТипТССтрокой()
	Рез = Типытранспорта.Получить(СокрЛП(типТС));
	Возврат Рез;
КонецФункции


Процедура ПриСменеВидаВСД()

	Если ВидВСД=1 Тогда
		Форма.UUID.Доступность(0);
		
		//Форма.Продукция.Доступность(1);
		//Форма.ВидПродукции.Доступность(1);
		//Форма.НаименованиеПродукции.Доступность(1);
		//Форма.ДатаИзготовления1.Доступность(1);
		//Форма.ДатаИзготовления2.Доступность(1);
		//Форма.ДатаИзготовленияСтрока.Доступность(1);
		//Форма.ДатаСрокГодности1.Доступность(1);
		//Форма.ДатаСрокГодности2.Доступность(1);
		//Форма.ДатаСрокГодностиСтрока.Доступность(1);
	Иначе
		Форма.UUID.Доступность(1);
		
		//Форма.ВидПродукции.Доступность(0);
		//Форма.НаименованиеПродукции.Доступность(0);
		//Форма.ДатаИзготовления1.Доступность(0);
		//Форма.ДатаИзготовления2.Доступность(0);
		//Форма.ДатаИзготовленияСтрока.Доступность(0);
		//Форма.ДатаСрокГодности1.Доступность(0);
		//Форма.ДатаСрокГодности2.Доступность(0);
		//Форма.ДатаСрокГодностиСтрока.Доступность(0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	Статус="";
	applicationID="";
	GUID="";
	UUID="";
	НомерЗаписи="";
	ДатаИзменения="";
	RequestResult = "";
	Если Скопирован = 0 Тогда
		Попытка
			Фирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
			ПриВыбореФирмы();
		Исключение КонецПопытки;
		cargoInspected  	= 1;
		ТипТС=1;
		Попытка	Филиал = глПользователь.Филиал; Исключение КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриОткрытии()
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Площадки");
	Форма.Закладки.ДобавитьЗначение("Товары");
	Форма.Закладки.ДобавитьЗначение("ТТН");
//	Форма.Закладки.ДобавитьЗначение("Запрос");	
	//Форма.Закладки.ДобавитьЗначение("Результат");	
	
	//Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка, Товары, Подвал");
	//Иначе
	//	// введенный документ открываем на второй закладке
	//	Форма.Закладки.ТекущаяСтрока(2);
	//	Форма.ИспользоватьСлой("Шапка,Запрос,Подвал");
	//КонецЕсли;
	
	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	ПриСменеВидаВСД();
	
	
	сп = ЗначениеИзСтроки(ПроизводительСписок); 
	Попытка
		Сп.Выгрузить(спПроизводитель_Площадки);
	Исключение
	КонецПопытки;
	
	АвтоВремяТекущее();
	
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Шапка,Площадки,Подвал");
	ИначеЕсли ЗначениеЗакладки="Товары" Тогда
		Форма.ИспользоватьСлой("Шапка,Товары,Подвал");		
	ИначеЕсли ЗначениеЗакладки="ТТН" Тогда
		//ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,Подвал,ТТН");
	//ИначеЕсли ЗначениеЗакладки="Результат" Тогда
	//	Форма.ИспользоватьСлой("Шапка,Результат,Подвал");
	КонецЕсли;       
	//УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если (Проведен()=0) 
  	Или ((Проведен()=1) И (Модифицированность()=1)) Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		Возврат;
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	//
	//Если НомерТекущейФормы = 1  Тогда
	//	Печать(СразуНаПринтер, КолЭкз);
	//ИначеЕсли НомерТекущейФормы = 2  Тогда
	//	Печать(СразуНаПринтер, КолЭкз, 1);
	//Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(?((Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0), ТекущийДокумент(), глВзятьКонтекст(Контекст)), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	//КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ИмяПеременной="спПроизводитель_Площадки" Тогда 
		спПроизводитель_Площадки.ДобавитьЗначение(Элемент);
		КонтФормы.Форма.Закрыть();
		
		ПроизводительСписок = ЗначениеВСтроку(спПроизводитель_Площадки); 
	Иначе
		Если Элемент.Вид()="ВСД_Площадка" Тогда
			УстановитьАтрибут(ИмяПеременной, Элемент);
			КонтФормы.Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьВсеПлощадкиХС(ХС)
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";
	
	ВыбGuidХозСубъекта = (ХС.GUID)	;
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	//ТЗ.ВыбратьСтроку();	
	
	Возврат тз;
	
КонецФункции

Процедура Выбрать_Площадку_ПоХС(Имя, ВыбХС)
						
		тз = ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ИмяПеременной = Имя;
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Процедура ОткрытьПартии()
	ОткрытьФормуМодально("Справочник.ВСД_Партия", ТекущийДокумент());	
КонецПроцедуры

Процедура ПриВыборе_Продукция_Элемент()
	Продукция = Продукция_Элемент.Продукция;
	ВидПродукции = Продукция_Элемент.ВидПродукции;
	НаименованиеПродукции = Продукция_Элемент.Наименование;
	
КонецПроцедуры


//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

Процедура ВводНаОсновании(ДокументОснование)
	//ДокументОснование = СоздатьОбъект("Документ.ВСД");
	
	UUID = ДокументОснование.UUID;
	ВидВСД = 2; // электронный
	
	Отправитель_ХозСубъект = ДокументОснование.Отправитель_ХозСубъект;
	Отправитель_Площадка = ДокументОснование.Отправитель_Площадка;
	Получатель_ХозСубъект = ДокументОснование.Получатель_ХозСубъект;
	Получатель_Площадка = ДокументОснование.Получатель_Площадка;
	Производитель_Площадка = ДокументОснование.Производитель_Площадка;
	
	Продукция = ДокументОснование.Продукция;
	ВидПродукции = ДокументОснование.ВидПродукции;
	НаименованиеПродукции = ДокументОснование.НаименованиеПродукции;
	Продукция_Элемент = ДокументОснование.Продукция_Элемент;
	
	Количество = ДокументОснование.Количество;
	ЕдиницаИзмерения = ДокументОснование.ЕдиницаИзмерения;
	КоличествоМест = ДокументОснование.КоличествоМест;
	ФормаУпаковки = ДокументОснование.ФормаУпаковки;
	
	ДатаИзготовления1 = ДокументОснование.ДатаИзготовления1;
	ДатаИзготовления2 = ДокументОснование.ДатаИзготовления2;
	//ДатаИзготовленияСтрока = ДокументОснование.ДатаИзготовленияСтрока;
	
	ДатаСрокГодности1 = ДокументОснование.ДатаСрокГодности1;
	ДатаСрокГодности2 = ДокументОснование.ДатаСрокГодности2;
	//ДатаСрокГодностиСтрока = ДокументОснование.ДатаСрокГодностиСтрока;
	
	
КонецПроцедуры


Процедура УдалитьПроизводителя()
	//ПроизводительСписок=""; 
	спПроизводитель_Площадки.УдалитьЗначение( спПроизводитель_Площадки.ТекущаяСтрока() );
	ПроизводительСписок = ЗначениеВСтроку(спПроизводитель_Площадки); 
КонецПроцедуры


Процедура Отправить()

	Если Проведен()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(applicationID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0) Тогда
	    
	иначе
		Предупреждение("Запишите документ");
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка ВСД транзакция "+НомерДок+" от "+ДатаДок);
	
   ПараПараметров = СоздатьОбъект("СписокЗначений");
   ПараПараметров.Установить("КонтекстДокумента", Контекст);
   // передаем контекст документа
    
    ГМ 					 = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
    глМеркурийИнтеграция = СоздатьОбъект("МеркурийИнтеграция");
	ГМ 					 = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
	ГМ.Инициализация();        
    //Переопределение функций, если они определены в модуле
    глМеркурийИнтеграция.Инициализация(ГМ);    
   
   КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
   ОткрытьФорму("Отчет", ПараПараметров, КаталогОбработки+"ВСД_ОтправкаИзФормы.ert");
   	
   Возврат;
КонецПроцедуры


Процедура ДобавитьЛабИсследования()
	ОткрытьФорму("Документ.ВСД2_ЛабораторныеИсследования",ТекущийДокумент());
КонецПроцедуры

НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");  


Типытранспорта = СоздатьОбъект("СписокЗначений");
Типытранспорта.ДобавитьЗначение("Автомобильный", "1");
Типытранспорта.ДобавитьЗначение("Железнодорожный", "2");
Типытранспорта.ДобавитьЗначение("Авиатранспортный", "3");
Типытранспорта.ДобавитьЗначение("Морской (контейнерная партия)", "4"); 
Типытранспорта.ДобавитьЗначение("Морской (трюмная партия)", "5");
Типытранспорта.ДобавитьЗначение("Речной", "6");
Типытранспорта.ДобавитьЗначение("Перегон", "7");
ГМ 	 = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
