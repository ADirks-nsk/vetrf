 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НомерТекущейФормы;
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем ГМ;
Перем ИмяПеременной;

Перем ПараПараметров; // Для отправки из формы
 
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции




Процедура ПриВыбореФирмы()
	попытка
		ГМ.Инициализация(Фирма);
		//ГМ.ЗагрузитьПараметры(Фирма); 
		Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
		Экспертиза = ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность = ГМ.СписокКонстант.Получить("ВСД_Местность");
		Особыеотметки = ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	Исключение
		
	КонецПопытки
	
КонецПроцедуры


Процедура ДоступностьЭлементов()
	Если Проведен()=1 Тогда 
		Форма.ТолькоПросмотр(1); 
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОтправить.Доступность(0);	
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	UUID = "";
	applicationID = "";
	Статус = "";
КонецПроцедуры

Процедура ПриОткрытии()
	//из типовой ЖД
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("ТабличнаяЧасть");
	
	глАктивизироватьРеквизит(Контекст);		
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	
	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
	
	ДоступностьЭлементов();
	
	ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");

КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	ИначеЕсли ЗначениеЗакладки="ТабличнаяЧасть" Тогда
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если (Проведен()=0) 
  	Или ((Проведен()=1) И (Модифицированность()=1)) Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	//
	//Если НомерТекущейФормы = 1  Тогда
	//	Печать(СразуНаПринтер, КолЭкз);
	//ИначеЕсли НомерТекущейФормы = 2  Тогда
	//	Печать(СразуНаПринтер, КолЭкз, 1);
	//Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(?((Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0), ТекущийДокумент(), глВзятьКонтекст(Контекст)), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	//КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если Элемент.Вид()="ВСД_Площадка" Тогда
		УстановитьАтрибут(ИмяПеременной, Элемент);
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура Выбрать_Площадку_ПоХС(Имя, ВыбХС)
						
		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);
		
		СписокОтбора = СоздатьОбъект("СписокЗначений");
		
		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;			
				
		ИмяПеременной = Имя;
		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры


Процедура ПриВыбореПартии()
	Продукция = Партия.Продукция;
	ВидПродукции = Партия.ВидПродукции;
	ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	ФормаУпаковки = Партия.ФормаУпаковки;
	НаименованиеПродукции = Партия.НаименованиеПродукции;
КонецПроцедуры

Процедура ОткрытьПартии()
	ОткрытьФормуМодально("Справочник.ВСД_Партия", ТекущийДокумент());	
КонецПроцедуры


//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
//******************************   ОТПРАВКА 
Процедура Отправить()

	Если Проведен()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(applicationID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (Модифицированность()=0) и (ПустоеЗначение(ТекущийДокумент())=0) Тогда
	    
	иначе
		Предупреждение("Запишите документ");
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка ВСД транзакция "+НомерДок+" от "+ДатаДок);
	
    ПараПараметров = СоздатьОбъект("СписокЗначений");
    ПараПараметров.Установить("КонтекстДокумента", Контекст);
    ГМ 					 = СоздатьОбъект("Меркурий_ГлобальныйМодуль");    
	
	//Переопределение функций, если они определены в модуле
	глМеркурийИнтеграция = СоздатьОбъект("МеркурийИнтеграция");
    глМеркурийИнтеграция.Инициализация(ГМ);    
	
	ГМ.Инициализация();        
    
    КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
    ОткрытьФорму("Отчет", ПараПараметров, КаталогОбработки+"ВСД_ОтправкаИзФормы.ert");
   	
КонецПроцедуры

// ** сервисные для ввода на основании реализации 




Функция ЗаполнитьВСДТранзакция(ДокР,ТЗПартий)
	
	
	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");

	// заполнение кастомного ВСД  
	Если ФС.СуществуетФайл(КаталогОбработки+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_транзакция.ert")=1 Тогда
		//{ переопределение функции создания ВСД 
			// интеграция переопределяется в Меркурий_Подключаемый_Создание_ВСД_Производство.ert
			//
			
			СписокПараметров = СоздатьОбъект("СписокЗначений");
			СписокПараметров.ДобавитьЗначение(ДокР.ТекущийДокумент(),				"ДокОснование");
			СписокПараметров.ДобавитьЗначение(Отправитель_ХозСубъект,				"Отправитель_ХозСубъект");    
			СписокПараметров.ДобавитьЗначение(Отправитель_Площадка,					"Отправитель_Площадка");
			СписокПараметров.ДобавитьЗначение(Перевозчик_ХозСубъект,				"Перевозчик_ХозСубъект");
			СписокПараметров.ДобавитьЗначение(Получатель_ХозСубъект,				"ХС"); 
			СписокПараметров.ДобавитьЗначение(Получатель_Площадка,					"Площадка");
			//
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Экспертиза"),	"ВСД_Экспертиза");    
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Местность"),		"ВСД_Местность");
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки"),	"ВСД_ОсобыеОтметки");    

			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"НачДата");
			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"КонДата");    
			
			СписокПараметров.ДобавитьЗначение( ТЗПартий,					"СписокПартий");    
				
			ОткрытьФормуМодально("Отчет",СписокПараметров,КаталогОбработки+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_транзакция.ert");
			
			ДокументСсылка = "";
			
			Если ТипЗначенияСтр(СписокПараметров)  = "СписокЗначений" Тогда				
				ДокументСсылка = СписокПараметров.Получить("ДокументСсылка");				
			КонецЕсли;  
			
			Если ПустоеЗначение(ДокументСсылка)=1 Тогда
				Предупреждение("В подключаемом модуле не удалось создать ВСД","!");
				Возврат ""; 
			Иначе
				Возврат ДокументСсылка; 
			КонецЕсли;
			//}

	Иначе
		ДокОснование = ДокР.ТекущийДокумент();			
		ДатаДок = ДокОснование.ДатаДок;			
		//Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		//Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");			
		//Перевозчик_ХозСубъект = ГМ.СписокКонстант.Получить("Перевозчик_ХозСубъект");
		
		//НазваниеРеквизитаГрузополучатель = ГМ.СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
		//Попытка
		//	Получатель_ХозСубъект = ГМ.НайтиХозСубъект(ДокР.Контрагент); //ХС Получателя
		//Исключение
		//	Получатель_ХозСубъект = ГМ.НайтиХозСубъект(ДокР.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
		//КонецПопытки;
		//Получатель_Площадка = ГМ.НайтиПлощадкуПоКонтрагенту(ДокР.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
		
		Попытка	ТТН = ДокОснование.Маршрут;	Исключение 	КонецПопытки;
		ТтнСерия = ""; //ТТН.Серия;
		ТтнНомер = ДокР.НомерДок;
		ТтнДата = ДокР.ДатаДок;
		Попытка				
			номерАвто = ТТН.Авто.НомернойЗнак;
			Если ПустоеЗначение(номерАвто)=1 Тогда
				номерАвто = "не используется";
			КонецЕсли;
		Исключение
			номерАвто = "не используется";
		КонецПопытки;
		ФормаВСД = 1;			
		Экспертиза 		= ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность 		= ГМ.СписокКонстант.Получить("ВСД_Местность");
		ОсобыеОтметки 	= ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		cargoExpertized  = 1;
		cargoInspected  	= 1;			
		
		//свертка по партиям
		//ТЗПартий.ВыбратьСтроки();
		//Пока ТЗПартий.ПолучитьСтроку() = 1 Цикл
		//	ВрПартия = ТЗПартий.Партия;
		//	Если ПустоеЗначение(ВрПартия) = 1 Тогда
		//	    Продолжить;
		//	КонецЕсли;
		//	
		//	Если ТЗПартий.Колво < ТЗПартий.КолвоСписания Тогда
		//		Сообщить("В партии "+Партия+" недостаточно веса, будет списано "+ТЗПартий.Колво);
		//	    КСписанию = ТЗПартий.Колво;
		//	Иначе
		//		КСписанию = ТЗПартий.КолвоСписания;
		//	КонецЕсли; 
		//	НоваяСтрока();
		//	Партия = ВрПартия;
		//	Количество = КСписанию;//ТЗПартий.КолвоСписания;				
		//	Попытка	КоличествоМест = ТЗПартий.КолвоМестСписания; Исключение КонецПопытки;
		//			
		//	ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
		//	ФормаУпаковки = Партия.ФормаУпаковки;
		//	Если ПустоеЗначение(ФормаУпаковки)=1 Тогда // без упаковки Мест = 0
		//		Сообщить("Партия "+ТЗПартий.ВСД_Продукция_Элемент+ " без упаковки");
		//		КоличествоМест = 0;    
		//	КонецЕсли;
		//	
		//	Продукция = Партия.Продукция;
		//	ВидПродукции = Партия.ВидПродукции;
		//	Продукция_Элемент 	= ТЗПартий.ВСД_Продукция_Элемент;
		//	ТермическоеСостояние = Макс(Продукция_Элемент.ТермическиеУсловияПеревозки,1);
		//	НаименованиеПродукции = ТЗПартий.ВСД_Продукция_Элемент.Наименование;
		//КонецЦикла;			
		
		тз = СоздатьОбъект("ТаблицаЗначений");
		ДокР.ВыгрузитьТабличнуюЧасть(тз);

		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			ВрПартия=""; колвоПартии =0 ; колвоМестПартии=0;
			Номенклатура = тз.Номенклатура;
			стр =0;
			Если ТЗПартий.НайтиЗначение( Номенклатура.ВСД_Продукция_Элемент, стр,"ВСД_Продукция_Элемент")>0 Тогда 
				ВрПартия = ТЗПартий.ПолучитьЗначение(стр, "Партия");
				колвоПартии = ВрПартия.Количество;								
				колвоМестПартии = ВрПартия.КоличествоМест;								
			КонецЕсли;
			
			Если ПустоеЗначение(ВрПартия) = 0 Тогда
				Если колвоПартии < тз.Количество Тогда
					Сообщить("В партии "+Партия+" недостаточно веса, можно списать "+колвоПартии+" "+ВрПартия.ЕдиницаИзмерения+" / "+колвоМестПартии+" "+ВрПартия.ФормаУпаковки);
				    //КСписанию = колвоПартии;
				Иначе
					//КСписанию = тз.Количество;
				КонецЕсли; 
			Иначе
				//КСписанию = тз.Количество;
			КонецЕсли;
					
			Партия = ВрПартия;
			Количество = тз.Количество; //КСписанию;				
			Попытка КоличествоМест = тз.ПолучитьЗначение(тз.НомерСтроки, ГМ.СписокКонстант.Получить("НазваниеРеквизитаКоличествоМест") ); Исключение КонецПопытки;
					
			ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
			ФормаУпаковки = Партия.ФормаУпаковки;
			Если ПустоеЗначение(ФормаУпаковки)=1 Тогда // без упаковки Мест = 0
				Сообщить("Партия "+ТЗПартий.ВСД_Продукция_Элемент+ " без упаковки");
				КоличествоМест = 0;    
			КонецЕсли;
			
			Продукция = Партия.Продукция;
			ВидПродукции = Партия.ВидПродукции;
			Продукция_Элемент 	= ТЗПартий.ВСД_Продукция_Элемент;
			ТермическоеСостояние = Макс(Продукция_Элемент.ТермическиеУсловияПеревозки,1);
			НаименованиеПродукции = ТЗПартий.ВСД_Продукция_Элемент;
		КонецЦикла;		
		
        Если КоличествоСтрок()=0 Тогда
            Предупреждение("Нет партий для списания!");
        КонецЕсли;
		Возврат "";
	КонецЕсли;
КонецФункции



Функция НайтиВСД_Транзакция(Докум)
	//Продумать, что делать с Rejected Документами
	Рез ="";
	
	ДокТ = СоздатьОбъект("Документ");
	ДокТ.ВыбратьПодчиненныедокументы(,,Докум.ТекущийДокумент());
	Пока ДокТ.ПолучитьДокумент()=1 Цикл
	    Если (ДокТ.Вид() = "ВСД_транзакция") и (ДокТ.ПометкаУдаления()=0) Тогда
			Если (ПустоеЗначение(ДокТ.Статус)=1) или (СокрЛП(докТ.Статус) = "COMPLETED") Тогда
	        	Рез = ДокТ.текущийДокумент();
				Прервать;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;

	Возврат Рез;
КонецФункции // ()


Функция ОбработатьРеализацию(Докум)
	//Выполняет поиск Грузополучателя
	Рез = "";
	Если ПустоеЗначение(Докум) = 1 Тогда
	    Возврат Рез;
	КонецЕсли;
// в стандарте д.б. Контрагент - самопис - все что угодно
// Либо для исключения ошибки искать ХС по Площадке - по реквизиту GUIDХозСубъекта

	Попытка
		НазваниеРеквизитаГрузополучатель = ГМ.СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
		
		Если Докум.Вид() = "ПеремещениеТМЦ" Тогда
			Получатель_Площадка = ГМ.НайтиПлощадкуПоСкладу(Докум.СкладПолучатель);
			Получатель_ХозСубъект = ГМ.НайтиХСпоGUID(Получатель_Площадка.GuidХозСубъекта);   //Отправитель_ХозСубъект; // ПолучательФирма (тип спр.Фирмы)  - НайтиХСПоФирме !!!
	
			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
				Сообщить("Не удалось найти площадку ГрузоПолучателя по складу "+Докум.СкладПолучатель,"!");
				Возврат Рез;
			КонецЕсли;
			
			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
				Сообщить("нет сведений о Получателе "+Докум.СкладПолучатель+" в справочнике ВСД_ХозСубъекты","!!");
				Возврат рез;
			КонецЕсли;		
			
		Иначе
			//Реализация
			Попытка
				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.Контрагент);
			Исключение
				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
			КонецПопытки;
		
			Попытка Получатель_Площадка = ГМ.НайтиПлощадкуПоКонтрагенту(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)); Исключение КонецПопытки;
		
			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
				Сообщить("нет сведений о площадке ГрузоПолучателя "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_Площадки","!!");
				Возврат Рез;
			КонецЕсли;		

			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
				Сообщить("нет сведений о Получателе "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_ХозСубъекты","!!");
				Возврат рез;
			КонецЕсли;		

		КонецЕсли;
	
	Исключение
		Сообщить("Не удалось получить сведения о Получателе","!");
		Возврат 0;
	КонецПопытки;	

	Возврат 1;
	
КонецФункции // ОбработатьРеализацию()



//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;            

	ДатаДок = ДокументОснование.ДатаДок;		
	
	// либо Вид Основания подтягивать из настроек
	// Поищем есть ли уже введенный и проведенный
	Рез = НайтиВСД_Транзакция(ДокументОснование);
	Если ПустоеЗначение(Рез) =  0 Тогда
		ОткрытьФорму(Рез,"");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;		

    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");

	//Переопределение функций, если они определены в модуле
	глМеркурийИнтеграция = СоздатьОбъект("МеркурийИнтеграция");
    глМеркурийИнтеграция.Инициализация(ГМ); 
    

	// подтянуть реквизиты Меркурия загрузим по Фирме
	Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
		Фирма = ДокументОснование.Фирма;
		ГМ.Инициализация(Фирма);
	Иначе
		ГМ.Инициализация();
	КонецЕсли;
	
	// проверим ошибки реквизитов и есть ли партии
	Если ПустоеЗначение(ОбработатьРеализацию(ДокументОснование)) = 1 Тогда
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");    
	Перевозчик_ХозСубъект = ГМ.СписокКонстант.Получить("Перевозчик_ХозСубъект");
	Попытка
		Отправитель_Площадка = ГМ.НайтиПлощадкуПоСкладу(ДокументОснование.Склад);
		Если ПустоеЗначение(Отправитель_Площадка) = 1 Тогда
			Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");    
		КонецЕсли;
	Исключение
		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");	
	КонецПопытки;
	
	ТЗПартий = ГМ.ЗаполнитьПартииПоТЧДокумента(ДокументОснование,Отправитель_Площадка);
	Если ТЗПартий.КоличествоСтрок()=0 Тогда
	    Сообщить("Нет партий для списания");
	    //СтатусВозврата(0);
		//Возврат;
	КонецЕсли;
	
	Попытка	Автор = глПользователь;	Исключение	КонецПопытки;
	Попытка	Филиал = глПользователь.Филиал;	Исключение	КонецПопытки;
	
	ДокСсылка = ЗаполнитьВСДТранзакция(ДокументОснование,ТЗПартий);
	Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
		ОткрытьФорму(ДокСсылка);
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры // ВводНаОсновании()


Процедура ПриЗакрытии()
   Если ТипЗначенияСтр(ПараПараметров) = "ГрупповойКонтекст" Тогда
// форма обработки открыта
      ПараПараметров.Форма.Закрыть();
// закрываем форму обработки
   КонецЕсли;
КонецПроцедуры // ПриЗакрытии


Процедура ДействияВСД()
	
	//меню
	СписокДействийВСД = СоздатьОбъект("СписокЗначений");
	СписокДействийВСД.ДобавитьЗначение("ПогаситьВСД","Погасить ВСД");
	СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
	СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");
	СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
		
    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");    
	
	//Переопределение функций, если они определены в модуле
	глМеркурийИнтеграция = СоздатьОбъект("МеркурийИнтеграция");
    глМеркурийИнтеграция.Инициализация(ГМ);    
	
	ГМ.Инициализация();        
	
	стр=0; Зн="";
	Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
		
		Если Зн ="ПогаситьВСД"  Тогда 
			ГМ.ПогаситьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД" Тогда 
			ГМ.ПечатьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД_Тест" Тогда 
			ГМ.ПечатьВСД_Тест(ТекущийДокумент());
		ИначеЕсли Зн = "ОткрытьВсдВГис" Тогда
			ГМ.ОткрытьВсдВГис( ТекущийДокумент() );		
		ИначеЕсли Зн = "СписокВСД" Тогда
			ГМ.ОткрытьСписокВсд( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОтправитьВСД" Тогда 
			Отправить();
		ИначеЕсли Зн = "АннулироватьВСД" Тогда 
			ГМ.Аннулировать_ВСД_транзакция( ТекущийДокумент() );
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

