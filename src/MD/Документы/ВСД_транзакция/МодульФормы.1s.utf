 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
//Перем ГМ; = определение перенесено в ПриНачалеРаботыСистемы() Глобальный Модуль конфигурации
Перем ВыбФирма;

Перем ПараПараметров; // Для отправки из формы


Процедура ПриВыбореФирмы()
	ГМ.Инициализация(Контекст);
	Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
	Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
	Перевозчик_ХозСубъект = ГМ.СписокКонстант.Получить("Перевозчик_ХозСубъект");
	Экспертиза = ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
	Местность = ГМ.СписокКонстант.Получить("ВСД_Местность");
	Особыеотметки = ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
КонецПроцедуры


//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());

		ФирмаИмяРеквизита = "";
		ГМ.ПолучитьИмяРеквизитаФирма(Вид(), ФирмаИмяРеквизита);
		Попытка УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);  Исключение КонецПопытки;

		ПриВыбореФирмы();
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСФ

Процедура ДоступностьЭлементов()
	Если Проведен()=1 Тогда 
		Форма.ТолькоПросмотр(1); 
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОтправить.Доступность(0);	
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	UUID = "";
	applicationID = "";
	Статус = "";
	Если Скопирован = 0 Тогда
		Попытка
			Фирма = ГМ.глЗначениеПоУмолчанию("ОсновнаяФирма");
			ПриВыбореФирмы();
			ТермическоеСостояние = 1;
		Исключение КонецПопытки;
	КонецЕсли;

	Автор = ГМ.ПолучитьАвтора();
	Попытка	Филиал = Автор.Филиал;			Исключение	КонецПопытки;
КонецПроцедуры
//
//Процедура ПослеОткрытия()
//	ГМ.Инициализация(Контекст);        
//КонецПроцедуры

Процедура ПриОткрытии()

	ГМ._ПриОткрытии(Контекст);

	Если ТермическоеСостояние > 0 Тогда
		ТермическийСписок.ТекущаяСтрока(ТермическоеСостояние);	
	КонецЕсли;

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("ТабличнаяЧасть","Табличная часть");
	
	//глАктивизироватьРеквизит(Контекст);		
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	
	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
	
	ДоступностьЭлементов();
	
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	ИначеЕсли ЗначениеЗакладки="ТабличнаяЧасть" Тогда
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	ГМ.ПечатьСокрВСД( ТекущийДокумент() );
	
КонецПроцедуры // ПоКнопкеПечать()

Процедура ПриВыбореПартии()
	Продукция = Партия.Продукция;
	ВидПродукции = Партия.ВидПродукции;
	ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	ФормаУпаковки = Партия.ФормаУпаковки;
	НаименованиеПродукции = Партия.НаименованиеПродукции;
	Продукция_Элемент = Партия.Продукция_Элемент;
КонецПроцедуры

Процедура ОткрытьПартии()
	ОткрытьФормуМодально("Справочник.ВСД_Партия", ТекущийДокумент());	
КонецПроцедуры


//******************************************************************************
//******************************   ОТПРАВКА 
Процедура Отправить()
	Записать();
	
	Если Проведен()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(applicationID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка ВСД транзакция "+НомерДок+" от "+ДатаДок);
	
    ПараПараметров = СоздатьОбъект("СписокЗначений");
    ПараПараметров.Установить("КонтекстДокумента", Контекст);
	ПараПараметров.Установить("ГМ", ГМ);
   
    ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы.ert");
   	
КонецПроцедуры

// ** сервисные для ввода на основании реализации 




Функция ЗаполнитьВСДТранзакция(ДокР,ТЗПартий)
	

	// заполнение кастомного ВСД  
	Если ФС.СуществуетФайл(ГМ.КаталогМодуля+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_транзакция.ert")=1 Тогда
		//{ переопределение функции создания ВСД 
			// интеграция переопределяется в Меркурий_Подключаемый_Создание_ВСД_Производство.ert
			//
			
			СписокПараметров = СоздатьОбъект("СписокЗначений");
			СписокПараметров.ДобавитьЗначение(ДокР.ТекущийДокумент(),				"ДокОснование");
			СписокПараметров.ДобавитьЗначение(Отправитель_ХозСубъект,				"Отправитель_ХозСубъект");    
			СписокПараметров.ДобавитьЗначение(Отправитель_Площадка,					"Отправитель_Площадка");
			СписокПараметров.ДобавитьЗначение(Перевозчик_ХозСубъект,				"Перевозчик_ХозСубъект");
			СписокПараметров.ДобавитьЗначение(Получатель_ХозСубъект,				"ХС"); 
			СписокПараметров.ДобавитьЗначение(Получатель_Площадка,					"Площадка");
			//
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Экспертиза"),	"ВСД_Экспертиза");    
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_Местность"),		"ВСД_Местность");
			СписокПараметров.ДобавитьЗначение( ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки"),	"ВСД_ОсобыеОтметки");    

			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"НачДата");
			СписокПараметров.ДобавитьЗначение( ДокР.ДатаДок,				"КонДата");    
			
			СписокПараметров.ДобавитьЗначение( ТЗПартий,					"СписокПартий");    
			
			СписокПараметров.ДобавитьЗначение( ГМ, "ГМ"); 
				
			ОткрытьФормуМодально("Отчет",СписокПараметров,ГМ.КаталогМодуля+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_транзакция.ert");
			
			ДокументСсылка = "";
			
			Если ТипЗначенияСтр(СписокПараметров)  = "СписокЗначений" Тогда				
				ДокументСсылка = СписокПараметров.Получить("ДокументСсылка");				
			КонецЕсли;  
			
			Если ПустоеЗначение(ДокументСсылка)=1 Тогда
				Предупреждение("В подключаемом модуле не удалось создать ВСД","!");
				Возврат ""; 
			Иначе
				Возврат ДокументСсылка; 
			КонецЕсли;
			//}

	Иначе
		ДокОснование = ДокР.ТекущийДокумент();			

		ТтнСерия = ""; //ТТН.Серия;
		ТтнНомер = ДокР.НомерДок;
		ТтнДата = ДокР.ДатаДок;
		Попытка				
			номерАвто = ГМ.ПолучитьНомерАвто(ДокОснование);//ТТН.Авто.НомернойЗнак;
			Если ПустоеЗначение(номерАвто)=1 Тогда
				номерАвто = "не используется";
			КонецЕсли;
		Исключение
			номерАвто = "не используется";
		КонецПопытки;
		Экспертиза 		= ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
		Местность 		= ГМ.СписокКонстант.Получить("ВСД_Местность");
		ОсобыеОтметки 	= ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		cargoExpertized  = 1;
		cargoInspected  	= 1;			
		ТермическоеСостояние = 4;
		//свертка по партиям
		ТЗПартий.ВыбратьСтроки();
		Пока ТЗПартий.ПолучитьСтроку() = 1 Цикл
			ВрПартия = ТЗПартий.Партия;
			Если ПустоеЗначение(ВрПартия) = 1 Тогда
			    Продолжить;
			КонецЕсли;
			
			Если ТЗПартий.Колво < ТЗПартий.КолвоСписания Тогда
				Сообщить("В партии "+Партия+" недостаточно веса, будет списано "+ТЗПартий.Колво);
			    КСписанию = ТЗПартий.Колво;
			Иначе
				КСписанию = ТЗПартий.КолвоСписания;
			КонецЕсли; 
			НоваяСтрока();
			Партия = ВрПартия;
			Количество = КСписанию;//ТЗПартий.КолвоСписания;				
			Попытка	КоличествоМест = ТЗПартий.КолвоМестСписания; Исключение КонецПопытки;
					
			ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
			ФормаУпаковки = Партия.ФормаУпаковки;
			Если ПустоеЗначение(ФормаУпаковки)=1 Тогда // без упаковки Мест = 0
				//Сообщить("Партия "+ТЗПартий.ВСД_Продукция_Элемент+ " без упаковки");
				КоличествоМест = 0;    
			КонецЕсли;
			
			Продукция = Партия.Продукция;
			ВидПродукции = Партия.ВидПродукции;
			Продукция_Элемент 	= ТЗПартий.ВСД_Продукция_Элемент;
			ТермическоеСостояние = Мин(Продукция_Элемент.ТермическиеУсловияПеревозки,ТермическоеСостояние);
			НаименованиеПродукции = ТЗПартий.ВСД_Продукция_Элемент.Наименование;
		КонецЦикла;
		ТермическоеСостояние = ?(ТермическоеСостояние=0,1,ТермическоеСостояние);
        Если КоличествоСтрок()=0 Тогда
            Предупреждение("Нет партий для списания!");
        КонецЕсли;
		Возврат "";
        
		
		
		// Ниже убрать  до КонецЕсли;
		
		тз = СоздатьОбъект("ТаблицаЗначений");
		ДокР.ВыгрузитьТабличнуюЧасть(тз);

		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			ВрПартия=""; колвоПартии =0 ; колвоМестПартии=0;
			Номенклатура = тз.Номенклатура;
			стр =0;
			Если ТЗПартий.НайтиЗначение( Номенклатура.ВСД_Продукция_Элемент, стр,"ВСД_Продукция_Элемент")>0 Тогда 
				ВрПартия = ТЗПартий.ПолучитьЗначение(стр, "Партия");
				Попытка // Пустая партия
					колвоПартии = ВрПартия.Количество;								
					колвоМестПартии = ВрПартия.КоличествоМест;	
				Исключение КонецПопытки;
			КонецЕсли;
			
			Попытка 
				КоличествоСписания = тз.Количество*тз.Единица.Вес;
			Исключение 	
				КоличествоСписания = тз.Количество; 
				Сообщить("Нестандартная конфигурация!!! Количество м.б. рассчитано неверно","!!"); 
			КонецПопытки;//КСписанию;
			
			Если ПустоеЗначение(ВрПартия) = 0 Тогда
				Если колвоПартии < КоличествоСписания Тогда
					Сообщить("В партии "+Партия+" недостаточно веса, можно списать "+колвоПартии+" "+ВрПартия.ЕдиницаИзмерения+" / "+колвоМестПартии+" "+ВрПартия.ФормаУпаковки);
				    //КСписанию = колвоПартии;
				Иначе
					//КСписанию = тз.Количество;
				КонецЕсли; 
			Иначе
				Сообщить("Нет партий для "+Номенклатура);
				//КСписанию = тз.Количество;
			КонецЕсли;
					
			Партия = ВрПартия;
			Количество = КоличествоСписания; //КСписанию;				
			Попытка КоличествоМест = тз.ПолучитьЗначение(тз.НомерСтроки, ГМ.СписокКонстант.Получить("НазваниеРеквизитаКоличествоМест") ); Исключение КонецПопытки;
					
			ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
			ФормаУпаковки = Партия.ФормаУпаковки;
			Если ПустоеЗначение(ФормаУпаковки)=1 Тогда // без упаковки Мест = 0
				//Сообщить("Партия "+ТЗПартий.ВСД_Продукция_Элемент+ " без упаковки");
				КоличествоМест = 0;    
			КонецЕсли;
			
			Продукция = Партия.Продукция;
			ВидПродукции = Партия.ВидПродукции;
			Продукция_Элемент 	= Номенклатура.ВСД_Продукция_Элемент;//ТЗПартий.ВСД_Продукция_Элемент;
			ТермическоеСостояние = Мин(Продукция_Элемент.ТермическиеУсловияПеревозки,ТермическоеСостояние);
			НаименованиеПродукции = Продукция_Элемент;//ТЗПартий.ВСД_Продукция_Элемент;
		КонецЦикла;		
		ТермическоеСостояние = ?(ТермическоеСостояние=0,1,ТермическоеСостояние);
        Если КоличествоСтрок()=0 Тогда
            Предупреждение("Нет партий для списания!");
        КонецЕсли;
		Возврат "";
	КонецЕсли;
КонецФункции



Функция НайтиВСД_Транзакция(Докум)
	//Продумать, что делать с Rejected Документами
	Рез ="";
	
	ДокТ = СоздатьОбъект("Документ");
	ДокТ.ВыбратьПодчиненныедокументы(,,Докум.ТекущийДокумент());
	Пока ДокТ.ПолучитьДокумент()=1 Цикл
	    Если (ДокТ.Вид() = "ВСД_транзакция") и (ДокТ.ПометкаУдаления()=0) Тогда
			Если (ПустоеЗначение(ДокТ.Статус)=1) или (СокрЛП(докТ.Статус) = "COMPLETED") Тогда
	        	Рез = ДокТ.текущийДокумент();
				Прервать;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;

	Возврат Рез;
КонецФункции // ()


//Функция ОбработатьРеализацию(Докум)
//	//Выполняет поиск Грузополучателя
//	Рез = "";
//	Если ПустоеЗначение(Докум) = 1 Тогда
//	    Возврат Рез;
//	КонецЕсли;
//// в стандарте д.б. Контрагент - самопис - все что угодно
//// Либо для исключения ошибки искать ХС по Площадке - по реквизиту GUIDХозСубъекта
//
//	Попытка
//		НазваниеРеквизитаГрузополучатель = ГМ.СписокКонстант.Получить("НазваниеРеквизитаГрузополучатель");
//		
//		Если Докум.Вид() = "ПеремещениеТМЦ" Тогда
//			Получатель_ХозСубъект = ГМ.ПолучитьХСПоФирме(Докум.ФирмаПолучатель); 
//			Получатель_Площадка = ГМ.НайтиПлощадкуПоСкладу(Докум.СкладПолучатель,Получатель_ХозСубъект);
//		
//			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
//				Сообщить("Не удалось найти площадку ГрузоПолучателя по складу "+Докум.СкладПолучатель,"!");
//				Возврат Рез;
//			КонецЕсли;
//			
//			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
//				Сообщить("нет сведений о Получателе "+Докум.СкладПолучатель+" в справочнике ВСД_ХозСубъекты","!!");
//				Возврат рез;
//			КонецЕсли;		
//			
//		Иначе
//			//Реализация
//			Попытка
//				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.Контрагент);
//			Исключение
//				Получатель_ХозСубъект = ГМ.НайтиХозСубъект(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
//			КонецПопытки;
//		
//			Попытка Получатель_Площадка = ГМ.НайтиПлощадкуПоКонтрагенту(Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)); Исключение КонецПопытки;
//		
//			Если ПустоеЗначение(Получатель_Площадка)=1 Тогда
//				Сообщить("нет сведений о площадке ГрузоПолучателя "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_Площадки","!!");
//				Возврат Рез;
//			КонецЕсли;		
//
//			Если ПустоеЗначение(Получатель_ХозСубъект)=1 Тогда
//				Сообщить("нет сведений о Получателе "+Докум.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_ХозСубъекты","!!");
//				Возврат рез;
//			КонецЕсли;		
//
//		КонецЕсли;
//	
//	Исключение
//		Сообщить("Не удалось получить сведения о Получателе","!");
//		Возврат 0;
//	КонецПопытки;	
//
//	Возврат 1;
//	
//КонецФункции // ОбработатьРеализацию()



//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	
	// либо Вид Основания подтягивать из настроек
	// Поищем есть ли уже введенный и проведенный
	Рез = НайтиВСД_Транзакция(ДокументОснование);
	Если ПустоеЗначение(Рез) =  0 Тогда
		ОткрытьФорму(Рез,"");
		СтатусВозврата(0); Возврат;
	КонецЕсли;		
	
	Если ГМ._ВводНаОсновании(Контекст, ДокументОснование) = 0 Тогда
	    СтатусВозврата(0); Возврат;
	КонецЕсли;

//	ДатаДок = ДокументОснование.ДатаДок;		
//	//Попытка Фирма = ДокументОснование.Фирма; Исключение КонецПопытки;
//
//	ФирмаИмяРеквизита = "";
//	ГМ.ПолучитьИмяРеквизитаФирма(ДокументОснование.Вид(), ФирмаИмяРеквизита);
//
//	Попытка ВыбФирма = ДокументОснование.ПолучитьАтрибут(ФирмаИмяРеквизита) Исключение КонецПопытки;
//	Попытка УстановитьАтрибут(ФирмаИмяРеквизита, ДокументОснование.ПолучитьАтрибут(ФирмаИмяРеквизита));  Исключение КонецПопытки;
//		
//	ГМ.Инициализация(Контекст);
	
	//Автор = ГМ.ПолучитьАвтора();
	//Попытка	Филиал = Автор.Филиал;			Исключение	КонецПопытки;

	//Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");    
	//Перевозчик_ХозСубъект = ГМ.СписокКонстант.Получить("Перевозчик_ХозСубъект");
	//Попытка
	//	Отправитель_Площадка = ГМ.НайтиПлощадкуПоСкладу(ДокументОснование.Склад,Отправитель_ХозСубъект);
	//	Если ПустоеЗначение(Отправитель_Площадка) = 1 Тогда
	//		Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");    
	//	КонецЕсли;
	//Исключение
	//	Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");	
	//КонецПопытки;

	// проверим ошибки реквизитов и есть ли партии
	//Если ПустоеЗначение(ОбработатьРеализацию(ДокументОснование)) = 1 Тогда
	//    СтатусВозврата(0); Возврат;
	//КонецЕсли;

	
	ТЗПартий = ГМ.ЗаполнитьПартииПоТЧДокумента(ДокументОснование,Отправитель_Площадка, Отправитель_ХозСубъект);
	Если ТЗПартий.КоличествоСтрок()=0 Тогда
	    Сообщить("Нет партий для списания");
	    //СтатусВозврата(0);
		//Возврат;
	КонецЕсли;
	
	ДокСсылка = ЗаполнитьВСДТранзакция(ДокументОснование,ТЗПартий);
	Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
		ОткрытьФорму(ДокСсылка);
	    СтатусВозврата(0); 
	КонецЕсли;
КонецПроцедуры // ВводНаОсновании()


Процедура ПриЗакрытии()
   Если ТипЗначенияСтр(ПараПараметров) = "ГрупповойКонтекст" Тогда
// форма обработки открыта
      ПараПараметров.Форма.Закрыть();
// закрываем форму обработки
   КонецЕсли;
КонецПроцедуры // ПриЗакрытии


Процедура ДействияВСД()
	
	//меню
	СписокДействийВСД = СоздатьОбъект("СписокЗначений");
	СписокДействийВСД.ДобавитьЗначение("ПогаситьВСД","Погасить ВСД");
	СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД");
	СписокДействийВСД.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
	СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");
//	СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");	
	СписокДействийВСД.ДобавитьЗначение("ПолучитьОтветВетис","Получить ответ ВЕТИС");
	
	стр=0; Зн="";
	Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
		
		Если Зн ="ПогаситьВСД"  Тогда 
			ГМ.ПогаситьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД" Тогда 
			ГМ.ПечатьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД_Тест" Тогда 
			ГМ.ПечатьВСД_Тест(ТекущийДокумент());
		ИначеЕсли Зн = "ОткрытьВсдВГис" Тогда
			ГМ.ОткрытьВсдВГис( ТекущийДокумент() );		
		ИначеЕсли Зн = "СписокВСД" Тогда
			ГМ.ОткрытьСписокВсд( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОтправитьВСД" Тогда 
			Отправить();
		ИначеЕсли Зн = "АннулироватьВСД" Тогда 
			ГМ.Аннулировать_ВСД_транзакция( ТекущийДокумент() );
		ИначеЕсли Зн = "ОткрытьЗапрос" Тогда 
			ГМ.ОткрытьЗапрос( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОткрытьОтвет" Тогда 
			ГМ.ОткрытьОтвет( ТекущийДокумент() );
		ИначеЕсли Зн = "ПечатьСокрФормыВСД" Тогда 
   			ОткрытьФорму("Отчет", ТекущийДокумент(), ГМ.КаталогМодуля+"ПечФорма_ВСД_Сокращенная.ert");
		ИначеЕсли Зн = "ПолучитьОтветВетис" Тогда 			
		   	ПараПараметров = СоздатьОбъект("СписокЗначений");
		   	ПараПараметров.Установить("КонтекстДокумента", Контекст);
		   	ПараПараметров.Установить("ГМ", ГМ);
			ПараПараметров.Установить("Действие", "ПолучитьОтвет");		   		   
		   	ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы.ert");		   			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,ФлагСтандОбр)
	Если ЭлементДиалога = "Отправитель_Площадка" Тогда
		ВремЭлем = Отправитель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
	ИначеЕсли ЭлементДиалога = "Получатель_Площадка" Тогда
		ВремЭлем = Получатель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
    ИначеЕсли ЭлементДиалога = "Партия" Тогда
        парам = создатьОбъект("СписокЗначений");
        Парам.Установить("ВСД_Продукция_Элемент",Продукция_Элемент);
        Парам.Установить("Площадка",Отправитель_Площадка);
		Парам.Установить("ХозСубъект",Отправитель_ХозСубъект);
        ОткрытьФорму("Справочник.ВСД_Партия", Парам);
        ФлагСтандОбр = 0;
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
Процедура ПриВыбореХС(Имя, ВыбХС)
	Если Имя = "Отправитель_ХозСубъект" Тогда
		Если Отправитель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Отправитель_Площадка = "";
		КонецЕсли;
	ИначеЕсли Имя = "Получатель_ХозСубъект" Тогда
		Если Получатель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Получатель_Площадка = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриВыбореХС

//======================================================================
Процедура ПриИзмененииТермСписка()
	ТермическоеСостояние = ТермическийСписок.ТекущаяСтрока();	
КонецПроцедуры // ПриИзмененииТермСписка

//ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль"); = определение перенесено в ПриНачалеРаботыСистемы() Глобальный Модуль конфигурации
ВыбФирма = "";
ТермическийСписок.ДобавитьЗначение("Замороженный");
ТермическийСписок.ДобавитьЗначение("Охлажденный");
ТермическийСписок.ДобавитьЗначение("Охлаждаемый");
ТермическийСписок.ДобавитьЗначение("Вентилируемый");
