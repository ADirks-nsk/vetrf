// 	Количество единиц упаковки. - считаем что этот реквизит - коэфф перевода от единицы измерения продукции
// Объем 1 единицы фасовки
Перем оПривязки;

Процедура Создать()
	
	Записать();

	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(GUID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка в ГИС Меркурий "+Код);
	
   ПараПараметров = СоздатьОбъект("СписокЗначений");
   ПараПараметров.Установить("Контекст", Контекст);
   ПараПараметров.Установить("Операция", "CREATE");
    
   ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы_Справочник.ert");
   	
КонецПроцедуры

Процедура Изменить()

	Записать();
	
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(GUID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Меркурий отправка в ГИС Меркурий "+Код);
	
   ПараПараметров = СоздатьОбъект("СписокЗначений");
   ПараПараметров.Установить("Контекст", Контекст);
   ПараПараметров.Установить("Операция", "UPDATE");

   ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы_Справочник.ert");
   	
КонецПроцедуры 


Процедура ОбновитьИзМеркурий()

	Записать();
	
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(GUID)=1 Тогда
		Предупреждение("Получить информацию о продукции можно только при наличии GUID");
		Возврат;
	Иначе
		Если Вопрос("Загрузить сведения из Меркурий?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Меркурий отправка в ГИС Меркурий "+Код);
	
   ПараПараметров = СоздатьОбъект("СписокЗначений");
   ПараПараметров.Установить("Контекст", Контекст);
   ПараПараметров.Установить("Операция", "");
//	ГМ2.Получить_Инфо_Продукции( ТекущийЭлемент() )
	ОткрытьФорму("Отчет", ПараПараметров, ГМ.КаталогМодуля+"ВСД_ОтправкаИзФормы_Справочник.ert");
   	
КонецПроцедуры

//******************************************************************************
Процедура кнПодборВыбор()
	Перем ТекТМЦ;         
	Если Выбран() = 1 Тогда
		Если СписокТМЦ.ТекущаяСтрока() > 0 Тогда
			ТекТМЦ = СписокТМЦ.ПолучитьЗначение(СписокТМЦ.ТекущаяСтрока());
		КонецЕсли;
		ОткрытьПодбор("Справочник.Номенклатура", "ДляВыбора", , 1, ТекТМЦ);
	Иначе
		Предупреждение("Элемент не записан!");
	КонецЕсли;
КонецПроцедуры // кнПодборВыбор()

//******************************************************************************
Процедура кнУдалитьВыбор()

	Если СписокТМЦ.ТекущаяСтрока() > 0 Тогда
		ТекТМЦ = СписокТМЦ.ПолучитьЗначение(СписокТМЦ.ТекущаяСтрока());
		
		Спр = СоздатьОбъект("Справочник.ВСД_Номенклатура_Соответсвия");
		Спр.ИспользоватьВладельца(ТекТМЦ);
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если Спр.ВСД_Продукция_Элемент = ТекущийЭлемент() Тогда 
				Спр.Удалить(0);
			КонецЕсли;
		КонецЦикла;

		СписокТМЦ.УдалитьЗначение(СписокТМЦ.ТекущаяСтрока());
	КонецЕсли;
	
КонецПроцедуры // кнУдалитьВыбор()

//******************************************************************************
Процедура кнУдалитьВсеВыбор()
	Если СписокТМЦ.ТекущаяСтрока() > 0 Тогда
		Если Вопрос("Удалить все строки?","Да+Нет",10) = "Да" Тогда 
			Спр = СоздатьОбъект("Справочник.ВСД_Номенклатура_Соответсвия");
			Для СЦ = 1 По СписокТМЦ.РазмерСписка() Цикл
				ТекТМЦ = СписокТМЦ.ПолучитьЗначение(СЦ);
				
				
				Спр.ИспользоватьВладельца(ТекТМЦ);
				Спр.ВыбратьЭлементы();
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Если Спр.ВСД_Продукция_Элемент = ТекущийЭлемент() Тогда 
						Спр.Удалить(0);
					КонецЕсли;
				КонецЦикла;				
			КонецЦикла;

			СписокТМЦ.УдалитьВсе();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // кнУдалитьВсеВыбор()

//******************************************************************************
Процедура ОбработкаПодбора(ВыбЗнач)
	Перем Стр;
	Если СписокТМЦ.НайтиЗначение(ВыбЗнач) <> 0 Тогда
		Предупреждение("Данный элемент уже выбран.",20); Возврат;
	Иначе
		Спр = СоздатьОбъект("Справочник.ВСД_Номенклатура_Соответсвия");
		Спр.ИспользоватьВладельца(ВыбЗнач);
		Спр.ВыбратьЭлементы();
		Найден=0;
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если Спр.ВСД_Продукция_Элемент = ТекущийЭлемент() Тогда 
				Спр.СнятьПометкуУдаления();
				Найден=1;
			КонецЕсли;
		КонецЦикла;
		Если Найден=0 Тогда
			Спр.Новый();
			Спр.Владелец = ВыбЗнач;
			Спр.Наименование = Наименование;
			Спр.ВСД_Продукция_Элемент = ТекущийЭлемент();
			Спр.Записать();
		КонецЕсли;
		
		СписокТМЦ.ДобавитьЗначение(ВыбЗнач);
		СписокТМЦ.ТекущаяСтрока(СписокТМЦ.РазмерСписка());
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	ГМ._ПриОткрытии(Контекст);

	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1), 2);

	Если Форма.МодальныйРежим() = 0 Тогда
		Попытка
			
			оПривязки.Привязка("СписокТМЦ", "H", "Форма", "W", "Форма");
			оПривязки.Привязка("кнПодбор,кнУдалить,кнУдалитьВсе", "T", "Форма", "L", "Форма");
			//оПривязки.Привязка("тпОтбор,тпТМЦ", "T", "Форма", "W", "кнПодбор");
			//оПривязки.Привязка("МногострочнаяЧасть","H","Форма","W","Форма");
			//оПривязки.Привязка("ДеревоГруппФормыСпискаСправочника","H","Форма");
			оПривязки.Привязка("кнОК,кнЗаписать,кнЗакрыть","T","Форма");
		Исключение
			Сообщить("Справочник ВСД_Продукция_Элемент - Не удалось инициализировать привязки");
		КонецПопытки;
	КонецЕсли;

	
КонецПроцедуры


Процедура ПослеОткрытия()
	ГМ._ПослеОткрытия(Контекст);
	
	Если Выбран() = 1 Тогда
		// Закладка ассортимент     
		Если ГМ.ЭтоSQL = 1 Тогда
			ТекстЗапроса = "
				|SELECT Спр.ParentExt [Номенклатура $Справочник.Номенклатура]
				|FROM $Справочник.ВСД_Номенклатура_Соответсвия as Спр
				|WHERE $Спр.ВСД_Продукция_Элемент = :ВыбЭлемент
				|	AND Спр.ISMARK =0 
				|ORDER BY Спр.DESCR";

			RS = СоздатьОбъект("ODBCRecordset");
			RS.УстановитьТекстовыйПараметр("ВыбЭлемент", ТекущийЭлемент());
				
			ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
		Иначе
			ТекстЗапроса = "
				|SELECT Спр.ParentExt [Номенклатура $Справочник.Номенклатура]
				|FROM [Справочник.ВСД_Номенклатура_Соответсвия] as Спр
				|WHERE Спр.ВСД_Продукция_Элемент = :ВыбЭлемент
				|	AND Спр.ISMARK ='' 
				|ORDER BY Спр.DESCR";

			Запрос = ГМ.базаДанных.НовыйЗапрос();
			Запрос.Подставлять("ВыбЭлемент", ТекущийЭлемент());
				
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		КонецЕсли;
		ТЗ.Выгрузить(СписокТМЦ);
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	ГМ._ПриИзмененииРазмераОкна(Контекст, ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2); 
КонецПроцедуры 

//======================================================================
Процедура ПриИзмененииТермСписка()
//	ТермическиеУсловияПеревозки = спТермУсловияПеревозки.ТекущаяСтрока();	
КонецПроцедуры // ПриИзмененииТермСписка

//======================================================================
Процедура ВводНового()
	ТермическиеУсловияПеревозки = 1;
КонецПроцедуры 


Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение("Основной, Кнопки", "Основные сведения");
Форма.Закладки.ДобавитьЗначение("ТМЦ, Кнопки", "Номенклатура");

