////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ДокументУдЛичность, ЮрАдрес, ФактАдрес; // Документ физ. лица, адреса юр/физ. лица.
Перем ВиртРеквизитыПлательщикаИлиПолучателя;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// СформироватьРеквизит(РеквизитФормы, ЭлементДиалога)
//
// Параметры:
//  РеквизитФормы     - строка – значение реквизита в диалоге формы.
//  ЭлементДиалога    - строка – идентификатор редактируемго элемента диалога.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура устанавливает доступность редактирования реквизита 
// "Получатель". Если реквизит недоступен, данные  
// поля заполняются стандартным представлением.
//
Процедура СформироватьРеквизит(РеквизитФормы, ЭлементДиалога)
	
	Если ПустаяСтрока(ВиртРеквизитыПлательщикаИлиПолучателя) = 1 Тогда

		//заполняем стандартным представлением		
		РеквизитФормы = "";
		Параметры = СоздатьОбъект("СписокЗначений");
		
		ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());

		Если ВидЮрФизЛица <> "ФизЛица" Тогда
			Параметры.ДобавитьЗначение(СокрЛП(ИННЮрЛица),"ИНН");
			Параметры.ДобавитьЗначение(?(ПустаяСтрока(ПолнНаименованиеЮрЛица)=1,НаименованиеЮрЛица,ПолнНаименованиеЮрЛица),"НаименованиеКонтрагента");

		Иначе
			Параметры.ДобавитьЗначение(СокрЛП(ИННФизЛица),"ИНН");
			Параметры.ДобавитьЗначение(?(ПустаяСтрока(ПолнНаименованиеФизЛица)=1,НаименованиеФизЛица,ПолнНаименованиеФизЛица),"НаименованиеКонтрагента");
			
		КонецЕсли;
		
		Параметры.ДобавитьЗначение(СокрЛП(НомерСчета),"НомерСчета");
		Параметры.ДобавитьЗначение(Банк,"Банк");
		Параметры.ДобавитьЗначение(БанкДляРасчетов,"БанкДляРасчетов");

		глРеквизитыПлательщикаПолучателя(Параметры);

		РеквизитФормы = Параметры.Получить("Результат");
		
		Форма.ПолучитьАтрибут(ЭлементДиалога).Доступность(0);

	Иначе
		
		РеквизитФормы = ВиртРеквизитыПлательщикаИлиПолучателя;
		Форма.ПолучитьАтрибут(ЭлементДиалога).Доступность(1);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьРеквизит()

//******************************************************************************
// ПриИзмененииОснСчета()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обновляет реквизиты диалога при изменении основного счета.
//
Процедура ПриИзмененииОснСчета()
	
	// Проверка соответсвия основного счета юр. / физ. лицу.
	Если ОсновнойСчет.ЮрФизЛицо <> ЮрФизЛицо Тогда
		ОсновнойСчет = ПолучитьПустоеЗначение("Справочник.БанковскиеСчета");
	КонецЕсли;

	// Заполнение реквизитов слоя "ОсновнойСчет".
	НаименованиеОснСчета = ОсновнойСчет.Наименование;
	Банк                 = ОсновнойСчет.Банк;
	БанкДляРасчетов      = ОсновнойСчет.БанкДляРасчетов;
	НомерСчета           = ОсновнойСчет.НомерСчета;
	ВалютаСчета          = ОсновнойСчет.ВалютаСчета;
	НазначениеПлатежа    = ОсновнойСчет.Назначение;
	ВиртРеквизитыПлательщикаИлиПолучателя = ОсновнойСчет.РеквизитыПлательщикаИлиПолучателя;
 	
	СформироватьРеквизит(ПлательщикПолучатель, "ПлательщикПолучатель");
	
КонецПроцедуры // ПриИзмененииОснСчета()

//******************************************************************************
// ПриИзмененииЮрФизЛица()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обновляет реквизиты диалога при изменении юр. / физ. лица.
//
Процедура ПриИзмененииЮрФизЛица()
	
	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());
	
	// Проверка вида юр. / физ. лица.
	Если ВидЮрФизЛица <> ЮрФизЛицо.Вид() Тогда
		ЮрФизЛицо = ПолучитьПустоеЗначение("Справочник."+ВидЮрФизЛица);
	КонецЕсли;
	
	// Строки неограниченной длины надо очищать тщательнее!
	
	Если ВидЮрФизЛица <> "ФизЛица" Тогда
		// Заполнение реквизитов слоя "ЮрЛицо".
		НаименованиеЮрЛица      = ЮрФизЛицо.Наименование;
		ПолнНаименованиеЮрЛица  = ЮрФизЛицо.ТекущийЭлемент().ПолнНаименование;
		ИННЮрЛица               = ЮрФизЛицо.ИНН;
		ТелефоныЮрЛица          = ЮрФизЛицо.ТекущийЭлемент().Телефоны;
		ОКПО                    = ЮрФизЛицо.ОКПО;
		
	Иначе
		// Заполнение реквизитов слоя "ФизЛицо".
		НаименованиеФизЛица     = ЮрФизЛицо.Наименование;
		ПолнНаименованиеФизЛица = ЮрФизЛицо.ТекущийЭлемент().ПолнНаименование;
		ИННФизЛица              = ЮрФизЛицо.ИНН;
		ТелефоныФизЛица         = ЮрФизЛицо.ТекущийЭлемент().Телефоны;
		ДокументУдЛичность      = ЮрФизЛицо.ТекущийЭлемент().ДокументУдЛичность;
	КонецЕсли;
	
	ЮрАдрес                     = ЮрФизЛицо.ТекущийЭлемент().ЮрАдрес;
	ФактАдрес                   = ЮрФизЛицо.ТекущийЭлемент().ФактАдрес;
	
	// Проверка соответсвия основного счета юр. / физ. лицу.
	Если ОсновнойСчет.ЮрФизЛицо <> ЮрФизЛицо Тогда
		ПриИзмененииОснСчета();
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЮрФизЛица()

//******************************************************************************
// ПриИзмененииВидаКонтрагента()
//
// Параметры:
//  
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  ВидКонтрагента.
//
// Описание:
//  Отрабатывает действия, необходимые при смене вида контрагента.
//
Процедура ПриИзмененииВидаКонтрагента()
	
	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());
	
	// Проверка вида юр. / физ. лица.
	Если ВидЮрФизЛица <> ЮрФизЛицо.Вид() Тогда
		ПриИзмененииЮрФизЛица();
	КонецЕсли;
	
	// Управление видимостью слоев.
	Если ВидЮрФизЛица <> "ФизЛица" Тогда
		Форма.Закладки.УстановитьЗначение(1, "Контрагент, Кнопки, ЮрЛицо", "Основные");
	Иначе
		Форма.Закладки.УстановитьЗначение(1, "Контрагент, Кнопки, ФизЛицо", "Основные");
	КонецЕсли;
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
		Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1), 2);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаКонтрагента()

//******************************************************************************
// ПриИзмененииКонтроляКредита()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПриИзмененииКонтроляКредита()
	
	Форма.ГлубинаКредита.Доступность(1-НеКонтролироватьКредит);
	Форма.СуммаКредита.Доступность(1-НеКонтролироватьКредит);
	
КонецПроцедуры // ПриИзмененииКонтроляКредита()

//******************************************************************************
// ПриИзмененииОснДоговора()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обновляет реквизиты диалога при изменении основного договора.
//
Процедура ПриИзмененииОснДоговора()
	
	// Проверка соответсвия договора контрагенту.
	Если ОсновнойДоговор.Владелец <> ТекущийЭлемент() Тогда
		ОсновнойДоговор = ПолучитьПустоеЗначение("Справочник.Договоры");
	КонецЕсли;

	// Заполнение реквизитов слоя "ОсновнойДоговор".
	НаименованиеОснДоговора      = ОсновнойДоговор.Наименование;
	ВалютаВзаиморасчетов         = ОсновнойДоговор.ВалютаВзаиморасчетов;
	ТипЦен                       = ОсновнойДоговор.ТипЦен;
	Скидка                       = ОсновнойДоговор.Скидка;
	ГлубинаКредита               = ОсновнойДоговор.ГлубинаКредита;
	СуммаКредита                 = ОсновнойДоговор.СуммаКредита;
	НеКонтролироватьКредит       = ОсновнойДоговор.НеКонтролироватьКредит;
	ФиксироватьКурсЗадолжностей  = ОсновнойДоговор.ФиксироватьКурсЗадолжностей;
	
	ПриИзмененииКонтроляКредита();
	
КонецПроцедуры // ПриИзмененииОснДоговора()

//******************************************************************************
// ПриИзмененииОснСвойства()
//
// Параметры: 
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обновляет реквизит справочника при изменении реквизита формы
//
Процедура ПриИзмененииОснСвойства()
	
	// Проверка соответствия выбранного значения
	Если Свойство.Владелец <> Константа.ВидСвойстваКонтрагентов Тогда 
		Свойство = ПолучитьПустоеЗначение("Справочник.ЗначенияСвойств");
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОснСвойства()

//******************************************************************************
// НужноЗаписатьЭлемент(Объект)
//
// Параметры:
//  Объект - объект, созданный методом "СоздатьОбъект()".
//
// Возвращаемое значение:
//  1 - объект нужно записывать.
//  0 - объект не нужно записывать.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проверяет необходимость записи объекта.
//
Функция НужноЗаписатьЭлемент(Объект)
	
	// Объект может записываться впервые.
	Если ПустоеЗначение(Объект.ТекущийЭлемент()) = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	// Текущее значение атрибута может отличаеттся от записанного.
	Если Объект.Наименование <> Объект.ТекущийЭлемент().Наименование Тогда
		Возврат 1;
	КонецЕсли;
	
	// Проверка значений реквизитов объекта.
	мдСправочник = Метаданные.Справочник(Объект.Вид());
	Для Номер = 1 По мдСправочник.Реквизит() Цикл
		
		// Периодические реквизиты не сравниваются.
		Если мдСправочник.Реквизит(Номер).Периодический = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Ид = мдСправочник.Реквизит(Номер).Идентификатор;
		// Текущее значение атрибута может отличаеттся от записанного.
		Если Объект.ПолучитьАтрибут(Ид) <> Объект.ТекущийЭлемент().ПолучитьАтрибут(Ид) Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции // НужноЗаписатьЭлемент()

//******************************************************************************
// МожноЗаписатьЭлемент(Объект)
//
// Параметры:
//  Объект - объект, созданный методом "СоздатьОбъект()".
//
// Возвращаемое значение:
//  1 - объект можно записывать.
//  0 - объект нельзя записывать.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проверяет возможность записи объекта.
//
Функция МожноЗаписатьЭлемент(Объект)
	
	Если      Объект.Выбран() = 0 Тогда
		Возврат 1;

	ИначеЕсли Объект.Блокировка(1) = 1 Тогда
		Возврат 1;
	
	Иначе
		Элемент = Объект.ТекущийЭлемент();

		Стр = 
		"Элемент справочника """+Элемент.ПредставлениеВида()+""": ("+
		Элемент.Код+") """+Элемент.Наименование+""" заблокирован!";
		Предупреждение(Стр, 60);
		
		Возврат 0;
	КонецЕсли;
	
КонецФункции // МожноЗаписатьЭлемент()

//******************************************************************************
// ЗаписьЮрФизЛица()
//
// Параметры:
//
// Возвращаемое значение:
//  1 - запись произведена.
//  0 - запись не произведена.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет запись юр/физ. лица.
//
Функция ЗаписьЮрФизЛица()
	
	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());
	
	// Объект для записи юр/физ. лица.
	Объект = СоздатьОбъект("Справочник."+ВидЮрФизЛица);
	Если Объект.НайтиЭлемент(ЮрФизЛицо) = 0 Тогда
		Объект.Новый();
	КонецЕсли;
	
	Если ВидЮрФизЛица <> "ФизЛица" Тогда
		// Заполнение реквизитов слоя "ЮрЛицо".
		Объект.Наименование       = НаименованиеЮрЛица;
		Объект.ПолнНаименование   = ПолнНаименованиеЮрЛица;
		Объект.ИНН                = ИННЮрЛица;
		Объект.Телефоны           = ТелефоныЮрЛица;
		Объект.ОКПО               = ОКПО;
	Иначе
		// Заполнение реквизитов слоя "ФизЛицо".
		Объект.Наименование       = НаименованиеФизЛица;
		Объект.ПолнНаименование   = ПолнНаименованиеФизЛица;
		Объект.ИНН                = ИННФизЛица;
		Объект.Телефоны           = ТелефоныФизЛица;
		Объект.ДокументУдЛичность = ДокументУдЛичность;
	КонецЕсли;
	
	Объект.ЮрАдрес                = ЮрАдрес;
	Объект.ФактАдрес              = ФактАдрес;  
	                                          
	Объект.ИспользоватьДату('01.01.1980');
	Если ВидЮрФизЛица = "СвоиЮрЛица" тогда
		Если Объект.МетодУчетаРозницы.Выбран() = 0 Тогда
		    Объект.МетодУчетаРозницы = Перечисление.МетодыУчетаРозницы.ПоПродажнымЦенам;
		КонецЕсли;
		
		Если Объект.МетодРасчетаСебестоимости.Выбран() = 0 Тогда
		    Объект.МетодРасчетаСебестоимости = Перечисление.МетодыРасчетаСебестоимости.FIFO;
		КонецЕсли;
	
		Если Объект.МетодОпределенияВыручки.Выбран() = 0 Тогда
		    Объект.МетодОпределенияВыручки = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке;
		КонецЕсли;                   
	КонецЕсли;

	// Проверка необходимости и возможности записи.
	Если      НужноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 1;
	ИначеЕсли МожноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.Записать();
	
	// Установка юридического / физичского лица контрагента.
	ЮрФизЛицо = Объект.ТекущийЭлемент();
	
	Возврат 1;
	
КонецФункции // ЗаписьЮрФизЛица()

//******************************************************************************
// ЗаписьОснДоговора()
//
// Параметры:
//
// Возвращаемое значение:
//  1 - запись произведена.
//  0 - запись не произведена.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет запись основного счета.
//
Функция ЗаписьОснДоговора()
	
	// Объект для записи основного счета.
	Объект = СоздатьОбъект("Справочник.Договоры");
	
	Если Объект.НайтиЭлемент(ОсновнойДоговор) = 0 Тогда
		Объект.Новый();
		Объект.Владелец = ТекущийЭлемент();
	КонецЕсли;
		
	// Заполнение реквизитов слоя "ОсновнойДоговор".
	Объект.Наименование                = НаименованиеОснДоговора;
	Объект.ВалютаВзаиморасчетов        = ВалютаВзаиморасчетов;
	Объект.ТипЦен                      = ТипЦен;
	Объект.Скидка                      = Скидка;
	Объект.ГлубинаКредита              = ГлубинаКредита;
	Объект.СуммаКредита                = СуммаКредита;
	Объект.НеКонтролироватьКредит      = НеКонтролироватьКредит;
	Объект.ФиксироватьКурсЗадолжностей = ФиксироватьКурсЗадолжностей;
	
	// Проверка необходимости и возможности записи.
	Если      НужноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 1;
	ИначеЕсли МожноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.Записать();
	
	// Установка основного договора.
	ОсновнойДоговор = Объект.ТекущийЭлемент();
	
	Возврат 1;
	
КонецФункции // ЗаписьОснДоговора()

//******************************************************************************
// ЗаписьОснСчета()
//
// Параметры:
//
// Возвращаемое значение:
//  1 - запись произведена.
//  0 - запись не произведена.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет запись основного счета.
//
Функция ЗаписьОснСчета()
	
	// Счет записывается, если указан номер.
	Если (ОсновнойСчет.Выбран() = 0) И (ПустаяСтрока(НомерСчета) = 1) Тогда
		Возврат 1;
	КонецЕсли;
	
	// Объект для записи основного счета.
	Объект = СоздатьОбъект("Справочник.БанковскиеСчета");
	
	Если Объект.НайтиЭлемент(ОсновнойСчет) = 0 Тогда
		Объект.Новый();
	КонецЕсли;
		
	// Заполнение реквизитов слоя "ОсновнойСчет".
	Объект.Наименование      = НаименованиеОснСчета;
	Объект.ЮрФизЛицо         = ЮрФизЛицо;
	Объект.Банк              = Банк;
	Объект.БанкДляРасчетов   = БанкДляРасчетов;
	Объект.НомерСчета        = НомерСчета;
	Объект.ВалютаСчета       = ВалютаСчета;
	Объект.Назначение        = НазначениеПлатежа;
	Объект.РеквизитыПлательщикаИлиПолучателя = ВиртРеквизитыПлательщикаИлиПолучателя;
	
	// Проверка необходимости и возможности записи.
	Если      НужноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 1;
	ИначеЕсли МожноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.Записать();
	
	// Установка основного счета.
	ОсновнойСчет = Объект.ТекущийЭлемент();
	
	Возврат 1;
	
КонецФункции // ЗаписьОснСчета()

//******************************************************************************
// ЗаписьОснСвойства()
//
// Параметры:
//
// Возвращаемое значение:
//  1 - запись произведена.
//  0 - запись не произведена.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет запись основного свойства.
//
Функция ЗаписьОснСвойства()
	
	// Объект для записи основного свойства.
	Объект = СоздатьОбъект("Справочник.СвойстваКонтрагентов");
	Объект.ИспользоватьВладельца(ТекущийЭлемент());
	
	Если Свойство.Выбран() = 0  Тогда
		// Если не пустое основное свойство, то надо удалить 
		// соответствующий элемент справочника свойств контрагентов.
		Если ОсновноеСвойство.Выбран() = 1 Тогда
			Если Объект.НайтиЭлемент(ОсновноеСвойство) = 1 Тогда
				Объект.Удалить(1);
			КонецЕсли;
			
			ОсновноеСвойство = ПолучитьПустоеЗначение("Справочник.СвойстваКонтрагентов");
		КонецЕсли;
		
		Возврат 1;
	КонецЕсли;
	
	Если Объект.НайтиПоРеквизиту("ВидСвойства", Константа.ВидСвойстваКонтрагентов, 0) = 0 Тогда
		Объект.Новый();
		Объект.ВидСвойства = Константа.ВидСвойстваКонтрагентов;
	КонецЕсли;

	Объект.ЗначениеСвойства = Свойство;
	
	// Проверка необходимости и возможности записи.
	Если      НужноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 1;
	ИначеЕсли МожноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.Записать();
	
	// Установка основного свойства контрагента.  
	ОсновноеСвойство = Объект.ТекущийЭлемент();
	
	Возврат 1;
	
КонецФункции // ЗаписьОснСвойства()

//******************************************************************************
// Автозаполнение()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  НаименованиеЮрЛица, НаименованиеФизЛица, ПолнНаименованиеФизЛица.
//
// Описание:
//  Автозаполнение наименований.
//
Процедура Автозаполнение()
	
	Если Форма.АктивныйЭлемент() = "НаименованиеЮрЛица" Тогда
		Наименование = СокрЛП(НаименованиеЮрЛица);
		
		Если ПустаяСтрока(ПолнНаименованиеЮрЛица) = 1 Тогда
			ПолнНаименованиеЮрЛица = " """+СокрЛП(НаименованиеЮрЛица)+"""";
		КонецЕсли;
		
	ИначеЕсли Форма.АктивныйЭлемент() = "НаименованиеФизЛица" Тогда
		Наименование = СокрЛП(НаименованиеФизЛица);
		
	ИначеЕсли Форма.АктивныйЭлемент() = "ПолнНаименованиеФизЛица" Тогда
		Если ПустаяСтрока(НаименованиеФизЛица) = 1 Тогда
			НаименованиеФизЛица = глФамилияИмяОтчество(ПолнНаименованиеФизЛица);
			Наименование        = СокрЛП(НаименованиеФизЛица);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

//******************************************************************************
// ПриИзмененииИНН()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  ИННЮрЛица, ИННФизЛица.
//
// Описание:
//  Проверяет уникальность ИНН в справочнике юр. / физ. лиц.
//
Процедура ПриИзмененииИНН()
	
	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());
	
	// ИНН и длина ИНН.
	Если ВидЮрФизЛица <> "ФизЛица" Тогда
		ИНН   = ИННЮрЛица;
		Длина = 20;
	Иначе
		ИНН   = ИННФизЛица;
		Длина = 12;
	КонецЕсли;
	
	// ИНН может быть не указан.	
	Длина = Метаданные.Справочник(ВидЮрФизЛица).Реквизит("ИНН").Длина;	
	Если СтрДлина(СокрЛП(ИНН)) < Длина Тогда
		Возврат;
	КонецЕсли;
	
	// Список найденных элементов с таким же ИНН.
	Список = СоздатьОбъект("СписокЗначений");
	
	Объект = СоздатьОбъект("Справочник."+ВидЮрФизЛица);
	Объект.ВыбратьЭлементыПоРеквизиту("ИНН", ИНН, 0, 1);
	
	// Поиск элементов с таким же ИНН.
	Пока Объект.ПолучитьЭлемент(1) = 1 Цикл
		Если Объект.ТекущийЭлемент() = ЮрФизЛицо Тогда
			Возврат; // элемент уже был записан
		Иначе
			Список.ДобавитьЗначение(Объект.ТекущийЭлемент());
		КонецЕсли;
	КонецЦикла;
	
	// Элементы с таким же ИНН не найдены.
	Если Список.РазмерСписка() = 0 Тогда
		Возврат;
	
	// Найден один элемент с таким же ИНН.
	ИначеЕсли Список.РазмерСписка() = 1 Тогда
		Стр = "В справочнике """+Объект.ПредставлениеВида()+""" уже есть элемент с таким же ИНН!
		      |Выбрать существующий элемент справочника?";
		
		Если Вопрос(Стр, "Да+Нет", 60) = "Да" Тогда
			ЮрФизЛицо = Список.ПолучитьЗначение(1);
			ПриИзмененииЮрФизЛица();
			
			// Автозаполнение наименования контрагента.
			Наименование = ЮрФизЛицо.Наименование;
		КонецЕсли;
		
	// Найдено несколько элементов с таким же ИНН.
	Иначе
		Стр = "В справочнике """+Объект.ПредставлениеВида()+""" уже есть элементы с таким же ИНН!
		      |Выбрать один из существующих элементов справочника?";
		
		Если Вопрос(Стр, "Да+Нет", 60) = "Да" Тогда
			Если Список.ВыбратьЗначение(ЮрФизЛицо, "Элементы с ИНН "+ИНН, 0, 60, 0) = 1 Тогда
				ПриИзмененииЮрФизЛица();
				
				// Автозаполнение наименования контрагента.
				Наименование = ЮрФизЛицо.Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииИНН()

//******************************************************************************
// ПриИзмененииНомераСчета()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  НомерСчета.
//
// Описание:
//  Проверяет уникальность номера банковского счета.
//
Процедура ПриИзмененииНомераСчета()
	
	СформироватьРеквизит(ПлательщикПолучатель, "ПлательщикПолучатель");

	// Номер счета может быть не указан.	
	Если СтрДлина(СокрЛП(НомерСчета)) < 20 Тогда
		Возврат;
	КонецЕсли;
	
	// Список найденных элементов с таким же номером счета.
	Список = СоздатьОбъект("СписокЗначений");
	
	Объект = СоздатьОбъект("Справочник.БанковскиеСчета");
	Объект.ВыбратьЭлементыПоРеквизиту("ЮрФизЛицо", ЮрФизЛицо, 0, 1);
	
	// Поиск элементов с таким же номером счета.
	Пока Объект.ПолучитьЭлемент(1) = 1 Цикл
		Если Объект.ТекущийЭлемент() = ОсновнойСчет Тогда
			Возврат; // элемент уже был записан
		ИначеЕсли Объект.НомерСчета = НомерСчета Тогда
			Список.ДобавитьЗначение(Объект.ТекущийЭлемент());
		КонецЕсли;
	КонецЦикла;
	
	// Элементы с таким же номером счета не найдены.
	Если Список.РазмерСписка() = 0 Тогда
		Возврат;
	
	// Найден один элемент с таким же номером счета.
	ИначеЕсли Список.РазмерСписка() = 1 Тогда
		Стр = "В справочнике """+Объект.ПредставлениеВида()+
		      """ уже есть элемент с таким же номером счета!
		      |Выбрать существующий элемент справочника?";
		
		Если Вопрос(Стр, "Да+Нет", 60) = "Да" Тогда
			ОсновнойСчет = Список.ПолучитьЗначение(1);
			ПриИзмененииОснСчета();
		КонецЕсли;
		
	// Найдено несколько элементов с таким же номером счета.
	Иначе
		Стр = "В справочнике """+Объект.ПредставлениеВида()+
		      """ уже есть элементы с таким же номером счета!
		      |Выбрать один из существующих элементов справочника?";
		
		Если Вопрос(Стр, "Да+Нет", 60) = "Да" Тогда
			Если Список.ВыбратьЗначение(ОсновнойСчет, "Элементы с номером счета "+НомерСчета, 0, 60, 0) = 1 Тогда
				ПриИзмененииОснСчета();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНомераСчета()

//******************************************************************************
// ПоКнопкеЗаполнитьОсновнойСчет()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка кнЗаполнитьОсновнойСчет.
//
// Описание:
//
Процедура ПоКнопкеЗаполнитьОсновнойСчет()

	Параметры = СоздатьОбъект("СписокЗначений");

	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());

	Если ВидЮрФизЛица <> "ФизЛица" Тогда
		Параметры.ДобавитьЗначение(СокрЛП(ИННЮрЛица),"ИНН");
		Параметры.ДобавитьЗначение(?(ПустаяСтрока(ПолнНаименованиеЮрЛица)=1,НаименованиеЮрЛица,ПолнНаименованиеЮрЛица),"НаименованиеКонтрагента");

	Иначе
		Параметры.ДобавитьЗначение(СокрЛП(ИННФизЛица),"ИНН");
		Параметры.ДобавитьЗначение(?(ПустаяСтрока(ПолнНаименованиеФизЛица)=1,НаименованиеФизЛица,ПолнНаименованиеФизЛица),"НаименованиеКонтрагента");
		
	КонецЕсли;

	Параметры.ДобавитьЗначение(СокрЛП(НомерСчета),"НомерСчета");
	Параметры.ДобавитьЗначение(Банк,"Банк");
	Параметры.ДобавитьЗначение(БанкДляРасчетов,"БанкДляРасчетов");
	// 1-заполнение плательщика или получателя, 2-заполнение назначения платежа
	Параметры.ДобавитьЗначение(1,"Режим");
	ОткрытьФормуМодально("Обработка.ВводПлатежныхРеквизитов", Параметры);
	ВиртРеквизитыПлательщикаИлиПолучателя = ?(Параметры.Получить("Результат")="Авто","",Параметры.Получить("Результат"));

	СформироватьРеквизит(ПлательщикПолучатель, "ПлательщикПолучатель");
	
КонецПроцедуры // ПоКнопкеЗаполнитьОсновнойСчет()

//******************************************************************************
// ПоКнопкеОчистить()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  кнОчиститьЮрЛицо, кнОчиститьФизЛицо, кнОчиститьОснСчет, кнОчиститьСвойство.
//
// Описание:
//  Очищает реквизиты контрагента.
//
Процедура ПоКнопкеОчистить()
	
	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());
	
	Если Форма.АктивныйЭлемент() = "кнОчиститьЮрЛицо" Тогда
		ЮрФизЛицо = ПолучитьПустоеЗначение("Справочник."+ВидЮрФизЛица);
		ПриИзмененииЮрФизЛица();
		
		Активизировать("НаименованиеЮрЛица");
		
	ИначеЕсли Форма.АктивныйЭлемент() = "кнОчиститьФизЛицо" Тогда
		ЮрФизЛицо = ПолучитьПустоеЗначение("Справочник."+ВидЮрФизЛица);
		ПриИзмененииЮрФизЛица();
		
		Активизировать("НаименованиеФизЛица");
		
	ИначеЕсли Форма.АктивныйЭлемент() = "кнОчиститьОснДоговор" Тогда
		ОсновнойДоговор = ПолучитьПустоеЗначение("Справочник.Договоры");
		ПриИзмененииОснДоговора();
		
		Активизировать("НаименованиеОснДоговора");
		
	ИначеЕсли Форма.АктивныйЭлемент() = "кнОчиститьОснСчет" Тогда
		ОсновнойСчет = ПолучитьПустоеЗначение("Справочник.БанковскиеСчета");
		ПриИзмененииОснСчета();
		
		Активизировать("НаименованиеОснСчета");
		
	ИначеЕсли Форма.АктивныйЭлемент() = "кнОчиститьСвойство" Тогда
		Свойство= ПолучитьПустоеЗначение("Справочник.ЗначенияСвойств");
		ПриИзмененииОснСвойства();
		
		Активизировать("Свойство");
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеОчистить()

//******************************************************************************
// ПоКнопкеВводаУдостоверения()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПоКнопкеВводаУдостоверения()
	
	ОткрытьФормуМодально("Обработка.ВводУдостоверения", ДокументУдЛичность);
	
КонецПроцедуры // ПоКнопкеВводаУдостоверения()

//******************************************************************************
// ПоКнопкеВводаАдреса(Адрес1, Адрес2)
//
// Параметры:
//  Адрес1 - реквизит, в который будет введен адрес.
//  Адрес2 - реквизит, в который будет скопирован адрес.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки ввода адреса.
//
// Описание:
//  Вызывает обработку для ввода адреса.
//
Процедура ПоКнопкеВводаАдреса(Адрес1, Адрес2)

	глВводАдреса(Адрес1);
	
	Если ПустаяСтрока(глПредставлениеАдреса(Адрес2)) = 1 Тогда
		Адрес2 = Адрес1;
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВводаАдреса()

//******************************************************************************
// ПоКнопкеОткрыть(Объект)
//
// Параметры:
//  Объект - объект, который необходимо открыть.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки "Открыть".
//
// Описание:
//  Открывает форму объекта.
//
Процедура ПоКнопкеОткрыть(Объект, ЭлементДиалога="")
	
	Если Объект.Выбран() = 1 Тогда
		ОткрытьФормуМодально(Объект, , -1);
	Иначе
		Активизировать(ЭлементДиалога, 1);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеОткрыть()

//******************************************************************************
// ПоКнопкеОткрытьСправочник(Справочник, Знач Параметр, Знач Объект=0)
//
// Параметры:
//  Справочник - "строка" - вид справочника.
//  Пераметр   - параметр для передачи в форму.
//  Объект     - объект, который следует активизировать в форме.
//
// Возвращаемое значение:
//  В немодальном режиме - контекст открытой формы.
//
// Вызывается из формул элементов диалога:
//  Кнопки открытия подчиненных справочников.
//
// Описание:
//  Открывает форму списка указанного справочника.
//
Функция ПоКнопкеОткрытьСправочник(Справочник, Знач Параметр, Знач Объект=0)
	
	Если ПустоеЗначение(Параметр) = 1 Тогда
		Предупреждение("Элемент еще не записан. Справочник не может быть открыт!", 60);
		Возврат ПолучитьПустоеЗначение();
	ИначеЕсли Справочник = "ЛицензииПоставщиковАлкогольнойПродукции" Тогда
	
		КонтекстФормы = "";
		ОткрытьФорму("Справочник.ЛицензииПоставщиковАлкогольнойПродукции", КонтекстФормы);
		КонтекстФормы.ИспользоватьВладельца(ТекущийЭлемент());
		
	Иначе
		ОткрытьФорму("Справочник."+Справочник, Параметр); 
	КонецЕсли;
		
	Если (ТипЗначенияСтр(Параметр) = "ГрупповойКонтекст") И (ПустоеЗначение(Объект) = 0) Тогда
		Параметр.АктивизироватьОбъект(Объект);
	КонецЕсли;
	
	Возврат Параметр;
	
КонецФункции // ПоКнопкеОткрытьСправочник()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового(ФлагКопирования)
	
	Свойство = ВосстановитьЗначение("ОсновноеСвойствоКонтрагентов");

	Если ФлагКопирования = 1 Тогда
		// Эти реквизиты контрагента копировать не имеет смысла!
		ЮрФизЛицо       = ПолучитьПустоеЗначение("Справочник");
		ОсновнойДоговор = ПолучитьПустоеЗначение("Справочник.Договоры");
		ОсновнойСчет    = ПолучитьПустоеЗначение("Справочник.БанковскиеСчета");
		
		Если ПустоеЗначение(ОсновноеСвойство) = 0 Тогда // скопировали и основное свойство другого элемента
	        Свойство         = ОсновноеСвойство.ЗначениеСвойства;
			ОсновноеСвойство = ПолучитьПустоеЗначение("Справочник.СвойстваКонтрагентов");
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеОснДоговора = "Основной договор";
	ВалютаВзаиморасчетов    = глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов");
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнОчиститьЮрЛицо.Доступность(0);
		Форма.кнВводаЮрАдресаЮрЛица.Доступность(0);
		Форма.кнВводаФактАдресаЮрЛица.Доступность(0);
		
		Форма.кнОчиститьФизЛицо.Доступность(0);
		Форма.кнВводаУдостоверения.Доступность(0);
		Форма.кнВводаЮрАдресаФизЛица.Доступность(0);
		Форма.кнВводаФактАдресаФизЛица.Доступность(0);
		
		Форма.кнОчиститьОснДоговор.Доступность(0);
		Форма.кнОчиститьСкидку.Доступность(0);
		
		Форма.кнОчиститьОснСчет.Доступность(0);
		Форма.кнОчиститьБанкДляРасчетов.Доступность(0);
		Форма.кнЗаполнитьОсновнойСчет.Доступность(0);
		
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОк");
	КонецЕсли;
	
	// Определение вида контрагента.
	Номер = ВидКонтрагента.НайтиЗначение(ЮрФизЛицо.Вид());
	ВидКонтрагента.ТекущаяСтрока(Макс(Номер, 1)); 
	ПриИзмененииВидаКонтрагента();
	
	// Заполнение реквизитов диалога.
	// Если реквизиты справочника не заполнены - в диалоге 
	// сохранятся значения, присвоенные в процедуре ВводНового().
	
	Если ЮрФизЛицо.Выбран() = 1 Тогда
		ПриИзмененииЮрФизЛица();
	КонецЕсли;
	
	Если ОсновнойДоговор.Выбран() = 1 Тогда
		ПриИзмененииОснДоговора();
	КонецЕсли;
	
	Если ОсновнойСчет.Выбран() = 1 Тогда
		ПриИзмененииОснСчета();
	КонецЕсли;
	
	Если ОсновноеСвойство.Выбран() = 1 Тогда
		Свойство = ОсновноеСвойство.ЗначениеСвойства;
	КонецЕсли;
	
	// 1-й слой переназначается в ПриИзмененииВидаКонтрагента().
	Активизировать("ВидКонтрагента");
	
	// Определим текущую закладку
	Закладка = 0;
	Если ПустоеЗначение(Форма.Параметр) = 0  Тогда // могли передать нужную закладку
		Закладка = Форма.Закладки.Получить(Форма.Параметр);
	КонецЕсли; 
	Закладка = Макс(1, Форма.Закладки.НайтиЗначение(Закладка));
	Форма.Закладки.ТекущаяСтрока(Закладка);
	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(Закладка), 2);
	
	// Подпись к основному свойству.
	Если ПустоеЗначение(Константа.ВидСвойстваКонтрагентов) = 0  Тогда
		Заголовок = СокрЛП(Строка(Константа.ВидСвойстваКонтрагентов)) + ":";
		Форма.ТекстСвойство.Заголовок(Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2);
	Если Найти(ЗначениеЗакладки,"ОсновнойСчет")<>0 Тогда
		СформироватьРеквизит(ПлательщикПолучатель, "ПлательщикПолучатель");
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога)
	
	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());
	
	Если (ЭлементДиалога = "НаименованиеЮрЛица") ИЛИ
	     (ЭлементДиалога = "НаименованиеФизЛица") Тогда
		 	
		Параметр = ПоКнопкеОткрытьСправочник(ВидЮрФизЛица, 1, ЮрФизЛицо);
		Если ТипЗначенияСтр(Параметр) = "Справочник" Тогда // модальный режим
			ЮрФизЛицо = Параметр;
			ПриИзмененииЮрФизЛица();
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "НаименованиеОснДоговора" Тогда
		Параметр = ПоКнопкеОткрытьСправочник("Договоры", ТекущийЭлемент(), ОсновнойДоговор);
		Если ТипЗначенияСтр(Параметр) = "Справочник" Тогда // модальный режим
			ОсновнойДоговор = Параметр;
			ПриИзмененииОснДоговора();
		КонецЕсли;

	ИначеЕсли ЭлементДиалога = "ВалютаВзаиморасчетов" Тогда
		Если ОсновнойДоговор.Выбран() = 1 Тогда
			Объект = СоздатьОбъект("Документ");
			Объект.ВыбратьПоЗначению(,,"Контрагент", ТекущийЭлемент());
			
			Пока Объект.ПолучитьДокумент() = 1 Цикл
				Если Объект.Договор = ОсновнойДоговор Тогда
					Предупреждение("Договор """+СокрЛП(НаименованиеОснДоговора)+""" используется в документах.
					               |Изменять валюту взаиморасчетов нельзя!", 60);
					СтатусВозврата(0); Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	ИначеЕсли ЭлементДиалога = "НаименованиеОснСчета" Тогда
		Параметр = ПоКнопкеОткрытьСправочник("БанковскиеСчета", ЮрФизЛицо, ОсновнойСчет);
		Если ТипЗначенияСтр(Параметр) = "Справочник" Тогда // модальный режим
			ОсновнойСчет = Параметр;
			ПриИзмененииОснСчета();
		КонецЕсли;

	ИначеЕсли ЭлементДиалога = "ВалютаСчета" Тогда
		Если ОсновнойСчет.Выбран() = 1 Тогда
			Предупреждение("Нельзя изменять валюту банковского счета.
			               |Введите новый счет или скопируйте существующий!", 60);
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "Свойство" Тогда
		Если Константа.ВидСвойстваКонтрагентов.Выбран() = 1 Тогда
			Свойство.ИспользоватьВладельца(Константа.ВидСвойстваКонтрагентов);
		Иначе
			Предупреждение("Перед выбором значения основного свойства выберите в настройках 
			               |параметров учета вид свойства для контрагентов", 60);
			СтатусВозврата(0);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(НовоеЗначение, ЭлементДиалога)
	
	Если (ЭлементДиалога = "НаименованиеЮрЛица") ИЛИ
	     (ЭлементДиалога = "НаименованиеФизЛица") Тогда
		 	
		ЮрФизЛицо = НовоеЗначение;
		ПриИзмененииЮрФизЛица();
		
		// Автозаполнение наименования контрагента.
		Наименование = ЮрФизЛицо.Наименование;
		
	ИначеЕсли ЭлементДиалога = "НаименованиеОснДоговора" Тогда
		ОсновнойДоговор = НовоеЗначение;
		ПриИзмененииОснДоговора();
		
	ИначеЕсли ЭлементДиалога = "НаименованиеОснСчета" Тогда
		ОсновнойСчет = НовоеЗначение;
		ПриИзмененииОснСчета();
		
	ИначеЕсли ЭлементДиалога = "Свойство" Тогда
		Свойство = НовоеЗначение;
		ПриИзмененииОснСвойства();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗаписи()
	
    //Обновление текстовых реквизитов
	
	СформироватьРеквизит(ПлательщикПолучатель, "ПлательщикПолучатель");

	// Проверка заполненности обязательных реквизитов.
	
	ВидЮрФизЛица = ВидКонтрагента.ПолучитьЗначение(ВидКонтрагента.ТекущаяСтрока());
	
	// Наименование контрагента.
	Если ПустаяСтрока(Наименование) = 1 Тогда
		Предупреждение("Не указано наименование контрагента!", 60);
		Активизировать("Наименование");
		СтатусВозврата(0); Возврат;
	КонецЕсли;
		
	// Наименование юр. / физ. лица.
	Если ВидЮрФизЛица <> "ФизЛица" Тогда
		Если ПустаяСтрока(НаименованиеЮрЛица) = 1 Тогда
			Предупреждение("Не указано наименование юридического лица!", 60);
			Форма.Закладки.ТекущаяСтрока(1);
			Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1));
			Активизировать("НаименованиеЮрЛица");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(НаименованиеФизЛица) = 1 Тогда
			Предупреждение("Не указано наименование физического лица!", 60);
			Форма.Закладки.ТекущаяСтрока(1);
			Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1));
			Активизировать("НаименованиеФизЛица");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Наименование основного договора.
	Если ПустаяСтрока(НаименованиеОснДоговора) = 1 Тогда
		Предупреждение("Не указано наименование основного договора!", 60);
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(2));
		Активизировать("НаименованиеОснДоговора");
		СтатусВозврата(0); Возврат;
		
	// Валюта взаиморасчетов по основному договору.
	ИначеЕсли ВалютаВзаиморасчетов.Выбран() = 0 Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов по основному договору!", 60);
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(2));
		Активизировать("ВалютаВзаиморасчетов");
		СтатусВозврата(0); Возврат;
	КонецЕсли;
	
	Если (ОсновнойСчет.Выбран() = 1) ИЛИ 
	     (ПустаяСтрока(НомерСчета) = 0) ИЛИ 
		 (ПустаяСтрока(НаименованиеОснСчета) = 0) Тогда
		 	
		// Наименование основного банковского счета.
		Если ПустаяСтрока(НаименованиеОснСчета) = 1 Тогда
			Предупреждение("Не указано наименование основного банковского счета!", 60);
			Форма.Закладки.ТекущаяСтрока(3);
			Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(3));
			Активизировать("НаименованиеОснСчета");
			СтатусВозврата(0); Возврат;
		КонецЕсли;

		// Валюта основного банковского счета.
		Если ВалютаСчета.Выбран() = 0 Тогда
			Предупреждение("Не выбрана валюта основного банковского счета!", 60);
			Форма.Закладки.ТекущаяСтрока(3);
			Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(3));
			Активизировать("ВалютаСчета");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
		
		// Банк основного банковского счета.
		Если Банк.Выбран() = 0 Тогда
			Предупреждение("Не выбран банк основного банковского счета!", 60);
			Форма.Закладки.ТекущаяСтрока(3);
			Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(3));
			Активизировать("Банк");
			СтатусВозврата(0); Возврат;
		КонецЕсли;

		// Номер банковского счета.
		Если глПроверкаНомераСчета(НомерСчета, Банк.Код, Банк.КоррСчет) = 0 Тогда
			Если Вопрос("Возможно, номер основного счета указан неверно. Продолжить?", "Да+Нет", 60) <> "Да" Тогда
				Форма.Закладки.ТекущаяСтрока(3);
				Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(3));
				Активизировать("НомерСчета");
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// Запись всех изменений производится в одной транзакции.
	

	СтатусВозврата(0);
	НачатьТранзакцию();

	Попытка
		Записать();

	Исключение
		ОтменитьТранзакцию();
		Сообщить("Запись контрагента: " + ОписаниеОшибки(), "!");
		Возврат;

	КонецПопытки;

	Попытка
		Если ЗаписьЮрФизЛица() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

	Исключение
		ОтменитьТранзакцию();
		Сообщить("Запись юр.(физ.) лица: " + ОписаниеОшибки(), "!");
		Возврат;

	КонецПопытки;

	Попытка
		Если ЗаписьОснДоговора() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

	Исключение
		ОтменитьТранзакцию();
		Сообщить("Запись основного договора: " + ОписаниеОшибки(), "!");
		Возврат;

	КонецПопытки;

	Попытка
		Если ЗаписьОснСчета() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

	Исключение
		ОтменитьТранзакцию();
		Сообщить("Запись основного счета: " + ОписаниеОшибки(), "!");
		Возврат;

	КонецПопытки;

	Попытка
		Если ЗаписьОснСвойства() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		СохранитьЗначение("ОсновноеСвойствоКонтрагентов", Свойство);
		ЗафиксироватьТранзакцию();
		СтатусВозврата(1);

	Исключение
		ОтменитьТранзакцию();
		Сообщить("Запись основного свойства: " + ОписаниеОшибки(), "!");

	КонецПопытки;

КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
Форма.ИспользоватьЗакладки(1);
// 1-й слой переназначается в ПриИзмененииВидаКонтрагента().
Форма.Закладки.ДобавитьЗначение("Контрагент, Кнопки",                  "Основные");
Форма.Закладки.ДобавитьЗначение("Контрагент, Кнопки, ОсновнойДоговор", "Договор взаиморасчетов");
Форма.Закладки.ДобавитьЗначение("Контрагент, Кнопки, ОсновнойСчет",    "Банковский счет");
Форма.Закладки.ДобавитьЗначение("Контрагент, Кнопки, Прочее",          "Прочее");

ВидКонтрагента.ДобавитьЗначение("ЮрЛица",     "Стороннее юр. лицо");
ВидКонтрагента.ДобавитьЗначение("ФизЛица",    "Физическое лицо");
ВидКонтрагента.ДобавитьЗначение("СвоиЮрЛица", "Собственное юр. лицо");
