// Меркурий - Сведения об упаковке. 
// Передаваемые /возвращаемые данные
// СтроковоеПредставление Значения - Преобразованная в строку Таблица Значений,
// содержащая 1- Трансп уровень,2 - ФормаУпаковки, 3 - Количество, 4 - Преобразованный в строку СписокЗначений Маркировок Упаковки трансп. уровня (Строка - Class, Значение - значение).

//Авторы:
//Дмитрий Жуков 2018-01-15 zhukov@kb99
//Александр Тувин 2018-07-16 tuvin@kb99.pro

Перем ТПУровни, ТЗУровни;
Перем ТПМаркировки, ТЗМаркировки;
Перем СЗНомераУровней, СзКлассы;
Перем оПривязки; //:Меркурий.Привязки

Перем СтрСведенияОбУпаковке;

//======================================================================
Процедура ТПУровниПриАктивизацииСтроки(ТабличноеПоле)
	Если ПустоеЗначение(ТабличноеПоле.ТекущиеДанные)=1 Тогда 
		ТЗМаркировки.УдалитьСтроки();
		Попытка ТПМаркировки.ОбновитьСтроки(); Исключение КонецПопытки;
		Возврат;
	КонецЕсли;
	Если ТЗУровни.КоличествоСтрок()=0 Тогда 
		ТЗМаркировки.УдалитьСтроки();
		Попытка ТПМаркировки.ОбновитьСтроки(); Исключение КонецПопытки;
		Возврат;
	КонецЕсли;
	ТЗУровни.ТекущаяСтрока(ТабличноеПоле.ТекущиеДанные.НомерСтроки);
	ТЗУровни.ПолучитьСтрокуПоНомеру(ТабличноеПоле.ТекущиеДанные.НомерСтроки);

	Маркировки =  ЗначениеИзСтроки(ТабличноеПоле.ТекущиеДанные.Маркировки);
	Если ТипЗначенияСтр(Маркировки) = "СписокЗначений" Тогда
		ТЗМаркировки.УдалитьСтроки();
		Для СЦ = 1 По Маркировки.РазмерСписка() Цикл
			Стр = ""; 	
			зн = Маркировки.ПолучитьЗначение(СЦ,Стр);

			ТЗМаркировки.НоваяСтрока();
			ТЗМаркировки.Класс = зн;
			ТЗМаркировки.Значение = стр;
		КонецЦикла;
	Иначе
		ТЗМаркировки.УдалитьСтроки();
	КонецЕсли;
	Попытка
		ТПМаркировки.ОбновитьСтроки();
	Исключение
	КонецПопытки;
КонецПроцедуры

//======================================================================
Процедура ДобавитьСтрокуУровня()
	Нашли = 0;
	Для СЦ = 1 По 6 Цикл
		Поз = 0; 	
		Если ТЗУровни.НайтиЗначение(СЦ,Поз,"НомерУровня") = 0 Тогда
			Нашли = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Нашли = 1 Тогда
		ТЗУровни.НоваяСтрока();
		ТЗУровни.НомерУровня = СЦ;
		
		ТЗУровни.Сортировать("НомерУровня");

		Поз = 0; 	
		ТЗУровни.НайтиЗначение(СЦ,Поз,"НомерУровня");
		
		ТПУровни.ОбновитьСтроки();
		ТПУровни.ТекущаяСтрока = Поз;
	КонецЕсли;
КонецПроцедуры 

Процедура ОчиститьУровень()
	ТПУровниПриАктивизацииСтроки(ТПУровни);
	Если ТЗУровни.ТекущаяСтрока()=0 Тогда
	    Возврат;
	КонецЕсли;
	Если Вопрос("Удалить текущий уровень?","Да+Нет")="Нет" Тогда
	    Возврат;
	КонецЕсли;

	ТЗУровни.УдалитьСтроку(ТЗУровни.ТекущаяСтрока()); 
	ТПУровни.ОбновитьСтроки();

	ТПУровниПриАктивизацииСтроки(ТПУровни);
КонецПроцедуры

Процедура ДобавитьМаркировку()
	Если ТЗУровни.КоличествоСтрок()=0 Тогда
		Предупреждение("Нет сведений об упаковке");
		Возврат;    
	КонецЕсли;

	Класс = "";
	Если СзКлассы.ВыбратьЗначение(Класс,"Класс") <> 1 Тогда
    	Возврат;
	КонецЕсли;	
	
	Поз = 0;
	Если ТЗМаркировки.НайтиЗначение(Класс, Поз, "Класс") = 0 Тогда
		ТЗМаркировки.НоваяСтрока();
		ТЗМаркировки.Класс = Класс;
		ТЗМаркировки.Значение = "";
		
		ТПМаркировки.ОбновитьСтроки();
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура УдалитьМаркировку()
	Если ПустоеЗначение(ТПМаркировки.ТекущиеДанные)=1 Тогда Возврат;
	КонецЕсли;
	Если ТЗМаркировки.КоличествоСтрок()=0 Тогда Возврат;
	КонецЕсли;

	ТЗМаркировки.УдалитьСтроку(ТПМаркировки.ТекущаяСтрока);
	ТПМаркировки.ОбновитьСтроки();

	СписокМаркировок = СоздатьОбъект("СписокЗначений");
	Для СЦ = 1 По ТЗМаркировки.КоличествоСтрок() Цикл
		Если ПустоеЗначение(ТЗМаркировки.ПолучитьЗначение(СЦ, "Класс")) = 0 Тогда
			Если ПустаяСтрока(ТЗМаркировки.ПолучитьЗначение(СЦ, "Значение")) = 0 Тогда
				СписокМаркировок.ДобавитьЗначение(ТЗМаркировки.ПолучитьЗначение(СЦ, "Класс"),ТЗМаркировки.ПолучитьЗначение(СЦ, "Значение"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТЗУровни.УстановитьЗначение(ТПУровни.ТекущаяСтрока, "Маркировки", ЗначениеВСтроку(СписокМаркировок));
КонецПроцедуры // УдалитьМаркировку

//======================================================================
Процедура ТПМаркировкиВыбор(ТабличноеПоле, Стр, Колонка, ТипРегиона)
	Если ТипРегиона = 3 Тогда

		КодКолонки = Колонка.Данные;
		_знач = ТЗМаркировки.ПолучитьЗначение(Стр, КодКолонки);
		Если КодКолонки = "Класс" Тогда
			Класс = "";
			Если НЕ(СзКлассы.ВыбратьЗначение(Класс,"Класс")=1) Тогда
		    	Возврат;
			КонецЕсли;	
			Поз = 0;
			Если ТЗМаркировки.НайтиЗначение(Класс, Поз, "Класс") = 0 Тогда
				ТЗМаркировки.УстановитьЗначение(Стр, КодКолонки, Класс);
			КонецЕсли;
			ТПМаркировки.ОбновитьСтроки();
		ИначеЕсли КодКолонки = "Значение" Тогда
			Класс = ТЗМаркировки.ПолучитьЗначение(Стр, "Значение");
			Если Класс = "EAN8" Тогда ДлинаСтроки = 8;
			ИначеЕсли Класс = "EAN13" Тогда ДлинаСтроки = 13;
			ИначеЕсли Класс = "EAN128" Тогда ДлинаСтроки = 128;
			Иначе ДлинаСтроки = 50;
			КонецЕсли;
			ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач, ДлинаСтроки,0, "ВыбЗнач", "0x00000010");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ТПМаркировкиПриРедактированииЗначения(ТабличноеПоле, Стр, Колонка, ТипРегиона, __знач)
	Если ТипРегиона = 3 Тогда
		КодКолонки = Колонка.Данные;

		Если КодКолонки = "Значение" Тогда
			ТЗМаркировки.УстановитьЗначение(Стр, КодКолонки, __знач);

			СписокМаркировок = СоздатьОбъект("СписокЗначений");
			Для СЦ = 1 По ТЗМаркировки.КоличествоСтрок() Цикл
				Если ПустоеЗначение(ТЗМаркировки.ПолучитьЗначение(СЦ, "Класс")) = 0 Тогда
					Если ПустаяСтрока(ТЗМаркировки.ПолучитьЗначение(СЦ, "Значение")) = 0 Тогда
						СписокМаркировок.ДобавитьЗначение(ТЗМаркировки.ПолучитьЗначение(СЦ, "Класс"),ТЗМаркировки.ПолучитьЗначение(СЦ, "Значение"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТЗУровни.УстановитьЗначение(ТПУровни.ТекущаяСтрока, "Маркировки", ЗначениеВСтроку(СписокМаркировок));
		КонецЕсли;
		ТПМаркировки.ОбновитьСтроки();
	КонецЕсли;	
КонецПроцедуры

//======================================================================
Процедура ПоКнопкеЗаписать()
	СЦ = ТЗУровни.КоличествоСтрок();
	Пока СЦ > 0 Цикл
		ТЗУровни.ПолучитьСтрокуПоНомеру(СЦ);
		
		ВсеОК = 1;
		Если (ТЗУровни.НомерУровня < 1) ИЛИ (ТЗУровни.НомерУровня > 6) Тогда ВсеОК = 0;
		ИначеЕсли ПустоеЗначение(ТЗУровни.Упаковка) = 1 Тогда ВсеОК = 0;
		ИначеЕсли ТЗУровни.КолВо <= 0 Тогда ВсеОК = 0;
		КонецЕсли;
		
		Если ВсеОК = 0 Тогда
			ТЗУровни.УдалитьСтроку(СЦ);
		КонецЕсли;
		СЦ = СЦ - 1;
	КонецЦикла;	
	СтрСведенияОбУпаковке = ЗначениеВСтроку(ТЗУровни); // добавить или обновить сведения об уровне	
КонецПроцедуры // ПоКнопкеЗаписать

//======================================================================
Процедура ТПУровниПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)

	Если ТипРегиона = 3 Тогда
		ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("НомерУровня");
		Загол = "";
		Если ДанныеСтроки.НомерУровня <> 0 Тогда
			СЗНомераУровней.ПолучитьЗначение(ДанныеСтроки.НомерУровня, Загол);
		КонецЕсли;
		ОбъектЯчейка.ГоризонтальноеВыравнивание = 1;
		ОбъектЯчейка.Текст = Загол;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ТПУровниВыбор(ТабличноеПоле, Стр, Колонка, ТипРегиона)
	Если ТипРегиона = 3 Тогда

		КодКолонки = Колонка.Данные;
		_знач = ТЗУровни.ПолучитьЗначение(Стр, КодКолонки);
		Если КодКолонки = "НомерУровня" Тогда
			НомерУровня = _знач;
			Если (СзНомераУровней.ВыбратьЗначение(НомерУровня,"Номер уровня")=1) Тогда
				ТЗУровни.УстановитьЗначение(Стр, КодКолонки,НомерУровня);
			КонецЕсли;	
			ТПУровни.ОбновитьСтроки();
		ИначеЕсли КодКолонки = "Упаковка" Тогда
			ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,15,3, "ВыбЗнач", "0x00000020");
		ИначеЕсли КодКолонки = "КолВо" Тогда
			ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,15,3, "ВыбЗнач", "0x00000020");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ТПУровниПриРедактированииЗначения(ТабличноеПоле, Стр, Колонка, ТипРегиона, __знач)
	Если ТипРегиона = 3 Тогда
		КодКолонки = Колонка.Данные;

		Если КодКолонки = "КолВо" Тогда
			Если __знач > 0 Тогда
				ТЗУровни.УстановитьЗначение(Стр, КодКолонки, __знач);
			КонецЕсли;
		ИначеЕсли КодКолонки = "Упаковка" Тогда
			ТЗУровни.УстановитьЗначение(Стр, КодКолонки, __знач);
		КонецЕсли;
		ТПУровни.ОбновитьСтроки();
	КонецЕсли;	
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	ГМ._ПриИзмененииРазмераОкна(Контекст, ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры

//======================================================================
Процедура ПослеОткрытия()
	ГМ._ПослеОткрытия(Контекст);
КонецПроцедуры

//======================================================================
Процедура ПриОткрытии()
      
	ГМ._ПриОткрытии(Контекст);
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
	    СтрСведенияОбУпаковке = Форма.Параметр;
		ВремТЗ = ЗначениеИзСтроки(СтрСведенияОбУпаковке);
		Если ТипЗначенияСтр(ВремТЗ) = "ТаблицаЗначений" Тогда
			Для СЦ = 1 По ВремТЗ.КоличествоСтрок() Цикл
				ТЗУровни.НоваяСтрока(); 
				Для СК = 1 По ТЗУровни.КоличествоКолонок() Цикл
					ИмяКолонки = ТЗУровни.ПолучитьПараметрыКолонки(СК);
					Попытка
						ТЗУровни.УстановитьЗначение(СЦ, СК, ВремТЗ.ПолучитьЗначение(СЦ, ИмяКолонки));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		Иначе
			//Предупреждение("Передан неверный параметр");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.МодальныйРежим() = 0 Тогда
		оПривязки.Привязка("кнЗакрыть,кнЗаписать","T","Форма");
		оПривязки.Привязка("рамкаМаркировки", "H", "Форма", "LW", "Форма");
		оПривязки.Привязка("ТПМаркировки", "H", "Форма", "BR", "рамкаМаркировки,Форма");
		оПривязки.Привязка("ТПУровни", "H", "Форма", "BR", "кнЗакрыть,рамкаМаркировки");
		оПривязки.Привязка("кнДобавитьУровень,кнУдалитьУровень", "T", "Форма", "L", "рамкаМаркировки");
		оПривязки.Привязка("кнДобавитьМаркировку,кнУдалитьМаркировку", "T", "Форма", "L", "Форма");
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ПослеСозданияФормы()
	ТПУровни = ГМ.СоздатьТабличноеПоле(Контекст, "ТПУровни", ТЗУровни);
	Если ТЗУровни.КоличествоСтрок() > 0 Тогда
		ТПУровни.ТекущаяСтрока = 1;
		ТПУровниПриАктивизацииСтроки(ТПУровни);
	КонецЕсли;
	ТПМаркировки = ГМ.СоздатьТабличноеПоле(Контекст, "ТПМаркировки", ТЗМаркировки);
КонецПроцедуры

//======================================================================
Процедура ПриЗакрытии()
    Форма.Параметр = СтрСведенияОбУпаковке;
КонецПроцедуры

ТЗУровни = СоздатьОбъект("ТаблицаЗначений");
ТЗУровни.НоваяКолонка("НомерУровня","Число",1,0,"№ уровня",8);
ТЗУровни.НоваяКолонка("Упаковка","Справочник.ВСД_ФормыУпаковки",,,,20);
ТЗУровни.НоваяКолонка("КолВо","Число",15,3,"Количество",5);
ТЗУровни.НоваяКолонка("Маркировки");

ТЗМаркировки = СоздатьОбъект("ТаблицаЗначений");
ТЗМаркировки.НоваяКолонка("Класс","Строка",10,0,"Класс",10);
ТЗМаркировки.НоваяКолонка("Значение","Строка",,,,20);

СЗНомераУровней = СоздатьОбъект("СписокЗначений");
СЗНомераУровней.ДобавитьЗначение(1,"Внутренний уровень.");
СЗНомераУровней.ДобавитьЗначение(2,"Потребительский уровень.");
СЗНомераУровней.ДобавитьЗначение(3,"Промежуточный уровень.");
СЗНомераУровней.ДобавитьЗначение(4,"Торговый уровень.");
СЗНомераУровней.ДобавитьЗначение(5,"Дополнительный уровень.");
СЗНомераУровней.ДобавитьЗначение(6,"Транспортный (Логистический) уровень.");


СзКлассы = СоздатьОбъект("СписокЗначений");
СзКлассы.ДобавитьЗначение("UNDEFINED");
СзКлассы.ДобавитьЗначение("BN");
СзКлассы.ДобавитьЗначение("SSCC");
СзКлассы.ДобавитьЗначение("EAN8");
СзКлассы.ДобавитьЗначение("EAN13");
СзКлассы.ДобавитьЗначение("EAN128");
СзКлассы.ДобавитьЗначение("BUNDLE");

//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
