//Авторы:
// Синявский Филипп phsin@kb99.pro
// Жуков Дмитрий zhukov@kb99.pro

Перем Компонента Экспорт;
Перем СписокКонстант Экспорт;
Перем СписокФирм Экспорт;
Перем ПараметрыФирм Экспорт; // ЖД  Многофирм
Перем базаДанных Экспорт;
Перем ЭтоSQL Экспорт;
Перем ТестовыйРежим Экспорт;
Перем ТаблицаПереопределенныхФункций;
Перем ИмяDLL Экспорт;
Перем ТермическиеУсловияПеревозки Экспорт;
Перем КлассыМаркировки Экспорт;
Перем КолонкаСортировкиПартииСписания Экспорт;
Перем RS Экспорт;
Перем Сервис Экспорт;
Перем _ФабрикаОбъектов Экспорт;

Перем ТекущаяИнициализированнаяФирма Экспорт;

Перем КаталогМодуля Экспорт;
Перем КаталогЛогов Экспорт;

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Функция ПолучитьРезультат_Список_Продукции(продукцияЭлемент="") Экспорт Далее
Функция ЗагрузитьПараметры(ВыбФирма = "") Экспорт Далее
Функция ИмяФайлаНастроек() Экспорт Далее
Функция  ПолучитьПартии(Отправитель_Площадка, Смещение=0, УдалятьПартии=1) Экспорт Далее

//******************************************************************************
// ЗагрузитьКомпоненту(ИмяФайлаКомп)
//
// Параметры:
//  ИмяФайлаКомп =
//
// Возвращаемое значение:
//  1  - компонента загружена
//  0  - компонента не найдена
//  -1 - компонента не загружена (ошибка при загрузке)
// Описание:
//  Загружает внешнюю компоненту
//
Функция ЗагрузитьКомпоненту(ИмяФайлаКомп) Экспорт
	Результат = 1;
	ИмяФайла = КаталогМодуля + ИмяФайлаКомп;
	Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
	    ИмяФайла = КаталогИБ() + "ExtForms\" + ИмяФайлаКомп;
		Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
			ИмяФайла = КаталогИБ() + ИмяФайлаКомп;
			Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
				ИмяФайла = КаталогПрограммы() + ИмяФайлаКомп;
				Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
					Результат = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат = 1 Тогда
	    Если ЗагрузитьВнешнююКомпоненту(ИмяФайла) <> 1 Тогда
			Сообщить("Ошибка при загрузке компоненты " + ИмяФайлаКомп + " !","!");
	        Результат = -1;
		КонецЕсли;
	Иначе
		Сообщить("Не найден файл внешней компоненты: " + ИмяФайлаКомп,"!");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьКомпоненту()

Функция СообщитьОбОшибке(Описание, ТекущийКонтекст="", НомерСтрокиОшибки="" ) Экспорт

	Попытка
		ВерсияФайла = ТекущийКонтекст.Версия;
	Исключение
		ВерсияФайла = "не определено";
	КонецПопытки;

	Попытка
		ИмяФайла = ТекущийКонтекст.ИмяФайла;
	Исключение
		Попытка
			ИмяФайла = ТекущийКонтекст.ПолучитьПуть();
		Исключение
			ИмяФайла = Этот(Контекст).ПолучитьПуть();
		КонецПопытки;
	КонецПопытки;

	Сообщить(Описание,"!");
	Сообщить("Файл ["+ИмяФайла+"] Версия: ["+ВерсияФайла+"]");

	Попытка
		//отправим сообщение об ошибке и версии файла в bugtracker
		Компонента.SendError(Описание, ВерсияФайла, ИмяФайла, НомерСтрокиОшибки);
	Исключение
		Сообщить("Необходимо обновить dll","!");
	КонецПопытки;
КонецФункции

//======================================================================
Процедура ИнициализацияОбщихБиблиотек()
	Попытка
		RS = СоздатьОбъект("ODBCRecordset");
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(109)");
	КонецПопытки;
	Попытка
		Сервис = СоздатьОбъект("Сервис");
		Сервис.ВключитьРаскраскуТаблиц();
		Сервис.ИспользоватьПланРаскраски(0);
		_ФабрикаОбъектов=СоздатьОбъект("ФабрикаОбъектов");
	Исключение
		Если ЗагрузитьКомпоненту("FormEx.dll")=0 Тогда Возврат; КонецЕсли;
		Сервис = СоздатьОбъект("Сервис");
		Сервис.ВключитьРаскраскуТаблиц();
		Сервис.ИспользоватьПланРаскраски(0);

		//Попытка
		//	ЗагрузитьВнешнююКомпоненту("FormEx.dll");
		//Исключение
		//	Сообщить("Ошибка при загрузке FormEx.dll"); СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(125)");
		//	СтатусВозврата(0); Возврат;
		//КонецПопытки;
	КонецПопытки;

	ЭтоSQL = ФС.СуществуетФайл(КаталогИБ()+"1cv7.dba");
	Если ЭтоSQL = 0 Тогда
		Попытка
			базаДанных = СоздатьОбъект("SQLiteBase");
		Исключение
			Если ЗагрузитьКомпоненту("1sqlite.dll")=0 Тогда Возврат; КонецЕсли;
			базаДанных = СоздатьОбъект("SQLiteBase");
		КонецПопытки;
		базаДанных.Открыть(":memory:");
	КонецЕсли;

КонецПроцедуры // ИнициализацияКомпонент

Процедура ИнициализацияПодключенияВетис()

	//В идеале долно быть 1 подключение к Ветису
	// при каждом вызове - создается новое подключение к Ветис, что вызывает задержки 5 сек - 1 мин
	ИмяDLL = ?(ТестовыйРежим=0,"SoapDLL_work","SoapDLL_test");
	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);
		Компонента = СоздатьОбъект("AddIn."+ИмяDLL);
	Исключение
		ошибка = "Компонента [AddIn."+ИмяDLL+"] не зарегистрирована ";
		Сообщить(ошибка,"!");
		СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(154)"); Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура Конструктор()

	ТекущаяИнициализированнаяФирма = "нет";

	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");

	СписокКонстант = СоздатьОбъект("СписокЗначений");
	СписокФирм = СоздатьОбъект("СписокЗначений");
	ПараметрыФирм  = СоздатьОбъект("СписокЗначений");	//ЖД Многофирм

	ТермическиеУсловияПеревозки = СоздатьОбъект("СписокЗначений");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("FROZEN", 		"Замороженный");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("CHILLED",		"Охлажденный");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("COOLED", 		"Охлаждаемый");
	ТермическиеУсловияПеревозки.ДобавитьЗначение("VENTILATED",	"Вентилируемый");

	КолонкаСортировкиПартииСписания = СоздатьОбъект("СписокЗначений");
	КолонкаСортировкиПартииСписания.ДобавитьЗначение("ДатаИзменения",		"Дата изменения");
	КолонкаСортировкиПартииСписания.ДобавитьЗначение("ДатаСрокГодности1",	"Срок годности");
	КолонкаСортировкиПартииСписания.ДобавитьЗначение("ДатаИзготовления1",	"Изготовлено");


	КлассыМаркировки = СоздатьОбъект("СписокЗначений");
	КлассыМаркировки.ДобавитьЗначение("UNDEFINED", "Неопределенный класс");
	КлассыМаркировки.ДобавитьЗначение("BN", "Номер производственной партии");
	КлассыМаркировки.ДобавитьЗначение("SSCC", "SSCC-код (глобально-уникальный код грузовых контейнеров)");
	КлассыМаркировки.ДобавитьЗначение("EAN8", "Маркировка в соответствии с EAN-8");
	КлассыМаркировки.ДобавитьЗначение("EAN13", "Маркировка в соответствии с EAN-13");
	КлассыМаркировки.ДобавитьЗначение("EAN128", "Маркировка в соответствии с EAN-128");
	КлассыМаркировки.ДобавитьЗначение("BUNDLE", "Маркировка вышестоящей групповой упаковки (паллеты и т.п.)");

	глМеркурийИнтеграция = СоздатьОбъект("МеркурийИнтеграция");
    глМеркурийИнтеграция.Инициализация(Сам());

	// Загрузка настроек
	ИмяФайла = ИмяФайлаНастроек();

	Если фс.СуществуетФайл(ИмяФайла)=0 Тогда
		//Сообщить("Файл с константами ["+ИмяФайла+"] не найден","!");
	Иначе
		Попытка

			ЗначениеИзФайла(ИмяФайла,ПараметрыФирм);
			// Настройки хранятся в ПараметрыФирм. Т.к. это СписокЗначений, а не ТЗ,
			// нужен еще один списокзначений с самими фирмами, иначе во всех обработках/документах
			// надо делать этот списокфирм для загрузки параметров
			// Если конфигурация без фирм/других справочников (бухгалерия) - в названии будет -=основная фирма=-
			Для СЦ = 1 По ПараметрыФирм.РазмерСписка() Цикл
				стр = ""; ВремФирма = "";
				НаименованиеФирмы = "-=Основная фирма=-";
				к = ПараметрыФирм.ПолучитьЗначение(СЦ,стр);
				Если ПустоеЗначение(стр) = 0 Тогда
					ВремФирма = ЗначениеИзСтрокиВнутр(стр);
					Попытка
						НаименованиеФирмы = ВремФирма.Наименование;
					Исключение
						НаименованиеФирмы = "-=Основная фирма=-";
					КонецПопытки;
				КонецЕсли;
				СписокФирм.ДобавитьЗначение(ВремФирма, НаименованиеФирмы);
			КонецЦикла;
		Исключение
			СообщитьОбОшибке("Не удалось загрузить параметры
			|"+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	ЗагрузитьПараметры("");
	ИнициализацияОбщихБиблиотек();

КонецПроцедуры

Процедура Деструктор()
КонецПроцедуры
//

//======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);


	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;

	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;
КонецФункции // МодульВыполнения
//======================================================================

//======= ФУНКЦИИ ПО СБОРУ ИНФОРМАЦИИ О КЛИЕНТЕ ==============

Функция ПолучитьНомерАвто(Док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьНомерАвто");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьНомерАвто(Док);
	КонецЕсли;
	//}
	Рез = "Не исп.";
	Попытка Рез = Док.Маршрут.Авто.НомернойЗнак;	Исключение	КонецПопытки;

	Возврат Рез;
КонецФункции


// Получение реквизитов связанных документов, в параметре Тип нужного документа

// Возвращаемое значение: СписокЗначений - Серия Номер и Дата документа

Функция ПолучитьСвязанныйДокумент(Док,ТипДокумента = "ТТН") Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля

	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьСвязанныйДокумент");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьСвязанныйДокумент(Док,ТипДокумента);
	КонецЕсли;
	//}

	сзРеквизитыДок = СоздатьОбъект("СписокЗначений");

	Если ТипДокумента = "ТТН" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		сзРеквизитыДок.Установить("ДокНомер",Док.НомерДок);
		сзРеквизитыДок.Установить("ДокДата",Док.ДатаДок);
	ИначеЕсли ТипДокумента = "Маршрут" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		сзРеквизитыДок.Установить("ДокНомер",Док.НомерДок);
		сзРеквизитыДок.Установить("ДокДата",Док.ДатаДок);
		Попытка сзРеквизитыДок.Установить("НомерАвто",Док.Маршрут.Авто.НомернойЗнак); Исключение КонецПопытки;
	ИначеЕсли ТипДокумента = "ТОРГ12" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		Попытка сзРеквизитыДок.Установить("ДокНомер",Док.НомерТОРГ12); Исключение КонецПопытки;
		Попытка сзРеквизитыДок.Установить("ДокДата",Док.ДатаТОРГ12); Исключение КонецПопытки;
	ИначеЕсли ТипДокумента = "Заказ" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		Попытка сзРеквизитыДок.Установить("ДокНомер", Док.ДокОснование.НомерЗаказаПокупателя); Исключение КонецПопытки;
		Попытка сзРеквизитыДок.Установить("ДокДата", Док.ДокОснование.ДатаЗаказаПокупателя); Исключение КонецПопытки;
	КонецЕсли;
	Возврат сзРеквизитыДок;
КонецФункции


//======================================================================
Функция ПолучитьКонстанту(НаименованиеКонстанты) Экспорт
	ЗначениеКонстанты = СписокКонстант.Получить(НаименованиеКонстанты);
	Если ПустоеЗначение(ЗначениеКонстанты) = 1 Тогда
		//ЗначениеКонстанты = "";
		Если НаименованиеКонстанты = "НазваниеВидаСправочникаФирмы" Тогда
			Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
				ЗначениеКонстанты = "Фирмы";
			КонецЕсли;
		ИначеЕсли НаименованиеКонстанты = "НазваниеВидаДокументаРеализация" Тогда
			Если Метаданные.Документ("Реализация").Выбран() = 1 Тогда
				ЗначениеКонстанты = "Реализация";
			КонецЕсли;
		ИначеЕсли НаименованиеКонстанты = "НазваниеВидаДокументаПеремещениеТМЦ" Тогда
			Если Метаданные.Документ("ПеремещениеТМЦ").Выбран() = 1 Тогда
				ЗначениеКонстанты = "ПеремещениеТМЦ";
			ИначеЕсли Метаданные.Документ("ПеремещениеТоваров").Выбран() = 1 Тогда
				ЗначениеКонстанты = "ПеремещениеТоваров";
			КонецЕсли;
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаГрузополучатель" Тогда
			ЗначениеКонстанты = "Контрагент";
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаНоменклатура" Тогда
			НазваниеВидаДокументаРеализация = ПолучитьКонстанту("НазваниеВидаДокументаРеализация");
			Попытка
				Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти() Цикл
					Рекв = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти(nn).Вид;
					Если Рекв = "Номенклатура" Тогда
						ЗначениеКонстанты = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти(nn).Идентификатор;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
				ЗначениеКонстанты="";
				СообщитьОбОшибке("Неправильно определен параметр [НазваниеВидаДокументаРеализация]",,"НомерСтрокиМдуля(351)");
			КонецПопытки;
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаКоличество" Тогда
			Попытка
				Если Метаданные.Документ(ПолучитьКонстанту("НазваниеВидаДокументаРеализация")).РеквизитТабличнойЧасти("Количество").Выбран() = 1 Тогда
					ЗначениеКонстанты = "Количество";
				КонецЕсли;
			Исключение
				ЗначениеКонстанты="";
				СообщитьОбОшибке("Неправильно определен параметр [НазваниеВидаДокументаРеализация]",,"НомерСтрокиМдуля(360)");
			КонецПопытки;
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаКоличествоМест" Тогда
			Попытка
				Если Метаданные.Документ(ПолучитьКонстанту("НазваниеВидаДокументаРеализация")).РеквизитТабличнойЧасти("КоличествоМест").Выбран() = 1 Тогда
					ЗначениеКонстанты = "КоличествоМест";
				Иначе
					ЗначениеКонстанты = ПолучитьКонстанту("НазваниеРеквизитаКоличество");
				КонецЕсли;
			Исключение
				ЗначениеКонстанты="";
				СообщитьОбОшибке("Неправильно определен параметр [НазваниеВидаДокументаРеализация]",,"НомерСтрокиМдуля(371)");
			КонецПопытки;

		ИначеЕсли НаименованиеКонстанты = "ФормаВСД" Тогда
			ЗначениеКонстанты = "LIC2";
		ИначеЕсли НаименованиеКонстанты = "ТермУсловияПеревозки" Тогда
			ЗначениеКонстанты = 1;
		ИначеЕсли НаименованиеКонстанты = "ВСД_Экспертиза" Тогда
			ЗначениеКонстанты = "Произ.лабор ";
		ИначеЕсли НаименованиеКонстанты = "ВСД_Местность" Тогда
			ЗначениеКонстанты = "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
		ИначеЕсли НаименованиеКонстанты = "ПаузаСек" Тогда
			ЗначениеКонстанты = 10;
		ИначеЕсли НаименованиеКонстанты = "КаталогМодуля" Тогда
			Если ФС.СуществуетФайл(КаталогИБ()+"ExtForms\Vetis\") = 1 Тогда
				ЗначениеКонстанты = КаталогИБ()+"ExtForms\Vetis\";
			КонецЕсли;
		ИначеЕсли (НаименованиеКонстанты = "ТестовыйРежим") и (ЗначениеКонстанты="") Тогда
			ТестовыйРежим = 1;
		ИначеЕсли ( ЗначениеКонстанты <> 0) Тогда
			Сообщить("Константа ["+НаименованиеКонстанты+"] не определена!","!");
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеКонстанты;
КонецФункции // ПолучитьКонстанту

Функция НазваниеРеквизитаНоменклатура() экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НазваниеРеквизитаНоменклатура");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НазваниеРеквизитаНоменклатура();
	КонецЕсли;
	//}

	рез = ПолучитьКонстанту("НазваниеРеквизитаНоменклатура");

	Если ПустоеЗначение(рез)=1 Тогда
		рез = "Номенклатура";
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция ПолучитьНаименованиеКлиента(ВыбКлиент) экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьНаименованиеКлиента");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьНаименованиеКлиента(ВыбКлиент);
	КонецЕсли;
	//}

	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ПолнНаименование);
КонецФункции

Функция ПолучитьЮрАдрес(ВыбКлиент) экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьЮрАдрес");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьЮрАдрес(ВыбКлиент);
	КонецЕсли;
	//}

	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ЮрАдрес);
КонецФункции

Функция ПолучитьФактАдрес(ВыбКлиент) экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФактАдрес");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФактАдрес(ВыбКлиент);
	КонецЕсли;
	//}

	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ФактАдрес);
КонецФункции

Функция ПолучитьИНН(ВыбКлиент) экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИНН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИНН(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Попытка
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);
	КонецЕсли;
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьКПП(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьКПП");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьКПП(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
	Иначе
		Возврат "";

	КонецЕсли;
КонецФункции // ПолучитьКПП() //mbIkola - функция изменена

Функция ПолучитьОГРН(ВыбКлиент) экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОГРН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОГРН(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Попытка
		Возврат ВыбКлиент.ОГРН;
	Исключение
	КонецПопытки;

	Возврат "";
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьАвтора() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАвтора");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАвтора();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат глПользователь;
КонецФункции

Функция ПоказатьАвтора(Конт) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПоказатьАвтора");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПоказатьАвтора(Конт);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат Конт.Автор;
КонецФункции

// ЖД из глМодуля 1С
Функция глЗначениеПоУмолчанию(ИмяРеквизита) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("глЗначениеПоУмолчанию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.глЗначениеПоУмолчанию(ИмяРеквизита);
	КонецЕсли;
	//}
	Значение = "";
    Попытка
		Автор = ПолучитьАвтора();
    	Если ПустоеЗначение(Автор.ПользовательДляНастроек) = 1 Тогда
			// Настройки по умолчанию задаются в текущем  элементе справочника "Пользователи"
			Значение = Автор.ПолучитьАтрибут(ИмяРеквизита);
    	Иначе
			// Настройки по умолчанию задаются в другом элементе справочника "Пользователи"
			Значение = Автор.ПользовательДляНастроек.ПолучитьАтрибут(ИмяРеквизита);
    	КонецЕсли;
	Исключение КонецПопытки;
	Возврат Значение;

КонецФункции // глЗначениеПоУмолчанию()

Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции // глВзятьКонтекст

Функция ПолучитьОсновнуюФирму() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОсновнуюФирму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОсновнуюФирму();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции

Функция ПолучитьФилиал() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФилиал");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФилиал();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции

//******************************************************************************
// глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента)
//
// Параметры:
//  ИмяРеквизита - имя реквизита (строка)
//  ВидДокумента - вид документа (строка)
//
// Возвращаемое значение:
//  0 - нет реквизита,
//  1 - есть реквизит
//
// Описание:
//  Проверяет, есть ли в структуре метаданных документа указанного вида
// 	реквизит шапки с указанным названием
//
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт

	Если ПустоеЗначение(ИмяРеквизита) = 1 Тогда
		Возврат 0;

	ИначеЕсли Метаданные.ОбщийРеквизитДокумента(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;

	ИначеЕсли ПустоеЗначение(ВидДокумента) = 1 Тогда
		Возврат 0;

	ИначеЕсли Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;

	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции //глЕстьРеквизитШапки()


//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============

//ДатаXML
Функция Преобразовать_Дата_в_Строка(ВыбДата, Время="") Экспорт
	стрДата = ""+ДатаГод(ВыбДата)+"-";
	Если ДатаМесяц(ВыбДата)<10 ТОгда
		стрДата=стрДата+"0"+ДатаМесяц(ВыбДата)+"-";
	Иначе
		стрДата=стрДата + ДатаМесяц(ВыбДата) + "-";
	КонецЕсли;
	Если ДатаЧисло(ВыбДата)<10 Тогда
		стрДата=стрДата + "0" + ДатаЧисло(ВыбДата);
	Иначе
		стрДата=стрДата + ДатаЧисло(ВыбДата);
	КонецЕсли;

	стрДата=стрДата+Время;

	Возврат стрДата;
КонецФункции

Функция булево(знЧисло) Экспорт

	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

Процедура ИзменитьСтатусДокументОснования(докОснование, СтатусДок)
	Если ПустоеЗначение(докОснование)=0 Тогда
		докОснованиеОбъект = СоздатьОбъект("Документ");
		докОснованиеОбъект.НайтиДокумент(ДокОснование);
		Если ((СтатусДок="COMPLETED") ИЛИ (СтатусДок="CONFIRMED")) Тогда
			Попытка
				докОснованиеОбъект.Провести();
			Исключение
			КонецПопытки;
		ИначеЕсли (СтатусДок="REJECTED") Тогда
			Попытка
				докОснованиеОбъект.СделатьНеПроведенным();
			Исключение
			КонецПопытки;
		ИначеЕсли (СтатусДок="WITHDRAWN") Тогда
			Попытка
				докОснованиеОбъект.Удалить(0);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Найти ошибки в XML ответе сервера и показать в строке сообщений
Функция НайтиОшибки(док="") Экспорт
	Результат=0;
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(Компонента.LogFilename);

	ДокОбъект = СоздатьОбъект("Документ");

	Попытка
	    errors=objDom.selectNodes("//*[local-name() = 'error']");
		//errors = objDom.selectSingleNode("//*[local-name() = 'errors']");

		Если errors.length>0 Тогда

			СтрОшибки ="";
			Сообщить("Ошибок = "+errors.length+" ","!");
		    Для i1 = 0 По errors.length - 1 Цикл
		        error=errors.item(i1);
				id = error.getAttribute("qualifier");
				code = error.getAttribute("code");
				СтрОшибка = "Ошибка" + " "+ code ;
				Если ПустоеЗначение(id)=0 Тогда
					СтрОшибка = СтрОшибка + " в строке "+id + " : ";
				КонецЕсли;
				СтрОшибка = СтрОшибка + СокрЛП(error.text);

				Сообщить(СтрОшибка,"!");
				Результат=Результат+1;
				СтрОшибки = СтрОшибка + РазделительСтрок;
			КонецЦикла;


			Если ПустоеЗначение(Док)=0 Тогда
				ДокОбъект.НайтиДокумент(док);
				ДокОбъект.Комментарий = СтрОшибки;
				ДокОбъект.Записать();

				ИзменитьСтатусДокументОснования(док, "REJECTED");
			КонецЕсли;
		КонецЕсли;
	Исключение
		Сообщить("ОШИБКА: "+Компонента.ErrorMessage,"!!");
	КонецПопытки;

	Попытка
		// Внутренние ошибки
	    error=objDom.selectSingleNode("//*[local-name() = 'Fault']");

		Если ПустоеЗначение(error)=0 Тогда
			Сообщить("Ошибка : код = "+ error.selectSingleNode("faultcode").text +" ","!");
			Сообщить("Ошибка : строка = "+ error.selectSingleNode("faultstring").text +" ","!");
			Сообщить("Ошибка : сервис = "+ error.selectSingleNode("faultactor").text +" ","!");
			Сообщить("Ошибка : detail описание = "+ error.selectSingleNode("detail").text +" ","!");
			Результат=Результат+1;

		КонецЕсли;
	Исключение
	КонецПопытки;

	Возврат Результат;
КонецФункции


Функция ИмяФайлаНастроек() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИмяФайлаНастроек");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИмяФайлаНастроек();
	КонецЕсли;
	//}

	//стандартное поведение функции

	//Сформируем полное имя файла настроек
	ВремФайл = КаталогИБ()+"Меркурий_Параметры.cfg";
	Если ФС.СуществуетФайл(ВремФайл) = 0 Тогда
		ВремФайл = КаталогИБ()+"Меркурий_Параметры_"+ИмяПользователя()+".cfg";
	КонецЕсли;

	возврат ВремФайл;
КонецФункции

Функция УдалитьXML(ИмяФайла) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("УдалитьXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.УдалитьXML();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПолучитьКонстанту("ОтладкаЗапросовXML")=0 Тогда
		Попытка
			ФС.УдалитьФайл(ИмяФайла);
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(763)");
		КонецПопытки;
	КонецЕсли;

КонецФункции

Функция УстановитьНазваниеОкна(КонтекстФормы)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("УстановитьНазваниеОкна");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.УстановитьНазваниеОкна();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ТестовыйРежим = 0 Тогда
		Заголовок = "Меркурий - РАБОЧАЯ версия";
	Иначе
		Заголовок = "Меркурий - ТЕСТОВАЯ версия !!!";
	КонецЕсли;

	КонтекстФормы.Форма.Заголовок(Заголовок);
	Возврат 1;
КонецФункции


Функция ПолучитьСписокКонстант(ВыбФирма = "") //ЖД
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьСписокКонстант");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьСписокКонстант(ВыбФирма);
	КонецЕсли;
	//}
	Если ПустоеЗначение(ВыбФирма) = 0 Тогда
		СписокКонстант = ПараметрыФирм.Получить(ЗначениеВСтрокуВнутр(ВыбФирма));
	Иначе
		попытка
			СписокКонстант = ПараметрыФирм.ПолучитьЗначение(1); // первую попавшуюся
		Исключение
			//Сообщить("Нет сохраненных настроек");
			ПараметрыФирм = СоздатьОбъект("СписокЗначений");
		КонецПопытки;
	КонецЕсли;

	Если НЕ(ТипЗначенияСТР(СписокКонстант) = "СписокЗначений") Тогда // Переходный период Многофирм или НЕТ Параметров для указанной фирмы
		Если ПустоеЗначение(СписокКонстант)  = 0 Тогда  // Первый запуск с настройками прежней версии
			СписокКонстант = ПараметрыФирм;             // Предложим выбрать фирму, чтобы руками не вбивать потом заново настройки
			ПараметрыФирм = СоздатьОбъект("СписокЗначений");
			СпрФирм = СоздатьОбъект("Справочник.Фирмы");
			Если СпрФирм.Выбрать("Выберите Фирму для настроек прежней версии",) = 1 Тогда
			    ПараметрыФирм.Установить(ЗначениеВСтрокуВнутр(СпрФирм.ТекущийЭлемент()),СписокКонстант);
			КонецЕсли;
		иначе
			Сообщить("Нет настроек по выбранной фирме");
			СписокКонстант = СоздатьОбъект("СписокЗначений");
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ЗагрузитьПараметры(ВыбФирма = "") Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПараметры");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПараметры(ВыбФирма);
	КонецЕсли;
	//}

	ПолучитьСписокКонстант(ВыбФирма);//ЖД
	ТестовыйРежим = ПолучитьКонстанту("ТестовыйРежим");

	КаталогМодуля = ПолучитьКонстанту("КаталогМодуля");
	//Если ПустаяСтрока(КаталогМодуля) = 1 Тогда
	//	Если ФС.СуществуетФайл(КаталогИБ()+"ExtForms\Vetis\") = 1 Тогда
	//		КаталогМодуля = КаталогИБ()+"ExtForms\Vetis\";
	//	КонецЕсли;
	//КонецЕсли;

	КаталогЛогов = КаталогМодуля + "logs\";
	Если ФС.СуществуетФайл(КаталогЛогов) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(КаталогЛогов);
		Исключение
			Предупреждение("Не создан каталог логов!");
		КонецПопытки;
	КонецЕсли;

КонецФункции

//======================================================================
// Возвращает наличие реквизита Фирма: 0 - не найдено, 1 - общий реквизит, 2 - реквизит документа
// Параметры: Докум - документ, в котором ищем фирму
// ФирмаИмяРеквизита - возвращаемое значение
Функция ПолучитьИмяРеквизитаФирма(НазваниеВидаДокументаРеализация, ФирмаИмяРеквизита) Экспорт
	НазваниеВидаСправочникаФирмы = ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
	ФирмаОбщийРеквизит = 0; ФирмаИмяРеквизита = "";
	Для nn = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
        Рекв = Метаданные.ОбщийРеквизитДокумента(nn).Вид;
		Если Рекв = НазваниеВидаСправочникаФирмы Тогда
			ФирмаИмяРеквизита = Метаданные. ОбщийРеквизитДокумента(nn).Идентификатор;
			ФирмаОбщийРеквизит = 1; Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ФирмаОбщийРеквизит = 0 Тогда
		Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки() Цикл
			Рекв = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Вид;
			Если Рекв = НазваниеВидаСправочникаФирмы Тогда
				ФирмаИмяРеквизита = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Идентификатор;
				ФирмаОбщийРеквизит = 2; Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ФирмаОбщийРеквизит;
КонецФункции // ПолучитьИмяРеквизитаФирма

Функция ПолучитьФирмуПоХС(ВыбХС) Экспорт Далее

Функция ЗагрузитьПараметрыВФорму(КонтекстФормы) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПараметрыВФорму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПараметрыВФорму(КонтекстФормы);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(КонтекстФормы)=0 тогда

		Попытка
			КонтекстФормы.param_username 	= ПолучитьКонстанту("param_username"); ;  // для базовой авторизации
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_password 		= ПолучитьКонстанту("param_password");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_issuer_id		= ПолучитьКонстанту("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_service_id 		= ПолучитьКонстанту("param_service_id") ;
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_api_key 		= ПолучитьКонстанту("param_api_key") ;
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_intiator_login 	= ПолучитьКонстанту("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_vetdoctor_login = ПолучитьКонстанту("param_vetdoctor_login");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_vetdoctor_fio 	= ПолучитьКонстанту("param_vetdoctor_fio");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_vetdoctor_post 	= ПолучитьКонстанту("param_vetdoctor_post");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Отправитель_ХозСубъект = ПолучитьКонстанту("Отправитель_ХозСубъект");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Отправитель_Площадка 	= ПолучитьКонстанту("Отправитель_Площадка");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Страна 				= ПолучитьКонстанту("Страна");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Регион 				= ПолучитьКонстанту("Регион");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Город 				= ПолучитьКонстанту("Город");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.ВСД_Экспертиза 		= ПолучитьКонстанту("ВСД_Экспертиза");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.ВСД_Местность 		= ПолучитьКонстанту("ВСД_Местность");
		Исключение
		КонецПопытки;
		Попытка
			КонтекстФормы.ВСД_ОсобыеОтметки 	= ПолучитьКонстанту("ВСД_ОсобыеОтметки");
		Исключение КонецПопытки;

		Попытка //ЖД
			КонтекстФормы.КаталогМодуля 		= КаталогМодуля;
		Исключение
		КонецПопытки;

		Попытка
			КонтекстФормы.КаталогЛогов 			= КаталогЛогов;
		Исключение
		КонецПопытки;
		Попытка
			КонтекстФормы.ПаузаСек 				= ПолучитьКонстанту("ПаузаСек");
		Исключение
		КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеРеквизитаГрузополучатель  = ПолучитьКонстанту("НазваниеРеквизитаГрузополучатель");
		Исключение КонецПопытки;

		Попытка
			КонтекстФормы.ОтладкаЗапросовXML  	= ПолучитьКонстанту("ОтладкаЗапросовXML");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Перевозчик_ХозСубъект = ПолучитьКонстанту("Перевозчик_ХозСубъект");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.ПропускатьПустыеСвойства = ПолучитьКонстанту("ПропускатьПустыеСвойства");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеВидаДокументаРеализация = ПолучитьКонстанту("НазваниеВидаДокументаРеализация");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеРеквизитаКоличество = ПолучитьКонстанту("НазваниеРеквизитаКоличество");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеРеквизитаКоличествоМест  = ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест");
		Исключение КонецПопытки;

		Попытка
			КонтекстФормы.НазваниеРеквизитаНоменклатура = ПолучитьКонстанту("НазваниеРеквизитаНоменклатура");
		Исключение КонецПопытки;

		попытка
			КонтекстФормы.ОчищатьСправочникВСД_Партии = ПолучитьКонстанту("ОчищатьСправочникВСД_Партии");
		Исключение
		КонецПопытки;

		попытка
			КонтекстФормы.ТестовыйРежим = ПолучитьКонстанту("ТестовыйРежим");
		Исключение
		КонецПопытки;

		попытка КонтекстФормы.КаталогБиблиотек = ПолучитьКонстанту("КаталогБиблиотек"); Исключение КонецПопытки;

		попытка КонтекстФормы.Цель = ПолучитьКонстанту("Цель"); Исключение КонецПопытки;

		ФормаВСД = ПолучитьКонстанту("ФормаВСД");
		Попытка КонтекстФормы.спФормаВСД.ТекущаяСтрока( КонтекстФормы.спФормаВСД.НайтиЗначение(ФормаВСД) ); Исключение КонецПопытки;

		ТермУсловияПеревозки = ПолучитьКонстанту("ТермУсловияПеревозки");
		Попытка КонтекстФормы.спТермическиеУсловияПеревозки.ТекущаяСтрока( ТермУсловияПеревозки ); Исключение КонецПопытки;

		Попытка КонтекстФормы.ДобавлятьУпаковки = ПолучитьКонстанту("ДобавлятьУпаковки"); Исключение КонецПопытки;

		Попытка КонтекстФормы.Поставщик_Площадка = ПолучитьКонстанту("Поставщик_Площадка"); Исключение КонецПопытки;
		Попытка КонтекстФормы.Поставщик_ХозСубъект = ПолучитьКонстанту("Поставщик_ХозСубъект"); Исключение КонецПопытки;
		Попытка КонтекстФормы.Поставщик_Фирма = ПолучитьКонстанту("Поставщик_Фирма"); Исключение КонецПопытки;
		Попытка КонтекстФормы.ВСД_РезультатыИсследований = ПолучитьКонстанту("ВСД_РезультатыИсследований"); Исключение КонецПопытки;

		ПарамКолонкаСортировкиПартииСписания = СокрЛП(ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания"));
		Попытка КонтекстФормы.спКолонкаСортировкиПартииСписания.ТекущаяСтрока( ПарамКолонкаСортировкиПартииСписания ); Исключение КонецПопытки;

		Попытка КонтекстФормы.ПарамЗнакСортировкиУбывание = ПолучитьКонстанту("ПарамЗнакСортировкиУбывание"); Исключение КонецПопытки;
		Попытка КонтекстФормы.ПарамЗаполнятьВСДБезПартий = ПолучитьКонстанту("ПарамЗаполнятьВСДБезПартий"); Исключение КонецПопытки;

		Попытка
			Если ПустоеЗначение(КонтекстФормы.ВыбФирма) = 1 Тогда
				КонтекстФормы.ВыбФирма = ПолучитьФирмуПоХС(КонтекстФормы.Отправитель_Хозсубъект);
			КонецЕсли;
		Исключение КонецПопытки;

		Попытка
			КонтекстФормы.НазваниеВидаСправочникаФирмы  = ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецФункции


Функция СохранитьПараметры() Экспорт
		//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СохранитьПараметры");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СохранитьПараметры(ПараметрыФирм);
	КонецЕсли;
	//}

	//стандартное поведение функции
//	ПараметрыФирм = _ПараметрыФирм;  //перезапишем список фирм

	ИмяФайла = ИмяФайлаНастроек();
	ЗначениеВФайл(ИмяФайла,ПараметрыФирм);
	Сообщить("Настройки сохранены в "+ИмяФайла,"i");
КонецФункции

Функция Пауза() Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Пауза");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Пауза();
	КонецЕсли;
	//}

	//стандартное поведение функции
	ЗадержкаСекунд = ПолучитьКонстанту("ПаузаСек");
	Состояние("Пауза "+ЗадержкаСекунд+" сек");

	//стандартное поведение функции
	Компонента.Pause(ЗадержкаСекунд*1000); // в ms
КонецФункции

// не используется
//Функция ПолучитьОтветХС(applicationID, ХС) Экспорт
//
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОтветХС");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ПолучитьОтветХС(applicationID, ХС);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Если ПустоеЗначение(applicationID)=1 Тогда
//		Сообщить("Не указано applicationID");
//		Возврат 0;
//	КонецЕсли;
//
//	Сообщить(" Запрос 	Result [ "+СокрЛП(applicationID)+" ]","i");
//	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
//	//Отладка();
//
//    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);
//    objDom=СоздатьОбъект("MSXML2.DOMDocument");
//    objDom.load(Компонента.LogFilename);
//
//	Если НайтиОшибки()>0 Тогда
//		Возврат Результат;
//	КонецЕсли;
//
//    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
//	guid = enterprise.selectSingleNode("base:guid").text;
//	uuid = enterprise.selectSingleNode("base:uuid").text;
//	active = enterprise.selectSingleNode("base:active").text;
//
//	Если ПустоеЗначение(GUID)=0 Тогда
//		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
//		Спр.НайтиЭлемент(ХС);
//		спр.GUID = GUID;
//		спр.Записать();
//		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
//		Возврат 1;
//	Иначе
//		Сообщить("Пустой GUID ХозСубъекта");
//		Возврат 0;
//	КонецЕсли;
//
//КонецФункции


Процедура ИнициализацияКомпоненты(ВыбФирма="")
	//ЗагрузитьПараметры(ВыбФирма);

	Если ТекущаяИнициализированнаяФирма = ВыбФирма Тогда
		Возврат;
	КонецЕсли;

	Состояние("Инициализация компоненты, подключение к ВЕТИС");

	ИнициализацияПодключенияВетис();

	ПолучитьСписокКонстант( ВыбФирма );

	Опции = Компонента.GetOptions();

	Опции.USERNAME 			= ПолучитьКонстанту("param_username");
    Опции.PASSWORD 			= ПолучитьКонстанту("param_password");
    Опции.ISSUER_ID 		= ПолучитьКонстанту("param_issuer_id");
    Опции.SERVICE_ID 		= ПолучитьКонстанту("param_service_id");
    Опции.API_KEY 			= ПолучитьКонстанту("param_api_key");
    Опции.INITIATOR_LOGIN 	= ПолучитьКонстанту("param_intiator_login");
    Опции.VETDOCTOR_LOGIN 	= ПолучитьКонстанту("param_vetdoctor_login");
	Опции.LogsDir 			= СокрЛП(КаталогЛогов);
	Опции.VETDOCTOR_FIO 	= ПолучитьКонстанту("param_vetdoctor_fio");
	Опции.VETDOCTOR_POST 	= ПолучитьКонстанту("param_vetdoctor_post");

	Если ПолучитьКонстанту("proxy_enable")="1" Тогда
		Опции.PROXY_ENABLE 		= Компонента.TRUE();
		Опции.PROXY_URL 		= ПолучитьКонстанту("proxy_url");
		Опции.PROXY_PORT 		= ПолучитьКонстанту("proxy_port");
		Опции.PROXY_USERNAME 	= ПолучитьКонстанту("proxy_username");
		Опции.PROXY_PASSWORD 	= ПолучитьКонстанту("proxy_password");
	КонецЕсли;

	Если ПолучитьКонстанту("ОтладкаЗапросовXML")=1 Тогда
		Опции.DEBUG = Компонента.TRUE(); // запросы и ответы записываются в XML файлы в папке LogsDir
	Иначе
		Опции.DEBUG = Компонента.FALSE(); // запросы и ответы НЕ записываются
	КонецЕсли;
	//отправка статистики в Google Analitycs
	Опции.SEND_STAT = Компонента.TRUE();
	//Опции.SEND_STAT = Компонента.FALSE();

	//выводить ошибки в диалоговом окне
	//все ошибки и предупреждения записываются в SoapDll.log
	Опции.SILENT = Компонента.FALSE(); // = по умолчанию, ошибки выводятся диалоговом окне
	//Опции.SILENT = Компонента.TRUE(); // ошибки НЕ выводятся диалоговом окне

	Компонента.Init(Опции);

	ТекущаяИнициализированнаяФирма = ВыбФирма;
	Состояние("");
КонецПроцедуры

Функция СохранитьЗапросВДокументе(док) Экспорт
	Попытка
	Если ПустоеЗначение(док)=0 Тогда
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);

		ДокОб.ИмяФайлаЗапрос = Компонента.LogFilenameRequest;
		ДокОб.Записать();
	КонецЕсли;
	Исключение Сообщить("Обновите SoapDLL в ближ время"); КонецПопытки; //ЖД Обновить dll
КонецФункции

Функция СохранитьОтветВДокументе(док) Экспорт
	Попытка
	Если ПустоеЗначение(док)=0 Тогда

		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);

		ДокОб.ИмяФайлаОтвет = Компонента.LogFilenameResponse;
		ДокОб.Записать();
	КонецЕсли;
	Исключение Сообщить("Обновите SoapDLL в ближ время"); КонецПопытки; //ЖД Обновить dll
КонецФункции

// *********************
Функция ПолучитьХСПоФирме(ВыбФирма) Экспорт
	Рез = "";
	ВремСзПФ = СоздатьОбъект("СписокЗначений");
	ПараметрыФирм.Выгрузить(ВремСзПФ);
	ВремПараметры = ВремСзПФ.Получить(ЗначениеВСтрокуВнутр(ВыбФирма));
	Если ПустоеЗначение(ВремПараметры) = 0 Тогда
		Рез = ВремПараметры.Получить("Отправитель_ХозСубъект");
	КонецЕсли;
    Возврат Рез;
КонецФункции

Функция ПолучитьФирмуПоХС(ВыбХС) Экспорт
	Рез = "";
	ВремСзПФ = СоздатьОбъект("СписокЗначений");
	ПараметрыФирм.Выгрузить(ВремСзПФ);
	к = 0;
	Для к = 1 по ВремСзПФ.РазмерСписка() Цикл
		стр = "";
		ВремПараметры = ВремСзПФ.ПолучитьЗначение(к,стр);
		Если ВремПараметры.Получить("Отправитель_ХозСубъект") = ВыбХС Тогда
			Рез = ЗначениеИзСтрокиВнутр(стр);
			прервать;
		КонецЕсли;
	КонецЦикла;
    Возврат Рез;
КонецФункции

//======================================================================
Функция ПолучитьФирмуИзКонтекста(КонтекстДокумента) Экспорт
	ВыбФирма = "";

	НазваниеВидаСправочникаФирмы = ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
	Если ПустоеЗначение(НазваниеВидаСправочникаФирмы)=1 Тогда
		Сообщить("Не заполнено Название Вида Справочника Фирмы","!");
	Иначе
		Если Метаданные.Справочник(НазваниеВидаСправочникаФирмы).Выбран() = 1 Тогда
			ФирмаИмяРеквизита = "";

			_ТипОбъекта = ТипЗначенияСтр(КонтекстДокумента);
			Если _ТипОбъекта = "ГрупповойКонтекст" Тогда
				РасширениеФормы=СоздатьОбъект("РасширениеФормы");
				РасширениеФормы.УстановитьФорму(КонтекстДокумента.Форма);
				_ТипОбъекта = РасширениеФормы.ТипОбъекта();
			КонецЕсли;

			Если _ТипОбъекта = "ВнешнийОтчет" Тогда
				Попытка ВыбФирма = КонтекстДокумента.ВыбФирма; Исключение КонецПопытки;
			ИначеЕсли _ТипОбъекта = "Документ" Тогда
				ПолучитьИмяРеквизитаФирма(КонтекстДокумента.Вид(), ФирмаИмяРеквизита);
				Если ФирмаИмяРеквизита = "" Тогда
					Попытка ВыбФирма = КонтекстДокумента.ВыбФирма;
					Исключение
						// Нет общего реквизита Фирма, в наших документах можно получить из ХС
						ВыбХС = "";
						ВидДок = КонтекстДокумента.Вид();
						Если глЕстьРеквизитШапки("Отправитель_ХозСубъект", ВидДок) = 1 Тогда
							ВыбХС = КонтекстДокумента.Отправитель_ХозСубъект;
						ИначеЕсли глЕстьРеквизитШапки("Производитель_ХозСубъект", ВидДок) = 1  Тогда
							ВыбХС = КонтекстДокумента.Производитель_ХозСубъект;
						ИначеЕсли глЕстьРеквизитШапки("Владелец_ХозСубъект", ВидДок) = 1  Тогда
							ВыбХС = КонтекстДокумента.Владелец_ХозСубъект;
						ИначеЕсли глЕстьРеквизитШапки("Владелец_ХозСубъект", ВидДок) = 1  Тогда
							ВыбХС = КонтекстДокумента.Владелец_ХозСубъект;
						КонецЕсли;
						Если ВыбХС <> "" Тогда
							ВыбФирма = ПолучитьФирмуПоХС(ВыбХС);
						КонецЕсли;
					КонецПопытки;
				Иначе
					ВыбФирма = КонтекстДокумента.ПолучитьАтрибут(ФирмаИмяРеквизита);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Попытка ВыбФирма = КонтекстДокумента.ВыбФирма; Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат ВыбФирма;
КонецФункции // ПолучитьФирмуИзКонтекста

// ================== ВСД отправка ===================

Функция Получить_ApplicationID(LogFilename) Экспорт

	Попытка

	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(LogFilename);

	    item = objDom.selectSingleNode("//application") ;

		applicationId = item.selectSingleNode("applicationId").text;
		st = item.selectSingleNode("status").text;

		Сообщить("Ответ: ["+applicationId+"] ["+st+"]");
	Исключение
		//Сообщить("Не удалось получить applicationId");
		applicationId="";
	КонецПопытки;

	возврат applicationId;
КонецФункции

Функция  ОтправитьЗапросSoap( ЗапросXML, метод ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьЗапросSoap");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьЗапросSoap(ЗапросXML, метод);
	КонецЕсли;
	//}

	appID = Компонента.GUID();
	Сообщить("Отправляем запрос "+appID ,"i");
	результат = Компонента.SendRequestSoap(метод, ЗапросXML, appID);

	//Сообщить(Компонента.ApplicationId);
	appID = Получить_ApplicationID(Компонента.LogFilename);

	Возврат appID;

КонецФункции


//======= ФУНКЦИИ ПО ПОИСКУ ИНФОРМАЦММ ==============

Функция НайтиФормуУпаковки(guid, name, uuid = "", КодУпаковки = "") Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиФормуУпаковки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиФормуУпаковки(guid, name);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Если НЕ(СокрЛП(name) = СокрЛП(Спр.Наименование)) Тогда
				Сообщить("ВСД_ФормыУпаковки "+ Спр.Наименование +" изменилось Наименование на ["+name+"] перезаписано");
				Спр.Наименование = name;
				Спр.Записать();
			КонецЕсли;
			Спр.СнятьПометкуУдаления();
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Попытка Спр.КодУпаковки = КодУпаковки; Исключение КонецПопытки; //Нет ревизита
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(Рез)=1 Тогда
		//Сообщить("Форма упаковки не определена "+guid+" = "+name,"!");
	КонецЕсли;

	Возврат Рез;

КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиЕдИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиЕдИзмерения(guid, uuid);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез="";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+guid+"] добавлена");
			//создать
			Спр.Новый();
			//Спр.Код = ;
			//Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Единица измерения не определена ["+guid+"]","!");
	КонецЕсли;

	Возврат Рез;

КонецФункции

Функция НайтиПродукцию(guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПродукцию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПродукцию(guid);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена. Выполните загрузку справочника Продукция");
			//создать
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Guid;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid продукции");
	КонецЕсли;

	Возврат рез;
КонецФункции

//Функция Найти_Продукция_Элемент(Название, Uuid="", ВСД_Продукция, ВСД_ВидПродукции) Экспорт
//
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("Найти_Продукция_Элемент");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.Найти_Продукция_Элемент(Название, Uuid, ВСД_Продукция, ВСД_ВидПродукции);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//
//	Рез = "";
//	Uuid = СокрЛП(Uuid);
//	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
//	если ПустоеЗначение(Uuid)=0 Тогда
//
//		Если Спр.НайтиПоРеквизиту("Uuid",Uuid,1)=0 Тогда
//			Сообщить("ВСД_Продукция_Элемент UUID ["+Uuid+"] не найдена. Создан новый элемент. ");
//			//создать
//			Спр.Новый();
//			//Спр.Код = ;
//			Спр.Наименование = Название;
//			Спр.Uuid = Uuid;
//			Спр.Продукция = ВСД_Продукция;
//			Спр.ВидПродукции = ВСД_ВидПродукции;
//			Спр.Записать();
//
//		КонецЕсли;
//	Иначе
//		Если Спр.НайтиПоНаименованию(Название,0,0)=0 Тогда
//			Сообщить("ВСД_Продукция_Элемент название ["+Название+"] не найдена. Создан новый элемент.");
//			//создать
//			Спр.Новый();
//			//Спр.Код = ;
//			Спр.Наименование = Название;
//			Спр.Продукция = ВСД_Продукция;
//			Спр.ВидПродукции = ВСД_ВидПродукции;
//			//Спр.Uuid = Uuid;
//			Спр.Записать();
//		КонецЕсли;
//	КонецЕсли;
//	рез = Спр.ТекущийЭлемент();
//
//	Возврат рез;
//КонецФункции


Функция Продукция_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/production/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <ws:getProductItemByGuidRequest>
	|      <base:guid>"+ СокрЛП(продукция.GUID) +"</base:guid>
	|    </ws:getProductItemByGuidRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат запрос;
КонецФункции

Функция Получить_Инфо_Продукции( Продукция ) Экспорт

	Если ПустоеЗначение(Продукция.Guid)=1 Тогда
		Возврат "";
	КонецЕсли;

	ЗапросXML = Продукция_Инфо_ЗапросXML( Продукция );

	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ProductService";
    метод.Action = "GetProductItemByGuid";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Результат = ПолучитьРезультат_Список_Продукции(Продукция);

	УдалитьXML( Компонента.LogFilename);

	Возврат appID;

КонецФункции

Функция Найти_Продукция_Элемент2(productItemName, productItemGuid, ВСД_Продукция, ВСД_ВидПродукции) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Найти_Продукция_Элемент2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		//Возврат ОбъектВыполнения.Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез = "";
	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");

	// в справочнике ограничение на длину Наименования = 100 симвовлов
	productItemName = Лев(productItemName, 100);

	Если ЭтоSQL=1 ТОгда

		ТекстЗапроса = "
		|select
	    |   Элемент.id [id $Справочник.ВСД_Продукция_Элемент]
	    |from $Справочник.ВСД_Продукция_Элемент as Элемент
	  	|where
	  	|";
	  	если ПустоеЗначение(productItemGuid)=0 Тогда
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	$Элемент.GUID= :productItemGuid
		  	|";
		Иначе
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	$Элемент.GUID = '' AND
		  	|	Элемент.descr = :productItemName
		  	|";
		КонецЕсли;
		RS.УстановитьТекстовыйПараметр("productItemGuid", productItemGuid);
		RS.УстановитьТекстовыйПараметр("productItemName", productItemName);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе

		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   Элемент.id [id $Справочник.ВСД_Продукция_Элемент]
	    |from [Справочник.ВСД_Продукция_Элемент] as Элемент
	  	|where
	  	|";
	  	если ПустоеЗначение(productItemGuid)=0 Тогда
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	Элемент.GUID= :productItemGuid
		  	|";
		Иначе
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	Элемент.GUID = '' AND
		  	|	Элемент.descr = :productItemName
		  	|";

		КонецЕсли;
		Запрос.Подставлять("productItemGuid", productItemGuid);
		Запрос.Подставлять("productItemName", productItemName);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	Если ПустоеЗначение(тз)=1 Тогда
		//создать
		Спр.Новый();
		//Спр.Код = ;
		Спр.Наименование = productItemName;
		Спр.GUID = productItemGuid;
		//Спр.Uuid = productItemUuid;
		Спр.Продукция = ВСД_Продукция;
		Спр.ВидПродукции = ВСД_ВидПродукции;
		Спр.ТермическиеУсловияПеревозки = ПолучитьКонстанту("ТермУсловияПеревозки");//1;
		Спр.Записать();

		//получим наименование и все остальные реквизиты
		Получить_Инфо_Продукции(Спр.ТекущийЭлемент())

	Иначе
		Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,1));
		//Спр.СделатьНеПроведенным();
		Спр.СнятьПометкуУдаления();
	конецЕсли;
	рез = Спр.ТекущийЭлемент();

	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВидПродукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВидПродукции(guid);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена. Выполните инициализацию", "!");
			//создать
			//Спр.Новый();
			////Спр.Код = ;
			//Спр.Наименование = Guid;
			//Спр.GUID = guid;
			//Спр.Записать();

		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid Вида продукции");
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиСтрануПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиСтрануПоGUID(GUID, name);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Страна");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Страна "+GUID);
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция НайтиРегионПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиРегионПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиРегионПоGUID(GUID, name);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Регион");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Регион "+GUID);
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Регион");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция НайтиГородПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиГородПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиГородПоGUID(GUID, name);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Город");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда
			Результат = Спр.ТекущийЭлемент();
		Иначе
			//Сообщить("Guid "+Guid+" не найден, создайте ВСД_Город, выполните синхронизацию");
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Город "+GUID);

		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Город");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция НайтиХозСубъект(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХозСубъект");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХозСубъект(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Попытка
		Если ПустоеЗначение(ВыбКлиент.Плательщик) = 0 Тогда
			ВыбКлиент = ВыбКлиент.Плательщик;
		КонецЕсли;
	Исключение
	КонецПопытки;


	Если ЭтоSQL=1 Тогда

		ТекстЗапроса = "select
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	$СпрХС.GUID,
		|	$СпрХС.Контрагент
		|from $Справочник.ВСД_ХозСубъект as СпрХС
		|where
		|	$СпрХС.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);

	Иначе

		Запрос = базаДанных.НовыйЗапрос();

		ТекстЗапроса = "select
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	СпрХС.GUID,
		|	СпрХС.Контрагент
		|from [Справочник.ВСД_ХозСубъект] as СпрХС
		|where
		|	СпрХС.Контрагент=:ВыбКлиент
		|";

		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);

		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;

	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	Иначе
		СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		СпрХС.Новый();
		СпрХС.Наименование = ВыбКлиент.Наименование;
		СпрХС.Контрагент = ВыбКлиент;
		СпрХС.Записать();
		Сообщить("Создан новый элемент справочника ВСД_ХозСубъект: "+ВыбКлиент);

		результат = спрХС.ТекущийЭлемент();
	КонецЕсли;

	Возврат результат;
КонецФункции

Функция НайтиПартиюПоGUID(GUID) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПартиюПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПартиюПоGUID(GUID);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Спр = СоздатьОбъект("Справочник.ВСД_Партия");
	Если ЭтоSQL=1 ТОгда

		ТекстЗапроса = "
		|select
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from $Справочник.ВСД_Партия as Партия
	  	|where
	  	|	$Партия.GUID= :GUID
	  	|";
		RS.УстановитьТекстовыйПараметр("GUID", GUID);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе

		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from [Справочник.ВСД_Партия] as Партия
	  	|where
	  	|	Партия.GUID= :GUID
	  	|";
		Запрос.Подставлять("GUID", GUID);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	Если ПустоеЗначение(тз)=1 Тогда
		Спр.Новый();
		//Док.ДокОснование = ДокОснование;
	Иначе
		Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,1));
		//Спр.СделатьНеПроведенным();
		Спр.СнятьПометкуУдаления();
	конецЕсли;

	Возврат  Спр;
КонецФункции

Функция НайтиВСДпоUUID( uuid )
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВСДпоUUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВСДпоUUID( uuid );
	КонецЕсли;
	//}

	//стандартное поведение функции

	Если ПустоеЗначение(UUID)=1 Тогда
		Возврат "";
	КонецЕсли;

	ВидДокумента = "ВСД";

	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL=1 ТОгда

		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД
	  	|where
	  	|	( $ДокВСД.UUID = :uuid)
	  	|";
		RS.УстановитьТекстовыйПараметр("uuid", uuid);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД
	  	|where
	  	|	( ДокВСД.UUID = :uuid)
	  	|";
		Запрос.Подставлять("uuid", uuid);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	//Возврат тз;
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда
		Док.Новый();
		//Док.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
	Иначе
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();

		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;

	Возврат Док;
КонецФункции

Функция НайтиВСДпоApplicationId(applicationId, ВидДокумента)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВСДпоApplicationId");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВСДпоApplicationId(applicationId, ВидДокумента);
	КонецЕсли;
	//}

	//стандартное поведение функции
	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL=1 ТОгда

		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД
	  	|where
	  	|($ДокВСД.applicationId = :applicationId)
	  	|";
		RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе

		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД
	  	|where
	  	|	(ДокВСД.applicationId= :applicationId)
	  	|";
		Запрос.Подставлять("applicationId", applicationId);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	Возврат тз;
КонецФункции

//****************** Площадки **********************************

Функция Загрузить_ХС_по_ИНН(ИНН) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Загрузить_ХС_по_ИНН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Загрузить_ХС_по_ИНН(инн);
	КонецЕсли;
	//}

	Если ПустоеЗначение(ИНН)=1 Тогда
		Сообщить("Пустой ИНН для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;
	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/business-entity/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base' xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getBusinessEntityListRequest>
	|        <ent:businessEntity>
	|            <ent:inn>"+ СокрЛП(инн) +"</ent:inn>
	|        </ent:businessEntity>
	//|      <base:listOptions>
	//|        <base:count>3</base:count>
	//|        <base:offset>0</base:offset>
	//|      </base:listOptions>
	|    </ws:getBusinessEntityListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";


	метод = Компонента.GetMethod();
	метод.Service = "platform/cerberus/services/EnterpriseService";
	метод.Action = "GetBusinessEntityList";

	Сообщить(" Запрос GetBusinessEntityList [ "+СокрЛП(ИНН)+" ]");

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции

Функция ХС_ПолучитьGuid(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьGuidХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьGuidХС(ХС);
	КонецЕсли;
	//}

	//стандартное поведение функции
	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустоеЗначение(ИНН)=1 Тогда
		Сообщить("Неправильно указан ИНН","!");
		Возврат "ERROR";
	КонецЕсли;

	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");
	//Результат = Компонента.GetBusinessEntityByINN( ИНН );
	Результат = Загрузить_ХС_по_ИНН( ИНН );
	//Отладка();

  	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	Попытка
	    enterprise=objDom.selectSingleNode("//*[local-name() = 'businessEntity']") ;
		guid = enterprise.selectSingleNode("//*[local-name() = 'guid']").text;
		uuid = enterprise.selectSingleNode("//*[local-name() = 'uuid']").text;
		active = enterprise.selectSingleNode("//*[local-name() = 'active']").text;

		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.UUID = uuid;
		спр.Записать();
		Сообщить("Записан ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID);
	Исключение
		Сообщить("businessEntity не найден в ответе сервера","!");
		Сообщить(ОписаниеОшибки(),"!");
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ЗагрузитьХС(GUID) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьХС(guid);
	КонецЕсли;
	//}

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;
	//ЗапросXML = "
	//|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	//|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/business-entity/ws-definitions'
	//|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	//|<soapenv:Header/>
	//|<soapenv:Body>
	//|   <ws:getBusinessEntityByGuidRequest>
	//|      <bs:guid>"+GUID+"</bs:guid>
	//|   </ws:getBusinessEntityByGuidRequest>
	//|</soapenv:Body>
	//|</soapenv:Envelope>";

	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/business-entity/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getBusinessEntityByGuidRequest>
	|      <base:guid>"+GUID+"</base:guid>
	|    </ws:getBusinessEntityByGuidRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";


	метод = Компонента.GetMethod();
	метод.Service = "platform/cerberus/services/EnterpriseService";
	метод.Action = "GetBusinessEntityByGuid";

	Сообщить(" Запрос GetBusinessEntityByGuid [ "+СокрЛП(GUID)+" ]");

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции


Функция ЗагрузитьХСПоGUID(GUID) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьХСПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьХСПоGUID(guid);
	КонецЕсли;
	//}

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;

	appID = ЗагрузитьХС( GUID );

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Если ПустоеЗначение( appID )=1 Тогда
		Сообщить( "Ответ сервера = "+appID , "!");
		Возврат appID;
	КонецЕсли;

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load( Компонента.LogFilenameResponse);
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );

	businessEntity = objDom.selectSingleNode("//*[local-name() = 'businessEntity']");

	guid = businessEntity.selectSingleNode("bs:guid").text;
	uuid = businessEntity.selectSingleNode("bs:uuid").text;

    //ЖД Вариации ответа - ЮЛ/ИП , КПП и ОГРН может не приходить, наименование ЮЛ или ФИО ИП
	////dt:type>3</dt:type - ЖД вероятно Тип ЮЛ или ИП

	Попытка
		name = businessEntity.selectSingleNode("dt:name").text;
	Исключение
		name = businessEntity.selectSingleNode("dt:fio").text;
	КонецПопытки;
	active = businessEntity.selectSingleNode("bs:active").text;
	ИНН =  businessEntity.selectSingleNode("dt:inn").text;
	Попытка КПП = businessEntity.selectSingleNode("dt:kpp").text; Исключение   КПП=""; 	КонецПопытки;
	Попытка ОГРН = businessEntity.selectSingleNode("dt:ogrn").text; Исключение   ОГРН=""; 	КонецПопытки;
    address = businessEntity.selectSingleNode("dt:juridicalAddress").selectSingleNode("dt:addressView").text;

	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда

	Иначе
		Спр.Новый();
	КонецЕсли;
	Спр.Наименование = name;
	//Объект_ВСД_ХозСубъект.Адрес = address;
	Спр.GUID = guid;
	Спр.UUID = uuid;
//	Спр.Записать();
//	Сообщить("Записан ВСД_Хозсубъект ["+Спр+"] GUID = "+ Guid+" Адрес: "+address);

	УдалитьXML( Компонента.LogFilename);

	// Ищем контрагента
	СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
	ТекстВопроса = "Выберите контрагента для
	|"+ ИНН+" "+name+" "+address;
	Сообщить(ТекстВопроса);
	Если СпрКонтрагенты.Выбрать(ТекстВопроса,)=1 Тогда
		Спр.Контрагент = СпрКонтрагенты.ТекущийЭлемент();
		Спр.Записать();
		Сообщить("Записан ВСД_Хозсубъект ["+Спр+"] GUID = "+ Guid+" Адрес: "+address);
		Возврат Спр.ТекущийЭлемент();
	Иначе
		Сообщить("Не выбран контрагент для ХС "+ ИНН+" "+name+" "+address);
		Сообщить("ХС не записан");
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ЗагрузитьПлощадку(GUID) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадку");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадку(guid);
	КонецЕсли;
	//}

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска Площадки");
		Возврат "REJECTED";
	КонецЕсли;
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/enterprise/ws-definitions'
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	|<soapenv:Header/>
	|<soapenv:Body>
	|   <ws:getEnterpriseByGuidRequest>
	|      <bs:guid>"+GUID+"</bs:guid>
	|   </ws:getEnterpriseByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";


	метод = Компонента.GetMethod();
	//метод.BaseUrl = "https://api.vetrf.ru:8002/";
	метод.Service = "platform/cerberus/services/EnterpriseService";
	метод.Action = "GetEnterpriseByGUID";

	Сообщить(" Запрос GetEnterpriseByGUID [ "+СокрЛП(GUID)+" ]");

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции

Функция НайтиХСпоGUID(Guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХСпоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХСпоGUID(guid);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда
			Результат = Спр.ТекущийЭлемент();
		Иначе
			//Сообщить("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");
			Результат = ЗагрузитьХСПоGUID(Guid);
		КонецЕсли;
	Иначе
		//Сообщить("Пустой Guid ХозСубъекта");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGUID(GUID, ХС);
	КонецЕсли;
	//}

	//стандартное поведение функции

	//Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");
	//Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );
	Результат = ЗагрузитьПлощадку( СокрЛП(GUID) );

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	enterprise = objDom.selectSingleNode("//ent:enterprise") ;

	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;

	//updateDate = unit.selectSingleNode("updateDate").text;
	//createDate = unit.selectSingleNode("createDate").text;
	name = enterprise.selectSingleNode("ent:name").text;
	active = enterprise.selectSingleNode("bs:active").text;

	address = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:addressView").text;

	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	УровнейВСправочнике = Метаданные.Справочник("ВСД_Площадка").КоличествоУровней;
	ВыбОбъект="";
	// не работает!!!
	//Если Спр.ВыбратьЭлементыПоРеквизиту("GUID",Guid,0,0)=0 Тогда
	//	Если (ХС<>"") Тогда
	//		Если  (Сокрлп(спр.GuidХозСубъекта) = Сокрлп(ХС.GUID)) или (Сокрлп(спр.GuidХозСубъекта) = "") Тогда
	//			ВыбОбъект = Спр;
	//		КонецЕсли;
	//	Иначе
	//		ВыбОбъект = Спр;
	//	КонецЕсли;
	//КонецЕсли;
	Если ЭтоSQL=1 Тогда

		ТекстЗапроса = "select
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	$СпрПл.GUID,
		|	$СпрПл.Контрагент
		|from $Справочник.ВСД_Площадка as СпрПл
		|where
		|	$СпрПл.Guid=:GUID
		|	%Отбор_по_Уровням%
		|	%Отбор_по_ХС%
		|";
		RS.УстановитьТекстовыйПараметр("GUID", GUID);
		Если УровнейВСправочнике = 1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "AND СпрПл.isfolder=2");
		КонецЕсли;
		Если ПустоеЗначение(ХС)=0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "AND RTRIM($СпрПл.GuidХозСубъекта)=:GuidХозСубъекта");
			RS.УстановитьТекстовыйПараметр("GuidХозСубъекта", ХС.GUID);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "");
		КонецЕсли;
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);

	Иначе
		Запрос = базаДанных.НовыйЗапрос();

		ТекстЗапроса = "select
		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
		|	СпрПл.descr,
		|	СпрПл.GUID,
		|	СпрПл.Контрагент
		|from [Справочник.ВСД_Площадка] as СпрПл
		|where
		|	СпрПл.Guid=:GUID
		|	%Отбор_по_ХС%
		|	%Отбор_по_Уровням%
		|";

		Если УровнейВСправочнике = 1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "AND СпрПл.isfolder=2");
		КонецЕсли;

		Если ПустоеЗначение(ХС)=0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "AND RTRIM(СпрПл.GuidХозСубъекта)=:GuidХозСубъекта");
			Запрос.Подставлять("GuidХозСубъекта", ХС.GUID);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "");
		КонецЕсли;

		Запрос.Подставлять("GUID", GUID);

		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;

	Тз.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСТроку()=1 Цикл
		Спр.НайтиЭлемент(тз.id);
		Спр.Наименование = name;
		Спр.Адрес = address;
		Спр.GUID = guid;
		Спр.UUID = uuid;
		Спр.Записать();
		ВыбОбъект = Спр;
	КонецЦикла;
	Если ВыбОбъект="" Тогда
		Спр.Новый();
		Спр.УстановитьНовыйКод("00");
	КонецЕсли;

	Спр.Наименование = name;
	Спр.Адрес = address;
	Спр.GUID = guid;
	Спр.UUID = uuid;

	Если (ПустоеЗначение(ХС)=1) и (ПустоеЗначение(Спр.GUIDХозСубъекта) = 1) Тогда
		Сообщить("создана площадка ["+GUID+"] без указания ХозСубъекта ","!!");
		//Возврат;
	Иначе
		Спр.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;

	спр.Записать();
	Сообщить("Записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+ Guid);

	возврат спр.ТекущийЭлемент();
КонецФункции

Функция ЗагрузитьПлощадки(ХС)	Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадки(ХС);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		ХС_ПолучитьGuid(ХС);

		//{обновим ссылку на объект
		Спр_ХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр_ХС.НайтиЭлемент(ХС);
		ХС = Спр_ХС.ТекущийЭлемент();
		//}
	КонецЕсли;

	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		Сообщить("В ХозСубъекте ["+ХС+"] не указан GUID","!");
		Возврат "";
	КонецЕсли;

	результат = ЗагрузитьХС( СокрЛП(ХС.GUID) );

    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

    activityLocationList = objDom.selectNodes("//ent:activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);

		Попытка
			guid = activityLocation.selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;

			//ГМ.Пауза();
    		ЗагрузитьПлощадкуПоGUID(guid, ХС);
		Исключение
        	Сообщить("Не удалось получить GUID площадки из файла "+Компонента.LogFilename);
		КонецПопытки;

	КонецЦикла;

	Сообщить("Загрузка площадок завершена","i");
КонецФункции

Функция ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС="", тзПлощадки) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGuidТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС, тзПлощадки);
	КонецЕсли;
	//}

	//стандартное поведение функции

	//Сообщить("Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");
	//Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );
	Результат = ЗагрузитьПлощадку( СокрЛП(GUID) );


    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

    enterprise = objDom.selectSingleNode("//ent:enterprise") ;

	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;

	updateDate = enterprise.selectSingleNode("bs:updateDate").text;
	createDate = enterprise.selectSingleNode("bs:createDate").text;
	name = enterprise.selectSingleNode("ent:name").text;
	active = enterprise.selectSingleNode("bs:active").text;

	address = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:addressView").text;

	Попытка
		owner = enterprise.selectSingleNode("ent:owner").selectSingleNode("bs:guid").text;
	Исключение
		owner="";
	КонецПопытки;
	Попытка
		ownerName = enterprise.selectSingleNode("ent:owner").selectSingleNode("ent:name").text;
	Исключение
		Попытка
			ownerName = enterprise.selectSingleNode("ent:owner").selectSingleNode("ent:fio").text;
		Исключение
			ownerName ="";
		КонецПопытки;
	КонецПопытки;

	Если owner<>СокрЛП(ХС.GUID) Тогда
		Сообщить("Площадка пропущена ["+name+"] принадлежит другому ХозСубъекту ["+ownerName+"] ","!");
		//Возврат;
	КонецЕсли;

	тзПлощадки.НоваяСтрока();

	тзПлощадки.Наименование = name;
	тзПлощадки.Адрес = address;
	тзПлощадки.Активна = active;
	тзПлощадки.GUID = guid;
	тзПлощадки.UUID = uuid;
	тзПлощадки.ДатаСоздания = createDate;
	тзПлощадки.ДатаИзменения = updateDate;
	Если ПустоеЗначение(owner)=0 тогда
		тзПлощадки.ХозСубъект = НайтиХСпоGUID(owner);
		//тзПлощадки.ХозСубъектНаименование = ownerName;
	Иначе
		тзПлощадки.ХозСубъект = ХС;
		//тзПлощадки.ХозСубъектНаименование = ХС.Наименование;
	КонецЕсли;

	Сообщить("Загружена информация о площадке ["+name+"] GUID = "+ guid,"i");

	УдалитьXML( Компонента.LogFilename );
КонецФункции

Функция ЗагрузитьПлощадкиТЗ(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкиТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкиТЗ(ХС);
	КонецЕсли;
	//}

	//стандартное поведение функции


	Результат = ЗагрузитьХС( СокрЛП(ХС.GUID) );

    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");

    activityLocationList = objDom.selectNodes("//ent:activityLocation") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);

		guid = activityLocation.selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;

    	ЗагрузитьПлощадкуПоGuidТЗ(guid, ХС, тзПлощадки);

	КонецЦикла;

	Сообщить("Загрузка информации о площадках завершена","i");

	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");

	ОткрытьФорму("Отчет",СписокПараметров,КаталогМодуля+"Меркурий_ЗагрузкаПлощадок.ert");

	УдалитьXML( Компонента.LogFilename );
КонецФункции

Функция НайтиПлощадку(Guid) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадку");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадку(Guid);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Рез = "";
	Guid = СокрЛП(Guid);
	если ПустоеЗначение(Guid)=1 Тогда
		Возврат "";
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
		Рез = Спр.ТекущийЭлемент();
	Иначе
		Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
		//создать площадку

		Рез = ЗагрузитьПлощадкуПоGUID(guid);

	КонецЕсли;

	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("ВСД_Площадка не найдена ["+Guid+"]","!");
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция НайтиПлощадкуПоКонтрагенту(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоКонтрагенту");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоКонтрагенту(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	результат = "";
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	Если ПустоеЗначение(ВыбКлиент) = 0 Тогда
		Если ЭтоSQL=1 Тогда
			RS = СоздатьОбъект("ODBCRecordset");
			RS.УстБД1С();

			ТекстЗапроса = "select
			|	СпрПл.ID [id $Справочник.ВСД_Площадка],
			|	СпрПл.descr,
			|	$СпрПл.GUID,
			|	$СпрПл.Контрагент
			|from $Справочник.ВСД_Площадка as СпрПл
			|where
			|	$СпрПл.Контрагент=:ВыбКлиент
			|";
			RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);
			//RS.Отладка(1);
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);

		Иначе
			Запрос = базаДанных.НовыйЗапрос();

			ТекстЗапроса = "select
			|	СпрПл.ID [id $Справочник.ВСД_Площадка],
			|	СпрПл.descr,
			|	СпрПл.GUID,
			|	СпрПл.Контрагент
			|from [Справочник.ВСД_Площадка] as СпрПл
			|where
			|	СпрПл.Контрагент=:ВыбКлиент
			|";

			Запрос.Подставлять("ВыбКлиент", ВыбКлиент);

			//тз.Отладка();
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;

	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	КонецЕсли;

	Возврат результат;
КонецФункции

Функция НайтиПлощадкуПоСкладу(ВыбСклад, ВыбХс ="") Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоСкладу");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоСкладу(ВыбСклад);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Рез = "";
	если ПустоеЗначение(ВыбСклад)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Если Спр.НайтиПоРеквизиту("Склад",ВыбСклад,1)=1 Тогда
			// В дальнейшем убрать Склад из ВСД_Площадка
			// Либо поправить запрос
			Рез = Спр.ТекущийЭлемент();
		Иначе
			// поищем по ВСД_СкладыПлощадок
		Попытка
			Если ЭтоSQL=1 Тогда

				ТекстЗапроса = "select
				|	СпрПл.ID [id $Справочник.ВСД_СкладыПлощадок],
				|	$СпрПл.Склад
				|from $Справочник.ВСД_СкладыПлощадок as СпрПл
				|where
				|	$СпрПл.Склад=:ВыбСклад
				|";
				RS.УстановитьТекстовыйПараметр("ВыбСклад", ВыбСклад);
				//RS.Отладка(1);
				тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			Иначе
				Запрос = базаДанных.НовыйЗапрос();

				ТекстЗапроса = "select
				|	СпрПл.ID [id $Справочник.ВСД_СкладыПлощадок],
				|	СпрПл.Склад
				|from [Справочник.ВСД_СкладыПлощадок] as СпрПл
				|where
				|	СпрПл.Склад=:ВыбСклад
				|";

				Запрос.Подставлять("ВыбСклад", ВыбСклад);
				ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			КонецЕсли;

			Тз.ВыбратьСтроки();
			Если ПустоеЗначение(ВыбХС) = 1 Тогда
				Если ТЗ.ПолучитьСТроку()=1 Тогда
					рез = тз.id.Владелец;
				КонецЕсли;
			Иначе
				Пока ТЗ.ПолучитьСТроку()=1 Цикл
					Если тз.id.Владелец.GuidХозСубъекта = ВыбХС.GUID Тогда
						рез = тз.id.Владелец;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//Возврат рез;
		Исключение
				Сообщить("Площадка со складом ["+ВыбСклад+"] не найдена: ","!");
		КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("не указан склад Площадки","!");
	КонецЕсли;

	Возврат рез;
КонецФункции

//Рекомендуется использовать версию 2.0
//
//Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт
//
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкиПоНазванию");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Если ПустоеЗначение(ХС.GUID)=1 Тогда
//		ХС_ПолучитьGuid(ХС);
//
//	КонецЕсли;
//
//	//ЖД
//	Стр = ПолучитьНаименованиеКлиента(ХС.Контрагент);
//
//	ИНН = ПолучитьИНН(ХС.Контрагент);
//	Если СтрДлина( СокрЛП(ИНН) )=12 Тогда		//ИП
//		стр = СтрЗаменить(стр, " ИП","");
//		стр = СтрЗаменить(стр, "ИП ","");
//	КонецЕсли;
//
//	Если УточнитьНазвание=1 Тогда
//		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;
//
//	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ]","i");
//	Результат = Компонента.GetRussianEnterpriseListByName( стр, СокрЛП(Регион.GUID) );
//
//		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);
//
//		тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
//		тзПлощадки.НоваяКолонка("Наименование");
//		тзПлощадки.НоваяКолонка("Адрес");
//		тзПлощадки.НоваяКолонка("Активна");
//		тзПлощадки.НоваяКолонка("GUID");
//		тзПлощадки.НоваяКолонка("UUID");
//		//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");
//		тзПлощадки.НоваяКолонка("ХозСубъект");
//		тзПлощадки.НоваяКолонка("ДатаСоздания");
//		тзПлощадки.НоваяКолонка("ДатаИзменения");
//
//		objDom=СоздатьОбъект("MSXML2.DOMDocument");
//		objDom.load(Компонента.LogFilename);
//
//		Если НайтиОшибки()>0 Тогда
//			Возврат Результат;
//		КонецЕсли;
//
//		enterpriseList = objDom.selectNodes("//enterprise") ;
//		Для i1 = 0 По enterpriseList.length - 1 Цикл
//			enterprise=enterpriseList.item(i1);
//
//			guid = enterprise.selectSingleNode("guid").text;
//			uuid = enterprise.selectSingleNode("uuid").text;
//			name = enterprise.selectSingleNode("name").text;
//			active = enterprise.selectSingleNode("active").text;
//
//			address = enterprise.selectSingleNode("address").selectSingleNode("addressView").text;
//
//			тзПлощадки.НоваяСтрока();
//			тзПлощадки.Наименование = name;
//			тзПлощадки.адрес = address;
//			//тз.Регион = region;
//			тзПлощадки.guid = guid;
//			тзПлощадки.uuid = uuid;
//			тзПлощадки.активна = active;
//			тзПлощадки.ХозСубъект = ХС;
//
//		КонецЦикла;
//
//		Сообщить("Загрузка площадок завершена","i");
//
//		СписокПараметров = СоздатьОбъект("СписокЗначений");
//		СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
//		СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");
//
//		ОткрытьФорму("Отчет",СписокПараметров,КаталогМодуля+"Меркурий_ЗагрузкаПлощадок.ert");
//
//		УдалитьXML( Компонента.LogFilename );
//		Возврат 1;
//
//	УдалитьXML( Компонента.LogFilename );
//	Возврат 0;
//КонецФункции

Функция ВыбратьВсеПлощадкиХС(ХС) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВыбратьВсеПлощадкиХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВыбратьВсеПлощадкиХС(ХС);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";

	ВыбGuidХозСубъекта = (ХС.GUID);
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	Возврат тз;
КонецФункции

//Функция ОткрытьПлощадкиПоХС(КонтекстФормы,ВыбХС) Экспорт  //данная функция не работает в объекте (не работает ОткрытьПодбор)
//
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОткрытьПлощадкиПоХС");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ОткрытьПлощадкиПоХС(КонтекстФормы,ВыбХС);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	тз = ВыбратьВсеПлощадкиХС(ВыбХС);
//
//	СписокОтбора = СоздатьОбъект("СписокЗначений");
//
//	Тз.ВыбратьСтроки();
//	Пока ТЗ.ПолучитьСТроку()=1 Цикл
//		СписокОтбора.ДобавитьЗначение(тз.id);
//	КонецЦикла;
//
//	КонтекстФормы.ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);
//
//КонецФункции

//======= ФУНКЦИИ ПО ИНИЦИАЛИЗАЦИИ ХС ==============

Функция ПометитьНаУдалениеСправочник(ВидСправочника) Экспорт
	Состояние("Удаление справочника "+ВидСправочника);
	Спр = СоздатьОбъект("Справочник."+ВидСправочника);
	Спр.ВыбратьЭлементы();
	пока Спр.ПолучитьЭлемент()=1 Цикл
		Спр.Удалить(0);
		Спр.Записать();
	КонецЦикла;
	Состояние("");
КонецФункции

Функция ЗагрузитьВидыПродукции_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/production/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getSubProductByProductListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <prod:productGuid>"+ guid +"</prod:productGuid>
	|    </ws:getSubProductByProductListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Владелец) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Загрузить_ВидПродукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Загрузить_ВидПродукции(guid, Владелец);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Владелец)=1 Тогда
		Сообщить("Не указан владелец "+guid,"!");
		Возврат 0;
	КонецЕсли;

	//Сообщить("Загрузка видов продукции "+Владелец,"i");
	//Результат = Компонента.GetSubProductByProductList( guid );

	ЗапросXML = ЗагрузитьВидыПродукции_ЗапросXML( guid );
	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ProductService";
    метод.Action = "GetSubProductByProductList";
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);

	objDom=СоздатьОбъект("MSXML2.DOMDocument");
	objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;


	Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");

	List = objDom.selectNodes("//pro:subProduct") ;
	Для i1 = 0 По List.length - 1 Цикл
	    item = List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		st = item.selectSingleNode("bs:status").text;
		updateDate = item.selectSingleNode("bs:updateDate").text;
		createDate = item.selectSingleNode("bs:createDate").text;
		name = item.selectSingleNode("pro:name").text;
		Попытка
			code = item.selectSingleNode("pro:code").text;
		Исключение
			code ="";
		КонецПопытки;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.КодТНВЭД = code;
		Спр.Владелец = Владелец.ТекущийЭлемент();
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
	КонецЦикла;

	Возврат 1;
КонецФункции

Функция ЗагрузитьXML_ЕдиницыИзмерения(имяФайла) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ЕдиницыИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ЕдиницыИзмерения(имяФайла);
	КонецЕсли;
	//}

	//стандартное поведение функции
    Сообщить("Загрузка XML-файла: "+ИмяФайла);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);

	Если НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");

    unitList = objDom.selectNodes("//com:unit") ;
    Для i1 = 0 По unitList.length - 1 Цикл
        unit=unitList.item(i1);

		uuid = unit.selectSingleNode("bs:uuid").text;
		guid = unit.selectSingleNode("bs:guid").text;
		name = unit.selectSingleNode("com:name").text;
		factor = unit.selectSingleNode("com:factor").text;
		//commonUnitGuid = unit.selectSingleNode("commonUnitGuid").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+name+"] не найдена");
			Спр.Новый();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Коэффициент = factor;
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
	КонецЦикла;

КонецФункции

Функция ЗагрузитьСтраны_ЗапросXML( )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getAllCountryListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|    </ws:getAllCountryListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьСтраны() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьСтраны");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьСтраны();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Сообщить(" Запрос GetAllCountryList ","i");
	//Результат = Компонента.GetCountryList( );

	ЗапросXML = ЗагрузитьСтраны_ЗапросXML();
	метод = Компонента.GetMethod();
    метод.Service = "platform/ikar/services/IkarService";
    метод.Action = "GetAllCountryList";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	//Отладка();

	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	ПометитьНаУдалениеСправочник("ВСД_Страна");

	Спр = СоздатьОбъект("Справочник.ВСД_Страна");
    countryList = objDom.selectNodes("//ikar:country") ;
    Для i1 = 0 По countryList.length - 1 Цикл
        country=countryList.item(i1);

		uuid = country.selectSingleNode("bs:uuid").text;
		guid = country.selectSingleNode("bs:guid").text;
		st = country.selectSingleNode("bs:status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;
		name = country.selectSingleNode("ikar:name").text;
		//fullname = country.selectSingleNode("ikar:fullName").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Страна ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
    КонецЦикла;

	Сообщить("Загрузка стран завершена");
КонецФункции


Функция ЗагрузитьРегионы_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getRegionListByCountryRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:countryGuid>"+ guid +"</ikar:countryGuid>
	|    </ws:getRegionListByCountryRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРегионы(Страна) Экспорт //проверить реквизит страна ... как о

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьРегионы");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьРегионы(Страна);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//Страна_GUID = ?(ПустоеЗначение(Страна)=1,"",Страна.GUID);

	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]","i");
	//Результат = Компонента.GetRegionList( СокрЛП(Страна.GUID) );

	ЗапросXML = ЗагрузитьРегионы_ЗапросXML( Страна.GUID );
	метод = Компонента.GetMethod();
    метод.Service = "platform/ikar/services/IkarService";
    метод.Action = "RegionListByCountry";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);


	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Регион");
    regionList = objDom.selectNodes("//ikar:region") ;
    Для i1 = 0 По regionList.length - 1 Цикл
        region=regionList.item(i1);

		uuid = region.selectSingleNode("bs:uuid").text;
		guid = region.selectSingleNode("bs:guid").text;
		st = region.selectSingleNode("bs:status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;
		name = region.selectSingleNode("ikar:name").text;
		view = region.selectSingleNode("ikar:view").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Регион ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.ParentGUID = Страна.GUID;
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

Функция ЗагрузитьРайоны_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getDistrictListByRegionRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:regionGuid>"+ guid +"</ikar:regionGuid>
	|    </ws:getDistrictListByRegionRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРайоны(Регион) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьРайоны");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьРайоны(Регион);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Регион.GUID)=1 Тогда
		Сообщить("Пустое значение Регион.GUID");
	КонецЕсли;

	Сообщить(" Запрос GetDistrictListByRegion ["+СокрЛП(Регион.GUID) +"]","i");
	//Результат = Компонента.GetDistrictList( СокрЛП(Регион.GUID) );

	ЗапросXML = ЗагрузитьРайоны_ЗапросXML( Регион.GUID );
	метод = Компонента.GetMethod();
    метод.Service = "platform/ikar/services/IkarService";
    метод.Action = "GetDistrictListByRegion";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Район");
    districtList = objDom.selectNodes("//ikar:district") ;
    Для i1 = 0 По districtList.length - 1 Цикл
        district=districtList.item(i1);

		uuid = district.selectSingleNode("bs:uuid").text;
		guid = district.selectSingleNode("bs:guid").text;
		st = district.selectSingleNode("bs:status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;
		name = district.selectSingleNode("ikar:name").text;
		view = district.selectSingleNode("ikar:view").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Район ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.ParentGUID = Регион.GUID;
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

Функция ЗагрузитьГорода_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getLocalityListByRegionRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:regionGuid>"+ guid +"</ikar:regionGuid>
	|    </ws:getLocalityListByRegionRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьГорода(Регион) Экспорт

	//стандартное поведение функции
	//Страна_GUID = ?(ПустоеЗначение(Страна)=1,"",Страна_GUID);

	Сообщить(" Запрос getLocalityListByRegion "+Регион+" ["+СокрЛП(Регион.GUID) +"]","i");
	//Результат = Компонента.GetLocalityListByRegion( СокрЛП(Регион.GUID) );

	ЗапросXML = ЗагрузитьГорода_ЗапросXML( Регион.GUID );
	метод = Компонента.GetMethod();
    метод.Service = "platform/ikar/services/IkarService";
    метод.Action = "GetLocalityListByRegion";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Город");
    List = objDom.selectNodes("//ikar:locality") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		st = item.selectSingleNode("bs:status").text;
		name = item.selectSingleNode("ikar:name").text;
		view = item.selectSingleNode("ikar:view").text;

		НачатьТранзакцию(); // Ускоримся
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Город ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.ParentGUID = Регион.GUID;
		Спр.Записать();
		ЗафиксироватьТранзакцию();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
    КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

Функция Список_Улиц_ЗапросXML( Город, Смещение )

	Запрос = "<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:getStreetListByLocalityRequest>
	|         <base:listOptions>
	|            <base:count>1000</base:count>
	|            <base:offset>"+Смещение+"</base:offset>
	|         </base:listOptions>
	|         <ikar:localityGuid>" +СокрЛП(Город.GUID)+ "</ikar:localityGuid>
	|      </ws:getStreetListByLocalityRequest>
	|   </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьУлицы(Город, Смещение=0) Экспорт

	//стандартное поведение функции
	//Страна_GUID = ?(ПустоеЗначение(Страна)=1,"",Страна_GUID);

	Сообщить(" Запрос getStreetListByLocalityRequest "+Город+" ["+СокрЛП(Город.GUID) +"]","i");
	ЗапросXML = Список_Улиц_ЗапросXML( Город, Смещение );

	метод = Компонента.GetMethod();
    метод.Service = "platform/ikar/services/IkarService";
    метод.Action = "GetStreetListByLocality";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	//Отладка();

	Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

	НачатьТранзакцию(); // Ускоримся
	Спр = СоздатьОбъект("Справочник.ВСД_Улица");
    List = objDom.selectNodes("//ikar:street") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		st = item.selectSingleNode("bs:status").text;
		//updateDate = product.selectSingleNode("updateDate").text;
		//createDate = product.selectSingleNode("createDate").text;
		name = item.selectSingleNode("ikar:name").text;
		view = item.selectSingleNode("ikar:view").text;


		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Улица ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = view;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.ParentGUID = Город.GUID;
		Спр.Записать();

		Сообщить("Записан ВСД_Улица ["+name+"] ","");

    КонецЦикла;
	ЗафиксироватьТранзакцию();

	Сообщить("Загрузка завершена");
КонецФункции


Функция ЗагрузитьЕдиницыИзмерения_ЗапросXML()
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/common/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getUnitListRequest>
	|        <base:listOptions>
	|           <base:count>1000</base:count>
	|           <base:offset>0</base:offset>
	|         </base:listOptions>
	|      </ws:getUnitListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения() Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьЕдиницыИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Сообщить("Запрос UnitList","i");
	//Результат = Компонента.GetUnitList();

	ЗапросXML = ЗагрузитьЕдиницыИзмерения_ЗапросXML();
	метод = Компонента.GetMethod();
    метод.Service = "platform/services/DictionaryService";
    метод.Action = "GetUnitList";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	//Если Результат="SUCCESS" Тогда

		ПометитьНаУдалениеСправочник("ВСД_ЕдиницыИзмерения");
		ЗагрузитьXML_ЕдиницыИзмерения( Компонента.LogFilename );

	//КонецЕсли;
	Сообщить("Загрузка завершена");
КонецФункции


Функция ЗагрузитьПродукцию_ЗапросXML(тип)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/production/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getProductByTypeListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <prod:productType>"+ тип +"</prod:productType>
	|    </ws:getProductByTypeListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьПродукцию(Тип) Экспорт
	// http://help.vetrf.ru/wiki/ProductType

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьПродукцию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьПродукцию(Тип);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//Сообщить(" Запрос GetProductList ","i");
	Состояние("Загрузить Продукцию "+Тип);
	//Результат = Компонента.GetProductList( Тип );
	//ЗагрузитьXML_Номенклатура( Компонента.LogFilename );

	ЗапросXML = ЗагрузитьПродукцию_ЗапросXML(Тип);
	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ProductService";
    метод.Action = "GetProductByTypeList";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);


	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);

	objDom=СоздатьОбъект("MSXML2.DOMDocument");
	objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Продукция");

	productList = objDom.selectNodes("//pro:product") ;
	Для i1 = 0 По productList.length - 1 Цикл
	    product=productList.item(i1);

		uuid = product.selectSingleNode("bs:uuid").text;
		guid = product.selectSingleNode("bs:guid").text;
		st = product.selectSingleNode("bs:status").text;
		updateDate = product.selectSingleNode("bs:updateDate").text;
		createDate = product.selectSingleNode("bs:createDate").text;
		name = product.selectSingleNode("pro:name").text;
		Попытка
			code = product.selectSingleNode("pro:code").text;
		Исключение
			code ="";
		КонецПопытки;
		productType = product.selectSingleNode("pro:productType").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.КодТНВЭД = code;
			Спр.Тип = ProductType;
			Спр.Записать();
		КонецЕсли;
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);

		Сообщить("Загрузка [Видов продукции] "+name);
		ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Спр.ТекущийЭлемент());
	КонецЦикла;

	Сообщить("Загрузка завершена");
КонецФункции

//======= ОБЩИЕ ФУНКЦИИ РАБОТЫ С ВСД ==============

//Процедура Отладка();
//	Сообщить("ApplicationId = "+ Компонента.ApplicationId);
//	Сообщить("Status = "+ Компонента.Status);
//	Если ПустоеЗначение(Компонента.ErrorMessage)=0 Тогда
//		Сообщить("ErrorMessage = "+ Компонента.ErrorMessage);
//	КонецЕсли;
//
//	appID = Компонента.ApplicationId;
//КонецПроцедуры

Функция СтрокаВДату(ДатаСтрока) Экспорт
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

Функция Преобразовать_СтрокаДата_в_XML(ДатаСтр) Экспорт
	//например 2018.11.01-03:00
	//
	//год1 = Сред(ДатаСтр,7,4);
	//мес1 = Сред(ДатаСтр,4,2);
	//час1 = Сред(ДатаСтр,12,2);
	//день1 = Лев(ДатаСтр,2);
	день1= Сред(ДатаСтр,9,2);
	мес1 = Сред(ДатаСтр,6,2);
	час1 = Сред(ДатаСтр,12,2);
	год1 = Лев(ДатаСтр,4);

	ТекстЗапроса="";
	Если ПустоеЗначение(год1)=0 Тогда
		ТекстЗапроса = " <dt:year>"+ год1 +"</dt:year>";
	КонецЕсли;
	Если ПустоеЗначение(мес1)=0 Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:month>"+ Число(мес1) +"</dt:month> ";
	КонецЕсли;
	Если ПустоеЗначение( день1 )=0 Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:day>"+ Число(день1) +"</dt:day>";
	КонецЕсли;
	Если ПустоеЗначение(час1)=0 Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:hour>"+ Число(час1) +"</dt:hour> ";
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

Функция Преобразовать_ДатаXML_в_Строку(dateXML)
	попытка
		год = ""+dateXML.selectSingleNode("//*[local-name() = 'year']").text;
		год = Формат(год,"Ч(0)4.0");
	Исключение
		год ="    ";
	КонецПопытки;
	попытка
		мес = ""+dateXML.selectSingleNode("//*[local-name() = 'month']").text;
		мес = Формат(мес,"Ч(0)2.0");
	Исключение
		мес = "  ";
	КонецПопытки;

	попытка
		день = ""+dateXML.selectSingleNode("//*[local-name() = 'day']").text;
		день = Формат(день,"Ч(0)2.0");
	Исключение
		день = "  ";
	КонецПопытки;

	Время="";
	попытка
		час = ""+dateXML.selectSingleNode("//*[local-name() = 'hour']").text;
		Если час>0 Тогда
			час = Формат(час,"Ч(0)2.0");
			минуты="00";
			Время = "T"+час+":"+минуты;
		КонецЕсли;
	Исключение
	КонецПопытки;

	//формат "2018-10-01T14:00" = стандартное время
	Дата1 = ""+ год +"-"+ мес +"-"+ день +Время;
	Возврат Дата1;
КонецФункции

Функция Дата_из_XML( dateXML, Дата1, Дата2, ДатаСтрока ) Экспорт

	Попытка
		Дата1 = Преобразовать_ДатаXML_в_Строку( dateXML.selectSingleNode( "//*[local-name() = 'firstDate']" ) );
	Исключение
		Дата1="";
	КонецПопытки;
	Попытка
		Дата2 = Преобразовать_ДатаXML_в_Строку( dateXML.selectSingleNode( "//*[local-name() = 'secondDate']" ) );
	Исключение
		Дата2="";
	КонецПопытки;
	Попытка
		ДатаСтрока = ""+dateXML.selectSingleNode( "//*[local-name() = 'informalDate']" ).text;
	Исключение
		ДатаСтрока = "";
	КонецПопытки;

КонецФункции

Функция ПустаяДата( ВыбСтрокаДата )
	год1 = Лев(ВыбСтрокаДата,4);
	Возврат ПустоеЗначение(год1);
КонецФункции

Функция Изготовление_СрокГодности_в_XML(док, префикс) Экспорт
    ТекстЗапроса = "";

	Попытка
		ДатаИзготовленияСтр	= док.ДатаИзготовления;
	Исключение
		ДатаИзготовленияСтр ="";
	КонецПопытки;

	Если (ПустаяДата(док.ДатаИзготовления1) = 0) или (ПустоеЗначение(ДатаИзготовленияСтр) = 0) Тогда
		ТекстЗапроса = ТекстЗапроса + "
    	|                <"+ префикс +":dateOfProduction>";
		Если (ПустаяДата(док.ДатаИзготовления1) = 0) Тогда
			ТекстЗапроса = ТекстЗапроса + "<"+ префикс +":firstDate> ";
			ТекстЗапроса = ТекстЗапроса + Преобразовать_СтрокаДата_в_XML(док.ДатаИзготовления1);
			ТекстЗапроса = ТекстЗапроса + " </"+ префикс +":firstDate>";
		КонецЕсли;
		Если (ПустаяДата(док.ДатаИзготовления2) = 0 ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+ префикс +":secondDate>
			|" + ГМ.Преобразовать_СтрокаДата_в_XML(док.ДатаИзготовления2) + "
			|              </"+ префикс +":secondDate>";
		КонецЕсли;

		Если ПустоеЗначение(ДатаИзготовленияСтр) = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+ префикс +":informalDate>"+ СокрЛП(ДатаИзготовленияСтр) +"</"+префикс+":informalDate>";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|                </"+ префикс +":dateOfProduction>";
	КонецЕсли;

	Попытка
		ДатаСрокГодностиСтр	= док.ДатаСрокГодности;
	Исключение
		ДатаСрокГодностиСтр = "";
	КонецПопытки;

	Если (ПустаяДата(док.ДатаСрокГодности1) = 0 ) или (ПустоеЗначение(ДатаСрокГодностиСтр) = 0) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|                <"+префикс+":expiryDate>";
		Если (ПустаяДата(док.ДатаСрокГодности1) = 0 ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":firstDate>
			|" + ГМ.Преобразовать_СтрокаДата_в_XML(док.ДатаСрокГодности1) + "
			|              </"+префикс+":firstDate>";
		КонецЕсли;
		Если (ПустаяДата(док.ДатаСрокГодности2) = 0 ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":secondDate>
			|" + ГМ.Преобразовать_СтрокаДата_в_XML(док.ДатаСрокГодности2) + "
			|              </"+префикс+":secondDate>";
		КонецЕсли;
		Если ПустоеЗначение(ДатаСрокГодностиСтр) = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":informalDate>"+ СокрЛП(ДатаСрокГодностиСтр) +"</"+префикс+":informalDate>";
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + "
			|            </"+префикс+":expiryDate>";
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции


Функция СохранитьСтатусЗапроса(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СохранитьСтатусЗапроса");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СохранитьСтатусЗапроса(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	ДокОб = СоздатьОбъект("Документ");
	ДокОб.НайтиДокумент(док);

	ДокОб.applicationID = СокрЛП(Компонента.ApplicationId);
	ДокОб.Статус 		= СокрЛП(Компонента.Status);
	//ДокОб.Комментарий = СокрЛП(Компонента.ErrorMessage);
	ДокОб.Записать();
	Сообщить(" статус = "+ДокОб.Статус );
	//Если ПустоеЗначение(СокрЛП(ДокОб.Комментарий))=0 Тогда
	//	Сообщить("Ошибка: "+ДокОб.Комментарий);
	//КонецЕсли;

	Если ( СокрЛП(док.Статус)="COMPLETED") ИЛИ (СокрЛП(док.Статус)="CONFIRMED")  Тогда
		Попытка
		// проведем только успешно выполненный запрос
			ДокОб.Провести();
		Исключение
			СообщитьОбОшибке("Не удалось провести документ "+док+" "+ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(3441)");
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция ВыбратьВидДокументаВСД(type)

    //{ VetDocumentType
    //    TRANSPORT, = 1	= Транспортный ВСД.
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}

	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД_исходящий";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД_исходящий";
	Иначе
		Сообщить("Неопределенный вид ВСД ["+type+"]","!");
	КонецЕсли;

	Возврат рез;
КонецФункции

// Функция загружает ответ от Ветиса = ответ на второй запрос
Функция ЗагрузитьXML_ВСД(имяФайла, докОснование="")
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ВСД(имяФайла, докОснование);
	КонецЕсли;
	//}

	//стандартное поведение функции
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);

	Если НайтиОшибки(докОснование)>0 Тогда
		Возврат "";
	КонецЕсли;


    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common'
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
		|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
		|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications'
		|xmlns:vetd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );

	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

	vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;

    Для i1 = 0 По vetDocumentList.length - 1 Цикл
        vetDocument=vetDocumentList.item(i1);
		uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;

		// Документ.ВСД = ответ сервера на второй запрос к Ветису
		//  applicationId  = id первого запроса к Ветису
		// UUID можем получить только в ответе второго запроса к Ветису
		докОбъект = НайтиВСДпоUUID( uuid );
		докОбъект.UUID = uuid;

		form 	 = vetDocument.selectSingleNode("vetd:form").text;
		st 	 = vetDocument.selectSingleNode("vetd:status").text;
		type = vetDocument.selectSingleNode("vetd:type").text;

		Если ПустоеЗначение(докОснование)=0 Тогда
			//Если явно указан документ, получаем его вид
			ВидДокумента = докОснование.Вид();
		Иначе
			//при загрузке списка документов - вид документа получаем из XML
			ВидДокумента = ВыбратьВидДокументаВСД(type);
		КонецЕсли;

		createDate = vetDocument.selectSingleNode("vetd:issueDate").text;

		consignorBusinessEntity = vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		consignorEnterprise 	= vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;

		Попытка
			consigneeBusinessEntity = vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
		Исключение
			consigneeBusinessEntity ="";
		КонецПопытки;
		Попытка
			consigneeEnterprise 	= vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			consigneeEnterprise = "";
		КонецПопытки;

		batch = vetDocument.selectSingleNode("vetd:batch");

		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;

		productItem = batch.selectSingleNode("vetd:productItem");

		Попытка	productItemName = batch.selectSingleNode("vetd:productItem").selectSingleNode("*[local-name()='name']").text; Исключение productItemName = ""; КонецПопытки;
		Попытка productItemUuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:uuid").text; Исключение	productItemUuid=""; 	КонецПопытки;
		Попытка productItemGuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:guid").text; 	Исключение	productItemGuid="";		КонецПопытки;

		volume 		= batch.selectSingleNode("vetd:volume").text;
		unitGuid	= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;

		Попытка
			packingFormUuid	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("bs:uuid").text;
		Исключение
			//Сообщить("Не удалось получить элемент [packingForm] [uuid]","!");
			packingFormUuid = "";
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("*[local-name()='name']").text;
		Исключение
			packingFormName="";
			//Сообщить("Не удалось получить элемент [packingForm] [name]","!");
		КонецПопытки;

		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;

		ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
		dateOfProduction = batch.selectSingleNode("vetd:dateOfProduction");
		Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);

		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		expiryDate = batch.selectSingleNode("vetd:expiryDate");
		Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);

		Попытка
			producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;

		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);

		Попытка докОбъект.ТтнНомер = vetDocument.selectSingleNode("vetd:waybillNumber").text; 				Исключение КонецПопытки;
		Попытка докОбъект.ТтнДата = СтрокаВДату( vetDocument.selectSingleNode("vetd:waybillDate").text); 	Исключение КонецПопытки;
		Попытка докОбъект.Экспертиза = vetDocument.selectSingleNode("vetd:expertiseInfo").text; 			Исключение КонецПопытки;
		Попытка докОбъект.Местность = vetDocument.selectSingleNode("vetd:locationProsperity").text; 		Исключение КонецПопытки;
		Попытка докОбъект.ОсобыеОтметки = vetDocument.selectSingleNode("vetd:specialMarks").text; 			Исключение КонецПопытки;

		Попытка докОбъект.номерАвто = vetDocument.selectSingleNode("vetd:transportInfo").selectSingleNode("shp:transportNumber").text; 	Исключение КонецПопытки;

		cargoInspected = "";
		Попытка cargoInspected =  vetDocument.selectSingleNode("vetd:cargoInspected").text; 	Исключение КонецПопытки;
		Если cargoInspected="true" Тогда
			докОбъект.cargoInspected = 1;
		КонецЕсли;

		cargoExpertized = "";
		Попытка cargoExpertized =  vetDocument.selectSingleNode("vetd:cargoExpertized").text; 	Исключение КонецПопытки;
		Если cargoExpertized="true" Тогда
			докОбъект.cargoExpertized = 1;
		КонецЕсли;

		Попытка
			transportStorageType =  vetDocument.selectSingleNode("vetd:transportStorageType").text;
			зн = ТермическиеУсловияПеревозки.НайтиЗначение(transportStorageType);
			докОбъект.ТермическоеСостояние = зн;
		Исключение
		КонецПопытки;

		докОбъект.applicationID = Компонента.ApplicationId;
		Если ПустоеЗначение(докОбъект.ДокОснование )=1 Тогда
			докОбъект.ДокОснование = докОснование;
		КонецЕсли;

		Попытка докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity); Исключение КонецПопытки;
		Попытка	докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise); Исключение КонецПопытки;
		Попытка докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity); Исключение КонецПопытки;
		Попытка	докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise); Исключение КонецПопытки;

		докОбъект.Продукция 	= НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= НайтиВидПродукции(subProduct);

		//докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(productItem, докОбъект.Продукция, докОбъект.ВидПродукции);
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(productItemName, productItemGuid, докОбъект.Продукция, докОбъект.ВидПродукции);

		докОбъект.Количество 	= Число(volume);
		докОбъект.КоличествоМест = Число(packingAmount);
		ФормаУпаковки 			= НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;

		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );

		докОбъект.Статус = st;
		докОбъект.ФормаВСД = form;
		докОбъект.типВСД = type;
		докОбъект.НаименованиеПродукции = докОбъект.Продукция_Элемент.Наименование;
		докОбъект.ДатаИзготовления = ДатаИзготовления; //строкой
		докОбъект.ДатаИзготовления1 = ДатаИзготовления1;
		докОбъект.ДатаИзготовления2 = ДатаИзготовления2;
		докОбъект.ДатаСрокГодности = ДатаСрокГодности; //строкой
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;

		Автор = ПолучитьАвтора();
		Попытка докОбъект.Фирма = Автор.ОсновнаяФирма; Исключение	КонецПопытки;
		Попытка докОбъект.Автор = Автор; Исключение	КонецПопытки;
		Попытка
			докОбъект.Филиал = Автор.Филиал;
		Исключение
		КонецПопытки;

		докОбъект.ДатаДок = СтрокаВДату(createDate);

		докОбъект.Записать();
		докОбъект.Провести();

		Сообщить("Записан ВСД от "+докОбъект.ДатаДок+" ["+uuid+"]");
	КонецЦикла;

	ИзменитьСтатусДокументОснования(докОснование, СокрЛП(st));

КонецФункции


//=========================== ВСД Партии =================================

//Функция ПолучитьПартии_ТекстЗапросаXML(Отправитель_Площадка, Смещение=0) Экспорт
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии_ТекстЗапросаXML");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ПолучитьПартии_ТекстЗапросаXML(Отправитель_Площадка, Смещение);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
//		Сообщить("В выбранной Площадке пустой GUID");
//		Возврат "REJECTED";
//	КонецЕсли;
//
//	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e
//	Запрос = "      <getStockEntryListRequest xmlns:sch='http://www.w3.org/2001/XMLSchema'
//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
//	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment'
//	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
//	|xmlns:app='http://api.vetrf.ru/schema/cdm/application'
//	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common'
//	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
//	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production'
//	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar'
//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
//	|        <localTransactionId>[GUID]</localTransactionId>
//	|        <initiator>
//	|          <co:login>"+ПолучитьКонстанту("param_intiator_login")+"</co:login>
//	|        </initiator>
//	|        <bs:listOptions>
//	|          <bs:count>1000</bs:count>
//	|          <bs:offset>"+Смещение+"</bs:offset>
//	|        </bs:listOptions>
//	|        <ent:enterpriseGuid>"+СокрЛП(Отправитель_Площадка.GUID)+"</ent:enterpriseGuid>
//	|      </getStockEntryListRequest>
//	|";
//
//	Возврат Запрос;
//КонецФункции

//
Функция ПолучитьПартии_ТекстЗапросаSoap(Отправитель_Площадка, Смещение=0) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии_ТекстЗапросаSoap");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии_ТекстЗапросаSoap(Отправитель_Площадка, Смещение);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + ПолучитьКонстанту("param_issuer_id") + "</app:issuerId>
	|            <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
				|<merc:getStockEntryListRequest>
				|        <merc:localTransactionId>[GUID]</merc:localTransactionId>
				|        <merc:initiator>
				|          <com:login>"+ПолучитьКонстанту("param_intiator_login")+"</com:login>
				|        </merc:initiator>
				|        <base:listOptions>
				|        <base:count>1000</base:count>
				|        <base:offset>"+Смещение+"</base:offset>
				|        </base:listOptions>
				|        <ent:enterpriseGuid>"+СокрЛП(Отправитель_Площадка.GUID)+"</ent:enterpriseGuid>
				|</merc:getStockEntryListRequest>
    |          </app:data>
    |         </app:application>
    |      </ws:submitApplicationRequest>
    |   </SOAP-ENV:Body>
    |</SOAP-ENV:Envelope>
    |";

	Возврат Запрос;
КонецФункции

Функция ЗаписатьПартию(stockEntry)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаписатьПартию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаписатьПартию(stockEntry);
	КонецЕсли;
	//}

	//стандартное поведение функции
		//t = stockEntry.text;
		active = stockEntry.selectSingleNode("bs:active").text;

		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("ns2:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;

		batch = stockEntry.selectSingleNode("ns2:batch");

		product 	= batch.selectSingleNode("ns2:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("ns2:subProduct").selectSingleNode("bs:guid").text;

		Попытка	productItemName = batch.selectSingleNode("*[local-name()='productItem']").selectSingleNode("*[local-name()='name']").text; Исключение productItemName = ""; КонецПопытки;
		Попытка productItemUuid = batch.selectSingleNode("*[local-name()='productItem']").selectSingleNode("bs:uuid").text; Исключение	productItemUuid=""; 	КонецПопытки;
		Попытка productItemGuid = batch.selectSingleNode("*[local-name()='productItem']").selectSingleNode("bs:guid").text; 	Исключение	productItemGuid="";		КонецПопытки;

		productItem = batch.selectSingleNode("*[local-name()='productItem']");

		volume 		= batch.selectSingleNode("ns2:volume").text;
		unit		= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:guid").text;

		Попытка
			unitGuid	= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:guid").text;
		Исключение
			unitGuid = "";
		КонецПопытки;
		Попытка
			unitUuid	= batch.selectSingleNode("ns2:unit").selectSingleNode("bs:uuid").text;
		Исключение
			unitUuid = "";
		КонецПопытки;

		Попытка
			packingFormUuid	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("bs:uuid").text;
		Исключение
			//Сообщить("Не удалось получить элемент [packingForm] [uuid]","!");
			packingFormUuid = "";
		КонецПопытки;
		Попытка
			packingFormName	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("*[local-name()='name']").text;
		Исключение
			packingFormName="";
			//Сообщить("Не удалось получить элемент [packingForm] [name]","!");
		КонецПопытки;

		packingAmount = batch.selectSingleNode("ns2:packingAmount").text;

//		// dateOfProduction 1
//		ДатаИзготовления1="";
//		ДатаИзготовления="";
//		попытка
//			год = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:year").text;
//			мес = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:month").text;
//			день = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:firstDate").selectSingleNode("bs:day").text;
//			ДатаИзготовления1 = Дата(год, мес, день);
//		Исключение
//			Попытка
//				ДатаИзготовления = ""+batch.selectSingleNode("ns2:dateOfProduction").text;
//			Исключение
//			КонецПопытки;
//		КонецПопытки;
//		ДатаИзготовления2="";
//		попытка
//			год = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:year").text;
//			мес = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:month").text;
//			день = ""+batch.selectSingleNode("ns2:dateOfProduction").selectSingleNode("ns2:secondDate").selectSingleNode("bs:day").text;
//			ДатаИзготовления2 = Дата(год, мес, день);
//		Исключение
//		КонецПопытки;
//
//		//ДатаСрокГодности
//		попытка
//			год = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:year").text;
//			мес = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:month").text;
//			день = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:firstDate").selectSingleNode("bs:day").text;
//			ДатаСрокГодности1 = Дата(год, мес, день);
//		Исключение
//			Попытка
//				ДатаСрокГодности = ""+batch.selectSingleNode("ns2:expiryDate").text;
//			Исключение
//			КонецПопытки;
//		КонецПопытки;
//		ДатаСрокГодности2="";
//		попытка
//			год = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:year").text;
//			мес = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:month").text;
//			день = ""+batch.selectSingleNode("ns2:expiryDate").selectSingleNode("ns2:secondDate").selectSingleNode("bs:day").text;
//			ДатаСрокГодности2 = Дата(год, мес, день);
//		Исключение
//		КонецПопытки;

		ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
		dateOfProduction = batch.selectSingleNode("ns2:dateOfProduction");
		Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);

		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		expiryDate = batch.selectSingleNode("ns2:expiryDate");
		Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);

		Попытка
			producer = batch.selectSingleNode("ns2:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
		Исключение
			producer = "";
		КонецПопытки;

		Попытка
			owner = batch.selectSingleNode("ns2:owner").selectSingleNode("bs:guid").text; //ХозСубъект
			ВладелецХС = НайтиХСпоGUID(owner);
		Исключение
			ВладелецХС = "";
		КонецПопытки;

		Партия = НайтиПартиюПоGUID(guid);

		Если active="false" Тогда
			Сообщить("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна","i");
			Партия.Удалить(0);
			Возврат Партия;
		КонецЕсли;

		Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);

		//Партия.ДатаДок = СтрокаВДату(createDate);
		Партия.ДатаИзменения = СтрокаВДату( updateDate );

		Партия.Получатель_ХозСубъект = ВладелецХС;
		Партия.Получатель_Площадка = ПолучитьКонстанту("Отправитель_Площадка");
		Партия.Производитель_Площадка = НайтиПлощадку(producer);
		Партия.Продукция 	= НайтиПродукцию(product);
		Партия.ВидПродукции = НайтиВидПродукции(subProduct);

		//Партия.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
		//Партия.Продукция_Элемент = Найти_Продукция_Элемент2(productItem, Партия.Продукция, Партия.ВидПродукции);
		Партия.Продукция_Элемент = Найти_Продукция_Элемент2(productItemName, productItemGuid, Партия.Продукция, Партия.ВидПродукции);

		Партия.Количество 	= Число(volume);
		Партия.КоличествоМест = Число(packingAmount);
		Партия.ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);;

		Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid, unitUUID );;

		Партия.ДатаИзготовления1 = ДатаИзготовления1;
		Партия.ДатаИзготовления2 = ДатаИзготовления2;
		Партия.ДатаИзготовления =  ДатаИзготовления;
		Партия.ДатаСрокГодности = ДатаСрокГодности;
		Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
		Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
		Партия.Статус = st;
		Партия.GUID = guid;
		Партия.UUID = uuid;
		//Партия.ДатаИзменения = updateDate;
		Партия.НомерЗаписи = entryNumber;
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
		Партия.НаименованиеПродукции = Партия.Наименование;

		Автор = ПолучитьАвтора();
		Попытка Партия.Фирма = Автор.ОсновнаяФирма; Исключение	КонецПопытки;
		Если ПустоеЗначение(Партия.Автор)=1 Тогда
			Партия.Автор = Автор;
		КонецЕсли;
		Попытка
			Партия.Филиал = Автор.Филиал;
		Исключение
		КонецПопытки;

		Партия.ВсдДата = СтрокаВДату(createDate);

		Если Партия.Количество=0 Тогда

			Если ( ПустоеЗначение( Партия.ТекущийЭлемент() ) =0 ) Тогда
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
				Партия.Удалить(0);
			Иначе
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
				Возврат "";
			КонецЕсли;
		КонецЕсли;

		Партия.Записать();

		Возврат Партия;
КонецФункции

Функция ЗагрузитьXML_Партии(имяФайла, Смещение = 0, УдалятьПартии = 0)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_Партии");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_Партии(имяФайла, Смещение, УдалятьПартии) ;
	КонецЕсли;
	//}

	//стандартное поведение функции
    Сообщить("Загрузка XML-файла: "+ИмяФайла);

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);

	Если НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common'
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
		|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
		|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications'
		|xmlns:vetd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
		|" );

    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;

	Сообщить("Получено "+stockEntryList.length+" записей","i");

	Попытка ПришлоПартий = Число(stockEntryList.length); исключение ПришлоПартий = 1; КонецПопытки;

    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);

		Партия = ЗаписатьПартию(stockEntry);

		//Если ПустоеЗначение(докОснование)=0 Тогда
		//	Партия.ДокОснование = докОснование;
		//	Партия.Записать();
		//КонецЕсли;

	КонецЦикла;
	//Рекурсивный вызов
	Если ПришлоПартий = 1000 Тогда   // 1000 стоит в запросе на получение
		УдалитьXML( имяФайла ); //На случай рекурсивного вызова
		//Площадку берем из Констант, либо передавать в параметрах функции
		ПолучитьПартии(ПолучитьКонстанту("Отправитель_Площадка"), Смещение+1000, 0);
	КонецЕсли;
КонецФункции

Функция ЗагрузитьXML_ВсеПартииОтвет(имяФайла) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ВсеПартииОтвет");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ВсеПартииОтвет(имяФайла);
	КонецЕсли;
	//}

	//стандартное поведение функции
    Сообщить("Загрузка XML-файла: "+ИмяФайла);

	objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);

	Если НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

    objDom.setProperty("SelectionNamespaces", "xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common'
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications'" );

    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;
	Сообщить("Получено "+stockEntryList.length+" записей","i");
    Для i1 = 0 По stockEntryList.length - 1 Цикл
        stockEntry=stockEntryList.item(i1);

		ЗаписатьПартию(stockEntry);

    КонецЦикла;

КонецФункции

//=================== ВСД ==========================================

Функция ПолучитьРезультатСервер(appID) Экспорт
	Запрос ="<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'><SOAP-ENV:Header/><SOAP-ENV:Body>
	|<receiveApplicationResultRequest xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>
  	|<apiKey xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ ПолучитьКонстанту("param_api_key") +"</apiKey>
  	|<issuerId xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ ПолучитьКонстанту("param_issuer_id") +"</issuerId>
  	|<applicationId xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ СокрЛП(appID) +"</applicationId>
	|</receiveApplicationResultRequest>
	|</SOAP-ENV:Body></SOAP-ENV:Envelope>
	|";

	запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:receiveApplicationResultRequest>
	|         <ws:apiKey>"+ ПолучитьКонстанту("param_api_key") +"</ws:apiKey>
	|         <ws:issuerId>"+ ПолучитьКонстанту("param_issuer_id") +"</ws:issuerId>
	|         <ws:applicationId>"+ СокрЛП(appID) +"</ws:applicationId>
	|      </ws:receiveApplicationResultRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";

	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "receiveApplicationResult";

	Результат = Компонента.SendRequestSoap( метод, запрос, appID );

	//appID = Получить_ApplicationID(Компонента.LogFilename);
	//Возврат appID;

	//Возврат Результат;
	возврат Компонента.Статус;
КонецФункции

Функция ПолучитьРезультат_ВСД(applicationID, докСсылка) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьРезультат_ВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьРезультат_ВСД(applicationID, докСсылка );
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Отправляем запрос результата ["+applicationID+"] "+докСсылка );
	//Результат = Компонента.SendRequestResult( applicationID );
	Результат = ПолучитьРезультатСервер( applicationID );

	Если ПустоеЗначение(докСсылка)=0 Тогда
		СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД( Компонента.LogFilename, докСсылка);
	КонецЕсли;

	ЗагрузитьXML_Партии( Компонента.LogFilename );

	УдалитьXML( Компонента.LogFilename );

	СохранитьОтветВДокументе(докСсылка);

	Возврат Результат;
КонецФункции

//Функция  ОтправитьЗапросXML(ЗапросXML, док="",Смещение = 0, УдалятьПартии = 0) Экспорт
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьЗапросXML");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ОтправитьЗапросXML(ЗапросXML, док, Смещение, УдалятьПартии);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Если ПустоеЗначение(док)=0 Тогда
//		Сообщить("Отправляем запрос "+док.Вид()+" ["+док+"]" ,"i");
//	Иначе
//		Сообщить("Отправляем запрос" ,"i");
//	КонецЕсли;
//	результат = Компонента.SendRequestXML(ЗапросXML);
//
//	appID = Компонента.ApplicationId;
//
//	УдалитьXML( Компонента.LogFilename);
//
//	СохранитьЗапросВДокументе(док);
//
//	Если ПустоеЗначение(appID)=0 Тогда
//
//		Результат = ПолучитьРезультат_ВСД(appID, док, Смещение, УдалятьПартии ); //ДокОб.ТекущийДокумент()
//		Сообщить("Результат = "+Результат);
//		Для А=1 По 10 Цикл
//			Если (Результат="IN_PROCESS") Тогда
//				Результат = ПолучитьРезультат_ВСД(appID, док, Смещение, УдалятьПартии ); //ДокОб.ТекущийДокумент()
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//
//	Возврат appID;
//
//КонецФункции

Функция  ОтправитьТранзакцию(ЗапросXML, док) Экспорт
	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	УдалитьXML( Компонента.LogFilename);

	СохранитьЗапросВДокументе(док);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = "";
		//Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") или (ПустоеЗначение(Результат)=1) Тогда
				Пауза();
				Результат = ПолучитьРезультат_ВСД( appID, док);
				Сообщить("Результат = "+Результат);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СообщитьОбОшибке("ответ сервера не получен");
	КонецЕсли;

	Возврат appID;
КонецФункции

//========================== Партии ===============================================

// новая версия - XML запрос формируем в 1С и отправляем в Ветис
Функция  ПолучитьПартии(Отправитель_Площадка, Смещение=0, УдалятьПартии=1) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии(Отправитель_Площадка, Смещение,УдалятьПартии);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	//При объединении партий в Меркурии - старые партии пропадают, появляются новые
	// поэтому в 1С остаются "остатки", которые нужно удалять
	Если (ПолучитьКонстанту("ОчищатьСправочникВСД_Партии")=1) и (УдалятьПартии=1) Тогда  //при след рекурсиях не удаляем
		Сообщить("Очистка 1с справочника ВСД_Партии");
		Состояние("Удаление справочника ВСД_Партии");
		Отправитель_Площадка = ПолучитьКонстанту("Отправитель_Площадка");

		СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
		НачатьТранзакцию(); // Ускоримся
		СпрПартия.ВыбратьЭлементы();
		Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
			Если СпрПартия.Получатель_Площадка = Отправитель_Площадка Тогда
				СпрПартия.Удалить(0);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	ЗапросXML = ПолучитьПартии_ТекстЗапросаSoap(Отправитель_Площадка, Смещение);

	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	//appID = ОтправитьЗапросXML(ЗапросXML,, Смещение, УдалятьПартии);
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = "";
		//Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если ((Результат="IN_PROCESS") или (ПустоеЗначение(Результат)=1)) Тогда
				//Результат = ПолучитьРезультат_ВСД(appID, "", Смещение, УдалятьПартии ); //ДокОб.ТекущийДокумент()

				Пауза( );

				Сообщить("Отправляем запрос на получение ответа [Актуальные партии]" );
				//Результат = Компонента.SendRequestResult( appID );
				Результат = ПолучитьРезультатСервер( appID );
				Сообщить("Результат = "+Результат);

				ЗагрузитьXML_Партии( Компонента.LogFilename, Смещение, УдалятьПартии );

				УдалитьXML( Компонента.LogFilename );

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат appID;

КонецФункции

//Процедура ПолучитьПоследнююВерсиюПартии(ВыбПартия, Отправитель_Площадка)
//	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда
//	//	Предупреждение("Выберите Площадку");
//	//	Возврат;
//	//КонецЕсли;
//
//	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
//		Сообщить("У Площадки пустой GUID");
//		Возврат;
//	КонецЕсли;
//
//	Если ПустоеЗначение(ВыбПартия.GUID)=1 Тогда
//		Сообщить("В выбранной партии пустой GUID");
//		Возврат;
//	КонецЕсли;
//
//	Результат = Компонента.GetStockEntryVersionList(
//		СокрЛП(ВыбПартия.GUID),
//		СокрЛП(Отправитель_Площадка.GUID)
//		);
//
//	//Отладка();
//
//КонецПроцедуры

//Процедура ПолучитьПоследнююВерсиюПартииОтвет(appID)
//
//	Результат = Компонента.GetStockEntryVersionListResult(СокрЛП(appID));
//
//	//Отладка();
//
//	Если Результат="COMPLETED" Тогда
//
//		//тз = ЗагрузитьТЗ(Компонента.ResultString);
//		//тз.ВыбратьСтроку();
//		//ЗаписатьПартии(тз);
//
//	КонецЕсли;
//
//
//КонецПроцедуры

//========================== ВСД Входящий =================================

//Функция ПолучитьРезультат_ВСД_Входящий( докСсылка ) Экспорт
//
//	ДокОб = СоздатьОбъект("Документ");
//	ДокОб.НайтиДокумент(докСсылка);
//	applicationID = СокрЛП(ДокОб.applicationID);
//	Если ПустоеЗначение(applicationID)=1 Тогда
//		Сообщить("Пустая ссылка applicationID","!");
//		Возврат "Пустая ссылка applicationID";
//	КонецЕсли;
//
//	Сообщить("Отправляем запрос ВСД_Входящий_Результат ["+докСсылка+"]" );
//	Результат = Компонента.Send_VSD_IN_Result( applicationID );
//
//	СохранитьСтатусЗапроса(докСсылка);
//
//	ЗагрузитьXML_Партии( Компонента.LogFilename , докСсылка );
//
//	ЗагрузитьXML_ВСД( Компонента.LogFilename, докСсылка, "ВСД_входящий");
//
//	УдалитьXML( Компонента.LogFilename );
//
//	Возврат Результат;
//
//КонецФункции

Функция Проверка_ВСД_Входящий(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_Входящий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_Входящий(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = 1; //все в порядке

	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Производитель_Площадка.GUID)=1 Тогда
	//	Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
	//	результат = 0;
	//КонецЕсли;
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Партия.GUID)=1 Тогда
	//	Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
	//	Возврат;
	//КонецЕсли;

	Если док.ВидВСД = 1 Тогда
		//бумажный
		Если ПустоеЗначение(док.ВсдНомер)=1 Тогда
			Сообщить("Не указан ВсдНомер ","!");
			результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ВсдДата)=1 Тогда
			Сообщить("Не указан ВсдДата ","!");
			результат = 0;
		КонецЕсли;
	Иначе
		//электронный
		Если ПустоеЗначение(док.UUID)=1 Тогда
			Сообщить("Не указан UUID ","!");
			результат = 0;
		КонецЕсли;

	КонецЕсли;

	Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда
		Сообщить("Не указана ЕдиницаИзмерения ","!");
		результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда
	//	Сообщить("Не указана ФормаУпаковки ","!");
	//	результат = 0;
	//КонецЕсли;

	Возврат результат;
КонецФункции

Функция ВСД_входящий_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_входящий_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_входящий_ЗапросXML(док);
	КонецЕсли;
	//}

	//док = СоздатьОбъект("Документ.ВСД_входящий")

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'
	|					xmlns:dt='http://api.vetrf.ru/schema/cdm/base' >
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + ПолучитьКонстанту("param_issuer_id") + "</app:issuerId>
	|            <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|";

	Если док.ВидВСД=1 Тогда
		//бумажный

        Запрос = Запрос + "<merc:processIncomingConsignmentRequest>
            |  <merc:localTransactionId>[GUID]</merc:localTransactionId>
            |  <merc:initiator>
            |    <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
            |  </merc:initiator>
            |";
        Запрос=Запрос+ "
            |        <merc:delivery>
            |          <vet:deliveryDate>" + Преобразовать_Дата_в_Строка(док.ТтнДата, "T00:00:00") + "</vet:deliveryDate>
            |          <vet:consignor>
            |            <ent:businessEntity>
            |              <base:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</base:guid>
            |            </ent:businessEntity>
            |            <ent:enterprise>
            |              <base:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</base:guid>
            |            </ent:enterprise>
            |          </vet:consignor>
            |          <vet:consignee>
            |            <ent:businessEntity>
            |              <base:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</base:guid>
            |            </ent:businessEntity>
            |            <ent:enterprise>
            |              <base:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</base:guid>
            |            </ent:enterprise>
            |          </vet:consignee>
            |";
        Запрос = Запрос + "
            |       <vet:consignment>
            |            <vet:productType>"+ док.Продукция.Тип +"</vet:productType>
            |            <vet:product>
            |              <base:guid>"+ СокрЛП(док.Продукция.GUID) +"</base:guid>
            |            </vet:product>
            |            <vet:subProduct>
            |              <base:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</base:guid>
            |            </vet:subProduct>
            |            <vet:productItem>
            |";
        Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
            Запрос = Запрос + "
            |              <base:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</base:guid>
            |";
        КонецЕсли;
        Запрос = Запрос + "
            |              <prod:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</prod:name>
            |            </vet:productItem>
            |            <vet:volume>"+ Док.Количество +"</vet:volume>
            |            <vet:unit>
            |              <base:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</base:guid>
            |            </vet:unit>";

        Если док.КоличествоМест>0 Тогда
            Запрос=Запрос+"
            |            <vet:packingList>
            |              <com:packingForm>
            |                <base:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</base:uuid>
            |              </com:packingForm>
            |            </vet:packingList>
            |            <vet:packingAmount>"+ док.КоличествоМест +"</vet:packingAmount>
            |";
		КонецЕсли;

		Запрос = Запрос + Изготовление_СрокГодности_в_XML(док, "vet");
//            Запрос=Запрос+"
//            |            <vet:dateOfProduction>
//            |";
//        Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
//            Запрос = Запрос + "
//            |              <vet:firstDate>
//            |                <base:year>"+ДатаГод(док.ДатаИзготовления1)+"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:firstDate>
//            |";
//        КонецЕсли;
//        Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и
//                (док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//            Запрос = Запрос + "
//            |              <vet:secondDate>
//            |                <base:year>"+ ДатаГод(док.ДатаИзготовления2) +"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:secondDate>
//            |";
//        КонецЕсли;
//        Запрос = Запрос + "
//            |              <vet:informalDate />
//            |            </vet:dateOfProduction>
//            |            <vet:expiryDate>
//            |";
//
//        Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
//            Запрос = Запрос + "
//                |              <vet:firstDate>
//                |                <base:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</base:year>
//                |                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</base:month>
//                |                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</base:day>
//                |                <base:hour>0</base:hour>
//                |              </vet:firstDate>
//                |";
//        КонецЕсли;
//        Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и
//                (док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//            Запрос = Запрос + "
//                |              <vet:secondDate>
//                |                <base:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</base:year>
//                |                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</base:month>
//                |                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</base:day>
//                |                <base:hour>0</base:hour>
//                |              </vet:secondDate>
//                |";
//        КонецЕсли;
        //Запрос = Запрос + "
        //    |              <vet:informalDate />
        //    |            </vet:expiryDate>
		//	|";
			Запрос = Запрос + "
            |            <vet:perishable>false</vet:perishable>
            |            <vet:countryOfOrigin>
            |              <base:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</base:uuid>
            |            </vet:countryOfOrigin>
            |            <vet:producerList>
            |               <ent:producer>
            |";
        Попытка
            сп = ЗначениеИзСтроки(док.ПроизводительСписок);
            Для А=1 По сп.РазмерСписка() Цикл
                Площадка = сп.ПолучитьЗначение(А);
                Запрос = Запрос + "
                |                    <ent:enterprise>
                |                      <base:guid>"+ СокрЛП(Площадка.GUID) +"</base:guid>
                |                    </ent:enterprise>
                |";
            КонецЦикла;
        Исключение
            СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(4573)");
        КонецПопытки;
        Запрос = Запрос + "
            |               </ent:producer>
            |            </vet:producerList>
            |            <vet:productMarkingList />
            |            <vet:lowGradeCargo>false</vet:lowGradeCargo>
            |            <vet:productName>"+ СокрЛП(док.НаименованиеПродукции) +"</vet:productName>
            |            <vet:sourceStockEntry />
            |      </vet:consignment>
            |    <vet:accompanyingForms>
            |      <vet:waybill>
            |        <shp:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</shp:issueSeries>
            |        <shp:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</shp:issueNumber>
            |        <shp:issueDate>"+ Преобразовать_Дата_в_Строка(док.ТтнДата) +"</shp:issueDate>
            |        <shp:type>1</shp:type>
            |        <shp:consignor>
            |          <ent:businessEntity />
            |          <ent:enterprise />
            |        </shp:consignor>
            |        <shp:consignee>
            |          <ent:businessEntity />
            |          <ent:enterprise />
            |        </shp:consignee>
            |        <shp:broker>
            |          <base:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</base:guid>
            |        </shp:broker>
            |        <shp:transportInfo>
            |          <shp:transportType>1</shp:transportType>
            |          <shp:transportNumber>
            |            <shp:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</shp:vehicleNumber>
            |          </shp:transportNumber>
            |        </shp:transportInfo>
            |        <shp:transportStorageType>"+ ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</shp:transportStorageType>
            |        <shp:cargoReloadingPointList />
            |      </vet:waybill>
            |      <vet:vetCertificate>
            |        <vet:issueSeries>"+ СокрЛП(док.ВсдСерия) +"</vet:issueSeries>
            |        <vet:issueNumber>"+ СокрЛП(док.ВсдНомер) +"</vet:issueNumber>
            |        <vet:issueDate>"+ Преобразовать_Дата_в_Строка(док.ВсдДата) +"</vet:issueDate>
            |        <vet:form>" + СокрЛП(ПолучитьКонстанту("ФормаВСД")) + "</vet:form>
            |          <vet:consignor>
            |            <ent:businessEntity>
            |              <base:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</base:guid>
            |            </ent:businessEntity>
            |            <ent:enterprise>
            |              <base:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</base:guid>
            |            </ent:enterprise>
            |          </vet:consignor>
            |          <vet:consignee>
            |            <ent:businessEntity>
            |              <base:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</base:guid>
            |            </ent:businessEntity>
            |            <ent:enterprise>
            |              <base:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</base:guid>
            |            </ent:enterprise>
            |          </vet:consignee>
            |
            |        <vet:batch>
            |            <vet:productType>"+ док.Продукция.Тип +"</vet:productType>
            |            <vet:product>
            |              <base:guid>"+ СокрЛП(док.Продукция.GUID) +"</base:guid>
            |            </vet:product>
            |            <vet:subProduct>
            |              <base:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</base:guid>
            |            </vet:subProduct>
            |            <vet:productItem>
            |";
        Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
            Запрос = Запрос + "
            |              <base:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</base:guid>
            |";
        КонецЕсли;
        Запрос = Запрос + "
            |              <prod:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</prod:name>
            |            </vet:productItem>
            |            <vet:volume>"+ Док.Количество +"</vet:volume>
            |            <vet:unit>
            |              <base:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</base:guid>
            |            </vet:unit>
            |";
        Если док.КоличествоМест>0 Тогда
            Запрос=Запрос+"

            |            <vet:packingList>
            |              <com:packingForm>
            |                <base:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</base:uuid>
            |              </com:packingForm>
            |            </vet:packingList>
            |            <vet:packingAmount>"+ док.КоличествоМест +"</vet:packingAmount>
            |";
		КонецЕсли;

		Запрос = Запрос + Изготовление_СрокГодности_в_XML(док, "vet");
//        Запрос=Запрос+"
//            |            <vet:dateOfProduction>
//            |";
//
//
//        Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
//            Запрос = Запрос + "
//            |              <vet:firstDate>
//            |                <base:year>"+ДатаГод(док.ДатаИзготовления1)+"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:firstDate>
//            |";
//        КонецЕсли;
//        Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и
//                (док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//            Запрос = Запрос + "
//            |              <vet:secondDate>
//            |                <base:year>"+ ДатаГод(док.ДатаИзготовления2) +"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:secondDate>
//            |";
//        КонецЕсли;
//        Запрос = Запрос + "
//            |              <vet:informalDate />
//            |            </vet:dateOfProduction>
//            |            <vet:expiryDate>
//            |";
//        Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
//            Запрос = Запрос + "
//            |              <vet:firstDate>
//            |                <base:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:firstDate>
//            |";
//        КонецЕсли;
//        Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и
//                (док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//            Запрос = Запрос + "
//            |              <vet:secondDate>
//            |                <base:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:secondDate>
//            |";
//        КонецЕсли;
        //Запрос = Запрос + "
        //    |              <vet:informalDate />
        //    |            </vet:expiryDate>
		//	|";
		Запрос = Запрос + "
            |            <vet:perishable>false</vet:perishable>
            |            <vet:countryOfOrigin>
            |              <base:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</base:uuid>
            |            </vet:countryOfOrigin>
            |                <vet:producerList>
            |                  <ent:producer>
            |";


        Попытка
            сп = ЗначениеИзСтроки(док.ПроизводительСписок);
            Для А=1 По сп.РазмерСписка() Цикл
                Площадка = сп.ПолучитьЗначение(А);
                Запрос = Запрос + "
                |                    <ent:enterprise>
                |                      <base:guid>"+ СокрЛП(Площадка.GUID) +"</base:guid>
                |                    </ent:enterprise>
                |";
            КонецЦикла;
        Исключение
            СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(4740)");
        КонецПопытки;
        Запрос = Запрос + "
            |                  </ent:producer>
            |                </vet:producerList>
            |                <vet:productMarkingList />
            |                <vet:lowGradeCargo>false</vet:lowGradeCargo>
            |              </vet:batch>
            |              <vet:purpose>
            |                <base:guid>"+ СокрЛП( ПолучитьКонстанту("Цель").Guid ) +"</base:guid>
            |              </vet:purpose>
            |              <vet:broker>
            |                <base:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</base:guid>
            |              </vet:broker>
            |              <vet:transportInfo>
            |                <shp:transportType>1</shp:transportType>
            |                <shp:transportNumber>
            |                  <shp:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</shp:vehicleNumber>
            |                </shp:transportNumber>
            |              </vet:transportInfo>
            |              <vet:transportStorageType>"+ ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</vet:transportStorageType>
            |              <vet:cargoReloadingPointList />
            |              <vet:waybillSeries>"+ СокрЛП(док.ТтнСерия) +"</vet:waybillSeries>
            |              <vet:waybillNumber>"+ СокрЛП(док.ТтнНомер) +"</vet:waybillNumber>
            |              <vet:waybillDate>"+ Преобразовать_Дата_в_Строка(док.ТтнДата) +"</vet:waybillDate>
            |              <vet:waybillType>1</vet:waybillType>
            |              <vet:cargoInspected>"+ булево(док.cargoInspected) +"</vet:cargoInspected>
            |              <vet:cargoExpertized>"+  булево(док.cargoExpertized) +"</vet:cargoExpertized>
            |              <vet:expertiseInfo>"+ СокрЛП(док.ВсдЭкспертиза) +"</vet:expertiseInfo>
            |              <vet:confirmedBy>
            |                <com:fio>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_fio")) +"</com:fio>
            |                <com:post>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_post")) +"</com:post>
            |                <com:login>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_login")) +"</com:login>
            |              </vet:confirmedBy>
            |              <vet:confirmedDate>"+ Преобразовать_Дата_в_Строка(док.ДатаДок,"T00:00:00") +"</vet:confirmedDate>
            |              <vet:locationProsperity>"+ СокрЛП(док.ВсдМестность) +"</vet:locationProsperity>
            |              <vet:importPermit />
            |              <vet:transferPermit />
            |              <vet:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vet:specialMarks>
            |              <vet:withdrawedBy />
            |              <vet:utilizedBy />
            |            </vet:vetCertificate>
            |    </vet:accompanyingForms>
            |  </merc:delivery>
            |  <merc:deliveryFacts>
            |    <vet:vetCertificatePresence>PAPER</vet:vetCertificatePresence>
            |    <vet:docInspection>
            |      <vet:responsible>
            |        <com:login>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_login")) +"</com:login>
            |      </vet:responsible>
            |      <vet:result>CORRESPONDS</vet:result>
            |    </vet:docInspection>
            |    <vet:vetInspection>
            |      <vet:responsible>
            |        <com:login>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_login")) +"</com:login>
            |      </vet:responsible>
            |      <vet:result>CORRESPONDS</vet:result>
            |    </vet:vetInspection>
            |    <vet:decision>ACCEPT_ALL</vet:decision>
            |  </merc:deliveryFacts>
            |</merc:processIncomingConsignmentRequest>
   |          </app:data>
   |         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";

    Иначе
        //Электронный
        Запрос="<merc:processIncomingConsignmentRequest>
            |  <merc:localTransactionId>[GUID]</merc:localTransactionId>
            |  <merc:initiator>
            |    <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
            |  </merc:initiator>
            |        <merc:delivery>
            |          <vet:deliveryDate>" + Преобразовать_Дата_в_Строка(док.ТтнДата, "T00:00:00") + "</vet:deliveryDate>
            |          <vet:consignor>
            |            <ent:businessEntity>
            |              <base:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</base:guid>
            |            </ent:businessEntity>
            |            <ent:enterprise>
            |              <base:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</base:guid>
            |            </ent:enterprise>
            |          </vet:consignor>
            |          <vet:consignee>
            |            <ent:businessEntity>
            |              <base:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</base:guid>
            |            </ent:businessEntity>
            |            <ent:enterprise>
            |              <base:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</base:guid>
            |            </ent:enterprise>
            |          </vet:consignee>
            |       <vet:consignment>
            |            <vet:productType>"+ док.Продукция.Тип +"</vet:productType>
            |            <vet:product>
            |              <base:guid>"+ СокрЛП(док.Продукция.GUID) +"</base:guid>
            |            </vet:product>
            |            <vet:subProduct>
            |              <base:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</base:guid>
            |            </vet:subProduct>
            |            <vet:productItem>
            |";
        Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
            Запрос = Запрос + "
            |              <base:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</base:guid>
            |";
        КонецЕсли;
        Запрос = Запрос + "
            |              <prod:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</prod:name>
            |            </vet:productItem>
            |            <vet:volume>"+ Док.Количество +"</vet:volume>
            |            <vet:unit>
            |              <base:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</base:guid>
            |            </vet:unit>
            |";
        Если док.КоличествоМест>0 Тогда
            Запрос=Запрос+"
            |            <vet:packingList>
            |              <com:packingForm>
            |                <base:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</base:uuid>
            |              </com:packingForm>
            |            </vet:packingList>
            |            <vet:packingAmount>"+ док.КоличествоМест +"</vet:packingAmount>
            |";
		КонецЕсли;
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(док, "vet");
//        Запрос=Запрос+"
//            |            <vet:dateOfProduction>
//            |";
//		Если ПустаяДата(док.ДатаИзготовления1) =0 Тогда
//
//		КонецЕсли;
//        Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
//            Запрос = Запрос + "
//            |              <vet:firstDate>
//            |                <base:year>"+ДатаГод(док.ДатаИзготовления1)+"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:firstDate>
//            |";
//        КонецЕсли;
//        Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и
//                (док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//            Запрос = Запрос + "
//            |              <vet:secondDate>
//            |                <base:year>"+ ДатаГод(док.ДатаИзготовления2) +"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:secondDate>
//            |";
//        КонецЕсли;
//        Запрос = Запрос + "
//            |              <vet:informalDate />
//            |            </vet:dateOfProduction>
//            |            <vet:expiryDate>
//            |";
//
//        Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
//            Запрос = Запрос + "
//            |              <vet:firstDate>
//            |                <base:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:firstDate>
//            |";
//        КонецЕсли;
//        Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и
//                (док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//            Запрос = Запрос + "
//            |              <vet:secondDate>
//            |                <base:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</base:year>
//            |                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</base:month>
//            |                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</base:day>
//            |                <base:hour>0</base:hour>
//            |              </vet:secondDate>
//            |";
//        КонецЕсли;
        //Запрос = Запрос + "
        //    |              <vet:informalDate />
        //    |            </vet:expiryDate>
		//	|";
		Запрос=Запрос+"
            |           <vet:perishable>"+булево(док.скоропортящийся)+"</vet:perishable>
            |            <vet:countryOfOrigin>
            |              <base:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</base:uuid>
            |            </vet:countryOfOrigin>
            |";

        Если ПустоеЗначение(Док.ПроизводительСписок)=0 Тогда     //ЖД
            Запрос=Запрос+"
            |            <vet:producerList>
            |";
            СпПроизводители = ЗначениеИзСтроки(Док.ПроизводительСписок);
            к=0;
            Для к = 1 По СпПроизводители.РазмерСписка() Цикл
                Запрос=Запрос+"
                |               <ent:producer>
                |                   <ent:enterprise>
                |                       <base:guid>"+ СокрЛП(СпПроизводители.ПолучитьЗначение(к).GUID) +"</base:guid>
                |                   </ent:enterprise>
                |                   <ent:role>PRODUCER</ent:role>
                |               </ent:producer>
                |";
            КонецЦикла;
            Запрос=Запрос+"
            |            </vet:producerList>
            |";
        КонецЕсли;
        Если ПустоеЗначение(Док.МаркировкаСписок)=0 Тогда     //ЖД
            Запрос=Запрос+"
            |            <vet:productMarkingList>
            |";
            МаркировкаСписок = ЗначениеИзСтроки(Док.МаркировкаСписок);
            к=0;
            Для к = 1 По МаркировкаСписок.РазмерСписка() Цикл
                Запрос = Запрос + "
                |              <vet:productMarking>"+  МаркировкаСписок.Получитьзначение(к) +"</vet:productMarking>
                |";
            КонецЦикла;
            Запрос=Запрос+"
            |            </vet:productMarkingList>
            |";
        Иначе
            Запрос=Запрос+"
            |            <vet:productMarkingList />
            |";
        КонецЕсли;
        Запрос=Запрос+"
            |           <vet:lowGradeCargo>"+булево(док.некачественный)+"</vet:lowGradeCargo>
            |           <vet:productName>"+ СокрЛП(док.НаименованиеПродукции) +"</vet:productName>
            |           <vet:sourceStockEntry />
            |      </vet:consignment>
            |
            |    <vet:accompanyingForms>
            |      <vet:waybill>
            |        <shp:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</shp:issueSeries>
            |        <shp:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</shp:issueNumber>
            |        <shp:issueDate>"+ Преобразовать_Дата_в_Строка(док.ТтнДата) +"</shp:issueDate>
            |        <shp:type>1</shp:type>
            |        <shp:consignor>
            |          <ent:businessEntity />
            |          <ent:enterprise />
            |        </shp:consignor>
            |        <shp:consignee>
            |          <ent:businessEntity />
            |          <ent:enterprise />
            |        </shp:consignee>
            |";
        Если ПустоеЗначение(СокрЛП(док.Перевозчик_ХозСубъект.GUID))=0 Тогда  //ЖД
            Запрос=Запрос+"
            |        <shp:broker>
            |          <base:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</base:guid>
            |        </shp:broker>
            |";
        КонецЕсли;
        Если ПустоеЗначение(СокрЛП(док.ТипТС))=0 Тогда  //ЖД
            Запрос=Запрос+"
            |        <shp:transportInfo>
            |          <shp:transportType>"+СокрЛП(док.ТипТС)+"</shp:transportType>
            |          <shp:transportNumber>
            |";
            Если СокрЛП(Док.ТипТС) = "1" Тогда
                Запрос = Запрос+"
            |            <shp:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</shp:vehicleNumber>
            |";
            иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
            Запрос = Запрос+"
            |            <shp:wagonNumber>"+ СокрЛП(док.номерАвто) +"</shp:wagonNumber>
            |";
            иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
            Запрос = Запрос+"
            |            <shp:flightNumber>"+ СокрЛП(док.номерАвто) +"</shp:flightNumber>
            |";
            иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
            Запрос = Запрос+"
            |            <shp:shipName>"+ СокрЛП(док.номерАвто) +"</shp:shipName>
            |";

            КонецЕсли;
            Запрос=Запрос+"
            |          </shp:transportNumber>
            |        </shp:transportInfo>
            |";
        КонецЕсли;

        Запрос=Запрос+"
        |        <shp:transportStorageType>"+ ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</shp:transportStorageType>
        |        <shp:cargoReloadingPointList />
        |      </vet:waybill>
        |      <vet:vetCertificate>
        |        <base:uuid>"+ СокрЛП(док.UUID) +"</base:uuid>
        |      </vet:vetCertificate>
        |    </vet:accompanyingForms>
        |  </merc:delivery>
        |  <merc:deliveryFacts>
        |    <vet:vetCertificatePresence>ELECTRONIC</vet:vetCertificatePresence>
        |    <vet:docInspection>
        |      <vet:responsible>
        |        <com:login>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_login")) +"</com:login>
        |      </vet:responsible>
        |      <vet:result>CORRESPONDS</vet:result>
        |    </vet:docInspection>
        |    <vet:vetInspection>
        |      <vet:responsible>
        |        <com:login>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_login")) +"</com:login>
        |      </vet:responsible>
        |      <vet:result>CORRESPONDS</vet:result>
        |    </vet:vetInspection>
        |    <vet:decision>ACCEPT_ALL</vet:decision>
        |  </merc:deliveryFacts>
        |</merc:processIncomingConsignmentRequest>
   |          </app:data>
   |         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";

    КонецЕсли;

	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_Входящий(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_Входящий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_Входящий(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если Проверка_ВСД_Входящий(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	ЗапросXML = ВСД_входящий_ЗапросXML(док);

	appID = ОтправитьТранзакцию(ЗапросXML, док);

	Возврат appID;

КонецФункции

//=========================== ВСД Исходящий =================================

//Функция Проверка_ВСД_Исходящий(док)
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_Исходящий");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.Проверка_ВСД_Исходящий(док);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Результат = 1; //все в порядке
//
//	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда
//		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
//		Результат = 0;
//	КонецЕсли;
//
//	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда
//		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда
//		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда
//		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда
//		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда
//		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.Партия.GUID)=1 Тогда
//		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда
//		Сообщить("Не указан Партия.ВсдДата","!");
//		Результат = 0;
//	КонецЕсли;
//	//Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда
//	//	Сообщить("Не указан Партия.ФормаУпаковки","!");
//	//	Результат = 0;
//	//КонецЕсли;
//	Если ПустоеЗначение(док.Продукция)=1 Тогда
//		Сообщить("Не указан Продукция","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.ВидПродукции)=1 Тогда
//		Сообщить("Не указан ВидПродукции","!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение(док.НаименованиеПродукции)=1 Тогда
//		Сообщить("Не указан НаименованиеПродукции","!");
//		Результат = 0;
//	КонецЕсли;
//	//Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда
//	//	Сообщить("Не указан ЕдиницаИзмерения","!");
//	//	Результат = 0;
//	//КонецЕсли;
//	//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда
//	//	Сообщить("Не указан ФормаУпаковки","!");
//	//	Результат = 0;
//	//КонецЕсли;
//
//	Если ПустоеЗначение(док.applicationID)=0 Тогда
//		Сообщить("ВСД уже отправлен "+док,"!");
//		Результат = 0;
//	КонецЕсли;
//	Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда
//		Сообщить("ВСД уже отправлен "+док,"!");
//		Результат = 0;
//	КонецЕсли;
//	//Если док.ФормаВСД=0 Тогда
//	//	Сообщить("Не указана форма ВСД "+док,"!");
//	//	Результат = 0;
//	//КонецЕсли;
//	Если  док.Количество=0 Тогда
//		Сообщить("не указано Количество "+док,"!");
//		Результат = 0;
//	КонецЕсли;
//	//Если док.КоличествоМест =0 Тогда
//	//	Сообщить("не указано Количество коробов"+док,"!");
//	//	Результат = 0;
//	//КонецЕсли;
//
//	Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда
//		Сообщить("Не указан Партия.Продукция.Тип","!");
//		Результат = 0;
//	КонецЕсли;
//
//
//	Возврат Результат;
//КонецФункции
//
//Функция ВСД_исходящий_ЗапросXML(док)
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_исходящий_ЗапросXML");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ВСД_исходящий_ЗапросXML(док);
//	КонецЕсли;
//	//}
//	//док = СоздатьОбъект("Документ.ВСД_исходящий");
//
//	Запрос="<prepareOutcomingConsignmentRequest
//		|  xmlns:sch='http://www.w3.org/2001/XMLSchema'
//		|  xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
//		|  xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment'
//		|  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
//		|  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
//		|  xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common'
//		|  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
//		|  xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production'
//		|  xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar'
//		|  xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//		|  xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
//		|  <localTransactionId>[GUID]</localTransactionId>
//		|  <initiator>
//		|    <co:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</co:login>
//		|  </initiator>
//			|        <delivery>
//			|          <vd:deliveryDate>" + Преобразовать_Дата_в_Строка(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
//			|          <vd:consignor>
//			|            <ent:businessEntity>
//			|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
//			|            </ent:businessEntity>
//			|            <ent:enterprise>
//			|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
//			|            </ent:enterprise>
//			|          </vd:consignor>
//			|          <vd:consignee>
//			|            <ent:businessEntity>
//			|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
//			|            </ent:businessEntity>
//			|            <ent:enterprise>
//			|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
//			|            </ent:enterprise>
//			|          </vd:consignee>
//			|		<vd:consignment>
//			|            <vd:productType>"+ док.Партия.Продукция.Тип +"</vd:productType>
//			|            <vd:product>
//			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
//			|            </vd:product>
//			|            <vd:subProduct>
//			|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
//			|            </vd:subProduct>
//			|            <vd:productItem>
//			|";
//		Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
//			Запрос = Запрос + "
//			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</bs:guid>
//			|";
//		КонецЕсли;
//		Запрос = Запрос + "
//			|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
//			|            </vd:productItem>
//			|            <vd:volume>"+ Док.Количество +"</vd:volume>
//			|            <vd:unit>
//			|              <bs:guid>"+ СокрЛП(док.Партия.ЕдиницаИзмерения.GUID) +"</bs:guid>
//			|            </vd:unit>
//			|";
//		Если док.КоличествоМест>0 Тогда
//			Запрос=Запрос+"
//			|            <vd:packingList>
//			|              <co:packingForm>
//			|                <bs:uuid>"+ СокрЛП(док.Партия.ФормаУпаковки.GUID) +"</bs:uuid>
//			|              </co:packingForm>
//			|            </vd:packingList>
//			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
//			|";
//		КонецЕсли;
//		Запрос=Запрос+"
//			|            <vd:dateOfProduction>
//			|";
//		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
//			Запрос = Запрос + "
//			|              <vd:firstDate>
//			|                <bs:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</bs:year>
//			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</bs:month>
//			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</bs:day>
//			|                <bs:hour>0</bs:hour>
//			|              </vd:firstDate>
//			|";
//		КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и
//				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
//			Запрос = Запрос + "
//			|              <vd:secondDate>
//			|                <bs:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</bs:year>
//			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</bs:month>
//			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</bs:day>
//			|                <bs:hour>0</bs:hour>
//			|              </vd:secondDate>
//			|";
//		КонецЕсли;
//		Запрос = Запрос + "
//			|              <vd:informalDate />
//			|            </vd:dateOfProduction>
//			|            <vd:expiryDate>
//			|";
//
//		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
//			Запрос = Запрос + "
//				|              <vd:firstDate>
//				|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</bs:year>
//				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</bs:month>
//				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</bs:day>
//				|                <bs:hour>0</bs:hour>
//				|              </vd:firstDate>
//				|";
//		КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и
//				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
//			Запрос = Запрос + "
//				|              <vd:secondDate>
//				|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</bs:year>
//				|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</bs:month>
//				|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</bs:day>
//				|                <bs:hour>0</bs:hour>
//				|              </vd:secondDate>
//				|";
//		КонецЕсли;
//		Запрос = Запрос + "
//			|              <vd:informalDate />
//			|            </vd:expiryDate>
//			|            <vd:perishable>"+ булево(док.perishable) +"</vd:perishable>
//			|            <vd:countryOfOrigin>
//			|              <bs:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</bs:uuid>
//			|            </vd:countryOfOrigin>
//			|      		 <vd:producerList>
//			|        		<ent:producer>
//			|          			<ent:enterprise>
//			|            			<bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
//			|          			</ent:enterprise>
//			|        		</ent:producer>
//			|      		 </vd:producerList>
//			|            <vd:productMarkingList />
//			|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
//			|            <vd:productName>"+ СокрЛП(док.Партия.НаименованиеПродукции) +"</vd:productName>
//			|            <vd:sourceStockEntry>
//			|              <bs:guid>"+ СокрЛП(док.Партия.GUID) +"</bs:guid>
//			|            </vd:sourceStockEntry>
//			|      </vd:consignment>
//			|    <vd:accompanyingForms>
//			|      <vd:waybill>
//			|        <sh:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</sh:issueSeries>
//			|        <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
//			|        <sh:issueDate>"+ Преобразовать_Дата_в_Строка(док.ТтнДата) +"</sh:issueDate>
//			|        <sh:type>1</sh:type>
//			|        <sh:consignor>
//			|          <ent:businessEntity />
//			|          <ent:enterprise />
//			|        </sh:consignor>
//			|        <sh:consignee>
//			|          <ent:businessEntity />
//			|          <ent:enterprise />
//			|        </sh:consignee>
//			|        <sh:broker>
//			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
//			|        </sh:broker>
//			|        <sh:transportInfo>
//			|          <sh:transportType>1</sh:transportType>
//			|          <sh:transportNumber>
//			|            <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
//			|          </sh:transportNumber>
//			|        </sh:transportInfo>
//			|        <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</sh:transportStorageType>
//			|        <sh:cargoReloadingPointList />
//			|      </vd:waybill>
//			|      <vd:vetCertificate>
//			|        <vd:issueSeries />
//			|        <vd:issueNumber />
//			|        <vd:issueDate>"+ Преобразовать_Дата_в_Строка(док.ТтнДата) +"</vd:issueDate>
//			|        <vd:form>" + СокрЛП(ПолучитьКонстанту("ФормаВСД")) + "</vd:form>
//			|          <vd:consignor>
//			|            <ent:businessEntity>
//			|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
//			|            </ent:businessEntity>
//			|            <ent:enterprise>
//			|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
//			|            </ent:enterprise>
//			|          </vd:consignor>
//			|          <vd:consignee>
//			|            <ent:businessEntity>
//			|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
//			|            </ent:businessEntity>
//			|            <ent:enterprise>
//			|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
//			|            </ent:enterprise>
//			|          </vd:consignee>
//			|
//			|        <vd:batch>
//			|            <vd:productType>"+ док.Партия.Продукция.Тип +"</vd:productType>
//			|            <vd:product>
//			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</bs:guid>
//			|            </vd:product>
//			|            <vd:subProduct>
//			|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
//			|            </vd:subProduct>
//			|            <vd:productItem>
//			|";
//		Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
//			Запрос = Запрос + "
//			|              <bs:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</bs:guid>
//			|";
//		КонецЕсли;
//		Запрос = Запрос + "
//			|              <pr:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</pr:name>
//			|            </vd:productItem>
//			|            <vd:volume>"+ Док.Количество +"</vd:volume>
//			|            <vd:unit>
//			|              <bs:guid>"+ СокрЛП(док.Партия.ЕдиницаИзмерения.GUID) +"</bs:guid>
//			|            </vd:unit>
//			|";
//		Если док.КоличествоМест>0 Тогда
//			Запрос=Запрос+"
//			|            <vd:packingList>
//			|              <co:packingForm>
//			|                <bs:uuid>"+ СокрЛП(док.Партия.ФормаУпаковки.GUID) +"</bs:uuid>
//			|              </co:packingForm>
//			|            </vd:packingList>
//			|            <vd:packingAmount>"+ док.КоличествоМест +"</vd:packingAmount>
//			|";
//		КонецЕсли;
//		Запрос=Запрос+"
//			|            <vd:dateOfProduction>
//			|";
//
//
//		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
//			Запрос = Запрос + "
//			|              <vd:firstDate>
//			|                <bs:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</bs:year>
//			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</bs:month>
//			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</bs:day>
//			|                <bs:hour>0</bs:hour>
//			|              </vd:firstDate>
//			|";
//		КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и
//				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
//			Запрос = Запрос + "
//			|              <vd:secondDate>
//			|                <bs:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</bs:year>
//			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</bs:month>
//			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</bs:day>
//			|                <bs:hour>0</bs:hour>
//			|              </vd:secondDate>
//			|";
//		КонецЕсли;
//		Запрос = Запрос + "
//			|              <vd:informalDate />
//			|            </vd:dateOfProduction>
//			|            <vd:expiryDate>
//			|";
//		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
//			Запрос = Запрос + "
//			|              <vd:firstDate>
//			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</bs:year>
//			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</bs:month>
//			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</bs:day>
//			|                <bs:hour>0</bs:hour>
//			|              </vd:firstDate>
//			|";
//		КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и
//				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
//			Запрос = Запрос + "
//			|              <vd:secondDate>
//			|                <bs:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</bs:year>
//			|                <bs:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</bs:month>
//			|                <bs:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</bs:day>
//			|                <bs:hour>0</bs:hour>
//			|              </vd:secondDate>
//			|";
//		КонецЕсли;
//				Запрос = Запрос + "
//			|              <vd:informalDate />
//			|            </vd:expiryDate>
//			|            <vd:perishable>"+ булево(док.perishable) +"</vd:perishable>
//			|            <vd:countryOfOrigin>
//			|              <bs:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</bs:uuid>
//			|            </vd:countryOfOrigin>
//			|                <vd:producerList>
//			|                  <ent:producer>
//			|                    <ent:enterprise>
//			|                      <bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
//			|                    </ent:enterprise>
//			|                  </ent:producer>
//			|                </vd:producerList>
//			|                <vd:productMarkingList />
//			|                <vd:lowGradeCargo>false</vd:lowGradeCargo>
//			|              </vd:batch>
//			|              <vd:purpose>
//			|                <bs:guid>"+ СокрЛП( ПолучитьКонстанту("Цель").Guid ) +"</bs:guid>
//			|              </vd:purpose>
//			|              <vd:broker>
//			|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
//			|              </vd:broker>
//			|              <vd:transportInfo>
//			|                <sh:transportType>1</sh:transportType>
//			|                <sh:transportNumber>
//			|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
//			|                </sh:transportNumber>
//			|              </vd:transportInfo>
//			|              <vd:transportStorageType>"+ ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</vd:transportStorageType>
//			|              <vd:cargoReloadingPointList />
//			|              <vd:waybillSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:waybillSeries>
//			|              <vd:waybillNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:waybillNumber>
//			|              <vd:waybillDate>"+ Преобразовать_Дата_в_Строка(док.ТтнДата) +"</vd:waybillDate>
//			|              <vd:waybillType>1</vd:waybillType>
//			|              <vd:cargoInspected>"+ булево(док.cargoInspected) +"</vd:cargoInspected>
//			|              <vd:cargoExpertized>"+  булево(док.cargoExpertized) +"</vd:cargoExpertized>
//			|              <vd:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vd:expertiseInfo>
//			|              <vd:confirmedBy>
//			|                <co:login>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_login")) +"</co:login>
//			|              </vd:confirmedBy>
//			|              <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
//			|              <vd:importPermit />
//			|              <vd:transferPermit />
//			|              <vd:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vd:specialMarks>
//			|              <vd:withdrawedBy />
//			|              <vd:utilizedBy />
//			|            </vd:vetCertificate>
//			|    </vd:accompanyingForms>
//			|  </delivery>
//			|</prepareOutcomingConsignmentRequest>
//			|";
//
//	Возврат Запрос;
//КонецФункции

//Функция Отправить_ВСД_Исходящий(док) Экспорт
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_Исходящий");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.Отправить_ВСД_Исходящий(док);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Если Проверка_ВСД_исходящий(док)=0 Тогда
//		Возврат 0;
//	КонецЕсли;
//
//	//Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
//	//	ИнициализацияКомпоненты(док.Фирма);
//	//Иначе
//	//	ИнициализацияКомпоненты();
//	//КонецЕсли;
//
//
//	ЗапросXML = ВСД_исходящий_ЗапросXML(док);
//
//	appID = ОтправитьЗапросXML(ЗапросXML, док);
//
//	Возврат appID;
//
//КонецФункции

//=========================== ВСД Производство ===============================

Функция ВСД_производство_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_производство_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_производство_ЗапросXML(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_производство");

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'
	|					xmlns:dt='http://api.vetrf.ru/schema/cdm/base'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + ПолучитьКонстанту("param_issuer_id") + "</app:issuerId>
	|            <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|
				|<merc:registerProductiveBatchRequest>
				|        <merc:localTransactionId>[GUID]</merc:localTransactionId>
				|        <merc:initiator>
				|          <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
				|        </merc:initiator>
				|        <merc:enterprise>
				|            <base:guid>"+ СокрЛП(док.Производитель_площадка.GUID) +"</base:guid>
				|        </merc:enterprise>
				|        <merc:productionOperation>
				|";

		Если Док.ЗавершитьОперацию=0 Тогда
			Запрос=Запрос+"
			|        <vet:operationId>"+ СокрЛП(Док.operationId) +"</vet:operationId>
			|";
		КонецЕсли;

		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			//порядок добавления имеет значение -
			// 1. rawBatch = списание
			Если док.ВидДвижения=2 Тогда
				Запрос=Запрос+"
				| <vet:rawBatch>
				|    <vet:sourceStockEntry>
				|       <base:guid>" + СокрЛП(док.Партия.guid) + "</base:guid>
				|    </vet:sourceStockEntry>
				|    <vet:volume>"+ док.Количество +"</vet:volume>
				|    <vet:unit>
				|       <base:guid>"+ СокрЛП(док.ЕдиницаИзмерения.Guid) +"</base:guid>
				|    </vet:unit>
				| </vet:rawBatch>
				|";
			КонецЕсли;
		КонецЦикла;

		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			//порядок добавления имеет значение -
			// 1. productiveBatch = создание продукции
			Если док.ВидДвижения=1 Тогда
				Запрос=Запрос+"
				|          <vet:productiveBatch>
				|            <vet:productType>"+ док.Продукция.Тип +"</vet:productType>
				|            <vet:product>
				|              <base:guid>"+ СокрЛП(док.Продукция.GUID) +"</base:guid>
				|            </vet:product>
				|            <vet:subProduct>
				|              <base:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</base:guid>
				|            </vet:subProduct>
				|            <vet:productItem>
				|";
				Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
					Запрос = Запрос+ "
					|              <base:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</base:guid>
					|";
				КонецЕсли;
				Запрос = Запрос+ "
				|              <prod:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</prod:name>
				|            </vet:productItem>
				|            <vet:volume>"+ Док.Количество +"</vet:volume>
				|            <vet:unit>
				|              <base:uuid>"+ СокрЛП(док.ЕдиницаИзмерения.UUID) +"</base:uuid>
				|            </vet:unit>
				|";
				Если Док.КоличествоМест>0 Тогда
					Запрос=Запрос+"
					|            <vet:packingList>
					|              <com:packingForm>
					|                <base:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</base:uuid>
					|              </com:packingForm>
					|            </vet:packingList>
					|            <vet:packingAmount>"+ док.КоличествоМест +"</vet:packingAmount>
					|";
				КонецЕсли;

				Запрос = Запрос + Изготовление_СрокГодности_в_XML(док, "vet");

//				Запрос=Запрос+"
//				|            <vet:dateOfProduction>
//				|";
//				Если (ПустоеЗначение(док.ДатаИзготовления1)=0) Тогда
//					Запрос = Запрос+ "
//				|              <vet:firstDate>
//				|                <base:year>"+ДатаГод(док.ДатаИзготовления1)+"</base:year>
//				|                <base:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</base:month>
//				|                <base:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</base:day>
//				|                <base:hour>0</base:hour>
//				|              </vet:firstDate>
//				|";
//				КонецЕсли;
//				Если ((ПустоеЗначение(док.ДатаИзготовления2)=0) и
//						(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//					Запрос=Запрос+"
//					|              <vet:secondDate>
//					|                <base:year>"+ ДатаГод(док.ДатаИзготовления2) +"</base:year>
//					|                <base:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</base:month>
//					|                <base:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</base:day>
//					|                <base:hour>0</base:hour>
//					|              </vet:secondDate>
//					|";
//				КонецЕсли;
//				Запрос=Запрос+"
//				|              <vet:informalDate />
//				|            </vet:dateOfProduction>
//				|            <vet:expiryDate>
//				|";
//
//				Если (ПустоеЗначение(док.ДатаСрокГодности1)=0) Тогда
//					Запрос=Запрос+"
//					|              <vet:firstDate>
//					|                <base:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</base:year>
//					|                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</base:month>
//					|                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</base:day>
//					|                <base:hour>0</base:hour>
//					|              </vet:firstDate>
//					|";
//				КонецЕсли;
//				Если ((ПустоеЗначение(док.ДатаСрокГодности2)=0) и
//						(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//					Запрос=Запрос+"
//					|              <vet:secondDate>
//					|                <base:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</base:year>
//					|                <base:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</base:month>
//					|                <base:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</base:day>
//					|                <base:hour>0</base:hour>
//					|              </vet:secondDate>
//					|";
//				КонецЕсли;
				//Запрос=Запрос+"
				//|              <vet:informalDate />
				//|            </vet:expiryDate>
				//|";
				Запрос=Запрос+"
				|            <vet:perishable>false</vet:perishable>
				|            <vet:countryOfOrigin>
				|              <base:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</base:uuid>
				|            </vet:countryOfOrigin>
				|            <vet:productMarkingList >
				|               <vet:productMarking class='BN'>"+ Сокрлп(док.OperationID) +"</vet:productMarking>
				|            </vet:productMarkingList >
				|            <vet:lowGradeCargo>false</vet:lowGradeCargo>
				|          </vet:productiveBatch>
				|";
			КонецЕсли;

		КонецЦикла;
		Запрос=Запрос+"
		|          <vet:finalizeOperation>"+булево(док.ЗавершитьОперацию)+"</vet:finalizeOperation>
		|        </merc:productionOperation>
		|        <merc:vetDocument>
		|          <vet:cargoInspected>true</vet:cargoInspected>
		|          <vet:cargoExpertized>true</vet:cargoExpertized>
		|          <vet:expertiseInfo>Произ.лабор</vet:expertiseInfo>
		|        </merc:vetDocument>
		|      </merc:registerProductiveBatchRequest>
   |          </app:data>
   |         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";

	возврат Запрос;

КонецФункции

Функция Отправить_ВСД_производство(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_производство(док);
	КонецЕсли;
	//}

	ЗапросXML = ВСД_производство_ЗапросXML(док);

	appID = ОтправитьТранзакцию(ЗапросXML, док);

	Возврат appID;

КонецФункции

//=========================== ВСД Инвентаризация =============================

Функция ВСД_инвентаризация_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_инвентаризация_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_инвентаризация_ЗапросXML(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_инвентаризация");

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'
	|					xmlns:dt='http://api.vetrf.ru/schema/cdm/base'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + ПолучитьКонстанту("param_issuer_id") + "</app:issuerId>
	|            <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|
	|<merc:resolveDiscrepancyRequest>
		|  <merc:localTransactionId>[GUID]</merc:localTransactionId>
		|  <merc:initiator>
		|    <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
		|  </merc:initiator>
		|  <merc:enterprise>
		|    <base:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</base:guid>
		|  </merc:enterprise>
		|  <merc:inventoryDate>"+ Преобразовать_Дата_в_Строка(док.ДатаДок,"T00:00:00") +"</merc:inventoryDate>
		|  <merc:responsible>
		|    <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
		|  </merc:responsible>
		|  <merc:stockDiscrepancy>
		|    <vet:affectedList count='0' total='0' offset='0' />
		|    <vet:resultingList count='"+ док.КоличествоСтрок() +"' total='"+ док.КоличествоСтрок() +"' offset='0'>
		|";

		док.ВыбратьСтроки();
		Пока док.ПолучитьСтроку() = 1 Цикл
			Запрос=Запрос+"
			|      <vet:stockEntry>
			|        <base:uuid>"+ СокрЛП(док.Партия.UUID) +"</base:uuid>
			|        <vet:batch>
			|
			|            <vet:productType>"+ док.Партия.Продукция.Тип +"</vet:productType>
			|            <vet:product>
			|              <base:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</base:guid>
			|            </vet:product>
			|            <vet:subProduct>
			|              <base:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</base:guid>
			|            </vet:subProduct>
			|            <vet:productItem>
			|";
			Если ПустоеЗначение(док.Продукция_Элемент.GUID)=0 Тогда
				Запрос=Запрос+"
				|              <base:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</base:guid>
				|";
			КонецЕсли;
			Запрос=Запрос+"
			|              <prod:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</prod:name>
			|            </vet:productItem>
			|            <vet:volume>"+ Док.Количество +"</vet:volume>
			|            <vet:unit>
			|              <base:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</base:guid>
			|            </vet:unit>";

			Если док.КоличествоМест>0 Тогда
				Запрос=Запрос+"
				|            <vet:packingList>
				|              <com:packingForm>
				|                <base:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</base:uuid>
				|              </com:packingForm>
				|            </vet:packingList>
				|            <vet:packingAmount>"+ док.КоличествоМест +"</vet:packingAmount>
				|";
			КонецЕсли;
			Запрос = Запрос + Изготовление_СрокГодности_в_XML(док, "vet");
//            Запрос=Запрос+"
//			|            <vet:dateOfProduction>
//			|";
//			Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
//				Запрос=Запрос+"
//				|              <vet:firstDate>
//				|                <base:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</base:year>
//				|                <base:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</base:month>
//				|                <base:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</base:day>
//				|                <base:hour>0</base:hour>
//				|              </vet:firstDate>
//				|";
//			КонецЕсли;
//			Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и
//					(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
//				consignment=consignment+"
//				|              <vet:secondDate>
//				|                <base:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</base:year>
//				|                <base:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</base:month>
//				|                <base:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</base:day>
//				|                <base:hour>0</base:hour>
//				|              </vet:secondDate>
//				|";
//			КонецЕсли;
//			Запрос=Запрос+"
//			|              <vet:informalDate />
//			|            </vet:dateOfProduction>
//			|            <vet:expiryDate>
//			|";
//
//			Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
//				Запрос=Запрос+"
//				|              <vet:firstDate>
//				|                <base:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</base:year>
//				|                <base:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</base:month>
//				|                <base:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</base:day>
//				|                <base:hour>0</base:hour>
//				|              </vet:firstDate>
//				|";
//			КонецЕсли;
//			Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и
//					(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
//				Запрос=Запрос+"
//				|              <vet:secondDate>
//				|                <base:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</base:year>
//				|                <base:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</base:month>
//				|                <base:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</base:day>
//				|                <base:hour>0</base:hour>
//				|              </vet:secondDate>
//				|";
//			КонецЕсли;
			//Запрос=Запрос+"
			//|              <vet:informalDate />
			//|            </vet:expiryDate>
			//|";
			Запрос=Запрос+"
			|            <vet:perishable>false</vet:perishable>
			|            <vet:countryOfOrigin>
			|              <base:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</base:uuid>
			|            </vet:countryOfOrigin>
			|";
			Если ПустоеЗначение(док.Производитель_Площадка)=0 Тогда
				Запрос=Запрос+"
				|      		 <vet:producerList>
				|        		<ent:producer>
				|          			<ent:enterprise>
				|            			<base:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</base:guid>
				|          			</ent:enterprise>
				|                   <ent:role>PRODUCER</ent:role>
				|        		</ent:producer>
				|      		 </vet:producerList>
				|";
			КонецЕсли;
			Запрос=Запрос+"
			|            <vet:productMarkingList />
			|            <vet:lowGradeCargo>false</vet:lowGradeCargo>
			|          <vet:owner>
			|            <base:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</base:guid>
			|          </vet:owner>
			|
			|        </vet:batch>
			|      </vet:stockEntry>
			|";
		КонецЦикла;
		Запрос=Запрос+"
		|    </vet:resultingList>
		|  </merc:stockDiscrepancy>
		|  <merc:discrepancyReport>
		|    <vet:issueNumber>"+ Док.НомерДок +"</vet:issueNumber>
		|    <vet:reason />
		|    <vet:description>"+ док.Вид() +"</vet:description>
		|  </merc:discrepancyReport>
		|</merc:resolveDiscrepancyRequest>
   |          </app:data>
   |         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";


	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД_инвентаризация(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_инвентаризация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_инвентаризация(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = 1; //все в порядке

	Если ПустоеЗначение(док.Владелец_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Владелец_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Владелец_площадка.GUID)=1 Тогда
		Сообщить("Не указан Владелец_площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		// Не обязательное условие
		//Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		//	Результат = 0;
		//КонецЕсли;

		Если ПустоеЗначение(док.Партия.GUID)=1 Тогда
			Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда
			Сообщить("Не указан Партия.ВсдДата","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда
			Сообщить("Не указан ФормаУпаковки","!");
			Результат = 0;
		КонецЕсли;
		Если  док.ДатаИзготовления1 = док.ДатаИзготовления2 Тогда
			Сообщить("Совпадают даты ДатаИзготовления1 и ДатаИзготовления2 "+док,"!");
			Результат = 0;
		КонецЕсли;
		Если  док.ДатаСрокГодности1 = док.ДатаСрокГодности2 Тогда
			Сообщить("Совпадают даты ДатаСрокГодности1 и ДатаСрокГодности2 "+док,"!");
			Результат = 0;
		КонецЕсли;

		//Если  док.Количество > док.Партия.Количество Тогда
		//	Сообщить("Списываемое количество в документе больше количества в Партии в строке "+док.НомерСтроки,"!");
		//	Результат = 0;
		//КонецЕсли;

		//Если док.КоличествоМест =0 Тогда
		//	Сообщить("не указано Количество коробов"+док,"!");
		//	Результат = 0;
		//КонецЕсли;

		Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда
			Сообщить("Не указан Партия.Продукция.Тип","!");
			Результат = 0;
		КонецЕсли;

	КонецЦикла;


	Возврат Результат;
КонецФункции

Функция Отправить_ВСД_Инвентаризация(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_Инвентаризация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_Инвентаризация(док);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Если Проверка_ВСД_инвентаризация(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	//
	//Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
	//	ИнициализацияКомпоненты(док.Фирма);
	//Иначе
	//	ИнициализацияКомпоненты();
	//КонецЕсли;

	ЗапросXML = ВСД_инвентаризация_ЗапросXML(док);

	appID = ОтправитьТранзакцию(ЗапросXML, док);

	Возврат appID;

КонецФункции



//=========================== ВСД Транзакция =================================

Функция Проверка_ВСД_транзакция(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_транзакция(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = 1; //все в порядке

	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение(док.Перевозчик_ХозСубъект.GUID)=1 Тогда
	//	Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников","!");
	//	Результат = 0;
	//КонецЕсли;

	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		// Не обязательное условие
		//Если ПустоеЗначение(док.Партия.Производитель_Площадка.GUID)=1 Тогда
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		//	Результат = 0;
		//КонецЕсли;

		Если ПустоеЗначение(док.Партия.GUID)=1 Тогда
			Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда
			Сообщить("Не указан Партия.ВсдДата","!");
			Результат = 0;
		КонецЕсли;
		//Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда
		//	Сообщить("Не указан Партия.ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда
		//	Сообщить("Не указан ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		Если  док.Количество=0 Тогда
			Сообщить("не указано Количество "+док,"!");
			Результат = 0;
		КонецЕсли;

		Если  док.Количество > док.Партия.Количество Тогда
			Сообщить("Списываемое количество в документе больше количества в Партии в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;

		//Если док.КоличествоМест =0 Тогда
		//	Сообщить("не указано Количество коробов"+док,"!");
		//	Результат = 0;
		//КонецЕсли;

		Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда
			Сообщить("Не указан Партия.Продукция.Тип","!");
			Результат = 0;
		КонецЕсли;

		Если ПустоеЗначение( ПолучитьКонстанту("Цель") )=1 Тогда
			Сообщить("Не указан параметр Цель (Назначение грузов).
			|Выполните начальную инициализацию","!");
			Результат = 0;
		КонецЕсли;


	КонецЦикла;

	Если ПустоеЗначение(док.ТермическоеСостояние)=1 Тогда
		Сообщить("В "+док+" не указано ТермическоеСостояние","!");
		Результат = 0;
	КонецЕсли;
	//Если ПустоеЗначение( СокрЛП(док.UUID) )=0 Тогда
	//	Сообщить("ВСД уже отправлен "+док,"!");
	//	Результат = 0;
	//КонецЕсли;
	//Если док.ФормаВСД=0 Тогда
	//	Сообщить("Не указана форма ВСД "+док,"!");
	//	Результат = 0;
	//КонецЕсли;


	Возврат Результат;
КонецФункции

Функция ВСД_транзакция_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_транзакция_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_транзакция_ЗапросXML(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_транзакция");

	Запрос_Шапка = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'
	|					xmlns:dt='http://api.vetrf.ru/schema/cdm/base'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + ПолучитьКонстанту("param_issuer_id") + "</app:issuerId>
	|            <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|<merc:prepareOutcomingConsignmentRequest xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
	|        <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|        <merc:initiator>
	|          <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
	|        </merc:initiator>
	|";

	delivery = "
	|        <merc:delivery>
	|          <vet:deliveryDate>" + Преобразовать_Дата_в_Строка(док.ТтнДата, "T00:00:00") + "</vet:deliveryDate>
	|          <vet:consignor>
	|            <ent:businessEntity>
	|              <base:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</base:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <base:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</base:guid>
	|            </ent:enterprise>
	|          </vet:consignor>
	|          <vet:consignee>
	|            <ent:businessEntity>
	|              <base:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</base:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <base:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</base:guid>
	|            </ent:enterprise>
	|          </vet:consignee>
	|";

	consignment=""; vetCertificate ="";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		consignment = consignment+ "
		|          <vet:consignment id='id"+ док.НомерСтроки +"'>
		|            <vet:productType>"+ док.Партия.Продукция.Тип +"</vet:productType>
		|            <vet:product>
		|              <base:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</base:guid>
		|            </vet:product>
		|            <vet:subProduct>
		|              <base:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</base:guid>
		|            </vet:subProduct>
		|            <vet:productItem>
		|";
		Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
			consignment = consignment+ "
			|              <base:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</base:guid>
			|";
		Иначе
			consignment = consignment+ "
			|              <prod:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</prod:name>
			|";

		КонецЕсли;
		// планируют добавить реквизиты в Ветис API в марте
		//Если ПустоеЗначение(док.КодПродукции)=0 Тогда
		//	consignment = consignment+ "
		//	|              <prod:сode>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</prod:сode>
		//	|";
		//КонецЕсли;
		//Если ПустоеЗначение(док.Штрихкод)=0 Тогда
		//	consignment = consignment+ "
		//	|              <prod:globalID>"+ СокрЛП(док.Штрихкод) +"</prod:globalID>
		//	|";
		//КонецЕсли;
		consignment = consignment+ "
		//|              <prod:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</prod:name>
		|            </vet:productItem>
		|            <vet:volume>"+ Док.Количество +"</vet:volume>
		|            <vet:unit>
		|              <base:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</base:guid>
		|            </vet:unit>
		|";

		Если док.КоличествоМест>0 Тогда
			consignment = consignment+ "
			|            <vet:packingList>
			|              <com:packingForm>
			|                <base:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</base:uuid>
			|              </com:packingForm>
			|            </vet:packingList>
			|            <vet:packingAmount>"+ док.КоличествоМест +"</vet:packingAmount>
			|";
		КонецЕсли;
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(док, "vet");
//		consignment = consignment+ "
//		|            <vet:dateOfProduction>
//		|";
//		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
//			consignment = consignment+ "
//		|              <vet:firstDate>
//		|                <base:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</base:year>
//		|                <base:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</base:month>
//		|                <base:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</base:day>
//		|                <base:hour>0</base:hour>
//		|              </vet:firstDate>
//		|";
//	КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и
//				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
//			consignment=consignment+"
//			|              <vet:secondDate>
//			|                <base:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</base:year>
//			|                <base:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</base:month>
//			|                <base:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</base:day>
//			|                <base:hour>0</base:hour>
//			|              </vet:secondDate>
//			|";
//		КонецЕсли;
//		consignment=consignment+"
//		|              <vet:informalDate />
//		|            </vet:dateOfProduction>
//		|            <vet:expiryDate>
//		|";
//
//		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
//			consignment=consignment+"
//			|              <vet:firstDate>
//			|                <base:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</base:year>
//			|                <base:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</base:month>
//			|                <base:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</base:day>
//			|                <base:hour>0</base:hour>
//			|              </vet:firstDate>
//			|";
//		КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и
//				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
//			consignment=consignment+"
//			|              <vet:secondDate>
//			|                <base:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</base:year>
//			|                <base:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</base:month>
//			|                <base:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</base:day>
//			|                <base:hour>0</base:hour>
//			|              </vet:secondDate>
//			|";
//		КонецЕсли;
		//consignment=consignment+"
		//|              <vet:informalDate />
		//|            </vet:expiryDate>
		//|";
		Запрос=Запрос+"
		|            <vet:perishable>false</vet:perishable>
		|            <vet:countryOfOrigin>
		|              <base:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</base:uuid>
		|            </vet:countryOfOrigin>
		|            <vet:producerList />
		|            <vet:productMarkingList />
		|            <vet:lowGradeCargo>false</vet:lowGradeCargo>
		|            <vet:productName>"+ СокрЛП(док.Партия.НаименованиеПродукции) +"</vet:productName>
		|            <vet:productCode />
		|            <vet:sourceStockEntry>
		|              <base:guid>"+ СокрЛП(док.Партия.GUID) +"</base:guid>
		|            </vet:sourceStockEntry>
		|          </vet:consignment>
		|";

		vetCertificate  = vetCertificate + "
		|            <vet:vetCertificate for='id"+ док.НомерСтроки +"'>
		|              <vet:issueSeries />
		|              <vet:issueNumber />
		|              <vet:issueDate>"+ Преобразовать_Дата_в_Строка(док.ДатаДок) +"</vet:issueDate>
		|              <vet:form>" + СокрЛП(ПолучитьКонстанту("ФормаВСД")) + "</vet:form>
		|          <vet:consignor>
		|            <ent:businessEntity>
		|              <base:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</base:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <base:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</base:guid>
		|            </ent:enterprise>
		|          </vet:consignor>
		|          <vet:consignee>
		|            <ent:businessEntity>
		|              <base:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</base:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <base:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</base:guid>
		|            </ent:enterprise>
		|          </vet:consignee>
		|              <vet:batch>
		|            <vet:productType>"+ док.Партия.Продукция.Тип +"</vet:productType>
		|            <vet:product>
		|              <base:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</base:guid>
		|            </vet:product>
		|            <vet:subProduct>
		|              <base:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</base:guid>
		|            </vet:subProduct>
		|            <vet:productItem>
		|";
		Если ПустоеЗначение(док.Партия.Продукция_Элемент.GUID)=0 Тогда
			vetCertificate=vetCertificate+"
			|              <base:guid>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</base:guid>
			|";
		Иначе
			vetCertificate=vetCertificate+"
			|              <prod:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</prod:name>
			|";

		КонецЕсли;
		// планируют добавить реквизиты в Ветис API в марте
		//Если ПустоеЗначение(док.КодПродукции)=0 Тогда
		//	consignment = consignment+ "
		//	|              <prod:сode>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</prod:сode>
		//	|";
		//КонецЕсли;
		//Если ПустоеЗначение(док.Штрихкод)=0 Тогда
		//	consignment = consignment+ "
		//	|              <prod:globalID>"+ СокрЛП(док.Штрихкод) +"</prod:globalID>
		//	|";
		//КонецЕсли;

		vetCertificate=vetCertificate+"
		//|              <prod:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</prod:name>
		|            </vet:productItem>
		|            <vet:volume>"+ Док.Количество +"</vet:volume>
		|            <vet:unit>
		|              <base:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</base:guid>
		|            </vet:unit>
		|";
		Если док.КоличествоМест>0 Тогда
			vetCertificate=vetCertificate+"
			|            <vet:packingList>
			|              <com:packingForm>
			|                <base:uuid>"+ СокрЛП(док.ФормаУпаковки.GUID) +"</base:uuid>
			|              </com:packingForm>
			|            </vet:packingList>
			|            <vet:packingAmount>"+ док.КоличествоМест +"</vet:packingAmount>
			|";
		КонецЕсли;
		vetCertificate = vetCertificate + Изготовление_СрокГодности_в_XML(док, "vet");
//		vetCertificate=vetCertificate+"
//		|            <vet:dateOfProduction>
//		|";
//
//		Если (ПустоеЗначение(док.Партия.ДатаИзготовления1)=0) Тогда
//			vetCertificate=vetCertificate+"
//			|              <vet:firstDate>
//			|                <base:year>"+ДатаГод(док.Партия.ДатаИзготовления1)+"</base:year>
//			|                <base:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления1) +"</base:month>
//			|                <base:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления1) +"</base:day>
//			|                <base:hour>0</base:hour>
//			|              </vet:firstDate>
//			|";
//		КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаИзготовления2)=0) и
//				(док.Партия.ДатаИзготовления2 > док.Партия.ДатаИзготовления1)) Тогда
//			vetCertificate=vetCertificate+"
//			|              <vet:secondDate>
//			|                <base:year>"+ ДатаГод(док.Партия.ДатаИзготовления2) +"</base:year>
//			|                <base:month>"+ ДатаМесяц(док.Партия.ДатаИзготовления2) +"</base:month>
//			|                <base:day>"+ ДатаЧисло(док.Партия.ДатаИзготовления2) +"</base:day>
//			|                <base:hour>0</base:hour>
//			|              </vet:secondDate>
//			|";
//		КонецЕсли;
//		vetCertificate=vetCertificate+"
//		|              <vet:informalDate />
//		|            </vet:dateOfProduction>
//		|            <vet:expiryDate>
//		|";
//		Если (ПустоеЗначение(док.Партия.ДатаСрокГодности1)=0) Тогда
//			vetCertificate=vetCertificate+"
//			|              <vet:firstDate>
//			|                <base:year>"+ ДатаГод(док.Партия.ДатаСрокГодности1) +"</base:year>
//			|                <base:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности1) +"</base:month>
//			|                <base:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности1) +"</base:day>
//			|                <base:hour>0</base:hour>
//			|              </vet:firstDate>
//			|";
//		КонецЕсли;
//		Если ((ПустоеЗначение(док.Партия.ДатаСрокГодности2)=0) и
//				(док.Партия.ДатаСрокГодности2 > док.Партия.ДатаСрокГодности1)) Тогда
//			vetCertificate=vetCertificate+"
//			|              <vet:secondDate>
//			|                <base:year>"+ ДатаГод(док.Партия.ДатаСрокГодности2) +"</base:year>
//			|                <base:month>"+ ДатаМесяц(док.Партия.ДатаСрокГодности2) +"</base:month>
//			|                <base:day>"+ ДатаЧисло(док.Партия.ДатаСрокГодности2) +"</base:day>
//			|                <base:hour>0</base:hour>
//			|              </vet:secondDate>
//			|";
//		КонецЕсли;
		//vetCertificate=vetCertificate+"
		//|              <vet:informalDate />
		//|            </vet:expiryDate>
		//|";
		vetCertificate = vetCertificate + "
		|            <vet:perishable>false</vet:perishable>
		|            <vet:countryOfOrigin>
		|              <base:uuid>"+ СокрЛП( ПолучитьКонстанту("Страна").UUID) +"</base:uuid>
		|            </vet:countryOfOrigin>
		|            <vet:productMarkingList />
		|            <vet:lowGradeCargo>false</vet:lowGradeCargo>
		//|                <vet:producerList>
		//|                  <ent:producer>
		//|                    <ent:enterprise>
		//|                      <base:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</base:guid>
		//|                    </ent:enterprise>
		//|                  </ent:producer>
		//|                </vet:producerList>
		|              </vet:batch>
		|              <vet:productName>"+ СокрЛП(док.НаименованиеПродукции) +"</vet:productName>
		|              <vet:productCode />
		|              <vet:purpose>
		|                <base:guid>"+ СокрЛП( ПолучитьКонстанту("Цель").Guid ) +"</base:guid>
		|              </vet:purpose>";
		Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
			vetCertificate=vetCertificate+"
			|              <vet:broker>
			|                <base:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</base:guid>
			|              </vet:broker>";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vet:transportInfo>
		|                <shp:transportType>1</shp:transportType>
		|                <shp:transportNumber>
		|                  <shp:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</shp:vehicleNumber>
		|                </shp:transportNumber>
		|              </vet:transportInfo>
		|              <vet:cargoReloadingPointList />
		|              <vet:cargoInspected>"+ булево(док.cargoInspected) +"</vet:cargoInspected>
		|              <vet:cargoExpertized>"+  булево(док.cargoExpertized) +"</vet:cargoExpertized>
		|              <vet:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vet:expertiseInfo>
		|              <vet:confirmedBy>
		|                <com:login>"+ СокрЛП( ПолучитьКонстанту("param_vetdoctor_login")) +"</com:login>
		|              </vet:confirmedBy>
		|              <vet:locationProsperity>"+ СокрЛП(док.Местность) +"</vet:locationProsperity>
		|              <vet:importPermit />
		|              <vet:transferPermit />
		|              <vet:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vet:specialMarks>
		|              <vet:withdrawedBy />
		|              <vet:utilizedBy />
		|            </vet:vetCertificate>
		|";

	КонецЦикла;


	accompanyingForms_Шапка = "
	|          <vet:accompanyingForms>
	|            <vet:waybill>
	|              <shp:issueSeries />
	|              <shp:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</shp:issueNumber>
	|              <shp:issueDate>"+ Преобразовать_Дата_в_Строка(док.ТтнДата) +"</shp:issueDate>
	|              <shp:type>1</shp:type>
	|              <shp:consignor>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </shp:consignor>
	|              <shp:consignee>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </shp:consignee>";
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
		accompanyingForms_Шапка = accompanyingForms_Шапка +"
		|              <shp:broker>
		|                <base:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</base:guid>
		|              </shp:broker>";
	КонецЕсли;
	accompanyingForms_Шапка = accompanyingForms_Шапка +"
	|              <shp:transportInfo>
	|                <shp:transportType>1</shp:transportType>
	|                <shp:transportNumber>
	|                  <shp:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</shp:vehicleNumber>
	|                </shp:transportNumber>
	|              </shp:transportInfo>
	|              <shp:transportStorageType>"+ ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние ) +"</shp:transportStorageType>
	|              <shp:cargoReloadingPointList />
	|            </vet:waybill>
	|";


	ЗапросПодвал = "
	|          </vet:accompanyingForms>
	|        </merc:delivery>
	|      </merc:prepareOutcomingConsignmentRequest>
   |          </app:data>
   |         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		accompanyingForms_Шапка+
		vetCertificate+
		ЗапросПодвал;

	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_транзакция(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_транзакция(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если Проверка_ВСД_транзакция(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	ЗапросXML = ВСД_транзакция_ЗапросXML(док);

	appID = ОтправитьТранзакцию(ЗапросXML, док);

	Возврат appID;

КонецФункции


//=========================== Групповая обработка ВСД =================================

//Функция ОтправитьВсе_ВСД_Исходящий(СписокВСД="",НачДата, КонДата) Экспорт
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД_Исходящий");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД_Исходящий(СписокВСД,НачДата, КонДата) ;
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Состояние("Меркурий: отправка ВСД исходящие");
//	Сообщить("Начало отправки документов","i");
//
//	Если ПустоеЗначение(СписокВСД)=1 тогда
//		СписокВСД = СоздатьОбъект("СписокЗначений");
//		Док = СоздатьОбъект("Документ.ВСД_исходящий");
//		Док.ВыбратьДокументы(НачДата, КонДата);
//		Пока Док.ПолучитьДокумент() = 1 Цикл
//
//			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());
//
//		КонецЦикла;
//	КонецЕсли;
//
//	Для Д=1 По СписокВСД.РазмерСписка() Цикл
//		ВСД = СписокВСД.ПолучитьЗначение(Д);
//
//		Если СокрЛП(ВСД.Статус)="REJECTED" Тогда
//			Продолжить;
//		КонецЕсли;
//		Если ВСД.Проведен()=1 Тогда
//			продолжить;
//		КонецЕсли;
//		Если ВСД.ПометкаУдаления()=1 Тогда
//			Продолжить;
//		КонецЕсли;
//
//		//tt1=_GetPerformanceCounter();
//		Сообщить(""+ВСД+" "+ВСД.Статус);
//
//		Отправить_ВСД_Исходящий( ВСД );
//
//	КонецЦикла;
//
//	Сообщить("Отправка документов завершена","i");
//КонецФункции

Функция ОтправитьВсе_ВСД_Транзакция(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД_Транзакция(СписокВСД,НачДата, КонДата);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов","i");

	Если ПустоеЗначение(СписокВСД)=1 тогда
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_исходящий");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл

			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());

		КонецЦикла;
	КонецЕсли;


	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ВСД.Проведен()=1 Тогда
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);

		Отправить_ВСД_транзакция( ВСД );

	КонецЦикла;

	Сообщить("Отправка документов завершена","i");
КонецФункции

//Функция ПолучитьОтветВсеИсходящиеВСД(НачДата, КонДата) Экспорт
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОтветВсеИсходящиеВСД");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ПолучитьОтветВсеИсходящиеВСД(НачДата, КонДата);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Док = СоздатьОбъект("Документ.ВСД_исходящий");
//	Док.ВыбратьДокументы(НачДата, КонДата);
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//		Если Док.Проведен()=0 Тогда
//			Результат = ПолучитьРезультат_ВСД(СокрЛП(док.applicationID), док );
//		КонецЕсли;
//	КонецЦикла;
//
//КонецФункции

Функция ОтправитьВсе_ВСД_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД_Производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД_Производство(СписокВСД,НачДата, КонДата);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Состояние("Меркурий: отправка ВСД Производство");
	Сообщить("Начало отправки документов","i");

	Если ПустоеЗначение(СписокВСД)=1 тогда
		Сообщить("отправляются ВСД производство за период "+ПериодСтр(НачДата, КонДата));

		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД_Производство");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл

			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());

		КонецЦикла;
	Иначе
		Сообщить("отправляются ВСД производство "+СписокВСД.РазмерСписка()+" документов");
	КонецЕсли;

	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ВСД.Проведен()=1 Тогда
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);

		Отправить_ВСД_производство( ВСД );

	КонецЦикла;

	Сообщить("Отправка документов завершена","i");
КонецФункции

//******************************** Объединение партий ************************

Функция ВСД_ОбъединениеПартий_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_ОбъединениеПартий_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_ОбъединениеПартий_ЗапросXML(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_ОбъединениеПартий");

	запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + ПолучитьКонстанту("param_issuer_id") + "</app:issuerId>
	|            <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|
	|<merc:mergeStockEntriesRequest>
	//|xmlns:sch='http://www.w3.org/2001/XMLSchema'
	//	|  xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	//	|  xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment'
	//	|  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	//	|  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	//	|  xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common'
	//	|  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	//	|  xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production'
	//	|  xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar'
	//	|  xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	//	|  xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
		|        <merc:localTransactionId>[GUID]</merc:localTransactionId>
		|        <merc:initiator>
		|          <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
		|        </merc:initiator>
		|        <merc:enterprise>
		|            <base:guid>"+ СокрЛП(док.Владелец_площадка.GUID) +"</base:guid>
		|        </merc:enterprise>
		|        <merc:mergeOperation>
		|";

		sourceStockEntry="";
		batch="";
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			sourceStockEntry=sourceStockEntry+"
			|          <vet:sourceStockEntry>
			|            <base:uuid>"+ СокрЛП(док.Партия.UUID) +"</base:uuid>
			|          </vet:sourceStockEntry>
			|";

			batch="
			|          <vet:batch>
			|            <vet:product>
			|              <base:guid>"+ СокрЛП(док.Партия.Продукция.GUID) +"</base:guid>
			|            </vet:product>
			|            <vet:subProduct>
			|              <base:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</base:guid>
			|            </vet:subProduct>
			|            <vet:productItem>
			|              <prod:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</prod:name>
			|            </vet:productItem>
			|          </vet:batch>
			|";

		КонецЦикла;

		запрос = запрос + sourceStockEntry + batch + "
		|        </merc:mergeOperation>
		|      </merc:mergeStockEntriesRequest>
   |          </app:data>
   |         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";


		Возврат запрос;
КонецФункции

Функция Отправить_ВСД_ОбъединениеПартий(док) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД_ОбъединениеПартий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД_ОбъединениеПартий(док);
	КонецЕсли;
	//}

	ЗапросXML = ВСД_ОбъединениеПартий_ЗапросXML(док);

	appID = ОтправитьТранзакцию(ЗапросXML, док);

	Возврат appID;
КонецФункции

//******************************** Продукция *********************************

Функция Получить_Список_Продукции_ЗапросXML(Площадка)
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/production/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <ws:getProductItemListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	//|      <prod:subProductGuid>80b7fc16-110c-a663-67e3-b5d9ce3f02ff</prod:subProductGuid>
	|      <ent:enterpriseGuid>"+ СокрЛП(Площадка.GUID) +"</ent:enterpriseGuid>
	|    </ws:getProductItemListRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ПолучитьРезультат_Список_Продукции(продукцияЭлемент="") Экспорт

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

    objDom.setProperty("SelectionNamespaces", "
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|" );

	//applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

	productItemList = objDom.selectNodes("//*[local-name() = 'productItem']") ;

    Для i1 = 0 По productItemList.length - 1 Цикл
        productItem = productItemList.item(i1);

		guid  	 = productItem.selectSingleNode("base:guid").text;
		uuid  	 = productItem.selectSingleNode("base:uuid").text;
		active 	 = productItem.selectSingleNode("base:active").text;

		Если active="false" Тогда
			Продолжить;
		КонецЕсли;

		st  	 = productItem.selectSingleNode("base:status").text;
		name     = productItem.selectSingleNode("prod:name").text;
		//code 	 = productItem.selectSingleNode("prod:code").text;
		prodType = productItem.selectSingleNode("prod:productType").text;

		product 	= productItem.selectSingleNode("prod:product").selectSingleNode("base:guid").text;
		subProduct 	= productItem.selectSingleNode("prod:subProduct").selectSingleNode("base:guid").text;

		correspondToGost = productItem.selectSingleNode("prod:correspondToGost").text;
		Попытка
			gost = productItem.selectSingleNode("prod:gost").text;
		Исключение
			gost = "";
		КонецПопытки;

		Продукция 	 = НайтиПродукцию(product);
		ВидПродукции = НайтиВидПродукции(subProduct);


		СпрОбъект = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
		Если ПустоеЗначение(продукцияЭлемент)=0 Тогда
			СпрОбъект.НайтиЭлемент(продукцияЭлемент);
		Иначе

			Если СпрОбъект.НайтиПоРеквизиту("GUID", guid,1)=0 Тогда
				Если СпрОбъект.НайтиПоНаименованию(name)=0 Тогда
					СпрОбъект.Новый();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СпрОбъект.Наименование = name;
		СпрОбъект.Продукция = Продукция;
		СпрОбъект.ВидПродукции = ВидПродукции;
		СпрОбъект.UUID = uuid;
		СпрОбъект.GUID = guid;
		СпрОбъект.ТермическиеУсловияПеревозки = ПолучитьКонстанту("ТермУсловияПеревозки");//1;

		СпрОбъект.Записать();

		Сообщить("Записан ["+СпрОбъект.ТекущийЭлемент()+"] uuid =["+uuid+"]");
	КонецЦикла;

	УдалитьXML( Компонента.LogFilename );

	Возврат "";
КонецФункции


Функция Получить_Список_Продукции( Площадка ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Получить_Список_Продукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Получить_Список_Продукции();
	КонецЕсли;
	//}

	ЗапросXML = Получить_Список_Продукции_ЗапросXML( Площадка );

	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ProductService";
    метод.Action = "GetProductItemList";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	ПолучитьРезультат_Список_Продукции();

	Возврат appID;

КонецФункции

// рекомендуется использовать Ветис 2.0
//Функция  ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID) Экспорт
//
//	Результат = Компонента.GetVetDocumentListResult(СокрЛП(appID));
//
//	ПолучитьРезультат_Список_Продукции(продукцияЭлемент);
//
//	Возврат Результат;
//КонецФункции
//
//Функция  Изменить_Продукцию( продукцияЭлемент , RegisterModificationType) Экспорт
//	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда
//	//	Предупреждение("Выберите Площадку");
//	//	Возврат;
//	//КонецЕсли;
//
//	Если ПустоеЗначение(продукцияЭлемент.Площадка.GUID)=1 Тогда
//		Сообщить("В продукцияЭлемент.Площадка пустой GUID");
//		Возврат "REJECTED";
//	КонецЕсли;
//
//    //{ public enum RegisterModificationType
//    //
//    //    /// <remarks/>
//    //    CREATE,
//    //
//    //    /// <remarks/>
//    //    FIND_OR_CREATE,
//    //
//    //    /// <remarks/>
//    //    UPDATE,
//    //
//    //    /// <remarks/>
//    //    DELETE,
//    //
//    //    /// <remarks/>
//    //    MERGE,
//    //
//    //    /// <remarks/>
//    //    ATTACH,
//    //
//    //    /// <remarks/>
//    //    SPLIT,
//    //
//    //    /// <remarks/>
//    //    FORK,
//    //}
//
//	Результат = Компонента.ModifyProducerStockList( продукцияЭлемент, RegisterModificationType);
//
//	appID = Компонента.ApplicationId;
//	//Отладка();
//
//	УдалитьXML( Компонента.LogFilename);
//
//	Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
//	Пока Результат="IN_PROCESS" Цикл
//		Пауза( );
//		Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
//	КонецЦикла;
//
//	УдалитьXML( Компонента.LogFilename);
//
//	Возврат Результат;
//
//КонецФункции

//**************************** Цели ******************************************

Функция ИнициализацияХС_ЗагрузитьЦели_ЗапросXML()
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/common/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <ws:getPurposeListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	//|        <base:offset>2</base:offset>
	|      </base:listOptions>
	|    </ws:getPurposeListRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЦели(  ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьЦели");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьЦели();
	КонецЕсли;
	//}

	ЗапросXML = ИнициализацияХС_ЗагрузитьЦели_ЗапросXML( );

	метод = Компонента.GetMethod();
    метод.Service = "platform/services/DictionaryService";
    метод.Action = "GetPurposeList";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);


	Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Цель");
    List = objDom.selectNodes("//com:purpose") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		//st = item.selectSingleNode("status").text;
		name = item.selectSingleNode("com:name").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Цель ["+name+"] ","i");
			Спр.Новый();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Цель ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
	Возврат appID;

КонецФункции

//******************************** Список ВСД ********************************
// рекомендуется использовать Ветис 2.1 в ГМ2
Функция  ПолучитьСписокВСДОтветXML(appID) Экспорт

	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Отправляем запрос ["+appID+"]" );
	//Результат = Компонента.SendRequestResult( appID );
	Результат = ПолучитьРезультатСервер( appID );

	Если ПустоеЗначение(Результат)=0 Тогда
		ЗагрузитьXML_ВСД( Компонента.LogFilename);
		ЗагрузитьXML_Партии( Компонента.LogFilename );
	КонецЕсли;

	УдалитьXML( Компонента.LogFilename );

	Возврат Результат;
КонецФункции

Функция ПолучитьСписокВСД_Запрос(Отправитель_Площадка, vetDocumentType	= "INCOMING", vetDocumentStatus = "CONFIRMED", Смещение=0)
	запрос ="
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + ПолучитьКонстанту("param_issuer_id") + "</app:issuerId>
	|            <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|                <merc:getVetDocumentListRequest>
		|        <merc:localTransactionId>[GUID]</merc:localTransactionId>
		|        <merc:initiator>
		|          <com:login>"+СокрЛП( ПолучитьКонстанту("param_intiator_login") )+"</com:login>
		|        </merc:initiator>
	|                  <base:listOptions>
	|                    <base:count>1000</base:count>
	|                    <base:offset>" + Смещение + "</base:offset>
	|              </base:listOptions>
	|                  <vet:vetDocumentType>"+vetDocumentType+"</vet:vetDocumentType>
	|                  <vet:vetDocumentStatus>"+vetDocumentStatus+"</vet:vetDocumentStatus>
	|              <ent:enterpriseGuid>"+ СокрЛП(Отправитель_Площадка.GUID) +"</ent:enterpriseGuid>
	|               </merc:getVetDocumentListRequest>
	|            </app:data>
	|         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";
	Возврат запрос;
КонецФункции

Функция  ПолучитьСписокВСД(Отправитель_Площадка, vetDocumentType	= 4, vetDocumentStatus = 0, Смещение=0) Экспорт

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

    //{ VetDocumentType
    //    TRANSPORT, = 1	= Транспортный ВСД.
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}


    //{ VetDocumentStatus
    //
    //    /// <remarks/>
    //    CREATED, = 1
    //
    //    /// <remarks/>
    //    CONFIRMED, = 2
    //
    //    /// <remarks/>
    //    WITHDRAWN, = 3
    //
    //    /// <remarks/>
    //    UTILIZED, = 4
    //}

	ЗапросXML = ПолучитьСписокВСД_Запрос(Отправитель_Площадка, vetDocumentType, vetDocumentStatus, Смещение );

	метод = Компонента.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = "";
		//Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") или (ПустоеЗначение(Результат)=1) Тогда
				Пауза();
				Результат = ПолучитьСписокВСДОтветXML( appID );
				Сообщить("Результат = "+Результат);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СообщитьОбОшибке("ответ сервера не получен");
	КонецЕсли;
	УдалитьXML( Компонента.LogFilename);

	Возврат Результат;

КонецФункции

//======= СЛУЖЕБНЫЕ ФУНКЦИИ ПО НАСТРОЙКЕ РАБОТЫ МОДУЛЯ ==============

Процедура Инициализация(КонтекстДокумента) Экспорт

	ВыбФирма = ПолучитьФирмуИзКонтекста(КонтекстДокумента);

	ЗагрузитьПараметры(ВыбФирма);

	ИнициализацияКомпоненты(ВыбФирма);

КонецПроцедуры // Инициализация


//======== Функции используемые в документах ====================================

Функция Выбрать_ВСД_транзакция( докОснование ) Экспорт

	Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(докОснование.ДатаДок, КонГода(докОснование.ДатаДок), докОснование);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если (Док.Вид()="ВСД_транзакция") или (Док.Вид()="ВСД2_транзакция") Тогда
			Возврат Док.ТекущийДокумент();
		КонецЕсли;
	КонецЦикла;

	Возврат "";
КонецФункции

Функция Выбрать_ВСД( докОснование ) Экспорт

	Если (докОснование.Вид() = "Реализация") или (докОснование.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(докОснование);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

		Возврат тз_ВСД;
	//ИначеЕсли (докОснование.Вид() = "ВСД_транзакция") или (докОснование.Вид() = "ВСД2_транзакция") Тогда
	Иначе
		тзДок = СоздатьОбъект("ТаблицаЗначений");
		тзДок.НоваяКолонка("Док",,,,"ВСД",50);

		Если ПустоеЗначение(докОснование)=1 Тогда
			Возврат тзДок;
		КонецЕсли;

		Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(, , докОснование); // ЖД Без Периода
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если (Док.Вид()="ВСД") или (Док.Вид()="ВСД2") Тогда   // ЖД для v2
				тзДок.НоваяСтрока();
				тзДок.Док = Док.ТекущийДокумент();
			КонецЕсли;
		КонецЦикла;

		Возврат тзДок;
	КонецЕсли;
КонецФункции

Функция ОформитьВСД(РеализацияТоваров) Экспорт
	КонтФормы = "";
	ОткрытьФорму("Документ.ВСД_транзакция",КонтФормы, РеализацияТоваров);
КонецФункции

Функция ПечатьВСД(Док) Экспорт
	Если (Док.Вид() = "Реализация") или (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

	ИначеЕсли (Док.Вид() = "ВСД_транзакция") или (Док.Вид() = "ВСД2_транзакция") Тогда
		тз_ВСД = Выбрать_ВСД(Док);
	КонецЕсли;

	Сообщить("Найдено "+тз_ВСД.КоличествоСтрок()+" ВСД");

	тз_ВСД.ВыбратьСтроки();
	Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
		//Если ТестовыйРежим=1 Тогда
		//	ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД.Док.UUID);
		//Иначе
			ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД.Док.UUID);
		//КонецЕсли;
	КонецЦикла;

КонецФункции

Функция ПечатьВСД_Тест(Док) Экспорт
	Если (Док.Вид() = "Реализация") или (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

	ИначеЕсли (Док.Вид() = "ВСД_транзакция") или (Док.Вид() = "ВСД2_транзакция") Тогда
		тз_ВСД = Выбрать_ВСД(Док);
	КонецЕсли;

	Сообщить("Найдено "+тз_ВСД.КоличествоСтрок()+" ВСД");

	тз_ВСД.ВыбратьСтроки();
	Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
		ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД.Док.UUID);
	КонецЦикла;

КонецФункции

Процедура ПечатьСокрВСД(Док, Принтер="") Экспорт
   	ФайлОбработки = КаталогМодуля+"ПечФорма_ВСД_Сокращенная.ert";
   	Если ФС.СуществуетФайл(Файлобработки) = 0 Тогда
   		Сообщить("Остутствует обработчик печати "+ФайлОбработки);
   		возврат;
   	КонецЕсли;

	парам = СоздатьОбъект("СписокЗначений");
	парам.Установить("Контекст",Док);
	парам.Установить("Устройство",Принтер);
	парам.Установить("СразуПечать", (1-ПустоеЗначение(Принтер)) );

	ОткрытьФорму("Отчет", парам, ФайлОбработки);
КонецПроцедуры

Функция ОткрытьВсдВГис(Док) Экспорт

	Если (Док.Вид() = "Реализация") или (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

		тз_ВСД.ВыбратьСтроки();
		Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
			Если ТестовыйРежим=1 Тогда
				ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.Док.UUID);
			Иначе
				ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.док.UUID);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли (Док.Вид() = "ВСД") или (Док.Вид() = "ВСД2") или (Док.Вид() = "ВСД2_входящий") Тогда
		Если ТестовыйРежим=1 Тогда
			ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+Док.UUID);
		Иначе
			ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+док.UUID);
		КонецЕсли;
	Иначе
		тз_ВСД = Выбрать_ВСД(Док);
		тз_ВСД.ВыбратьСтроки();
		Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
			Если ТестовыйРежим=1 Тогда
				ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.Док.UUID);
			Иначе
				ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.док.UUID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецФункции

Функция ОткрытьСписокВсд(Док) Экспорт

	Если (Док.Вид() = "Реализация") или (Док.Вид() = "ПеремещениеТМЦ") или (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

	Иначе
		тз_ВСД = Выбрать_ВСД(Док);
	КонецЕсли;

	стр=0;
	Если тз_ВСД.ВыбратьСтроку(стр,"ВСД")=1 Тогда
		Если стр <> 0 Тогда
			тз_ВСД.ПолучитьСтрокуПоНомеру(стр);
			ОткрытьФорму(тз_ВСД.Док);
		КонецЕсли;
	КонецЕсли;
КонецФункции

//----------------------- Функции используемые в Групповых обработках докуметов -------------

Функция СвернутьТч(Док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СвернутьТч");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СвернутьТч(Док);
	КонецЕсли;
	//}

	тзДок = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тзДок);

	тзРез = СоздатьОбъект("ТаблицаЗначений");
	тзРез.НоваяКолонка("ВСД_Продукция_Элемент");
	тзРез.НоваяКолонка("Количество");
	тзРез.НоваяКолонка("КоличествоМест");

	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку() = 1 Цикл
		Попытка
			Количество = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаКоличество"));
			КоличествоМест = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест") );
			Номенклатура = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаНоменклатура") );
		Исключение
		    Сообщить("Неверно указан один из параметров: НазваниеРеквизитаКоличество, НазваниеРеквизитаКоличествоМест или НазваниеРеквизитаНоменклатура");
			Возврат тзРез;
		КонецПопытки;
		Если ПустоеЗначение(Номенклатура.ВСД_Продукция_Элемент)=1 Тогда
			Сообщить("["+Номенклатура+"] количество = "+Количество+" в "+Док+" не указан ВСД_Продукция_Элемент ","!");
			Если ПолучитьКонстанту("ПропускатьПустыеСвойства") =1 Тогда
				Сообщить("Пропускаем");
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		тзРез.НоваяСтрока();
		тзРез.ВСД_Продукция_Элемент = Номенклатура.ВСД_Продукция_Элемент;
		Если ПустоеЗначение(тзРез.ВСД_Продукция_Элемент.ЕдиницаИзмерения)=0 Тогда
			//только для КГ учитываем вес единицы
			Если СокрЛП(тзРез.ВСД_Продукция_Элемент.ЕдиницаИзмерения.Наименование) = "кг" Тогда
				Попытка
					Если тзДок.Единица.Вес>0 Тогда
						тзРез.Количество = Количество*тзДок.Единица.Вес;
					Иначе
						тзРез.Количество = Количество;
					КонецЕсли;
				Исключение
					тзРез.Количество = Количество;
				КонецПопытки;
			Иначе
				//все остальные считаем целочисленными единицами измерения
				тзРез.Количество = Количество;
			КонецЕсли;

		Иначе
			Попытка
				Если тзДок.Единица.Вес>0 Тогда
					тзРез.Количество = Количество*тзДок.Единица.Вес;
				Иначе
					тзРез.Количество = Количество;
				КонецЕсли;
			Исключение
				тзРез.Количество = Количество;
			КонецПопытки;
		КонецЕсли;
		тзРез.КоличествоМест = КоличествоМест;
	КонецЦикла;

	тзРез.Свернуть("ВСД_Продукция_Элемент","Количество, КоличествоМест");

	Возврат тзРез;
КонецФункции

Функция ВыгрузитьТч(Док) Экспорт
	// Выгружает тч Документа в ТЗ, Проставляет Продукция_Элемент, Рассчитывает количество к списанию
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВыгрузитьТч");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВыгрузитьТч(Док);
	КонецЕсли;
	//}

	тзДок = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тзДок);

	тзРез = СоздатьОбъект("ТаблицаЗначений");
	тзРез.НоваяКолонка("ДокРеализации");
	тзРез.НоваяКолонка("Номенклатура");
	тзРез.НоваяКолонка("ВСД_Продукция_Элемент","Справочник.ВСД_Продукция_Элемент");
	тзРез.НоваяКолонка("Количество","Число",12,3);
	тзРез.НоваяКолонка("КоличествоМест","Число",12,3);

	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку() = 1 Цикл
		Попытка
			ТекНоменклатура = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаНоменклатура") );
			ТекКоличество = тзДок.ПолучитьЗначение(тзДок.НомерСтроки,ПолучитьКонстанту("НазваниеРеквизитаКоличество"));
		Исключение
			Ошибка = "Неверно указан один из параметров: НазваниеРеквизитаНоменклатура или НазваниеРеквизитаКоличество ";
			Сообщить(Ошибка,"!");
			СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(7558)");
			Возврат тзРез;
		КонецПопытки;

		Если ПустоеЗначение(ТекНоменклатура.ВСД_Продукция_Элемент)=1 Тогда
			Сообщить("["+ТекНоменклатура+"] количество = "+ТекКоличество+" в "+Док+" не указан ВСД_Продукция_Элемент ","!");
			Если ПолучитьКонстанту("ПропускатьПустыеСвойства") =1 Тогда
				Сообщить("Пропускаем");
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		тзРез.НоваяСтрока();
		тзРез.ДокРеализации = Док;
		тзРез.Номенклатура = ТекНоменклатура;//Номенклатура;

		тзРез.ВСД_Продукция_Элемент = ТекНоменклатура.ВСД_Продукция_Элемент;
		Попытка
			тзРез.Количество = ТекКоличество*тзДок.Единица.Вес; //Количество*тзДок.Единица.Вес;
		Исключение
			тзРез.Количество = ТекКоличество;//тзДок.Количество;
		КонецПопытки;
		Если тзРез.Количество = 0 Тогда
			Сообщить("["+ТекНоменклатура+"] количество = "+ТекКоличество+" в "+Док+" не удалось пересчитать в единицы ВСД = 0 !","!");
		КонецЕсли;
		тзРез.КоличествоМест = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест") );
	КонецЦикла;

	Возврат тзРез;
КонецФункции


//******************************************************************************
// глРазложить(Знач Стр, Разделитель = ",")
//
// Параметры:
//  Стр - строка, которую необходимо разложить на подстроки.
//        Параметр передается по значению.
//  Разделитель - строка-разделитель, по умолчанию - запятая.
//
// Возвращаемое значение:
//  Список значений элементы которого - подстроки
//
// Описание:
//  Функция "расщепляет" строку на подстроки, используя заданный
//  разделитель. Разделитель может иметь любую длину.
//  Если в качестве разделителя задан пробел, рядом стоящие пробелы
//  считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//  игнорируются.
//  Например,
//  глРазложить(",ку,,,му", ",") возвратит список значений из пяти элементов,
//  три из которых - пустые строки, а
//  глРазложить(" ку   му", " ") возвратит список значений из двух элементов
//
Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт

	Список = СоздатьОбъект("СписокЗначений");
	Длина  = СтрДлина(Разделитель);

	Стр = СокрЛП(Стр);
	Поз = Найти(Стр, Разделитель);

	Пока 0 < Поз Цикл
		Список.ДобавитьЗначение(СокрП(Лев(Стр, Поз-1)));

		Стр = СокрЛ(Сред(Стр, Поз+Длина));
		Поз = Найти(Стр, Разделитель);
	КонецЦикла;

	Список.ДобавитьЗначение(Стр);

	Возврат Список;

КонецФункции // глРазложить()

// Получение списка документов Реализаций за период с отбором по ВыбКонтрагенту
// Возвращаемое значение: ТаблицаЗначений
Функция ПолучитьТзРеализаций( спПараметры ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьТзРеализаций");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьТзРеализаций( спПараметры );
	КонецЕсли;
	//}

	Состояние("Запрос списка документов ");
	НачДата 		= спПараметры.Получить("НачДата");
	КонДата 		= спПараметры.Получить("КонДата");
	ВыбКонтрагент 	= спПараметры.Получить("ВыбКонтрагент");
	ВыбФирма 		= спПараметры.Получить("ВыбФирма");
	Версия2 		= спПараметры.Получить("Версия2");
	Площадка 		= спПараметры.Получить("Площадка");
	флФильтрПоСкладу= спПараметры.Получить("флФильтрПоСкладу");

	// Позже продолжить несколько видов реализаций через ",", в запросе через функцию COALESCE
	//
	//СписокДокументов = глРазложить(НазваниеВидаДокументаРеализация);
	//Для СЦ = 1 По СписокДокументов.РазмерСписка() Цикл
	//	Сообщить(СписокДокументов.ПолучитьЗначение(СЦ));
	//КонецЦикла;

	НазваниеВидаСправочникаФирмы		= ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
	НазваниеВидаДокументаРеализация 	= ПолучитьКонстанту("НазваниеВидаДокументаРеализация");
	НазваниеРеквизитаГрузополучатель 	= ПолучитьКонстанту("НазваниеРеквизитаГрузополучатель");
	НазваниеРеквизитаНоменклатура		= ПолучитьКонстанту("НазваниеРеквизитаНоменклатура");
	НазваниеРеквизитаКоличество 		= ПолучитьКонстанту("НазваниеРеквизитаКоличество");
	НазваниеРеквизитаКоличествоМест 	= ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест");
	ПропускатьПустыеСвойства 			= ПолучитьКонстанту("ПропускатьПустыеСвойства");

	Если ПустаяСтрока(НазваниеВидаСправочникаФирмы) = 1 Тогда
		Сообщить("В Параметрах не указано НазваниеВидаСправочникаФирмы!","!"); //Возврат "";
	КонецЕсли;
	Если ПустаяСтрока(НазваниеРеквизитаГрузополучатель) = 1 Тогда
		Сообщить("Не выбрано название реквизита грузополучатель!","!"); Возврат "";
	КонецЕсли;

	ВидГрузополучателя = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(НазваниеРеквизитаГрузополучатель).Вид;

	ФирмаИмяРеквизита = "";
	ФирмаОбщийРеквизит = ПолучитьИмяРеквизитаФирма(НазваниеВидаДокументаРеализация, ФирмаИмяРеквизита);

	ФильтрПоСкладу = 0;
	Если флФильтрПоСкладу = 1 Тогда
		Если ПустоеЗначение(Площадка) = 0 Тогда
			ВидСтравочникаСклады = Метаданные.Справочник("ВСД_Площадка").Реквизит("Склад").Вид;
			Если ПустаяСтрока(ВидСтравочникаСклады) = 1 Тогда
				ВидСтравочникаСклады = Метаданные.Справочник("ВСД_СкладыПлощадок").Реквизит("Склад").Вид;
			КонецЕсли;

			Если ПустаяСтрока(ВидСтравочникаСклады) = 0 Тогда
				СписокСкладов = СоздатьОбъект("СписокЗначений");
				Если ПустоеЗначение(Площадка.Склад) = 0 Тогда
					СписокСкладов.ДобавитьЗначение(Площадка.Склад);
				КонецЕсли;
				Спр = СоздатьОбъект("Справочник.ВСД_СкладыПлощадок");
				Спр.ИспользоватьВладельца(Площадка);
				Спр.ВыбратьЭлементы();
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Если ПустоеЗначение(Спр.Склад) = 0 Тогда
						СписокСкладов.ДобавитьЗначение(Спр.Склад);
					КонецЕсли;
				КонецЦикла;

				Если СписокСкладов.РазмерСписка() > 0 Тогда
					ВыбСклад = Площадка.Склад;
					Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки() Цикл
						Рекв = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Вид;
						Если Рекв = ВидСтравочникаСклады Тогда
							ФильтрПоСкладу = 1;
							СкладИмяРеквизита = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Идентификатор;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Попытка
		Если ЭтоSQL=1 Тогда

			ТекстЗапроса = "
			|SELECT
			|    Жур.IDDoc as [Док $Документ],
			|    Жур.IDDocDef as Док_вид,
			|	ДокВСД.IDDoc as [ДокВСД $Документ.ВСД_транзакция],
			|	Жур.DocNo as [НомерДок],
			|	$ДокР.Контрагент as [Контрагент $Справочник.Контрагенты],
			|	$ДокР."+ НазваниеРеквизитаГрузополучатель +" as [Грузополучатель $Справочник."+ ВидГрузополучателя +"],
			|	SUM($ДокСтроки."+ НазваниеРеквизитаКоличество +") [Количество],
			|	SUM($ДокСтроки."+ НазваниеРеквизитаКоличествоМест +") [КоличествоМест]
			|FROM
			|    _1SJourn Жур
			|INNER JOIN
			|	$ДокументСтроки."+ НазваниеВидаДокументаРеализация +" as ДокСтроки
			|		ON Жур.IDDoc = ДокСтроки.IDDoc
			|INNER JOIN
			|	$Документ."+ НазваниеВидаДокументаРеализация +" as ДокР
			|		ON Жур.IDDoc = ДокР.IDDoc
			//|	LEFT JOIN (SELECT ВСД.IDDOC as IDDOC
			//|					, SUBSTRING($ВСД.ДокОснование, 5, 8) as Реал
			//|				FROM $Документ.ВСД_транзакция as ВСД
			//|					INNER JOIN _1SJourn Жур2
			//|						ON Жур2.IDDoc = ВСД.IDDoc
			//|						AND Жур2.ismark = 0
			//|				) as ДокВСД ON ДокВСД.Реал = Жур.IDDoc
			|Left join
			|	$Документ.ВСД_транзакция as ДокВСД
			|	ON SUBSTRING($ДокВСД.ДокОснование, 5, 8) = Жур.IDDoc
			|";
			Если ПропускатьПустыеСвойства =1 Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|	inner join $Справочник.Номенклатура as Ном
				|		on $ДокСтроки."+НазваниеРеквизитаНоменклатура+"= Ном.ID
				|		and $Ном.ВСД_Продукция_Элемент <> $ПустойИД
				|";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+"
			|WHERE
			|    Жур.Date_Time_IDDoc BETWEEN :НачДата AND :КонДата~ AND
			|    Жур.IDDocDef = $ВидДокумента."+ НазваниеВидаДокументаРеализация +"
			|	and Жур.Closed & 1 = 1
			//|	and (
			//|		$ДокВСД.Статус <> 'Аннулирова' OR
			//|		$ДокВСД.Статус Is Null
			//|		)
			|";

			ТекстЗапроса=ТекстЗапроса+"
			|	%УсловиеПоГрузополучателю%
			|	%УсловиеПоФирме%
			|	%УсловиеПоСкладу%
			|	AND $ДокСтроки."+НазваниеРеквизитаКоличество+" > 0
			|
			|GROUP BY
			|	Жур.IDDoc,
			|	Жур.IDDocDef,
			|	Жур.DocNo,
			|	$ДокР.Контрагент,
			|	$ДокР."+ НазваниеРеквизитаГрузополучатель +",
			|	ДокВСД.IDDoc
			|
			|order by Жур.DocNo
			|";

			Если ПустоеЗначение(Версия2) = 0 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВСД_транзакция", "ВСД2_транзакция");
			КонецЕсли;

			УсловиеПоГрузополучателю = "";
			Если ПустоеЗначение(ВыбКонтрагент) = 0 Тогда
				УсловиеПоГрузополучателю = " and $ДокР."+ НазваниеРеквизитаГрузополучатель +" IN (SELECT Val FROM #ГруппаК) ";
				RS.УложитьСписокОбъектов(ВыбКонтрагент, "#ГруппаК","Контрагенты");
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоГрузополучателю%", УсловиеПоГрузополучателю);

			//условие по фирме
			УсловиеПоФирме="";
			Если ПустоеЗначение(ВыбФирма) = 0 Тогда
				Если ФирмаОбщийРеквизит > 0 Тогда
					Если ФирмаОбщийРеквизит = 1 Тогда
						УсловиеПоФирме = " and Жур.$ОбщийРеквизит."+ФирмаИмяРеквизита+" = :ВыбФирма";
					Иначе
						УсловиеПоФирме = " and $ДокР."+ФирмаИмяРеквизита+" = :ВыбФирма";
					КонецЕсли;
					RS.УстановитьТекстовыйПараметр("ВыбФирма", ВыбФирма);
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоФирме%", УсловиеПоФирме);

			//условие по складу
			УсловиеПоСкладу = "";
			Если ФильтрПоСкладу = 1 Тогда
				Если СписокСкладов.РазмерСписка() = 1 Тогда
					УсловиеПоСкладу = " and $ДокР."+СкладИмяРеквизита+" = :ВыбСклад";
					RS.УстановитьТекстовыйПараметр("ВыбСклад", СписокСкладов.ПолучитьЗначение(1));
				Иначе
					УсловиеПоСкладу = " and $ДокР."+ СкладИмяРеквизита +" IN (SELECT Val FROM #Склады) ";
					RS.УложитьСписокОбъектов(СписокСкладов, "#Склады",ВидСтравочникаСклады);
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%", УсловиеПоСкладу);

			RS.УстановитьТекстовыйПараметр("НачДата", НачДата);
			RS.УстановитьТекстовыйПараметр("КонДата", КонДата);

			//RS.Отладка(1);
			ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			//ТЗ.ВыбратьСтроку();

		Иначе

			Запрос = базаДанных.НовыйЗапрос();

			ТекстЗапроса = "
			|SELECT
			|    Жур.IDDoc as [Док :Документ],
			|    Жур.IDDocDef as Док_вид,
			|	Жур.DocNo as [НомерДок],
			|	COALESCE(ДокВСД.IDDoc, :ПустойИД) as [ДокВСД :Документ.ВСД_транзакция],
			|	ДокР.Контрагент as [Контрагент :Справочник.Контрагенты],
			|	ДокР."+ НазваниеРеквизитаГрузополучатель +" as [Грузополучатель :Справочник."+ ВидГрузополучателя +"],
			|	SUM(ДокСтроки."+НазваниеРеквизитаКоличество+") [Количество],
			|	SUM(ДокСтроки."+НазваниеРеквизитаКоличествоМест+") [КоличествоМест]
			|FROM
			|    Журнал Жур
			|INNER JOIN
			|	[ДокументСтроки."+НазваниеВидаДокументаРеализация+"] as ДокСтроки
			|		ON Жур.IDDoc = ДокСтроки.IDDoc
			|INNER JOIN
			|	[Документ."+НазваниеВидаДокументаРеализация+"] as ДокР
			|		ON Жур.IDDoc = ДокР.IDDoc
			|Left join
			|	[Документ.ВСД_транзакция] as ДокВСД
			|	ON SUBSTR(ДокВСД.ДокОснование, 5, 9) = Жур.IDDoc
			//|	LEFT JOIN (SELECT ВСД.IDDOC as IDDOC
			//|					, SUBSTR(ВСД.ДокОснование, 5, 9) as Реал
			//|				FROM [Документ.ВСД_транзакция] as ВСД
			//|					INNER JOIN Журнал Жур2
			//|						ON Жур2.IDDoc = ВСД.IDDoc
			//|						AND not ( Жур2.ismark = '*' )
			//|				) as ДокВСД ON ДокВСД.Реал = Жур.IDDoc
			|";
			Если ПропускатьПустыеСвойства =1 Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|inner join [Справочник.Номенклатура] as Ном
				|	on ДокСтроки."+НазваниеРеквизитаНоменклатура+" = Ном.ID
				|	and Ном.ВСД_Продукция_Элемент <> '     0   '
				|";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+"
			|WHERE
			|    Жур.idx_date_time_iddoc BETWEEN :НачДата AND :КонДата~ AND
			|    Жур.IDDocDef = :ВидДокумента."+НазваниеВидаДокументаРеализация+"
			|	and Жур.Closed & 1 = 1
			//| AND COALESCE(ДокВСД.Статус,'*') <> 'Аннулирова'
			|";
			ТекстЗапроса=ТекстЗапроса+"
			|	%УсловиеПоГрузополучателю%
			|	%УсловиеПоФирме%
			|	%УсловиеПоСкладу%
			|	AND ДокСтроки."+НазваниеРеквизитаКоличество+" >0
			|
			|GROUP BY
			|	Жур.IDDoc,
			|	Жур.IDDocDef,
			|	Жур.DocNo,
			|	ДокР."+НазваниеРеквизитаГрузополучатель+",
			|	ДокВСД.IDDoc
			|
			|order by Жур.DocNo
			|";

			УсловиеПоГрузополучателю = "";

			Если ПустоеЗначение(Версия2) = 0 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВСД_транзакция", "ВСД2_транзакция");
			КонецЕсли;

			Если ПустоеЗначение(ВыбКонтрагент) = 0 Тогда
				УсловиеПоГрузополучателю = " and ДокР."+НазваниеРеквизитаГрузополучатель+" IN (SELECT Val FROM ГруппаК) ";
				базаДанных.УложитьОбъекты(ВыбКонтрагент, "ГруппаК",, "Контрагенты");
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоГрузополучателю%", УсловиеПоГрузополучателю);

			//условие по фирме
			УсловиеПоФирме="";
			Если ПустоеЗначение(ВыбФирма) = 0 Тогда
				Если ФирмаОбщийРеквизит > 0 Тогда
					Если ФирмаОбщийРеквизит = 1 Тогда
						УсловиеПоФирме = " and Жур."+ФирмаИмяРеквизита+" = :ВыбФирма";
					ИначеЕсли ФирмаОбщийРеквизит = 2 Тогда
						УсловиеПоФирме = " and ДокР."+ФирмаИмяРеквизита+" = :ВыбФирма";
					КонецЕсли;
					Запрос.Подставлять("ВыбФирма", ВыбФирма);
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоФирме%", УсловиеПоФирме);

			//условие по складу
			УсловиеПоСкладу = "";
			Если ФильтрПоСкладу = 1 Тогда
				Если СписокСкладов.РазмерСписка() = 1 Тогда
					УсловиеПоСкладу = " and ДокР."+СкладИмяРеквизита+" = :ВыбСклад";
					Запрос.Подставлять("ВыбСклад", СписокСкладов.ПолучитьЗначение(1));
				Иначе
					УсловиеПоСкладу = " and ДокР."+ СкладИмяРеквизита +" IN (SELECT Val FROM Склады) ";
					базаДанных.УложитьОбъекты(СписокСкладов, "Склады",ВидСтравочникаСклады);
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%", УсловиеПоСкладу);

			//Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
			Запрос.Подставлять("НачДата", НачДата);
			Запрос.Подставлять("КонДата", КонДата);

			//Запрос.Отладка();
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			//ТЗ.ВыбратьСтроку();
		КонецЕсли;
	Исключение
		СообщитьОбОшибке("Не удалось выполнить запрос по документам. Проверьте параметры
		|"+ ОписаниеОшибки(),,"НомерСтрокиМдуля(7940)");
	КонецПопытки;

	Состояние("");
	возврат ТЗ;
КонецФункции

//************* Функции для подбора партий По ЛИФО, ФИФО, другой сортировке
// возможно вынести в Параметры порядок побора партий

Функция ПолучитьАкуальныеПартииИзСправочника(ВыбПродукция_Элемент = "", ВыбПлощадка = "", ВыбХС = "", ПолеСортировки = "", ЗнакСортировки = 0) Экспорт
	//Получаем Актуальные партии по фильтру с возможностью сортировки по указанному полю
	Перем Запрос, ТекстЗапроса;

	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАкуальныеПартииИзСправочника");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАкуальныеПартииИзСправочника(ВыбПродукция_Элемент, ВыбПлощадка, ВыбХС, ПолеСортировки, ЗнакСортировки);
	КонецЕсли;

	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса =
	"//{{ЗАПРОС(ПолучитьАкуальныеПартии)
	|Обрабатывать НеПомеченныеНаУдаление;
	|ВСД_Партия = Справочник.ВСД_Партия.ТекущийЭлемент;
	|ПолеСортировки = Справочник.ВСД_Партия.@ПолеСортировки;
	|Колво = Справочник.ВСД_Партия.Количество;
	|КолвоМест = Справочник.ВСД_Партия.КоличествоМест;
	|Продукция_Элемент = Справочник.ВСД_Партия.Продукция_Элемент;
	|Функция Количество = Сумма(Колво);
	|Функция КоличествоМест = Сумма(КолвоМест);
	|Группировка Продукция_Элемент без групп;
	|Группировка ВСД_Партия без групп;
	|Группировка ПолеСортировки;
	|Условие(Колво > 0);
	|"//}}ЗАПРОС
	;

	Если ПустоеЗначение(ПолеСортировки) = 1 Тогда
		ПолеСортировки = СокрЛП(ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания"));//"ДатаИзменения";
		Если ПустоеЗначение(ПолеСортировки) = 1 Тогда
			Сообщить("Не указан параметр Колонка сортировки партий - > использую ДатаИзменения");
			ПолеСортировки = "ДатаИзменения";
		КонецЕсли;
	КонецЕсли;

	_ЗнакСортировки = ?(ПустоеЗначение(ЗнакСортировки) = 1,"+","-");

	Если ТипЗначенияСтр(ВыбПродукция_Элемент) = "СписокЗначений" Тогда    // ПустоеЗначение(ВыбПродукция_Элемент) = 0
		Если ВыбПродукция_Элемент.РазмерСписка() =  0 Тогда
			// Передан пустой список значений - ничего не выбираем
		    Возврат "";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса  + "
		|Условие(Продукция_Элемент в ВыбПродукция_Элемент);";
	КонецЕсли;

	Если ПустоеЗначение(ВыбПлощадка) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса  + "
		|Условие(ВСД_Партия.Получатель_Площадка = ВыбПлощадка);";
	КонецЕсли;

	Если ПустоеЗначение(ВыбХС) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса  + "
		|Условие(ВСД_Партия.Получатель_ХозСубъект = ВыбХС);";
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"@ПолеСортировки",ПолеСортировки);

	Состояние("Выбор актуальных партий из справочника...");
	// Если ошибка в запросе, то выход из процедуры
	Попытка
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат "";
		КонецЕсли;
		ТзПартии = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ТзПартии,0,0);
		Если ТзПартии.КоличествоСтрок() > 0 Тогда
			ТзПартии.Сортировать(_ЗнакСортировки+"Продукция_Элемент,"+_ЗнакСортировки+"ВСД_Партия,"+_ЗнакСортировки+"ПолеСортировки");
		КонецЕсли;
	Исключение
		Ошибка = "Передан неверный параметр ";
		Сообщить(Ошибка, "!");
		СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(8023)");
		Возврат "";
	КонецПопытки;

    Возврат ТзПартии;
КонецФункции


Функция ПодобратьПартииПоПродукцияЭлемент(ТзПартий,ПродукцияЭлемент,КолвоСписания, КолвоМестСписания = 0) Экспорт
	// Подбираем партии под нужное количество списания
	//возвращает ТЗ - Партия и Вес для указанного ПродукцияЭлемент
	// ТзПартий уже отсортирована нужным образом
	// Мы должны вернуть ее с уменьшенным количеством, что необходимо при групповой обработке
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПодобратьПартииПоПродукцияЭлемент");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПодобратьПартииПоПродукцияЭлемент(ТзПартий,ПродукцияЭлемент,КолвоСписания, КолвоМестСписания);
	КонецЕсли;

    Рез = СоздатьОбъект("ТаблицаЗначений");
	Рез.НоваяКолонка("Партия","Справочник.ВСД_Партия");
	Рез.НоваяКолонка("Колво","Число",12,3);
	Рез.НоваяКолонка("ПолеСортировки");
	Рез.НоваяКолонка("КолвоМест","Число",12,3);

	ОсталосьСписать = КолвоСписания;
	ОсталосьСписатьМест = КолвоМестСписания;

	стр = 0;
	Если ТзПартий.НайтиЗначение(ПродукцияЭлемент,стр,"Продукция_Элемент") = 0 Тогда
	    Возврат Рез;
	КонецЕсли;

	ТзПартий.ПолучитьСтрокуПоНомеру(стр);
	Пока (ТзПартий.КоличествоСтрок() >= стр) и (ТзПартий.Продукция_Элемент = ПродукцияЭлемент) Цикл
		//ТзПартий.ПолучитьСтрокуПоНомеру(стр);
		Если осталосьСписать = 0 Тогда
			Прервать;
		КонецЕсли;
		Если ТзПартий.Количество = 0 Тогда
			// Уже выбрали из этой партии все
			стр = стр + 1;
			Попытка ТзПартий.ПолучитьСтрокуПоНомеру(стр); Исключение Прервать; КонецПопытки;
		    Продолжить;
		КонецЕсли;
		рез.НоваяСтрока();
		Рез.Партия = ТзПартий.ВСД_Партия;
		Рез.ПолеСортировки = ТзПартий.ПолеСортировки;
		Если ОсталосьСписать >= ТзПартий.Количество Тогда
			Рез.Колво = ТзПартий.Количество;
		Иначе
			Рез.Колво = ОсталосьСписать;
		КонецЕсли;

		ТзПартий.Количество = ТзПартий.Количество - Рез.Колво;
		ОсталосьСписать = ОсталосьСписать - Рез.Колво;

		стр = стр + 1;
		Попытка ТзПартий.ПолучитьСтрокуПоНомеру(стр); Исключение Прервать; КонецПопытки;
	КонецЦикла;
	Если ОсталосьСписать > 0 Тогда
	    Сообщить("Недостаточно партий для списания "+ПродукцияЭлемент + ", Нужно списать "+КолвоСписания+ ", списываю "+Рез.Итог("Колво"));
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция ПолучитьМаркировку( Единица, докОснование="")

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьМаркировку");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьМаркировку( Единица, докОснование );
	КонецЕсли;
	//}

	Рез = "";
	Номенклатура = Единица.Владелец;
	Рез = Единица.ШтрихКод;

	Возврат Рез;
КонецФункции


Функция ЗаполнитьСтрокуДокумента(тзРезультат, тзОснование, докОснование="" ) Экспорт
	//КлассМаркировки
	//Список физической упаковки. vd:packageList
	// С уровнями
	//   Уровни <dt:level>
	//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
	//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
	//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
	//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
	//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
	//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа.
	//
	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете.
	//

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьСтрокуДокумента");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьСтрокуДокумента(тзРезультат, тзОснование, докОснование );
	КонецЕсли;
	//}

	Попытка тзРезультат.Номенклатура    		= тзОснование.Номенклатура; Исключение КонецПопытки;
	Попытка тзРезультат.Продукция_Элемент       = тзОснование.ВСД_Продукция_Элемент; Исключение КонецПопытки;
	Попытка тзРезультат.ЕдиницаИзмерения        = тзРезультат.Партия.ЕдиницаИзмерения; Исключение КонецПопытки;
	Попытка тзРезультат.Продукция               = тзРезультат.Партия.Продукция; Исключение КонецПопытки;
	Попытка тзРезультат.ВидПродукции            = тзРезультат.Партия.ВидПродукции; Исключение КонецПопытки;
	Попытка тзРезультат.НаименованиеПродукции   = тзРезультат.Продукция_Элемент.Наименование;  Исключение КонецПопытки;
	Попытка тзРезультат.GTIN                    = тзРезультат.Продукция_Элемент.GTIN; Исключение КонецПопытки;
	Попытка тзРезультат.КодПродукции            = тзРезультат.Продукция_Элемент.Артикул; Исключение КонецПопытки;

	Попытка
		тзРезультат.Цель 					= тзРезультат.ВидПродукции.Цель;
		Если ПустоеЗначение(тзРезультат.Цель)=1 Тогда
			тзРезультат.Цель = ПолучитьКонстанту("Цель");
		КонецЕсли;
	Исключение
	КонецПопытки;

	Попытка
		тзРезультат.ФормаУпак2 = тзРезультат.Продукция_Элемент.ФормаУпаковки;
		Если ПустоеЗначение(тзРезультат.ФормаУпак2) = 0 Тогда
			Попытка
				к1 = тзРезультат.Продукция_Элемент.ОбъемЕдиницыФасовки;
				к1 = ?(к1>0,к1,1);
				тзРезультат.КолвоУпак2 = Окр(тзРезультат.Количество / к1,2,3);
			Исключение
				Сообщить("Уровень 2: "+ОписаниеОшибки(),"!");
				тзРезультат.ФормаУпак2 = "";
			КонецПопытки;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Попытка
		тзРезультат.ФормаУпак4	= тзРезультат.Продукция_Элемент.ТипФасовки;//ФормаУпаковки;
		Если ПустоеЗначение(тзРезультат.ФормаУпак4)=0 Тогда
			тзРезультат.КолВоУпак4 = тзРезультат.Количество / тзРезультат.Номенклатура.ОсновнаяЕдиница.Коэффициент;
			Попытка
				к1 = тзРезультат.Продукция_Элемент.ОбъемЕдиницыФасовки;
				к1 = ?(к1>0,к1,1);
				к2 = тзРезультат.Продукция_Элемент.КолВоЕдиницФасовки;
				к2 = ?(к2>0,к2,1);
				тзРезультат.КолвоУпак4 = Окр(тзРезультат.Количество / к1 / к2,2,3);
			Исключение
				Сообщить("Уровень 4: "+ОписаниеОшибки());
				//тзРезультат.ФормаУпак4 = "";
			КонецПопытки;

			Попытка
				тзРезультат.ЗначениеМаркировки1_4 = ПолучитьМаркировку( тзРезультат.Номенклатура.ОсновнаяЕдиница, докОснование );
				Если ПустоеЗначение(тзРезультат.ЗначениеМаркировки1_4)=0 Тогда
					тзРезультат.КлассМаркировки1_4 = "EAN13";
				КонецЕсли;
			Исключение
				Сообщить("Не удалось получить маркировку для товара "+тзРезультат.Номенклатура);
			КонецПопытки;
		КонецЕсли;
	Исключение
		Сообщить("Уровень 4: "+ОписаниеОшибки());
	КонецПопытки;

	//	Попытка
	//		тзРезультат.КодПродукции = тз.АртикулПокупателя;
	//	Исключение КонецПопытки;

КонецФункции

Функция ЗаполнитьПартииПоТЧДокумента2( Докум, ВыбПлощадка, ВыбХС, тзАктуальныхПартий ="", ЗаполнятьЭлементыБезПартий = 0, ПолеСортировкиПартий = "", ЗнакСортировкиПартий = 0) Экспорт
    // Возвращае готовую тч документа, вводимого на основании, с учетом ФИФО, ЛИФО и т.д.
	// По всем строкам Основания документа - для использования в ВодНаОсновании или ГО
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьПартииПоТЧДокумента2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьПартииПоТЧДокумента2(Докум,ВыбПлощадка, ВыбХС, тзАктуальныхПартий, ЗаполнятьЭлементыБезПартий, ПолеСортировкиПартий , ЗнакСортировкиПартий);
	КонецЕсли;
	ДобавлятьУпаковки = ПолучитьКонстанту("ДобавлятьУпаковки");

	ТЗПартий = СоздатьОбъект("ТаблицаЗначений");
	ТЗПартий.НоваяКолонка("Номенклатура",,,,,50,);
	ТЗПартий.НоваяКолонка("Продукция_Элемент","Справочник.ВСД_Продукция_Элемент",,,,50,);
	ТЗПартий.НоваяКолонка("Партия","Справочник.ВСД_Партия",,,,15,);
	ТЗПартий.НоваяКолонка("Количество","Число",,,,5,);
	ТЗПартий.НоваяКолонка("ЕдиницаИзмерения");
	ТЗПартий.НоваяКолонка("Продукция");
	ТЗПартий.НоваяКолонка("ВидПродукции");
	ТЗПартий.НоваяКолонка("НаименованиеПродукции");
	ТЗПартий.НоваяКолонка("GTIN");
	ТЗПартий.НоваяКолонка("КодПродукции");
	ТЗПартий.НоваяКолонка("Цель");

	//КлассМаркировки
	//Список физической упаковки. vd:packageList
	// С уровнями
	//   Уровни <dt:level>
	//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
	//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
	//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
	//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
	//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
	//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа.
	//
	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете.
	//

	// Потребительский уровень
	ТЗПартий.НоваяКолонка("ФормаУпак2");
	ТЗПартий.НоваяКолонка("КолВоУпак2");
	ТЗПартий.НоваяКолонка("КлассМаркировки1_2");
	ТЗПартий.НоваяКолонка("ЗначениеМаркировки1_2");

	// Торговый уровень
	ТЗПартий.НоваяКолонка("ФормаУпак4");
	ТЗПартий.НоваяКолонка("КолВоУпак4");
	ТЗПартий.НоваяКолонка("КлассМаркировки1_4");
	ТЗПартий.НоваяКолонка("ЗначениеМаркировки1_4");

	ТЗПартий.НоваяКолонка("ПолеСортировки"); // реквизит сортировки подобранной партии

	Состояние("Заполнение списка партий ВСД ");
	тз = ВыгрузитьТч(Докум);//СвернутьТч(Докум);
//	("ДокРеализации");
//	("Номенклатура");
//	("ВСД_Продукция_Элемент");
//	("Количество");
//	("КоличествоМест");

	Если ПустоеЗначение(тзАктуальныхПартий) = 1 Тогда // Не передали в параметре

		ВремТз = СоздатьОбъект("ТаблицаЗначений");
		тз.Выгрузить(ВремТз);

		ВремТз.Свернуть("ВСД_Продукция_Элемент","");
		СзПродукцияЭлементы = СоздатьОбъект("СписокЗначений");
		ВремТз.Выгрузить(СзПродукцияЭлементы,,,"ВСД_Продукция_Элемент");
		ВремТз = "";
		// Получим нужные нам партии по фильтру
		тзАктуальныхПартий = ПолучитьАкуальныеПартииИзСправочника(СзПродукцияЭлементы,ВыбПлощадка,ВыбХС, ПолеСортировкиПартий, ЗнакСортировкиПартий);//
	КонецЕсли;

	Если (ПустоеЗначение(тзАктуальныхПартий) = 1) и (ЗаполнятьЭлементыБезПартий = 0) Тогда
		Сообщить("Нет актуальных партий для заполнения всего документа "+Докум);
		Возврат ТЗПартий;
	КонецЕсли;
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

		СтрокиПартий = ПодобратьПартииПоПродукцияЭлемент(тзАктуальныхПартий,тз.ВСД_Продукция_Элемент,тз.Количество);

		Если СтрокиПартий.КоличествоСтрок() = 0 Тогда
			//Сообщить("Нет партий для "+тз.Номенклатура);
			Если ЗаполнятьЭлементыБезПартий = 1 Тогда

				ТЗПартий.НоваяСтрока();
				ТЗПартий.Количество	=  тз.Количество;

				ЗаполнитьСтрокуДокумента(ТЗПартий, тз, Докум);

				Продолжить;
			КонецЕсли;
			Сообщить("Нет партий для ["+тз.Номенклатура +"] Продукция_Элемент ["+ тз.ВСД_Продукция_Элемент +"] Пропускаем!","!");
		   	Продолжить;
		КонецЕсли;
		СтрокиПартий.ВыбратьСтроки();

		Пока СтрокиПартий.ПолучитьСтроку() = 1 Цикл

			ТЗПартий.НоваяСтрока();
			ТЗПартий.Партия 				= СтрокиПартий.Партия;
			ТЗПартий.Количество 			= СтрокиПартий.Колво;
			ТЗПартий.ПолеСортировки 		= СтрокиПартий.ПолеСортировки;

			ЗаполнитьСтрокуДокумента( ТЗПартий, тз, Докум );

		КонецЦикла;
		Если (СтрокиПартий.Итог("Колво") < тз.Количество) и (ЗаполнятьЭлементыБезПартий = 1)  Тогда   //(ТЗПартий.Итог("Количество") < тз.Количество) и (ЗаполнятьЭлементыБезПартий = 1)
			//Добавим с пустыми партиями
			ТЗПартий.НоваяСтрока();
			ТЗПартий.Количество	=  тз.Количество - СтрокиПартий.Итог("Колво") ; //- ТЗПартий.Итог("Количество")

			ЗаполнитьСтрокуДокумента(ТЗПартий, тз, Докум);
		КонецЕсли;
	КонецЦикла;

	Возврат ТЗПартий;
КонецФункции

//************* Функции для подбора партий По ЛИФО, ФИФО, другой сортировке ОКОНЧАНИЕ


//выбираем партию, которая подходит под условия отбора: количество, свойство, площадка
Функция НайтиПервуюПартию(Продукция_Элемент, ВыбПлощадка, ВыбХС) Экспорт

	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПервуюПартию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПервуюПартию(Продукция_Элемент,ВыбПлощадка, ВыбХС);
	КонецЕсли;

	Рез="";

	Спр = СоздатьОбъект("Справочник.ВСД_Партия");
	Если Спр.ВыбратьЭлементыПоРеквизиту("Продукция_Элемент",Продукция_Элемент,1)=1 Тогда
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Получатель_Площадка <> ВыбПлощадка Тогда
				Продолжить;
			КонецЕсли;
			// Много ХС с одинаковым ГУИД - т.е. разные элементы спр. Контрагенты, но ЮЛ одно и то же (куча площадок)
			Попытка
			Если СокрЛП(Спр.Получатель_ХозСубъект.GUID) <> СокрЛП(ВыбХС.GUID) Тогда
				Продолжить;
			КонецЕсли;
			Исключение КонецПопытки;
			Если (Спр.ПометкаУдаления()=0) и (Спр.Количество>0) Тогда
				возврат Спр.ТекущийЭлемент();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат рез;
КонецФункции

//ЖД
Функция ЗаполнитьПартииПоТЧДокумента(Докум,ВыбПлощадка, ВыбХС) Экспорт
    // подбирает партии
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьПартииПоТЧДокумента");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьПартииПоТЧДокумента(Докум,ВыбПлощадка, ВыбХС);
	КонецЕсли;
	ДобавлятьУпаковки = ПолучитьКонстанту("ДобавлятьУпаковки");

	ТЗПартий = СоздатьОбъект("ТаблицаЗначений");
	ТЗПартий.НоваяКолонка("ВСД_Продукция_Элемент",,,,,50,);
	ТЗПартий.НоваяКолонка("Партия",,,,,15,);
	ТЗПартий.НоваяКолонка("Колво","Число",,,,5,);
	ТЗПартий.НоваяКолонка("КолвоМест","Число",,,,5,);
	ТЗПартий.НоваяКолонка("КолвоСписания","Число",,,,5,);
	Если ДобавлятьУпаковки=1 Тогда
		ТЗПартий.НоваяКолонка("КолвоМестСписания","Число",,,,5,);
	КонецЕсли;
	ТЗПартий.НоваяКолонка("ВСД_Производство",,,,,3,);

	Состояние("Заполнение списка партий ВСД ");

	тз = СвернутьТч(Докум);

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

		стр=0;
		Если ТЗПартий.НайтиЗначение(тз.ВСД_Продукция_Элемент,стр,"ВСД_Продукция_Элемент")>0 Тогда
			колво = Число(ТЗПартий.ПолучитьЗначение(стр, "КолвоСписания"));
			ТЗПартий.УстановитьЗначение(стр,"КолвоСписания", колво+тз.Количество);
			Если ДобавлятьУпаковки=1 Тогда
				колвоМест = Число(ТЗПартий.ПолучитьЗначение(стр, "КолвоМестСписания"));
				ТЗПартий.УстановитьЗначение(стр,"КолвоМестСписания", колвоМест+тз.КоличествоМест);
			КонецЕсли;
		Иначе
			ТЗПартий.НоваяСтрока();
			ТЗПартий.ВСД_Продукция_Элемент = тз.ВСД_Продукция_Элемент;
			ТЗПартий.КолвоСписания = тз.Количество;
			Если ДобавлятьУпаковки=1 Тогда
				ТЗПартий.КолвоМестСписания = тз.КоличествоМест;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	//Выберем партии автоматом
	ТЗПартий.ВыбратьСтроки();
	Пока ТЗПартий.ПолучитьСтроку() = 1 Цикл
		Попытка
			ТЗПартий.Партия = НайтиПервуюПартию(ТЗПартий.ВСД_Продукция_Элемент, ВыбПлощадка, ВыбХС);
			ТЗПартий.Колво = ТЗПартий.Партия.Количество;
			Если ДобавлятьУпаковки=1 Тогда
				ТЗПартий.КолвоМест = ТЗПартий.Партия.КоличествоМест;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат ТЗПартий;

КонецФункции

// ================================ Аннулирование ВСД ===========================


Функция ВСД_Аннулирование_ЗапросXML(док)
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|       <ws:apiKey>"+ ПолучитьКонстанту("param_api_key") + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|             <app:issuerId>"+ПолучитьКонстанту("param_issuer_id")+"</app:issuerId>
	|             <app:issueDate>"+ Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|               <merc:withdrawVetDocumentRequest>
	|                  <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|                  <merc:initiator>
	|                      <com:login>"+ПолучитьКонстанту("param_intiator_login")+"</com:login>
	|                  </merc:initiator>
	|                  <merc:vetDocumentId>"+ СокрЛП(док.UUID) +"</merc:vetDocumentId>
	|                  <merc:withdrawReason>Неверно указан объём продукции</merc:withdrawReason>
	|                  <merc:withdrawDate>"+ Преобразовать_Дата_в_Строка(док.ДатаДок, "T23:59:59") +"</merc:withdrawDate>
	|                  <merc:vetDoctor>
	|                      <com:login>"+ ПолучитьКонстанту("param_vetdoctor_login")+"</com:login>
	|                  </merc:vetDoctor>
	|               </merc:withdrawVetDocumentRequest>
	|            </app:data>
	|         </app:application>
	|      </ws:submitApplicationRequest>
	|   </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции


Функция Отправить_ВСД_Аннулирование( док ) Экспорт

	ЗапросXML = ВСД_Аннулирование_ЗапросXML(док);

	appID = ОтправитьТранзакцию( ЗапросXML , док);

	Возврат appID;
КонецФункции


Процедура Аннулировать_ВСД_транзакция( док ) Экспорт

	Если (Док.Вид() = "Реализация") или (Док.Вид() = "ПеремещениеТМЦ") или (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тзВСД = Выбрать_ВСД(Док_ВСД_транзакция);

	Иначе
		Док_ВСД_транзакция = док;
		тзВСД = Выбрать_ВСД(Док);
	КонецЕсли;

	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку()=1 Цикл
		Отправить_ВСД_Аннулирование(тзВСД.Док);
	КонецЦикла;

	Попытка
		докОбъект = СоздатьОбъект("Документ");
		докОбъект.НайтиДокумент( Док_ВСД_транзакция );
		докОбъект.Статус = "Аннулирован";
		докОбъект.Записать();
		докОбъект.Удалить(0);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(8502)");
	КонецПопытки;


КонецПроцедуры


Процедура СоздатьХС(тз) Экспорт

	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(тз.ХозСубъект, "ХС");
	СписокПараметров.ДобавитьЗначение(Сам(), "ГМ");

	ОткрытьФорму("Отчет", СписокПараметров, КаталогМодуля+"ВСД_СоздатьХС.ert");

КонецПроцедуры

Процедура СоздатьПлощадку(тз) Экспорт
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(тз.ХозСубъект, "ХС");
	СписокПараметров.ДобавитьЗначение(Сам(), "ГМ");

	ОткрытьФорму("Отчет", СписокПараметров, КаталогМодуля+"ВСД_СоздатьПлощадку.ert");
КонецПроцедуры

Функция ПогаситьВСД(ВыбДок) Экспорт
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(Сам(), "ГМ");

	СписокПараметров.ДобавитьЗначение(ВыбДок.ИмяФайлаОтвет, "ФайлОтвета");
	СписокПараметров.ДобавитьЗначение(ВыбДок.Получатель_Хозсубъект, "Отправитель_ХозСубъект");
	СписокПараметров.ДобавитьЗначение(ВыбДок.Получатель_Площадка, "Отправитель_Площадка");

	ОткрытьФорму("Отчет", СписокПараметров, КаталогМодуля+"Меркурий_Гашение_ВСД2.ert");
КонецФункции

Функция ОткрытьЗапрос(док) Экспорт
	Попытка
		Сообщить(Док.ИмяФайлаЗапрос);
		ЗапуститьПриложение(Док.ИмяФайлаЗапрос);
	Исключение
		Ошибка = "Не удалось открыть запрос "+Док.ИмяФайлаЗапрос+" ";
		Сообщить(Ошибка);
		СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(8545)");
	КонецПопытки;
КонецФункции

Функция ОткрытьОтвет(док) Экспорт
	Попытка
		Сообщить(Док.ИмяФайлаОтвет);
		ЗапуститьПриложение(Док.ИмяФайлаОтвет);
	Исключение
		Ошибка = "Не удалось открыть ответ "+Док.ИмяФайлаОтвет+" ";
		Сообщить(Ошибка);
		СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(8556)");
	КонецПопытки;
КонецФункции

Функция ВСД_Инвентаризация_ЗаполнитьТЧ(Док)  Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_Инвентаризация_ЗаполнитьТЧ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_Инвентаризация_ЗаполнитьТЧ(Док);
	КонецЕсли;
	//}

	Док.УдалитьСтроки();

	КолвоМакс =500;
	ВвестиЧисло(КолвоМакс, "Введите колво партий", 10, 0, );

	ДатаМакс = "";
	ВвестиДату(ДатаМакс, "Минимальный срок годности",  );

	СпрПартии = СоздатьОбъект("Справочник.ВСД_Партия");
	СпрПартии.ВыбратьЭлементы();
	колво=0;
	Пока СпрПартии.ПолучитьЭлемент()=1 Цикл
		Если (СпрПартии.ПометкаУдаления()=1) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_Площадка <>  Док.Владелец_площадка) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_ХозСубъект <>  Док.Владелец_ХозСубъект) Тогда
			Продолжить;
		КонецЕсли;

		Если ПустоеЗначение(ДатаМакс)=0 Тогда
			Если ПустоеЗначение(СпрПартии.ДатаСрокГодности1)=0 Тогда
				Если СпрПартии.ДатаСрокГодности1 > ДатаМакс Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		колво =колво+1;
		Док.НоваяСтрока();
		Док.Партия = СпрПартии.ТекущийЭлемент();
		//Док.ПриВыбореПартии();
		Док.Продукция = Док.Партия.Продукция;
		Док.ВидПродукции = Док.Партия.ВидПродукции;
		Док.ЕдиницаИзмерения = Док.Партия.ЕдиницаИзмерения;
		Док.ФормаУпаковки = Док.Партия.ФормаУпаковки;
		Док.НаименованиеПродукции = Док.Партия.НаименованиеПродукции;
		Док.ДатаИзготовления1 = Док.Партия.ДатаИзготовления1;
		Док.ДатаИзготовления2 = Док.Партия.ДатаИзготовления2;
		Док.ДатаСрокГодности1 = Док.Партия.ДатаСрокГодности1;
		Док.ДатаСрокГодности2 = Док.Партия.ДатаСрокГодности2;
		Док.Производитель_площадка = Док.Партия.Производитель_Площадка;
		Док.Продукция_Элемент = Док.Партия.Продукция_Элемент;

		если колво >= КолвоМакс Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции

//======= ПРЕДОПРЕДЕЛЁННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ==============

Функция _ВводНаОсновании(Конт, ДокументОснование) Экспорт
	Рез = 0;

	// Производитель_ХозСубъект и Площадка
	Если глЕстьРеквизитШапки("Производитель_ХозСубъект", Конт.Вид()) = 1 Тогда
		Конт.Производитель_ХозСубъект = ПолучитьКонстанту("Отправитель_ХозСубъект");
		Производитель_Площадка = "";
		Если глЕстьРеквизитШапки("Склад", ДокументОснование.Вид()) = 1 Тогда
			Производитель_Площадка = НайтиПлощадкуПоСкладу(ДокументОснование.Склад, Конт.Производитель_ХозСубъект);
		КонецЕсли;
		Если ПустоеЗначение(Производитель_Площадка) = 1 Тогда
			Производитель_Площадка = ПолучитьКонстанту("Отправитель_Площадка");
		КонецЕсли;
		Конт.Производитель_Площадка = Производитель_Площадка;
	КонецЕсли;

	// Получатель_ХозСубъект и Площадка
	Если глЕстьРеквизитШапки("Получатель_ХозСубъект", Конт.Вид()) = 1 Тогда
		Если ДокументОснование.Вид() = "ПеремещениеТМЦ" Тогда
			Конт.Получатель_ХозСубъект = ПолучитьХСПоФирме(ДокументОснование.ФирмаПолучатель);
			Если ПустоеЗначение(Конт.Получатель_ХозСубъект)=1 Тогда
				Сообщить("нет сведений о Получателе "+ДокументОснование.ФирмаПолучатель+" в справочнике ВСД_ХозСубъекты","!!");
				Возврат рез;
			КонецЕсли;
			Конт.Получатель_Площадка = НайтиПлощадкуПоСкладу(ДокументОснование.СкладПолучатель, Конт.Получатель_ХозСубъект);

			Если ПустоеЗначение(Конт.Получатель_Площадка)=1 Тогда
				Сообщить("Не удалось найти площадку ГрузоПолучателя по складу "+ДокументОснование.СкладПолучатель,"!");
				Возврат Рез;
			КонецЕсли;

		Иначе //Реализация
			НазваниеРеквизитаГрузополучатель = ПолучитьКонстанту("НазваниеРеквизитаГрузополучатель");
			Попытка
				Конт.Получатель_ХозСубъект = НайтиХозСубъект(ДокументОснование.Контрагент);
				Если ПустоеЗначение(Конт.Получатель_ХозСубъект)=1 Тогда
					Сообщить("нет сведений о Получателе "+ДокументОснование.Контрагент+" в справочнике ВСД_ХозСубъекты","!!");
					Возврат рез;
				КонецЕсли;
			Исключение
				// Не уверен в правильности. Грузополучатель <> ХозСубъект, это Площадка
				Конт.Получатель_ХозСубъект = НайтиХозСубъект(ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
				Если ПустоеЗначение(Конт.Получатель_ХозСубъект)=1 Тогда
					Сообщить("Нет сведений о Получателе "+ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_ХозСубъекты","!!");
					Возврат рез;
				КонецЕсли;
			КонецПопытки;

			Конт.Получатель_Площадка = ГМ.НайтиПлощадкуПоКонтрагенту(ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));

			Если ПустоеЗначение(Конт.Получатель_Площадка)=1 Тогда
				Сообщить("Нет сведений о площадке ГрузоПолучателя "+ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_Площадки","!");
				Возврат Рез;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// Общие реквизиты
	Конт.ДатаДок = ДокументОснование.ДатаДок;

	Если глЕстьРеквизитШапки("ДокОснование", Конт.Вид()) = 1 Тогда
		Конт.ДокОснование = ДокументОснование.ТекущийДокумент();
	КонецЕсли;

	ВыбФирма = ПолучитьФирмуИзКонтекста(Конт);
	Попытка Конт.ВыбФирма = ВыбФирма; Исключение КонецПопытки;

	ФирмаИмяРеквизита = "";
	ПолучитьИмяРеквизитаФирма(Конт.Вид(), ФирмаИмяРеквизита);
	Если ФирмаИмяРеквизита <> "" Тогда
		Конт.УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);
	КонецЕсли;

	Если глЕстьРеквизитШапки("Автор", Конт.Вид()) = 1 Тогда
		Конт.Автор = ПолучитьАвтора();
		Попытка	Конт.Филиал = Конт.Автор.Филиал; Исключение	КонецПопытки;
	КонецЕсли;

	// Отправитель_ХозСубъект и Площадка
	Если глЕстьРеквизитШапки("Отправитель_ХозСубъект", Конт.Вид()) = 1 Тогда
		Конт.Отправитель_ХозСубъект = ПолучитьКонстанту("Отправитель_ХозСубъект");
		Отправитель_Площадка = "";
		Если глЕстьРеквизитШапки("Склад", ДокументОснование.Вид()) = 1 Тогда
			Отправитель_Площадка = НайтиПлощадкуПоСкладу(ДокументОснование.Склад, Конт.Отправитель_ХозСубъект);
		КонецЕсли;
		Если ПустоеЗначение(Отправитель_Площадка) = 1 Тогда
			Отправитель_Площадка = ПолучитьКонстанту("Отправитель_Площадка");
		КонецЕсли;
		Конт.Отправитель_Площадка = Отправитель_Площадка;
	КонецЕсли;

	// Перевозчик_ХозСубъект
	Если глЕстьРеквизитШапки("Перевозчик_ХозСубъект", Конт.Вид()) = 1 Тогда
		Конт.Перевозчик_ХозСубъект = ПолучитьКонстанту("Перевозчик_ХозСубъект");
	КонецЕсли;

	Возврат 1;
КонецФункции

Процедура _ПриОткрытии(Конт) Экспорт
	фМодальныйРежим=Конт.Форма.МодальныйРежим();
	Если фМодальныйРежим=0 Тогда
		ОбъектПривязка=СоздатьОбъект("Меркурий.Привязки");
		ОбъектПривязка.УстановитьФорму(Конт.Форма);
		Попытка Конт.оПривязки=ОбъектПривязка; Исключение КонецПопытки;
	КонецЕсли;

	Попытка
		Конт.ВыбФирма = ПолучитьФирмуИзКонтекста(Конт);

		Если Конт.ВыбФирма = "" Тогда
			Если ПустоеЗначение(Конт.Отправитель_ХозСубъект) = 0 Тогда
				Конт.ВыбФирма = ПолучитьФирмуПоХС(Конт.Отправитель_ХозСубъект);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Попытка
		Если СписокФирм.РазмерСписка() = 0 Тогда
			Предупреждение("Нет сохраненных настроек, обмен невозможен!");
			СтатусВозврата(0); Возврат;
		Иначе
			СписокФирм.Выгрузить(Конт.СписокФирм);
			Поз = СписокФирм.НайтиЗначение(Конт.ВыбФирма);
			Если Поз <> 0 Тогда
				Конт.СписокФирм.ТекущаяСтрока(Поз);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;

	РасширениеФормы=СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(Конт.Форма);
	_ТипОбъекта = РасширениеФормы.ТипОбъекта();

	Инициализация(Конт);
	Если _ТипОбъекта = "Документ" Тогда
		Если глЕстьРеквизитШапки("ТермическоеСостояние", Конт.Вид()) = 1 Тогда
			Попытка
				ГМ.ТермическиеУсловияПеревозки.Выгрузить(Конт.спТермУсловияПеревозки);
				Если Конт.ТермическоеСостояние > 0 Тогда
					Конт.спТермУсловияПеревозки.ТекущаяСтрока(Конт.ТермическоеСостояние);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если (Конт.Выбран() = 0) и (ПустоеЗначение( Конт.ДокОснование )=1) Тогда
		    ЗагрузитьПараметрыВФорму(Конт);
		КонецЕсли;
	ИначеЕсли _ТипОбъекта = "ВнешнийОтчет" Тогда
	    ЗагрузитьПараметрыВФорму(Конт);
	КонецЕсли;

КонецПроцедуры

Процедура _ПослеОткрытия(Конт) Экспорт
	фМодальныйРежим=Конт.Форма.МодальныйРежим();
	Если фМодальныйРежим=0 Тогда
		Попытка Конт.оПривязки.ПослеОткрытия(); Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура _ПриИзмененииРазмераОкна(Конт, ТипСобытия, НовШирина, НовВысота) Экспорт
	фМодальныйРежим=Конт.Форма.МодальныйРежим();
	Если фМодальныйРежим=0 Тогда
		Попытка Конт.оПривязки.ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота); Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//======= ТАБЛИЧНОЕ ПОЛЕ ==============

//******************************************************************************
Процедура ВывестиФлажок(ОформлениеСтроки, ДанныеСтроки, идКолонки="Пометка") Экспорт
	ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить(идКолонки);
	ОбъектЯчейка.ЗначениеФлажка=ДанныеСтроки.Получить(идКолонки);
	ОбъектЯчейка.ОтображатьФлажок=1;
	ОбъектЯчейка.ОтображатьТекст=0;
КонецПроцедуры

//******************************************************************************
Процедура ПриАктивизацииСтрокиТП(тпОбъект, тзОбъект) Экспорт
	Если ТипЗначенияСтр(тпОбъект)<>"ТабличноеПоле" Тогда Возврат; КонецЕсли;
	Если ПустоеЗначение(тпОбъект.ТекущиеДанные)=1 Тогда Возврат; КонецЕсли;
	Если тзОбъект.КоличествоСтрок()=0 Тогда Возврат; КонецЕсли;
	тзОбъект.ТекущаяСтрока(тпОбъект.ТекущиеДанные.НомерСтроки);
	тзОбъект.ПолучитьСтрокуПоНомеру(тпОбъект.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

//******************************************************************************
Процедура ПриАктивизацииКолонкиТП(тпОбъект, тзОбъект) Экспорт
	Если ТипЗначенияСтр(тпОбъект)<>"ТабличноеПоле" Тогда Возврат; КонецЕсли;
	Если тзОбъект.КоличествоКолонок()=0 Тогда Возврат; КонецЕсли;
	тзОбъект.ТекущаяКолонка(тпОбъект.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура СоздатьКолонкиПоИсточнику(тпСсылка, тзСсылка, фНомерСтроки=0)
Перем Заголовок, Ширина, ФорматнаяСтрока, Положение;
	Если фНомерСтроки=1 Тогда
		НоваяКолонка=тпСсылка.Колонки.Добавить("НомерСтроки");
		НоваяКолонка.Заголовок="№ строки";
		НоваяКолонка.Данные="НомерСтроки";
		НоваяКолонка.Ширина=30;
	КонецЕсли;
	Для ъ=1 По тзСсылка.КоличествоКолонок() Цикл
		идКолонки=тзСсылка.ПолучитьПараметрыКолонки(ъ,,,, Заголовок, Ширина, ФорматнаяСтрока, Положение);
		Если тзСсылка.ВидимостьКолонки(идКолонки)=0 Тогда Продолжить; КонецЕсли;
		НоваяКолонка=тпСсылка.Колонки.Добавить(идКолонки);
		НоваяКолонка.Заголовок=Заголовок;
		НоваяКолонка.Данные=идКолонки;
		НоваяКолонка.ГоризонтальноеВыравнивание=Положение;
		НоваяКолонка.Ширина=?(Ширина>0, Ширина, 15)*6.2;
		НоваяКолонка.Формат=ФорматнаяСтрока;
		Если Ширина = 0 Тогда НоваяКолонка.Видимость = 0; КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СоздатьТабличноеПоле(Конт, ЭлементДиалога, ОбъектИсточник, фВидимость=1, фНомерСтроки=0, КонтекстКласса=0) Экспорт
	ОбъектФорма=СоздатьОбъект("Форма");
	ОбъектФорма.УстановитьФорму(Конт.Форма);
	Если ПустоеЗначение(КонтекстКласса)=1 Тогда
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления("ТабличноеПоле", ЭлементДиалога);

		ОбъектТабличноеПоле.РежимВыделенияСтроки =2;
		ОбъектТабличноеПоле.ЦветФонаВыделения=223322;
		ОбъектТабличноеПоле.SetTextMargins(, 0, , 2);
		//ОбъектТабличноеПоле.ЧередованиеЦветовСтрок = 1;
	Иначе
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления(КонтекстКласса, ЭлементДиалога);
	КонецЕсли;

	Конт.Форма.ПолучитьАтрибут(ЭлементДиалога).Видимость(фВидимость);

	Если ТипЗначенияСтр(ОбъектИсточник)="ТаблицаЗначений" Тогда
		Источник=СоздатьОбъект("VTProvider");
		Источник.УстТаблицуЗначений(ОбъектИсточник);
		СоздатьКолонкиПоИсточнику(ОбъектТабличноеПоле, ОбъектИсточник,фНомерСтроки);
		ОбъектТабличноеПоле.ПоставщикДанных=Источник;
	КонецЕсли;
	Возврат ОбъектТабличноеПоле;
КонецФункции

//******************************************************************************
Процедура _ЗакладкиВыбор(тпЗакладки, ОбъектКолонка) Экспорт
	стрИмяШрифта="MSSansSerif"; //"Arial";
	Для ъ=0 По тпЗакладки.Колонки.Количество()-1 Цикл
		текКолонка=тпЗакладки.Колонки.Получить(ъ);
		текКолонка.ЦветТекстаЗаголовка=-1;
		текКолонка.ЦветФонаЗаголовка=14745568; //12632256; //14745568; //-1; //12632256; //12903393;
		текКолонка.ШрифтЗаголовка=_ФабрикаОбъектов.Шрифт(стрИмяШрифта, 8, 0, 0);
		текКолонка.ГоризонтальноеВыравнивание=3;
	КонецЦикла;
	ОбъектКолонка.ЦветТекстаЗаголовка=16711680; //16711680; //7490868; //12463901;
	ОбъектКолонка.ЦветФонаЗаголовка=12639424; //14745568; //14745568;
	ОбъектКолонка.ШрифтЗаголовка=_ФабрикаОбъектов.Шрифт(стрИмяШрифта, 8, 1, 0);
	тпЗакладки.ТекущаяКолонка=ОбъектКолонка;
КонецПроцедуры

//******************************************************************************
Процедура _ЗакладкиЗаполнить(тпЗакладки, спЗакладки) Экспорт
	тпЗакладки.Шрифт=_ФабрикаОбъектов.Шрифт("MSSansSerif", 8, 0);
	тпЗакладки.СтильЗаголовков=1;
	тпЗакладки.РазрешитьПеретаскивание=0;
	тпЗакладки.РазрешитьНачалоПеретаскивания=0;
	тпЗакладки.ВертСкроллер=1;
	тпЗакладки.УстановитьОтступы(, 2, , 6);
	Для ъ=1 По спЗакладки.РазмерСписка() Цикл
		спЗакладки.Пометка(ъ, 1);
	КонецЦикла;

	Для ъ=1 По спЗакладки.РазмерСписка() Цикл
		Если спЗакладки.Пометка(ъ)=0 Тогда Продолжить; КонецЕсли;
		стрПредставление="";
		стрИдентификатор=спЗакладки.ПолучитьЗначение(ъ, стрПредставление);

		ОбъектКолонка=тпЗакладки.Колонки.Добавить(стрИдентификатор);
		ОбъектКолонка.Данные=стрИдентификатор;
		ОбъектКолонка.Заголовок=стрПредставление;
		ОбъектКолонка.Ширина=СтрДлина(стрПредставление)*10;
		ОбъектКолонка.ИзменениеРазмера=0;
		ОбъектКолонка.ЦветТекстаЗаголовка=-1;
		ОбъектКолонка.ЦветФонаЗаголовка=14745568; //12632256; //12632256; //12903393;
		ОбъектКолонка.ГоризонтальноеВыравнивание=3;

		Если ъ=1 Тогда _ЗакладкиВыбор(тпЗакладки, ОбъектКолонка); КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///******************************** ADirks 10.07.2018 ************
//ВНовомОкне - м.б. 0, 1 или строка - ИД формы
Функция ОткрытьОбработку(Имя, Параметры = "", ВНовомОкне = 0, фМодально = 0) Экспорт
    Суффикс = "";
    Если ВНовомОкне = 0 Тогда
        Суффикс = "#";
    ИначеЕсли ТипЗначения(ВНовомОкне) = 2 Тогда
        Суффикс = "#"+ВНовомОкне;
    КонецЕсли;

    Парам = Параметры;
    Если фМодально = 1 Тогда
        ОткрытьФормуМодально("Отчет"+Суффикс, Парам, КаталогМодуля+Имя+".ert");
    Иначе
        ОткрытьФорму("Отчет"+Суффикс, Парам, КаталогМодуля+Имя+".ert");
    КонецЕсли;

    Возврат Парам;
КонецФункции
///******************************** ADirks 10.07.2018 ************

Процедура Ошибка() Экспорт

	Попытка
		А = 1/0;
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(8937)");
	КонецПопытки;
КонецПроцедуры