// ГМ2 = Глобавльный Модуль для Ветис 2.*
// В модуле находятся функции для взамиодействия с Ветис 2.*
//
// ===============================================================
//Авторы:
// Синявский Филипп phsin@kb99.pro
// Жуков Дмитрий zhukov@kb99.pro

Перем ТаблицаПереопределенныхФункций;

Функция  ПолучитьПартии2(Отправитель_Площадка, Смещение=0, УдалятьПартии=1, ПартияНачПериода = "", ПартияКонПериода = "" ) Экспорт Далее
//Функция Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции) Экспорт Далее
Функция ПолучитьИмяФайла_МаршрутДоставки(Док) Экспорт Далее

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Конструктор()

	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");

	глМеркурийИнтеграция_2 = СоздатьОбъект("МеркурийИнтеграция_2");
    глМеркурийИнтеграция_2.Инициализация(Сам());

КонецПроцедуры

Процедура Деструктор()
КонецПроцедуры
//

Процедура Инициализация(ГлобавльныйМодуль) Экспорт
	ГМ = ГлобавльныйМодуль;
КонецПроцедуры

//{======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию") = 1 Тогда 
		Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
	КонецЕсли;
		
	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;

	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;
КонецФункции // МодульВыполнения
//}======================================================================

//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============

Функция УровниУпаковки_из_XML(PList) Экспорт
	//Список физической упаковки. vd:packageList
	// С уровнями
	//   Уровни <dt:level>
	//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
	//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
	//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
	//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
	//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
	//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа.

	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете.
	ТЗУровни = Создатьобъект("ТаблицаЗначений");
	ТЗУровни.НоваяКолонка("НомерУровня","Число",1,0,,2);
	ТЗУровни.НоваяКолонка("Упаковка","Справочник.ВСД_ФормыУпаковки");
	ТЗУровни.НоваяКолонка("КолВо","Число",9,0,,5);
	ТЗУровни.НоваяКолонка("Маркировки");

	Попытка
	    Для l1 = 0 По PList.length - 1 Цикл
			Узел = PList.item(l1);
			ТЗУровни.НоваяСтрока();
			ТЗУровни.НомерУровня = Узел.selectSingleNode("dt:level").text;   // Уровень упаковки
			//Попытка	ПГУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text; Исключение ПГУИД = ""; КонецПопытки;
			//Попытка	ПУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:uuid").text; Исключение ПУИД = "";	КонецПопытки;
			//dt:globalID  	Уникальный идентификатор упаковки.
			//Попытка ГлИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:globalID").text;Исключение	ГлИД = "";	КонецПопытки;
			// <dt:name>  	Наименование упаковки.
			//Попытка	ПакИмя = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text;Исключение ПакИмя = ""; КонецПопытки;
			// dt:quantity  	Количество единиц упаковки.
			Попытка ТЗУровни.КолВо = Число(Узел.selectSingleNode("dt:quantity").text);Исключение  КонецПопытки;

			Попытка ТЗУровни.Упаковка = ГМ.НайтиФормуУпаковки( Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text, Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text); Исключение  КонецПопытки;

			СзМаркировки = СоздатьОбъект("Списокзначений");
			//Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
                //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks>
			Попытка
               	Маркировки = Узел.selectNodes("dt:productMarks");

				Для кк =0 по Маркировки.length - 1 Цикл
					МаркН = Маркировки.item(кк);
					МаркЗнач = МаркН.text;
					МаркКласс = МаркН.getattribute("class");
					СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.РазмерСписка()>0 Тогда
		        ТЗУровни.Маркировки = ЗначениеВСтроку(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;

	Если ТЗУровни.КоличествоСтрок()>0 Тогда
        Возврат ЗначениеВСтроку(ТЗУровни);
	Иначе
		Возврат "";
    КонецЕсли;
КонецФункции

Функция СвязанныеДокументы_из_XML(DocList) Экспорт
	// Связанные документы - м.б. несколько, для гашения в тестовой версии достаточно ТТН
	// другие связанные документы не нашел куда включать в запросе на гашение
    // На всякий случай считаем их в ТЗ

    // ТипОтношенияДок
	//1 	Сопроводительный документ. 	Complementary accompanying document.
	//2 	Предшествующий документ. 	Preceding document (Ancestor).
	//3 	Следующий документ. 	Subsequent/following document (Child).
	//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
	//5 	Документ, заменяющий текущий документ. 	Replaced by document.
	//6 	Связанный документ. 	Related document.

	ТЗСвДокументов = СоздатьОбъект("ТаблицаЗначений");
	ТЗСвДокументов.НоваяКолонка("ТипДокумента","Число");
	ТЗСвДокументов.НоваяКолонка("НомерДокумента","Строка");
	ТЗСвДокументов.НоваяКолонка("СерияДокумента","Строка");
	ТЗСвДокументов.НоваяКолонка("ДатаДокумента","Строка");
	ТЗСвДокументов.НоваяКолонка("ТипОтношенияДок","Число");

	Попытка
	    Для l1 = 0 По DocList.length - 1 Цикл
			Узел = DocList.item(l1);
			ТЗСвДокументов.НоваяСтрока();
            Попытка ТЗСвДокументов.ТипДокумента = 		Узел.selectSingleNode("vd:type").text; Исключение КонецПопытки;
            Попытка ТЗСвДокументов.НомерДокумента =		Узел.selectSingleNode("vd:issueNumber").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.СерияДокумента =  	Узел.selectSingleNode("vd:issueSeries").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.ДатаДокумента =  	Узел.selectSingleNode("vd:issueDate").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.ТипОтношенияДок =	Узел.selectSingleNode("vd:relationshipType").text; Исключение КонецПопытки;
		КонецЦикла;
	Исключение КонецПопытки;

	Если ТЗСвДокументов.КоличествоСтрок()>0 Тогда
	    Возврат ЗначениеВСтроку(ТЗСвДокументов);
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция СписокНомеровПартий_из_XML(batchList) Экспорт
	// Номер Партии - м.б. несколько
	СпНомераПартий =  СоздатьОбъект("СписокЗначений");
	Попытка
	    Для l1 = 0 По batchList.length - 1 Цикл
			//НомерПартии = batchList.item(l1).selectSingleNode("vd:batchID").text;
			СпНомераПартий.ДобавитьЗначение(batchList.item(l1).text);
		КонецЦикла;
	Исключение 	КонецПопытки;
	Возврат ЗначениеВСтроку(СпНомераПартий);
КонецФункции

Функция СоздатьТзМаршрутСледования() Экспорт
	//Порядок колонок имеет значние при сохранинии в Файл => структура должна быть единообразна

	ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТзТочкиМаршрута.НоваяКолонка("ВыбХС","Справочник.ВСД_ХозСубъект");
	ТзТочкиМаршрута.НоваяКолонка("ВыбПлощадка","Справочник.ВСД_Площадка",,,"Площадка",20);
	ТзТочкиМаршрута.НоваяКолонка("Страна","Справочник.ВСД_Страна");
	ТзТочкиМаршрута.НоваяКолонка("Регион","Справочник.ВСД_Регион");
	ТзТочкиМаршрута.НоваяКолонка("Район","Справочник.ВСД_Район");
	ТзТочкиМаршрута.НоваяКолонка("Город","Справочник.ВСД_Город");
	ТзТочкиМаршрута.НоваяКолонка("НасПункт",);
	ТзТочкиМаршрута.НоваяКолонка("Улица","Справочник.ВСД_Улица");
	ТзТочкиМаршрута.НоваяКолонка("Дом","Строка");
	ТзТочкиМаршрута.НоваяКолонка("Строение","Строка");
	ТзТочкиМаршрута.НоваяКолонка("Помещение","Строка");
	ТзТочкиМаршрута.НоваяКолонка("Перегрузка","Число",1,0,); //будем считать, что отмечаются только пункты перегрузки = true
	ТзТочкиМаршрута.НоваяКолонка("ТипТранспорта","Число",2,0,"Тип транспорта",5);
	ТзТочкиМаршрута.НоваяКолонка("НомерТС","Строка",50,,"Номер ТС",10);  // ЖД Что это за реквизит???
	ТзТочкиМаршрута.НоваяКолонка("номерАвто");
	ТзТочкиМаршрута.НоваяКолонка("номерКонтейнера");
	ТзТочкиМаршрута.НоваяКолонка("номерВагона");
	ТзТочкиМаршрута.НоваяКолонка("номерПрицепа");
	ТзТочкиМаршрута.НоваяКолонка("НазваниеСудна");
	ТзТочкиМаршрута.НоваяКолонка("НомерАвиарейса");
	ТзТочкиМаршрута.НоваяКолонка("UUID",); //ТзТочкиМаршрута.НоваяКолонка("UUID","Строка",36, ,"UUID",10);
	ТзТочкиМаршрута.НоваяКолонка("НомерТочки");//ТзТочкиМаршрута.НоваяКолонка("НомерТочки","Число",3,0,"Номер точки",5);
	ТзТочкиМаршрута.НоваяКолонка("Название");

	Возврат ТзТочкиМаршрута;
КонецФункции

Функция МаршрутСледования_из_XML(Routelist) Экспорт
    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
	//ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТЗточкиМаршрута = СоздатьТзМаршрутСледования();

	Попытка
	    Для l1 = 0 По Routelist.length - 1 Цикл
			Узел = Routelist.item(l1);
			ТЗточкиМаршрута.НоваяСтрока();
            Попытка ТЗточкиМаршрута.UUID					 = 		Узел.selectSingleNode("bs:uuid").text; Исключение КонецПопытки;
            Попытка ТЗточкиМаршрута.НомерТочки				 =		Узел.selectSingleNode("vd:sqnId").text; Исключение КонецПопытки;
			Попытка Площадка_GUID = Узел.selectSingleNode("vd:enterprise").selectSingleNode("bs:guid").text; Исключение КонецПопытки;
			Попытка ТЗточкиМаршрута.ВыбПлощадка				 =  	ГМ.НайтиПлощадку( Площадка_GUID ); Исключение КонецПопытки;
			//Попытка ТЗточкиМаршрута.ПредприятиеНаименование	 =  	Узел.selectSingleNode("vd:enterprise").selectSingleNode("dt:name").text; Исключение КонецПопытки;
            Попытка ТЗточкиМаршрута.Перегрузка				 = 		?(Узел.selectSingleNode("vd:transshipment").text = "true",1,0); Исключение КонецПопытки;
            Попытка ТЗточкиМаршрута.ТипТранспорта			 = 		Число(Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportType").text); Исключение КонецПопытки;

			Если ТЗточкиМаршрута.ТипТранспорта = 1 Тогда
				Попытка ТЗточкиМаршрута.номеравто 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:vehicleNumber").text; Исключение КонецПопытки;
				Попытка ТЗточкиМаршрута.номерПрицепа 	= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:trailerNumber").text; Исключение КонецПопытки;;
				Попытка ТЗточкиМаршрута.номерКонтейнера 	= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:containerNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 2 Тогда
				Попытка ТЗточкиМаршрута.номерВагона 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:wagonNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 3 Тогда
				Попытка ТЗточкиМаршрута.НомерАвиарейса 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:flightNumber").text; Исключение КонецПопытки;
			Иначеесли (ТЗточкиМаршрута.ТипТранспорта = 4) или (ТЗточкиМаршрута.ТипТранспорта = 5) или (ТЗточкиМаршрута.ТипТранспорта = 6) Тогда
				Попытка ТЗточкиМаршрута.НазваниеСудна 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:shipName").text; Исключение КонецПопытки;
//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;

			КонецЕсли;
            ТЗточкиМаршрута.НомерТС = СокрЛП(ТЗточкиМаршрута.номеравто) + СокрЛП(ТЗточкиМаршрута.номерВагона) + СокрЛП(ТЗточкиМаршрута.НомерАвиарейса)+ СокрЛП(ТЗточкиМаршрута.НазваниеСудна);; //Что-то тут не так
		КонецЦикла;
	Исключение КонецПопытки;

	ТЗточкиМаршрута.Сортировать("+НомерТочки");

	Если ТЗточкиМаршрута.КоличествоСтрок()>0 Тогда
	    Возврат (ТЗточкиМаршрута);
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции


Функция Производители_из_XML(ProducerList) Экспорт
	//Информация о предприятиях-производителях продукции.
   	//Если предприятие было задано из справочника, то вернутся uuid и guid
   	//Если предприятие было указано текстом, то вернется name

	ТзПроизводителей = СоздатьОбъект("ТаблицаЗначений");
	ТзПроизводителей.НоваяКолонка("Площадка","Справочник.ВСД_Площадка");
	ТзПроизводителей.НоваяКолонка("Роль","Строка",15);
	ТзПроизводителей.НоваяКолонка("Имя","Строка",50);
	Попытка
	    Для l1 = 0 По ProducerList.length - 1 Цикл
			ГУидПроизводителя = ProducerList.item(l1).selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
			ТзПроизводителей.НоваяСтрока();
			ТзПроизводителей.Площадка = ГМ.НайтиПлощадку(ГУидПроизводителя);
			Попытка ТзПроизводителей.Роль =  ProducerList.item(l1).selectSingleNode("dt:role").text; Исключение ТзПроизводителей.Роль = "PRODUCER"; КонецПопытки;
			Попытка ТзПроизводителей.Имя =  ProducerList.item(l1).selectSingleNode("dt:name").text; Исключение ТзПроизводителей.Имя = ""; КонецПопытки;

			//СпПроизводителей.ДобавитьЗначение(ГМ.НайтиПлощадку(ГУидПроизводителя));
		КонецЦикла;
	Исключение 	КонецПопытки;
	Возврат  ЗначениеВСтроку(ТзПроизводителей);
КонецФункции

Процедура Фасовка_из_XML(packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт
	//<dt:packaging> Фасовка.
	// Фасовка м.б. указана по требованию сети, Параметры фасовки привязаны к ВД_ПродукцияЭлемент
		// 	Тип упаковки.
		//Попытка	ТипФасовки = packaging.selectSingleNode("dt:packagingType").text; Исключение ТипФасовки ="";	КонецПопытки;
		// 	Идентификатор версии типа упаковки.
		//Попытка ФасУИД =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:uuid").text; Исключение КонецПопытки;

	Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение 	КонецПопытки;
	Попытка ФасовкаФормаУпаковки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
	//  	Уникальный идентификатор упаковки.
	//Попытка	ФасУН =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
	//  	Количество единиц упаковки.
	Попытка	ФасовкаКоличество = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
	// Объём единицы упаковки товара.
	Попытка	ФасовкаОбъем = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
	// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name>
	Попытка	ФасовкаЕдиницаИзм = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;
КонецПроцедуры

// =========== Общие функции ==================

//https://htmlweb.ru/html/symbols.php
Функция ЗаменитьСпецСимволы(Стр) Экспорт
    Рез = СокрЛП(Стр);
	Рез = СтрЗаменить(Рез,"&" ,"&amp;" );
	Рез = СтрЗаменить(Рез,"""","&quot;");
	Рез = СтрЗаменить(Рез,"<" ,"&lt;"  );
	Рез = СтрЗаменить(Рез,">" ,"&gt;"  );
	Рез = СтрЗаменить(Рез,"'" ,"&#039;");
	Рез = СтрЗаменить(Рез,"№" ,"&#8470;");
	//Рез = СтрЗаменить(Рез,"/" ,"//");
	Возврат Рез;
КонецФункции

// Поиск документа по ууид
Функция НайтиВСДпоUUID( uuid, ВидДокумента="", СоздаватьДокумент = 1 ) Экспорт

	Если ПустоеЗначение(UUID)=1 Тогда
		Возврат "";
	КонецЕсли;
	Если ПустоеЗначение(ВидДокумента) = 1 Тогда
		ВидДокумента = "ВСД2";
	КонецЕсли;


	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ГМ.ЭтоSQL=1 ТОгда
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();

		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД
	  	|where
	  	|	( $ДокВСД.UUID = :uuid)
	  	|";
		RS.УстановитьТекстовыйПараметр("uuid", uuid);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД
	  	|where
	  	|	( ДокВСД.UUID = :uuid)
	  	|";
		Запрос.Подставлять("uuid", uuid);
		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	//Возврат тз;
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда
		Если  СоздаватьДокумент = 1 Тогда
			Док.Новый();
			Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
		КонецЕсли;
		//Док.applicationId = applicationId;

	Иначе
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();

		Сообщить("Найден "+Док.ТекущийДокумент());
	конецЕсли;

	Возврат Док;
КонецФункции

//{================= Партии ============================

// найдем документ ВСД_АктуальныеПартии на основании докСсылка
Функция НайтиДокПартий(докСсылка)
	
	Если ПустоеЗначение(докСсылка)=1 Тогда 
		
		докПартии="";
		
		докПартии = СоздатьОбъект("Документ.ВСД_АктуальныеПартии");
		докПартии.Новый();
		докПартии.ДатаДок = Текущаядата();
		докПартии.Отправитель_ХозСубъект = ГМ.ПолучитьКонстанту("Отправитель_ХозСубъект");
		докПартии.Отправитель_Площадка = ГМ.ПолучитьКонстанту("Отправитель_Площадка");
		докПартии.applicationID = ГМ.Компонента.ApplicationId;
		//докПартии.Статус = ;
		докПартии.Автор = ГМ.ПолучитьАвтора();
		Попытка докПартии.Фирма = докСсылка.Фирма; Исключение КонецПопытки;
				
		докПартии.ДокОснование = докСсылка;
		докПартии.Записать();	
		
		Возврат докПартии.ТекущийДокумент();

	ИначеЕсли (докСсылка.Вид() = "ВСД_АктуальныеПартии") Тогда 
		
		Возврат докСсылка;
		
	ИначеЕсли (докСсылка.Вид() = "ВСД2_Инвентаризация") или 
			(докСсылка.Вид() = "ВСД2_Производство") или
			(докСсылка.Вид() = "ВСД2_транзакция") или
			(докСсылка.Вид() = "ВСД2") или
			(докСсылка.Вид() = "ВСД2_ОбъединениеПартий") Тогда 
		
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(докСсылка.ДатаДок, КонГода(докСсылка.ДатаДок), докСсылка);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			Если (Док.Вид()="ВСД_АктуальныеПартии") Тогда
				Док.СделатьНеПроведенным();
				Док.УдалитьСтроки();
				Док.Записать();
				докПартии = Док.ТекущийДокумент();
			КонецЕсли;
		КонецЦикла;
		
		Если ПустоеЗначение( докПартии )=1 Тогда 
		
			докПартии = СоздатьОбъект("Документ.ВСД_АктуальныеПартии");
			докПартии.Новый();
			докПартии.ДатаДок = Текущаядата();
			докПартии.Отправитель_ХозСубъект = ГМ.ПолучитьКонстанту("Отправитель_ХозСубъект");
			докПартии.Отправитель_Площадка = ГМ.ПолучитьКонстанту("Отправитель_Площадка");
			докПартии.applicationID = ГМ.Компонента.ApplicationId;
			//докПартии.Статус = ;
			докПартии.Автор = ГМ.ПолучитьАвтора();
			Попытка докПартии.Фирма = докСсылка.Фирма; Исключение КонецПопытки;
					
			докПартии.ДокОснование = докСсылка;
			докПартии.Записать();	
		КонецЕсли;
		
		Возврат докПартии.ТекущийДокумент()
		
	КонецЕсли;

	Возврат "";

КонецФункции

Функция ПолучитьИмяФайла_УровниУпаковки(Объект) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИмяФайла_УровниУпаковки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИмяФайла_УровниУпаковки(Объект);
	КонецЕсли;
	//}

	КаталогПеревозки = ГМ.КаталогМодуля+"Levels\";
	Если ФС.СуществуетФайл(КаталогПеревозки) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(КаталогПеревозки);
		Исключение
			Предупреждение("Не создан каталог уровней упаковки!"); Возврат "";
		КонецПопытки;
	КонецЕсли;
    Если ТипЗначения(Объект) = 12 Тогда  //документ
   		Рез = КаталогПеревозки+Объект.uuid+".mrk";
	Иначе
		Рез = КаталогПеревозки+Объект.guid+".mrk";
    КонецЕсли;

	Возврат Рез;
КонецФункции

Функция ЗаписатьПартию2( stockEntry ) 

	//стандартное поведение функции
		//t = stockEntry.text;
		active = stockEntry.selectSingleNode("bs:active").text;
		last = stockEntry.selectSingleNode("bs:last").text;
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;

		Партия = ГМ.НайтиПартиюПоGUID(guid);

		Попытка Партия.active = ?( active="true",1,0) Исключение	КонецПопытки;
		Попытка Партия.last = ?( last="true",1,0) Исключение	КонецПопытки;
				
		Если active="false" Тогда
			Сообщить("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна","i");
			Если Партия.Выбран()=1 Тогда 
				Партия.Записать();
			КонецЕсли;
			Партия.Удалить(0);
			Возврат Партия;
		КонецЕсли;

		st = stockEntry.selectSingleNode("bs:status").text;
		entryNumber = stockEntry.selectSingleNode("vd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;

		Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);

		Партия.ВсдДата = ГМ.СтрокаВДату(createDate);
		Партия.ДатаИзменения = ГМ.СтрокаВДату( updateDate );
		Партия.Статус = st;
		Партия.GUID = guid;
		Партия.UUID = uuid;
		Партия.НомерЗаписи = entryNumber;


		batch = stockEntry.selectSingleNode("vd:batch");

		product 	= batch.selectSingleNode("vd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vd:subProduct").selectSingleNode("bs:guid").text;
		Попытка	productItem = batch.selectSingleNode("*[local-name()='productItem'] ");	Исключение	productItem = "";	КонецПопытки;

		Партия.Продукция 	= ГМ.НайтиПродукцию(product);
		Партия.ВидПродукции = ГМ.НайтиВидПродукции(subProduct);

		Партия.Продукция_Элемент = ГМ.Найти_Продукция_Элемент2(productItem, Партия.Продукция, Партия.ВидПродукции);
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
		Партия.НаименованиеПродукции = Партия.Продукция_Элемент.Наименование;


		//<dt:packaging> Фасовка. - думаю в Партии ненужна, т.к. связана с productItem

		//Попытка packaging = batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='packaging']"); Исключение packaging=""	КонецПопытки;
		//Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение ФасовкаНаименование=""	КонецПопытки;
		//Попытка Партия.ФормаУпаковки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
		//Попытка	Партия.КоличествоМест = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
		//Попытка	Партия.ОбъемФас = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
		//Попытка	Партия.ЕдиницаИзмеренияФас = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;


		//// Объем продукции

		volume 		= batch.selectSingleNode("vd:volume").text;
		//unit		= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;
		Попытка	unitGuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;Исключение	unitGuid = "";	КонецПопытки;
		Попытка	unitUuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:uuid").text;Исключение	unitUuid = ""; КонецПопытки;
		//еще есть Наименование единицы измерения. 	<dt:name>кг.</dt:name>
		Партия.Количество 	= Число(volume);
		Партия.ЕдиницаИзмерения = ГМ.НайтиЕдИзмерения( unitGuid, unitUUID );;

		ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
		Попытка dateOfProduction = batch.selectSingleNode("vd:dateOfProduction"); исключение КонецПопытки;
		ГМ.Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);
		Партия.ДатаИзготовления1 = ДатаИзготовления1;
		Партия.ДатаИзготовления2 = ДатаИзготовления2;
		Партия.ДатаИзготовления =  ДатаИзготовления;

		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		Попытка expiryDate = batch.selectSingleNode("vd:expiryDate"); исключение КонецПопытки;
		ГМ.Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);
		Партия.ДатаСрокГодности = ДатаСрокГодности;
		Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
		Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
		//Попытка Партия.НомерПартии =  batch.selectSingleNode("vd:batchID").text; Исключение	КонецПопытки; //В спр нет реквизита
		Попытка
			НомераПартий = СписокНомеровПартий_из_XML(batch.selectNodes("vd:batchID"));
			ВремНомераПартий = ЗначениеизСтроки(НомераПартий);
			если ВремНомераПартий.РазмерСписка() = 1 тогда
				Партия.НомерПартии = ВремНомераПартий.ПолучитьЗначение(1);
			иначе
				СписокСтрокойСразделителями = "";
				Для _нп =1 по ВремНомераПартий.РазмерСписка() Цикл
					СписокСтрокойСразделителями = СписокСтрокойСразделителями + ВремНомераПартий.ПолучитьЗначение(_нп)+";";
				КонецЦикла;
				Партия.НомерПартии = СписокСтрокойСразделителями;
			КонецЕсли;
		Исключение
			Ошибка = "Не удалось прочитать список № Партий для записи в справочник ";
			Сообщить(Ошибка);
			ГМ.СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(524)");;
		КонецПопытки;



     // <vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID>

	 //	Попытка	Скоропортящийся = batch.selectSingleNode("vd:perishable").text; Исключение	Скоропортящийся = ""; КонецПопытки;

		// <vd:origin> 	vd:BatchOrigin 	[0..1] 	Сведения о происхождении продукции.
		//		vd:productItem> 	dt:ProductItem 	[1..1] 	Наименование продукции в номенклатуре производителя.
		//			<bs:uuid> 	bs:UUID 	[0..1] 	Идентификатор версии номенклатуры продукции.
		//			<dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. 	<dt:globalID>85672854</dt:globalID>
		//			<dt:name> 	bs:String255 	[1..1] 	Наименование продукции.
		//			<dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		//		<vd:country> 	dt:Country 	[1..1] 	Страна происхождения партии продукции.
		// сведения о стране


		//Информация о предприятие-производителе продукции.
		Попытка ПроизводителиСписок = Производители_из_XML(batch.selectSingleNode("vd:origin").selectNodes("vd:producer")); Исключение ПроизводителиСписок=""; КонецПопытки;
       	//А сли производителей несколько??
	   	Попытка
		   	СЗПроизводителей = ЗначениеИзСтроки(ПроизводителиСписок);
		   	Если СЗПроизводителей.КоличествоСтрок()>0 Тогда
	   			Партия.Производитель_Площадка = СЗПроизводителей.ПолучитьЗначение(1,1);
	   		КонецЕсли;
	   	Исключение КонецПопытки;

		//Попытка Некач = batch.selectSingleNode("vd:lowGradeCargo").text; Исключение	Некач = "";	КонецПопытки;
	//Список физической упаковки. vd:packageList
	// С уровнями
		Попытка package = batch.selectSingleNode("vd:packageList").selectNodes("dt:package"); Исключение package = ""; КонецПопытки;
		УровниУпаковки = УровниУпаковки_из_XML( package );
		Попытка Партия.УровниУпаковки = УровниУпаковки; Исключение 	КонецПопытки;

		Если ПустоеЗначение(УровниУпаковки) = 0 Тогда
			ИмяФайла = ПолучитьИмяФайла_УровниУпаковки(Партия);
			ЗначениеВФайл(ИмяФайла,УровниУпаковки);
			Попытка Партия.ИмяФайлаУровниУпаковки = ИмяФайла Исключение 	КонецПопытки;
		Иначе
			Попытка Партия.ИмяФайлаУровниУпаковки = ""; Исключение 	КонецПопытки;
        КонецЕсли;


		Попытка Партия.Получатель_ХозСубъект = ГМ.НайтиХСпоGUID( batch.selectSingleNode("vd:owner").selectSingleNode("bs:guid").text); Исключение	КонецПопытки;

		//Если ПустоеЗначение(Получатель_Площадка)=1 Тогда 
			Партия.Получатель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
		//Иначе
		//	Партия.Получатель_Площадка = Получатель_Площадка;
		//КонецЕсли;

		// batch закончился
        // vd:vetDocument> 	vd:VetDocument 	[0..*] 	Ветеринарный документ, связанный с записью журнала
		// 	<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии ветеринарного документа

		// конец </vd:stockEntry>

		// 23/01/18 - Фасовка в ВСД_ПродукцияЭлемент - в Партию не загружаем    Нужно определиться
		//Партия.Фирма = глПользователь.ОсновнаяФирма; // ЖД - продумать по фирмам
		//Вариант1
		//Если ПустоеЗначение(Партия.Фирма) = 1 Тогда
		//	Попытка
		//		поз = ГМ.ПараметрыФирм.НайтиЗначение(ГМ.СписокКонстант);
		//		стр = "";
		//		ГМ.ПараметрыФирм.ПолучитьЗначение(поз,стр);
		//		Партия.Фирма = ЗначениеИзСтрокиВнутр(стр);
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;

		Если ПустоеЗначение(Партия.Автор)=1 Тогда
			Партия.Автор = ГМ.ПолучитьАвтора();
		КонецЕсли;

		Попытка Партия.Филиал = Партия.Автор.Филиал; Исключение КонецПопытки;


		Если Партия.Количество=0 Тогда

			Если ( ПустоеЗначение( Партия.ТекущийЭлемент() ) =0 ) Тогда
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
				Партия.Удалить(0);
			Иначе
				Сообщить("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
				Возврат "";
			КонецЕсли;
		КонецЕсли;


		Партия.Записать();

		Возврат Партия;
КонецФункции // ЗаписатьПартию2


Функция ЗагрузитьXML_Партии2(имяФайла, докОснование="", Смещение = 0, НачПериода = "", КонПериода = "" ) Экспорт

	//стандартное поведение функции
    Сообщить("Загрузка XML-файла: "+ИмяФайла);

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

    objDom.setProperty("SelectionNamespaces", "
		|xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|xmlns:my='http://api.vetrf.ru/schema/cdm/application'
		|" );

    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;
	//stockEntryList = objDom.selectNodes("//merc:stockEntry") ;

	Сообщить("Получено "+stockEntryList.length+" партий","i");
	// ЖД посмотрим, сколько пришло партий
	Попытка ПришлоПартий = Число(stockEntryList.length); исключение ПришлоПартий = 1; КонецПопытки;

	ЗаписатьДок =0;
	Если stockEntryList.length>0 Тогда 
		ВыбДокПартии = НайтиДокПартий( докОснование );			
		Если ( ПустоеЗначение( ВыбДокПартии )=0 ) Тогда 
		//( докПартии.Вид() = "ВСД_АктуальныеПартии" ) Тогда 
			докПартии = СоздатьОбъект("Документ");
			докПартии.НайтиДокумент( ВыбДокПартии );			
			ЗаписатьДок =1;
		КонецЕсли;
	КонецЕсли;
		
    Для i1 = 0 По stockEntryList.length - 1 Цикл
		
        stockEntry=stockEntryList.item(i1);

		Партия = ЗаписатьПартию2( stockEntry );

		//Если ПустоеЗначение(докОснование)=0 Тогда
		//	Партия.ДокОснование = докОснование;
		//	Партия.Записать();
		//КонецЕсли;

		Если ( ЗаписатьДок=1 ) и (Партия<>"") Тогда
			Если ( Партия.active=1 ) Тогда 			
				докПартии.НоваяСтрока();
				докПартии.Партия = Партия.ТекущийЭлемент();
				докПартии.Количество = Партия.Количество;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьДок=1 Тогда
		
		докПартии.Записать();
		докПартии.Провести();
		
	КонецЕсли;
	
	//Рекурсивный вызов
	Если ПришлоПартий = 1000 Тогда
		ГМ.УдалитьXML( имяФайла ); //На случай рекурсивного вызова
		//Площадку берем из Констант, либо передавать в параметрах функции
		ПолучитьПартии2(ГМ.СписокКонстант.Получить("Отправитель_Площадка"), Смещение+1000, 0, НачПериода, КонПериода);
	КонецЕсли;

	//Возвращает последнюю созданную партию = для гашения 1 запрос/документ = 1 партия
	Возврат Партия;
КонецФункции


Функция Партии_ПоGUID_Запрос( ВыбПартия )
	
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>	
	|      <apldef:apiKey>"+ ГМ.ПолучитьКонстанту("param_api_key") +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ ГМ.ПолучитьКонстанту("param_issuer_id") +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>	
	|        <apl:data>
	|          <merc:getStockEntryByGuidRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ ГМ.ПолучитьКонстанту("param_intiator_login") +"</vd:login>
	|            </merc:initiator>
	|            <bs:guid>"+ ВыбПартия.guid +"</bs:guid>
	|            <dt:enterpriseGuid>"+ВыбПартия.Получатель_Площадка.GUID+"</dt:enterpriseGuid>
	|          </merc:getStockEntryByGuidRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";	
	Возврат Запрос;
КонецФункции

Функция Партии_ПолучитьПоGUID( ВыбПартия ) Экспорт
	t1 = ГМ.Старт();	
	
	Сообщить("Отправляем запрос партий по GUID "+ВыбПартия);
	ЗапросXML = Партии_ПоGUID_Запрос( ВыбПартия );	
	Service = "platform/services/2.0/ApplicationManagementService";
	Action = "submitApplicationRequest";	
	
	метод = ГМ.Компонента.GetMethod();
    метод.Service = Service;
    метод.Action = Action;

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Если ПустоеЗначение(appID)=0 Тогда
		Результат = "";
		Для А=1 По 10 Цикл
			Если ((Результат="IN_PROCESS") или (ПустоеЗначение(Результат)=1)) Тогда

				ГМ.Пауза( );

				Сообщить("Отправляем запрос на получение ответа [партии по GUID]" );
				Результат = ГМ.ПолучитьРезультатСервер( appID );
				Сообщить("Результат = "+Результат);

				ЗагрузитьXML_Партии2( ГМ.Компонента.LogFilename );

				ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "ПолучитьПартии", );
	
	Возврат appID;
КонецФункции
//}

//{================= Загрузить ВСД ======================

//создает струутуру ТаблицыЗначений для загрузки списка ВСД
Функция СтруктураТзВСД2() Экспорт
	
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СтруктураТзВСД2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СтруктураТзВСД2();
	КонецЕсли;
	//}
	
	тзВСД = СоздатьОбъект("ТаблицаЗначений");
	тзВСД.НоваяКолонка("сЦвет",,,,,,);
	тзВСД.НоваяКолонка("Пометка",,,,"V",5,);
	тзВСД.НоваяКолонка("ВладелецХС",,,,"Владелец ХозСубъект",20,);  //1С Элемент справочника. owner
	тзВСД.НоваяКолонка("НаименованиеПродукции","Строка",,,"Продукция");
	тзВСД.НоваяКолонка("Количество","Число",15,3,"Объем", 10);
	тзВСД.НоваяКолонка("КоличествоПринять","Число",15,3,"Принять", 10);
	тзВСД.НоваяКолонка("КоличествоВозврат","Число",15,3,"Вернуть", 5);
	
	тзВСД.НоваяКолонка("Продукция_Элемент",,,,"Продукция_Элемент",10);
	тзВСД.НоваяКолонка("Номенклатура",,,,"Номенклатура",10);

	тзВСД.НоваяКолонка("ПлощадкаИзПЭ","Справочник.ВСД_Площадка",,,"Площадка П/Э",10,);  //1С Элемент справочника
	тзВСД.НоваяКолонка("ПлощадкаИзВСД","Справочник.ВСД_Площадка",,,"Площадка ВСД",10,);  //1С Элемент справочника
	
	тзВСД.НоваяКолонка("ТтнНомер",,,,"№ ТТН",10);
	тзВСД.НоваяКолонка("ВсдДата",,,,"Дата ВСД",10);
	тзВСД.НоваяКолонка("ДокВСД","Документ.ВСД2_Входящий");
	тзВСД.НоваяКолонка("ДокОснование","Документ",,,"Док основание",10);
	тзВСД.НоваяКолонка("uuid","Строка",,,"UUID документа");
	тзВСД.НоваяКолонка("Партия",);
	
	тзВСД.НоваяКолонка("ФормаВСД");
	тзВСД.НоваяКолонка("Статус");
	тзВСД.НоваяКолонка("СтатусВСД");
	тзВСД.НоваяКолонка("типВСД");	
	
	тзВСД.НоваяКолонка("ВсдСерия");
	тзВСД.НоваяКолонка("ВсдНомер");
	
	
	тзВСД.НоваяКолонка("GTIN",,,,"Штрихкод / GTIN",10);
	тзВСД.НоваяКолонка("Артикул",,,,"Артикул",10);
	тзВСД.НоваяКолонка("ФасовкаФормаУпаковки");
	тзВСД.НоваяКолонка("ФасовкаНаименование");
	тзВСД.НоваяКолонка("ФасовкаКоличество");
	тзВСД.НоваяКолонка("ФасовкаЕдиницаИзм");
	тзВСД.НоваяКолонка("ФасовкаОбъем");
	
	тзВСД.НоваяКолонка("ДатаДок");
	тзВСД.НоваяКолонка("Отправитель_ХозСубъект");
	тзВСД.НоваяКолонка("Отправитель_Площадка");
	тзВСД.НоваяКолонка("Получатель_ХозСубъект");
	тзВСД.НоваяКолонка("Получатель_Площадка");
	тзВСД.НоваяКолонка("Производитель_Площадка");	
	тзВСД.НоваяКолонка("Продукция");
	тзВСД.НоваяКолонка("ВидПродукции");
	
	тзВСД.НоваяКолонка("ЕдиницаИзмерения");
	тзВСД.НоваяКолонка("ДатаИзготовления1",,,,"ДатаИзготовления1",10);
	тзВСД.НоваяКолонка("ДатаИзготовления");
	тзВСД.НоваяКолонка("ДатаИзготовления2",,,,"ДатаИзготовления2",10);
	тзВСД.НоваяКолонка("ДатаСрокГодности1",,,,"ДатаСрокГодности1",10);
	тзВСД.НоваяКолонка("ДатаСрокГодности");
	тзВСД.НоваяКолонка("ДатаСрокГодности2",,,,"ДатаСрокГодности2",10);
	тзВСД.НоваяКолонка("НомерПартии","Строка",900,,"№ партии", 10);
	тзВСД.НоваяКолонка("КодТНВЭД","Строка",,,"Код ТНВЭД", 10);
	тзВСД.НоваяКолонка("ПроизводителиСписок");
	тзВСД.НоваяКолонка("УровниУпаковки");
	тзВСД.НоваяКолонка("ТипТС");
	тзВСД.НоваяКолонка("номеравто");
	тзВСД.НоваяКолонка("номерПолуприцепа");
	тзВСД.НоваяКолонка("номерКонтейнера");
	тзВСД.НоваяКолонка("термическоесостояние");
	тзВСД.НоваяКолонка("ВСДместность");
	тзВСД.НоваяКолонка("особыеотметки");
	тзВСД.НоваяКолонка("ТтнТип","Число",1,0);
	тзВСД.НоваяКолонка("ТтнСерия");
	тзВСД.НоваяКолонка("ТтнДата","Дата");
	тзВСД.НоваяКолонка("РезультатыИсследований");
	тзВСД.НоваяКолонка("cargoInspected");
	тзВСД.НоваяКолонка("Перевозчик_ХозСубъект");
	тзВСД.НоваяКолонка("Скоропортящийся");
	тзВСД.НоваяКолонка("Некачественный");
	тзВСД.НоваяКолонка("Страна_GUID");
	тзВСД.НоваяКолонка("Фирма");
	тзВСД.НоваяКолонка("ВидВСД");
	тзВСД.НоваяКолонка("applicationID");
	тзВСД.НоваяКолонка("Комментарий");
	тзВСД.НоваяКолонка("СвязанныеДокументы");
	тзВСД.НоваяКолонка("МаршрутСледования");
	тзВСД.НоваяКолонка("Цель");	
	
	возврат тзВСД;
КонецФункции

Функция СохранитьДокументВСДпоТЗ ( тзРезультат, докОснование)
	
	ДокВСД = НайтиВСДпоUUID( тзРезультат.uuid );
	ДокВСД .applicationID = ГМ.Компонента.ApplicationId;
	Если (ПустоеЗначение(докОснование)=0) и (докОснование <> ДокВСД.ТекущийДокумент())  Тогда
		ДокВСД.ДокОснование = докОснование;
	КонецЕсли;
	
	//ФирмаИмяРеквизита = "";
	//ГМ.ПолучитьИмяРеквизитаФирма(ДокВСД.Вид(), ФирмаИмяРеквизита);
	//Если ФирмаИмяРеквизита <> "" Тогда
	Попытка		
		ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(ДокОснование);
		ДокВСД.Фирма = ВыбФирма;
	Исключение
	КонецПопытки;
	//КонецЕсли;

	Попытка ДокВСД.Автор = ГМ.ПолучитьАвтора(); Исключение КонецПопытки;	
	
	Для Сч = 1 По Метаданные.Документ("ВСД2").РеквизитШапки() Цикл
		Попытка
			Идентификатор = Метаданные.Документ("ВСД2").РеквизитШапки(сч).Идентификатор;			
			Если Идентификатор="ИмяФайлаМаршрутДоставки" Тогда
				МаршрутСледования = тзРезультат.ПолучитьЗначение(  тзРезультат.НомерСтроки, "МаршрутСледования");
				Если ПустоеЗначение( МаршрутСледования ) = 0 Тогда
					ДокВСД.Записать(); // для получения номераДок в ПолучитьИмяФайла_МаршрутДоставки
					ДокВСД.ИмяФайлаМаршрутДоставки = ПолучитьИмяФайла_МаршрутДоставки( ДокВСД.ТекущийДокумент() );					
					ЗначениеВФайл( ДокВСД.ИмяФайлаМаршрутДоставки, МаршрутСледования );
				КонецЕсли;
			Иначе				
				Значение = тзРезультат.ПолучитьЗначение(  тзРезультат.НомерСтроки, Идентификатор);
				//запишем реквизит в документ
				Если ПустоеЗначение(Значение)=0 Тогда 
					ДокВСД.УстановитьАтрибут(Идентификатор, Значение);
				КонецЕсли;
			КонецЕсли;
		Исключение
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	ДокВСД.Записать();
	Если ДокВСД.СтатусВСД = Перечисление.ВСД_СтатусВСД.WITHDRAWN Тогда 
		ДокВСД.Удалить(0);
	Иначе		
		ДокВСД.Провести();
	КонецЕсли;
	Сообщить("Записан ВСД от "+ДокВСД.ДатаДок+" ["+ДокВСД.uuid+"]");
	
КонецФункции

//Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="",докОбъект = "" ) Экспорт
Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="", СохранитьДокументВСД=0, Префикс="нет") Экспорт
	// Тестирование
	// Параметр докОбъект это ТаблицаЗначений, в которую загрузим ВСД, вместо создания документов в БД.
	
	//стандартное поведение функции
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);

	Если ГМ.НайтиОшибки(докОснование)>0 Тогда
		Возврат "";
	КонецЕсли;


    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|xmlns:my='http://api.vetrf.ru/schema/cdm/application'
		|xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'
		|" );

	тзРезультат = СтруктураТзВСД2();
		
	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

	Если Префикс="нет" Тогда 		
	
		vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;
		
	Иначе
		
		// в StockEntry добавили реквизит vetDocument, поэтому надо искать с префиксом
		//vetDocumentList = objDom.selectNodes("//merc:vetDocument") ;
		vetDocumentList = objDom.selectNodes("//"+Префикс+":vetDocument") ;
		
	КонецЕсли;
	
	Попытка
	    Для i1 = 0 По vetDocumentList.length - 1 Цикл
	        vetDocument=vetDocumentList.item(i1);
	
			// ищем Сведения об измененных ВСД.
			Попытка
				forma 	 = vetDocument.selectSingleNode("vd:vetDForm").text;
			Исключение
				Продолжить;//Это привязанный к партии ВСД
			КонецПопытки;
			uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;
	
			//Если ТипЗначенияСтр(тзРезультат) = "ТаблицаЗначений" Тогда //Заполняем в ТЗ
				тзРезультат.НоваяСтрока();
				тзРезультат.Пометка=1;
			//иначе
			//	тзРезультат = НайтиВСДпоUUID( uuid );
			//	тзРезультат.applicationID = ГМ.Компонента.ApplicationId;
			//	Если (ПустоеЗначение(докОснование)=0) и (докОснование <> тзРезультат.ТекущийДокумент())  Тогда
			//		тзРезультат.ДокОснование = докОснование;
			//	КонецЕсли;
			//КонецЕсли;
	
			тзРезультат.UUID = uuid;
	
			st = vetDocument.selectSingleNode("vd:vetDStatus").text;
			//тзРезультат.Статус = st;
			попытка тзРезультат.СтатусВСД = Перечисление.ВСД_СтатусВСД.ЗначениеПоИдентификатору( st ); Исключение КонецПопытки;
			тзРезультат.ФормаВСД = forma;
	
			Попытка тзРезультат.типВСД =  vetDocument.selectSingleNode("vd:vetDType").text; 	Исключение КонецПопытки;
	
	   		Попытка тзРезультат.ДатаДок = ГМ.СтрокаВДату(vetDocument.selectSingleNode("vd:issueDate").text);	Исключение КонецПопытки;
	
	   		Попытка тзРезультат.ВСДДата = ГМ.СтрокаВДату(vetDocument.selectSingleNode("vd:issueDate").text);	Исключение КонецПопытки;
			Попытка	тзРезультат.ВсдСерия = vetDocument.selectSingleNode("vd:issueSeries").text; Исключение КонецПопытки;
			Попытка	тзРезультат.ВСДНомер = vetDocument.selectSingleNode("vd:issueNumber").text; Исключение КонецПопытки;
			Попытка тзРезультат.ВидВСД = ?(Пустоезначение(тзРезультат.всдномер)=0,1,2);  Исключение КонецПопытки; //Бумаж/Электрон
	
	
			// Сертификат закрыт
			//Попытка Завершен = vetDocument.selectSingleNode("vd:finalized").text; Исключение КонецПопытки;
			// дата время посл изменения
			//Попытка Lastupd = vetDocument.selectSingleNode("vd:lastUpdateDate").text; Исключение КонецПопытки;
			// Несколько иная структура у док-та ВСД результат
			// ответ от транспортного
			// vd:certifiedConsignment содержит сведения об отпр и получателе, трансп данные
			// Сертифицированная производственная партия продукции.
			// Сведения о партии продукции.
	
			ЭтоТранспортныйВСД=0;
			Попытка
				batch = vetDocument.selectSingleNode("vd:certifiedBatch").selectSingleNode("vd:batch");  //Продуктивный ВСД
			Исключение
				Попытка
					//Сертифицированная партия.Сведения о партии продукции.
					batch = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:batch");  //ЖД Транспортный ВСД -другая структура ответа
					ЭтоТранспортныйВСД=1;
				Исключение
				 	batch = "";
				КонецПопытки;
			КонецПопытки;
	
			Если ЭтоТранспортныйВСД = 1 Тогда
				Попытка	тзРезультат.Отправитель_ХозСубъект 	= ГМ.НайтиХСпоGUID(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignor").selectSingleNode("dt:businessEntity").selectSingleNode("bs:guid").text);	Исключение КонецПопытки;
				Попытка тзРезультат.Отправитель_Площадка 	= ГМ.НайтиПлощадку(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignor").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text);	Исключение КонецПопытки;
	
				Попытка	тзРезультат.Получатель_ХозСубъект 	= ГМ.НайтиХСпоGUID(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignee").selectSingleNode("dt:businessEntity").selectSingleNode("bs:guid").text);	Исключение	КонецПопытки;
				Попытка	тзРезультат.Получатель_Площадка 	= ГМ.НайтиПлощадку(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:consignee").selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text);		Исключение	КонецПопытки;
				Попытка тзРезультат.Перевозчик_ХозСубъект 	= ГМ.НайтиХСпоGUID(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:broker").selectSingleNode("bs:guid").text); Исключение КонецПопытки;
	
				Попытка
					transportInfo = vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:transportInfo");
					ТипТС = transportInfo.selectSingleNode("vd:transportType").text;//("*[local-name()='transportType'] ").text;
					Если ТипТС = "1" Тогда
						тзРезультат.номеравто = transportInfo.selectSingleNode("vd:transportNumber").selectSingleNode("vd:vehicleNumber").text;
						Попытка тзРезультат.номерПолуприцепа = transportInfo.selectSingleNode("vd:transportNumber").selectSingleNode("vd:trailerNumber").text; Исключение КонецПопытки;
						Попытка тзРезультат.номерКонтейнера = transportInfo.selectSingleNode("vd:transportNumber").selectSingleNode("vd:containerNumber").text; Исключение КонецПопытки;
					Иначеесли ТипТС = "2" Тогда
						тзРезультат.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='wagonNumber']").text;
					Иначеесли ТипТС = "3" Тогда
						тзРезультат.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='flightNumber']").text;
					Иначеесли (ТипТС = "4") или (ТипТС = "5") или (ТипТС = "6") Тогда
						тзРезультат.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
		//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
	//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
	
					КонецЕсли;
	                Попытка тзРезультат.ТипТС = ТипТС; Исключение	КонецПопытки;
				исключение	КонецПопытки;
	
				Попытка	тзРезультат.термическоесостояние = Перечисление.ВСД_ТермическиеУсловияПеревозки.ЗначениеПоИдентификатору(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:transportStorageType").text); Исключение	КонецПопытки;//ГМ.ТермическиеУсловияПеревозки.найтизначение(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:transportStorageType").text);Исключение	КонецПопытки;
				// Маршрут Следования ЖД 17/07/18	 #1899 #1898
				Попытка 
					МаршрутСледования = МаршрутСледования_из_XML(vetDocument.selectSingleNode("vd:certifiedConsignment").selectSingleNode("vd:shipmentRoute").selectNodes("vd:routePoint")); 
				Исключение	
					МаршрутСледования = ""; 
				КонецПопытки;
				тзРезультат.МаршрутСледования = МаршрутСледования; 
	
				//Если (ТипЗначенияСтр(тзРезультат) = "Документ") и (ПустоеЗначение(МаршрутСледования) = 0) Тогда
				//	тзРезультат.Записать(); // для получения номераДок в ПолучитьИмяФайла_МаршрутДоставки
				//	тзРезультат.ИмяФайлаМаршрутДоставки = ПолучитьИмяФайла_МаршрутДоставки( тзРезультат.ТекущийДокумент() );
				//	ЗначениеВФайл( тзРезультат.ИмяФайлаМаршрутДоставки, МаршрутСледования );
				//КонецЕсли;
	
				Попытка
					ТочкиМаршрута = МаршрутСледования;
					// ЖД При гашении Нужно указать Тип и № последнего ТС в Маршруте Следования - запишем данные в соотв реквизиты.
					Если ТипЗначенияСтр(ТочкиМаршрута) = "ТаблицаЗначений" Тогда
	//					ВсегоТочек = точкиМаршрута.КоличествоСтрок();
						ТочкиМаршрута.Сортировать("-НомерТочки"); // Возьмем № последнего ТС в точке где была перегрузка, т.е. № Авто сменился
						ТочкиМаршрута.ВыбратьСтроки();
						Пока ТочкиМаршрута.ПолучитьСтроку() = 1 Цикл
							Если ТочкиМаршрута.Перегрузка = 1 Тогда
								тзРезультат.ТипТС				= Строка(ТочкиМаршрута.ТипТранспорта);
								тзРезультат.номерКонтейнера 	= ТочкиМаршрута.номерКонтейнера;
								тзРезультат.номеравто			= СокрЛП(ТочкиМаршрута.номеравто) + СокрЛП(ТочкиМаршрута.номерВагона) + СокрЛП(ТочкиМаршрута.НомерАвиарейса)+ СокрЛП(ТочкиМаршрута.НазваниеСудна);
								тзРезультат.номерПолуприцепа	= ТочкиМаршрута.номерПрицепа;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						////Передадим ТЗ маршрутов в обработку Гашение //!!!
						//Если ТипЗначенияСтр(тзРезультат) = "ТаблицаЗначений" Тогда
						//	Попытка тзРезультат.МаршрутСледования = ЗначениеВСтроку(МаршрутСледования); Исключение	КонецПопытки;
						//КонецЕсли;
					КонецЕсли;
				Исключение	КонецПопытки;
	
			КонецЕсли;
	
			Попытка
				productItem = batch.selectSingleNode("*[local-name()='productItem'] ");
			Исключение
				Сообщить("Не удалось получить элемент [productItem]","!");
				productItem = "";
			КонецПопытки;
	
			//ЖД Для ГАШЕНИЯ  !!!!!
			// productItem здесь -  в	Сведения о партии продукции.
			// и в подветке Origin -     	vd:BatchOrigin 	[0..1] 	Сведения о происхождении продукции.
			// Если здесь нет Артикула и ГТИНа, а в origin есть - нужно ставить !!!!
	
			тзРезультат.Продукция 	= ГМ.НайтиПродукцию(batch.selectSingleNode("vd:product").selectSingleNode("bs:guid").text);
			тзРезультат.ВидПродукции 	= ГМ.НайтиВидПродукции(batch.selectSingleNode("vd:subProduct").selectSingleNode("bs:guid").text);
			//тзРезультат.Продукция_Элемент = ГМ.Найти_Продукция_Элемент(productItem, productItemUuid, тзРезультат.Продукция, тзРезультат.ВидПродукции);
			тзРезультат.Продукция_Элемент = ГМ.Найти_Продукция_Элемент2(productItem, тзРезультат.Продукция, тзРезультат.ВидПродукции);
			Попытка
				тзРезультат.НаименованиеПродукции = productItem.selectSingleNode("*[local-name()='name']").text;
			Исключение
				тзРезультат.НаименованиеПродукции = тзРезультат.Продукция_Элемент.Наименование;
			КонецПопытки;
	
			//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
			Попытка тзРезультат.GTIN = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:globalID").text;Исключение КонецПопытки;
	        //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
			Попытка тзРезультат.Артикул = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:code").text;Исключение КонецПопытки;
	        ////Наименование продукции.
			//Попытка НаимПрции = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:name").text; Исключение КонецПопытки;
	
			// Фасовка
			// Не могу понять, почему указанный ниже код ничего не возвращает?????
			//Попытка Фасовка_из_XML(batch.selectSingleNode("*[local-name()='productItem'] ").selectSingleNode("*[local-name()='packaging']"),тз.ФасовкаНаименование,тз.ФасовкаФормаУпаковки,тз.ФасовкаКоличество,тз.ФасовкаОбъем,тз.ФасовкаЕдиницаИзм); Исключение КонецПопытки;
			Попытка packaging = batch.selectSingleNode("vd:productItem").selectSingleNode("dt:packaging"); Исключение packaging=""	КонецПопытки;
			Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение ФасовкаНаименование=""	КонецПопытки;
	        // ЖД  - отличие в наименовании реквизитов ТЗ и Документа, м.б. нужно привести в соответствие
			
			//Если ТипЗначенияСтр(тзРезультат) = "ТаблицаЗначений" Тогда // ТЗ в Гашении
				Попытка тзРезультат.ФасовкаНаименование = ФасовкаНаименование;Исключение	КонецПопытки;
				Попытка тзРезультат.ФасовкаФормаУпаковки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
				Попытка	тзРезультат.ФасовкаКоличество = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
				Попытка	тзРезультат.ФасовкаОбъем = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
				Попытка	тзРезультат.ФасовкаЕдиницаИзм = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;
			//Иначе
			//	Попытка тзРезультат.ФормаУпаковкиФас = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
			//	Попытка	тзРезультат.КоличествоместФас = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
			//	Попытка	тзРезультат.ОбъемФаc = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
			//	Попытка	тзРезультат.ЕдиницаИзмеренияФас = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;
	        //КонецЕсли;
	
			// Объем продукции
			// Единица измерения объема партии продукции. Глобальный идентификатор еиницы измерения.
	
			Попытка тзРезультат.Количество 	= Число(batch.selectSingleNode("vd:volume").text);Исключение 	КонецПопытки;
			Попытка тзРезультат.КоличествоПринять 	=  тзРезультат.Количество; Исключение 	КонецПопытки;
			Попытка тзРезультат.КоличествоВозврат 	=0; Исключение 	КонецПопытки;
	
			Попытка тзРезультат.ЕдиницаИзмерения = ГМ.НайтиЕдИзмерения( batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text  );Исключение 	КонецПопытки;
	
			ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
			Попытка dateOfProduction = batch.selectSingleNode("vd:dateOfProduction");  Исключение	dateOfProduction =""; КонецПопытки;
			ГМ.Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);
	
	//		Попытка тзРезультат.ДатаИзготовленияТЗ = ЗначениеВСтроку(ДатаВвидеТЗ); Исключение КонецПопытки;
	
			тзРезультат.ДатаИзготовления1 = ДатаИзготовления1;
			тзРезультат.ДатаИзготовления2 = ДатаИзготовления2;
			Попытка тзРезультат.ДатаИзготовления =  ДатаИзготовления; Исключение	КонецПопытки; //В док-те нет реквизита
	
			ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
			Попытка expiryDate = batch.selectSingleNode("vd:expiryDate");  Исключение expiryDate = "";	КонецПопытки; // а вот бывает, что и нет такого тега
			ГМ.Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);
	
	//		Попытка тзРезультат.ДатаСрокГодностиТЗ = ЗначениеВСтроку(ДатаВвидеТЗ); Исключение КонецПопытки;
	
			Попытка тзРезультат.ДатаСрокГодности = ДатаСрокГодности; Исключение	КонецПопытки; //В док-те нет реквизита
			тзРезультат.ДатаСрокГодности1 = ДатаСрокГодности1;
			тзРезультат.ДатаСрокГодности2 = ДатаСрокГодности2;
			Попытка тзРезультат.НомерПартии =  batch.selectSingleNode("vd:batchID").text; Исключение	КонецПопытки; //В док-те нет реквизита
			Попытка
				НомераПартий = СписокНомеровПартий_из_XML(batch.selectNodes("vd:batchID"));
				ВремНомераПартий = ЗначениеизСтроки(НомераПартий);
				если ВремНомераПартий.РазмерСписка() = 1 тогда
					тзРезультат.НомерПартии = ВремНомераПартий.ПолучитьЗначение(1);
				ИначеЕсли ВремНомераПартий.РазмерСписка() = 0 тогда
					тзРезультат.НомерПартии = "";
				иначе
					тзРезультат.НомерПартии = НомераПартий;
				КонецЕсли;
			Исключение
				Ошибка = "Не удалось прочитать список № Партий из "+имяФайла+" ";
				Сообщить(Ошибка,"!");
				ГМ.СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(973)");;
			КонецПопытки;
	
	        //<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID>
	
			//Информация о предприятиях-производителях продукции.
			Попытка ПроизводителиСписок = Производители_из_XML(batch.selectSingleNode("vd:origin").selectNodes("vd:producer")); Исключение ПроизводителиСписок=""; КонецПопытки;
	       	//А если производителей несколько - берем только первого
		   	Попытка
			   	СЗПроизводителей = ЗначениеИзСтроки(ПроизводителиСписок);
			   	Если СЗПроизводителей.КоличествоСтрок()>0 Тогда
		   			тзРезультат.Производитель_Площадка = СЗПроизводителей.ПолучитьЗначение(1,1);
		   		КонецЕсли;
		   	Исключение КонецПопытки;
	
		   	//Это в ветке origin - !!!!!
		   	//В док-те нет таких реквизитов
		   	//Если ТипЗначенияСтр(тзРезультат) = "ТаблицаЗначений" Тогда
				Попытка	тзРезультат.Скоропортящийся = ?(batch.selectSingleNode("vd:perishable").text = "true",1,0);	Исключение 	КонецПопытки;
			   	Попытка тзРезультат.ПроизводителиСписок = ПроизводителиСписок; Исключение КонецПопытки;
				Попытка	тзРезультат.GTIN 		=  batch.selectSingleNode("vd:origin").selectSingleNode("vd:productItem").selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
				Попытка тзРезультат.Артикул 	= batch.selectSingleNode("vd:origin").selectSingleNode("vd:productItem").selectSingleNode("dt:code").text;  	Исключение КонецПопытки;
				Попытка	тзРезультат.Некачественный = ?(batch.selectSingleNode("vd:lowGradeCargo").text="true",1,0); Исключение	КонецПопытки;
				Попытка тзРезультат.Страна_GUID = batch.selectSingleNode("vd:origin").selectSingleNode("vd:country").selectSingleNode("bs:guid").text;	Исключение	КонецПопытки;
	
				Попытка тзРезультат.ВладелецХС = ГМ.НайтиХСпоGUID( batch.selectSingleNode("vd:owner").selectSingleNode("bs:guid").text); Исключение	КонецПопытки;
			    // ЖД проконтролировать
				Если ПустоеЗначение(тзРезультат.ВладелецХС)=1 Тогда
					тзРезультат.ВладелецХС = тзРезультат.Отправитель_ХозСубъект;
				КонецЕсли;
			//КонецЕсли;
	
			//Список физической упаковки. vd:packageList
	//Было		Попытка тзРезультат.УровниУпаковки = УровниУпаковки_из_XML(batch.selectSingleNode("*[local-name()='packageList']").selectNodes("dt:package")); Исключение 	КонецПопытки;
	
			Попытка package = batch.selectSingleNode("*[local-name()='packageList']").selectNodes("dt:package"); Исключение package = ""; КонецПопытки;
			УровниУпаковки = УровниУпаковки_из_XML( package );
			Попытка тзРезультат.УровниУпаковки = УровниУпаковки; Исключение 	КонецПопытки;
	        Попытка
				Если ПустоеЗначение(УровниУпаковки) = 0 Тогда
					тзРезультат.ИмяФайлаУровниУпаковки = ПолучитьИмяФайла_УровниУпаковки(тзРезультат);
					ЗначениеВФайл( тзРезультат.ИмяФайлаУровниУпаковки, УровниУпаковки);
				Иначе
					тзРезультат.ИмяФайлаУровниУпаковки = "";
				КонецЕсли;
			Исключение 	КонецПопытки;
	
			Попытка тзРезультат.cargoInspected = ?(vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:cargoInspected").text="true",1,0);	Исключение	КонецПопытки;
	        Попытка	тзРезультат.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:cargoExpertized").text);Исключение	КонецПопытки;
			Попытка	тзРезультат.особыеотметки = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:specialMarks").text;	Исключение	КонецПопытки;
	
			Попытка	тзРезультат.Местность = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:locationProsperity").text;Исключение	КонецПопытки;
			Попытка	тзРезультат.ВСДМестность = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:locationProsperity").text;Исключение	КонецПопытки;
				
			Попытка 
				ЦельGuid = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:purpose").selectSingleNode("bs:guid").text;
				тзРезультат.Цель = ГМ.Справочник_НайтиПоGUID( "ВСД_Цель", ЦельGuid );
			Исключение  КонецПопытки;
			
			// след блок Сделать ЖД
			//·······<vd:laboratoryResearch> 	vd:LaboratoryResearchEvent 	[0..*] 	Сведения о проведенных лабораторных исследованиях.
	
			// Связанные документы
			Попытка СвязанныеДокументы = СвязанныеДокументы_из_XML( vetDocument.selectNodes("vd:referencedDocument")) ;Исключение 	КонецПопытки;
	
			//Выдернем ттн из списка связанных док-тов
			Попытка
				ТЗСвДокументов = ЗначениеИзСтроки(СвязанныеДокументы);
				стр = 0;// НайденДок = 1;
				Если ТЗСвДокументов.НайтиЗначение(1,стр,"ТипДокумента") = 1 Тогда
				ИначеЕсли ТЗСвДокументов.НайтиЗначение(2,стр,"ТипДокумента") = 1 Тогда
				ИначеЕсли ТЗСвДокументов.НайтиЗначение(3,стр,"ТипДокумента") = 1 Тогда
				ИначеЕсли ТЗСвДокументов.НайтиЗначение(4,стр,"ТипДокумента") = 1 Тогда
				ИначеЕсли ТЗСвДокументов.НайтиЗначение(5,стр,"ТипДокумента") = 1 Тогда
				Иначе
					//НайденДок = 0;
				КонецЕсли;
				Если стр > 0 Тогда
					ТЗСвДокументов.ПолучитьСтрокуПоНомеру(стр);
					тзРезультат.ттнСерия = ТЗСвДокументов.СерияДокумента;
					тзРезультат.ттнномер = ТЗСвДокументов.НомерДокумента;
					тзРезультат.ттндата = ГМ.СтрокаВДату(ТЗСвДокументов.ДатаДокумента);
					Попытка тзРезультат.ттнТип = ТЗСвДокументов.ТипДокумента; Исключение КонецПопытки;
				КонецЕсли;
				// это для ТЗ
				Попытка тзРезультат.СвязанныеДокументы = СвязанныеДокументы;Исключение КонецПопытки;
			Исключение КонецПопытки;
	
			Если СохранитьДокументВСД=1 Тогда 
				СохранитьДокументВСДпоТЗ( тзРезультат, докОснование );
			КонецЕсли;
				
	//		Если ТипЗначенияСтр(тзРезультат) = "Документ" Тогда
	//
	//			ФирмаИмяРеквизита = "";
	//			ГМ.ПолучитьИмяРеквизитаФирма(тзРезультат.Вид(), ФирмаИмяРеквизита);
	//			Если ФирмаИмяРеквизита <> "" Тогда
	//				ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(ДокОснование);
	//				тзРезультат.УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);
	//			КонецЕсли;
	//	
	//			Попытка тзРезультат.Автор = ГМ.ПолучитьАвтора();  Исключение КонецПопытки;
	//			Попытка тзРезультат.Филиал = тзРезультат.Автор.Филиал; Исключение КонецПопытки;
	//			тзРезультат.Записать();
	//			тзРезультат.Провести();
	//			Сообщить("Записан ВСД от "+тзРезультат.ДатаДок+" ["+uuid+"]");
	//		КонецЕсли;
		КонецЦикла;
	исключение
	    Ошибка = ("НЕ Удалось прочитать ВСД ");
		Сообщить(Ошибка,"!");
		ГМ.СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(1008)");
		Возврат "";
	КонецПопытки;

	Если (ПустоеЗначение(докОснование)=0) И
	 	((СокрЛП(st)="COMPLETED") или (СокрЛП(st)="CONFIRMED") или (СокрЛП(st)="UTILIZED") ) Тогда
		Попытка
		// проведем только успешно выполненный запрос
			докОснованиеОбъект = СоздатьОбъект("Документ");
			докОснованиеОбъект.НайтиДокумент(ДокОснование);
			попытка докОснованиеОбъект.СтатусВСД = тзРезультат.СтатусВСД Исключение КонецПопытки;
			докОснованиеОбъект.Провести();
		Исключение
		КонецПопытки;

	КонецЕсли;

	Возврат тзРезультат;	
	
КонецФункции


Функция ПолучитьРезультат_ВСД_2(applicationID, докСсылка="", Смещение = 0,  ПартияНачПериода = "", ПартияКонПериода = "", Префикс="merc") Экспорт
	//Реквизит Смещение добавлен для возможности рекурсивного вызова ПолучитьПартии2
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	ГМ.Пауза( );

	//докПартии = НайтиДокПартий( докСсылка );	
	
	Сообщить("Отправляем запрос ["+докСсылка+"] " + applicationID);
	//Результат = ГМ.Компонента.SendRequestResult( applicationID );
	Результат = ГМ.ПолучитьРезультатСервер( applicationID );
    Файл_Ответа_XML = ГМ.Компонента.LogFilenameResponse;
	Если ПустоеЗначение(докСсылка)=0 Тогда
		ГМ.СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД2( Файл_Ответа_XML , докСсылка, 1, Префикс );
	КонецЕсли;

    ЗагрузитьXML_Партии2( Файл_Ответа_XML, докСсылка, Смещение, ПартияНачПериода, ПартияКонПериода); 

	ГМ.СохранитьОтветВДокументе(докСсылка);

	ГМ.УдалитьXML( Файл_Ответа_XML);

	Возврат Результат;
КонецФункции

Функция ЗагрузитьВСДпоUUID_ЗапросXML( док )
	
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	| xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	| xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	| xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	| xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	| xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	| xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getVetDocumentByUuidRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>
	|            <dt:enterpriseGuid>"+ СокрЛП(Док.Отправитель_Площадка.GUID) +"</dt:enterpriseGuid>
	|          </merc:getVetDocumentByUuidRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗагрузитьВСДпоUUID( докОснование ) Экспорт
	
	//тзДок = СоздатьОбъект("ТаблицаЗначений");
	тзДок = ГМ.Выбрать_ВСД( докОснование );
	
	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку() = 1 Цикл
				
		ЗапросXML = ЗагрузитьВСДпоUUID_ЗапросXML( тзДок.док );
	
		метод = ГМ.Компонента.GetMethod();
		метод.Service = "platform/services/2.0/ApplicationManagementService";
	    метод.Action = "submitApplicationRequest";
	
		appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	    Результат = "";
		Если ПустоеЗначение(appID)=0 Тогда
			Результат = ПолучитьРезультат_ВСД_2( appID, тзДок.док, 0, , ,  "нет" );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда
					Результат = ПолучитьРезультат_ВСД_2( appID, тзДок.док );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	КонецЦикла;
	Возврат Результат;
	
КонецФункции

//}

//{====================  Получить Партии  ===================================

Функция ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение=0, НачПериода = "", КонПериода = "") Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии2_ТекстЗапросаXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение, НачПериода, КонПериода);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	НеНулевые = ГМ.ПолучитьКонстанту("ЗагружатьТолькоНеПустыеПартии");
	
	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e
	Запрос = "
	|<SOAP-ENV:Envelope
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ГМ.СписокКонстант.Получить("param_api_key")+"</apldef:apiKey>
	|      <apl:application>
	//метод 2.1 пока не работает в продуктиве
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	//метод 2.0
	//|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:getStockEntryListRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>" + Смещение + "</bs:offset>
	|            </bs:listOptions>
	|            <dt:enterpriseGuid>"+СокрЛП(Отправитель_Площадка.GUID)+"</dt:enterpriseGuid>";
	Если (ПустоеЗначение(НачПериода) = 0) или (НеНулевые = 1) Тогда
		Запрос = Запрос +"
    	|            <merc:searchPattern>";
		Если НеНулевые = 1 Тогда
			Запрос = Запрос +"
	    	|              <vd:blankFilter>NOT_BLANK</vd:blankFilter>";
		КонецЕсли;
		Если ПустоеЗначение(НачПериода) = 0 Тогда
			Запрос = Запрос +"
	    	|              <vd:receiptDateInterval>
			|                 <bs:beginDate>"+ ГМ.Преобразовать_Дата_в_Строка(НачПериода, "T00:00:00") +"</bs:beginDate>
			|                 <bs:endDate>"+ ГМ.Преобразовать_Дата_в_Строка(КонПериода, "T23:59:59") +"</bs:endDate>
		    |              </vd:receiptDateInterval>";
		КонецЕсли;
		Запрос = Запрос +"
    	|            </merc:searchPattern>";
	КонецЕсли;
	Запрос = Запрос +"
	|          </merc:getStockEntryListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

Функция  ПолучитьПартии2(Отправитель_Площадка, Смещение=0, УдалятьПартии=1, ПартияНачПериода = "", ПартияКонПериода = "" ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии2(Отправитель_Площадка, Смещение, УдалятьПартии, ПартияНачПериода, ПартияКонПериода);
	КонецЕсли;
	//}

	t1 = ГМ.Старт();	
	
	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	ЗапросXML = ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение, ПартияНачПериода, ПартияКонПериода);

	метод = ГМ.Компонента.GetMethod();
	// метод 2.1 пока не работает в продуткиве
	метод.Service = "platform/services/2.1/ApplicationManagementService";
	// метод 2.0
	//метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Если ГМ.ПолучитьКонстанту("ЗагружатьТолькоНеПустыеПартии")=1 Тогда		
			//удаляем только если загружаем неполный список партий = только не пустые партии
			Если УдалятьПартии=1 Тогда					
				//При объединении партий в Меркурии - старые партии пропадают, появляются новые
				// поэтому в 1С остаются "остатки", которые нужно удалять
				Если ГМ.ПолучитьКонстанту("ОчищатьСправочникВСД_Партии")=1 Тогда
					Состояние("Удаление справочника ВСД_Партии");
					//Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка"); //ЖД - ошибочно будут записаны партии
					//Если запрашиваются все партии ( ПартияНеНулевые=0 ) тогда можно не удалять справочник
					СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
					НачатьТранзакцию(); //Ускоримся
					СпрПартия.ВыбратьЭлементы();
					Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
						Если ПустоеЗначение(ПартияНачПериода) = 0 Тогда // не удаляем, т.к. запрашиваем по периоду
							Если (СпрПартия.ВсдДата < ПартияНачПериода) или ( СпрПартия.ВсдДата > ПартияКонПериода) Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если СпрПартия.Получатель_Площадка = Отправитель_Площадка Тогда
							СпрПартия.Удалить(0);
						КонецЕсли;
					КонецЦикла;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		//
		докПартии = СоздатьОбъект("Документ.ВСД_АктуальныеПартии");
		докПартии.Новый();
		докПартии.ДатаДок = ТекущаяДата();
		докПартии.АвтоВремяТекущее();
		докПартии.НачДата = ПартияНачПериода;
		докПартии.КонДата = ПартияКонПериода;
		докПартии.Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		докПартии.Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");		
		докПартии.Записать();
		
		Результат = ПолучитьРезультат_ВСД_2(appID, докПартии.ТекущийДокумент(), Смещение, ПартияНачПериода, ПартияКонПериода ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") или (ПустоеЗначение(Результат)=1) Тогда
				Результат = ПолучитьРезультат_ВСД_2(appID,"", Смещение, ПартияНачПериода, ПартияКонПериода ); //ДокОб.ТекущийДокумент()
			ИначеЕсли (Результат="REJECTED") Тогда
				// Новый запрос
				ПолучитьПартии2(Отправитель_Площадка, Смещение, УдалятьПартии, ПартияНачПериода, ПартияКонПериода );
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "ПолучитьПартии2");
	
	Сообщить("Загрузка партий завершена");
	Возврат appID;

КонецФункции
//}

//{ =================== Список ВСД
//Функция ПолучитьСписокВСД2_ЗапросXML(Площадка, vetDocumentType, vetDocumentStatus, Смещение) Экспорт
Функция ПолучитьСписокВСД2_ЗапросXML( спУсловия ) Экспорт

	//спУсловия = СоздатьОбъект("СписокЗначений");
	Площадка = спУсловия.Получить("Площадка");
	Если ПустоеЗначение(Площадка)=1 Тогда
		Сообщить("В условиях не указана Площадка","!");
		Возврат "";
	КонецЕсли;
	vetDocumentType = спУсловия.Получить("vetDocumentType");
	Если ПустоеЗначение(vetDocumentType)=1 Тогда
		vetDocumentType = "INCOMING";
	КонецЕсли;
	vetDocumentStatus = спУсловия.Получить("vetDocumentStatus");
	Если ПустоеЗначение(vetDocumentStatus)=1 Тогда
		vetDocumentStatus = "CONFIRMED";
	КонецЕсли;
	Смещение = спУсловия.Получить("Смещение");
	Если ПустоеЗначение(Смещение)=1 Тогда
		Смещение = 0;
	КонецЕсли;

	НачДата = спУсловия.Получить("НачДата");
	Если ПустоеЗначение(НачДата)=1 Тогда
		НачДата = 0;
	КонецЕсли;
	КонДата = спУсловия.Получить("КонДата");
	Если ПустоеЗначение(КонДата)=1 Тогда
		КонДата = 0;
	КонецЕсли;

	Поставщик_ХозСубъект = спУсловия.Получить("Поставщик_ХозСубъект");
	Поставщик_Площадка = спУсловия.Получить("Поставщик_Площадка");

	НомерДок = спУсловия.Получить("НомерДок");
	ДатаДок = спУсловия.Получить("ДатаДок");

	//	DocumentType v2.0
	// http://help.vetrf.ru/wiki/DocumentType_v2.0
	//1	Товарно-транспортная накладная
	//5	Транспортная накладная
	//6	ТОРГ-12
	ТипДок = спУсловия.Получить("ТипДок");
	Если ПустоеЗначение(ТипДок)=1 Тогда
		ТипДок = 1;
	КонецЕсли;


	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	//|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getVetDocumentListRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+Смещение+"</bs:offset>
	|            </bs:listOptions>
	|            <vd:vetDocumentType>"+ vetDocumentType +"</vd:vetDocumentType>
	|            <vd:vetDocumentStatus>"+ vetDocumentStatus +"</vd:vetDocumentStatus>
	|";
	//2.1
	Если ПустоеЗначение(НачДата)=0 Тогда
		Запрос=Запрос+"
		|            <vd:issueDateInterval>
		|                <bs:beginDate>"+ ГМ.Преобразовать_Дата_в_Строка( НачДата, "T00:00:00" ) +"</bs:beginDate>
		|                <bs:endDate>"+ ГМ.Преобразовать_Дата_в_Строка( КонДата, "T23:59:59") +"</bs:endDate>
		|            </vd:issueDateInterval>";
	КонецЕсли;

	Если (ПустоеЗначение(Поставщик_ХозСубъект)=0) или ( ПустоеЗначение(Поставщик_Площадка)=0 ) Тогда
		Запрос=Запрос+" <vd:consignor>";
		Если ПустоеЗначение(Поставщик_ХозСубъект)=0 Тогда
			Запрос=Запрос+"
			|                <dt:businessEntity>
			|                    <bs:guid>"+ СокрЛП( Поставщик_ХозСубъект.GUID ) +"</bs:guid>
			|                </dt:businessEntity>";
		КонецЕсли;
		Если ПустоеЗначение(Поставщик_Площадка)=0 Тогда
			Запрос=Запрос+"
			|                <dt:enterprise>
			|                    <bs:guid>"+ СокрЛП(Поставщик_Площадка.GUID) +"</bs:guid>
			|                </dt:enterprise>";
		КонецЕсли;
		Запрос=Запрос+" </vd:consignor>";
	КонецЕсли;
	Если ПустоеЗначение(НомерДок)=0 Тогда
		Запрос=Запрос+"
		|            <vd:referencedDocument>
		|                <vd:issueNumber>"+ СокрЛП(НомерДок) +"</vd:issueNumber>
		|                <vd:issueDate>"+ ДатаДок +"</vd:issueDate>
		|                <vd:type>"+ ТипДок +"</vd:type>
		|            </vd:referencedDocument>";
	КонецЕсли;
	//
	Запрос=Запрос+"
	|            <dt:enterpriseGuid>"+ СокрЛП(Площадка.GUID) +"</dt:enterpriseGuid>
	|          </merc:getVetDocumentListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	Возврат Запрос;
КонецФункции


// http://help.vetrf.ru/wiki/GetVetDocumentListOperation_v2.0#scenario1
Функция  ПолучитьСписокВСД( спУсловия ) Экспорт
//	список ВСД может быть отфильтрован по следующим критериям
//	Тип ВСД:
//        входящий ВСД;				INCOMING
//        исходящий ВСД;			OUTGOING
//        производственный ВСД;		PRODUCTIVE
//        транспортный ВСД;			TRANSPORT
//        возвратный ВСД.			RETURNABLE
//    Статус ВСД:
//        оформлен;		CONFIRMED 	Оформлен. Действующий сертификат, по которому разрешено совершать транзакцию с грузом.
//        погашен;		UTILIZED 	Погашен. Действующий сертификат, по которому транзакция уже была совершена.
//        аннулирован.	WITHDRAWN 	Аннулирован. Не действующий более сертификат.

	Площадка = спУсловия.Получить("Площадка");
	Если ПустоеЗначение(Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

~Метка:  //+
	ЗапросXML = ПолучитьСписокВСД2_ЗапросXML( спУсловия );

	метод = ГМ.Компонента.GetMethod();
	//метод.Service = "platform/services/2.0/ApplicationManagementService";
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

    Результат = "";
	Если ПустоеЗначение(appID)=0 Тогда
		Результат = ПолучитьРезультат_ВСД_2(appID );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2(appID );
			КонецЕсли;
		КонецЦикла;
		//+
		если Результат="REJECTED" тогда
			Перейти ~метка;
		КонецЕсли;
		//+
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Возврат appID;

КонецФункции
//}


//{ ================== Лабораторные исследования =========================

Функция ВСД_ЛабораторныеИсследования_ЗапросXML(док)
	//док = СоздатьОбъект("Документ.ВСД_ЛабораторныеИсследования");
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_ЛабораторныеИсследования_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_ЛабораторныеИсследования_ЗапросXML(док);
	КонецЕсли;
	//}

	Запрос ="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:updateVeterinaryEventsRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <vd:stockEntry>
	|              <bs:guid>"+ СокрЛП( док.Партия.GUID ) +"</bs:guid>
	|              <vd:vetEventList>
	|                <vd:laboratoryResearch>
	|                  <vd:actualDateTime>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаРезультата, "T00:00:00") +"</vd:actualDateTime>
	|                  <vd:operator>
	|                    <dt:name>" + СокрЛП(док.НаименованиеЛаборатории) + "</dt:name>
	|                  </vd:operator>
	|                  <vd:referencedDocument>
	|                    <vd:issueNumber>"+ СокрЛП(док.НомерАктаОтбораПроб) +"</vd:issueNumber>
	|                    <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаОтбораПроб) +"</vd:issueDate>
	|                    <vd:type>9</vd:type>
	//|                    <vd:relationshipType>6</vd:relationshipType>
	|                  </vd:referencedDocument>
	|                  <vd:expertiseID>"+ СокрЛП(док.НомерЭкспертизы) +"</vd:expertiseID>
	|                  <vd:disease>
	|                    <dt:name>"+ СокрЛП(док.НаименованиеПоказателя) +"</dt:name>
	|                  </vd:disease>
	|                  <vd:method>
	|                    <dt:name>"+ СокрЛП(док.МетодИсследования) +"</dt:name>
	|                  </vd:method>
						//Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
	|                  <vd:result>"+ СокрЛП(док.РезультатИсследования.Идентификатор()) +"</vd:result>
	|                  <vd:conclusion>"+ СокрЛП(док.Заключение)  +"</vd:conclusion>
	|                </vd:laboratoryResearch>
	|              </vd:vetEventList>
	|            </vd:stockEntry>
	|          </merc:updateVeterinaryEventsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_ЛабораторныеИсследования( док )

	Если ( ПустоеЗначение( док.applicationID ) = 0 ) и ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Возврат 1;
КонецФункции

Функция Отправить_ВСД_ЛабораторныеИсследования( док ) Экспорт

	t1 = ГМ.Старт();
	
	Если Проверка_ВСД2_ЛабораторныеИсследования(док)=0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	ЗапросXML = ВСД_ЛабораторныеИсследования_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе(док);

	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД_ЛабораторныеИсследования", док);
	
	Возврат appID;
КонецФункции
//}

//==================== Мультимодальные перевозки
//http://help.vetrf.ru/wiki/PrepareOutgoingConsignmentOperation_v2.0#.D0.9C.D1.83.D0.BB.D1.8C.D1.82.D0.B8.D0.BC.D0.BE.D0.B4.D0.B0.D0.BB.D1.8C.D0.BD.D1.8B.D0.B5_.D0.BF.D0.B5.D1.80.D0.B5.D0.B2.D0.BE.D0.B7.D0.BA.D0.B8
// док = ВСД2_транзакция
Функция Запрос_МаршрутДоставки( док, НомерСтроки=0 )
	Если Метаданные.Документ(док.Вид()).РеквизитШапки("ИмяФайлаМаршрутДоставки").Выбран() = 0 Тогда
		возврат "";
	КонецЕсли;
	Если ПустаяСтрока(док.ИмяФайлаМаршрутДоставки) = 1 Тогда
		возврат "";
	КонецЕсли;

//
	//ТипыТранспорта.ДобавитьЗначение(1,"Автомобильный");
	//ТипыТранспорта.ДобавитьЗначение(2,"Железнодорожный");
	//ТипыТранспорта.ДобавитьЗначение(3,"Авиатранспортный");
	//ТипыТранспорта.ДобавитьЗначение(4,"Морской (контейнер)");
	//ТипыТранспорта.ДобавитьЗначение(5,"Морской (трюм)");


	тзМаршрутДоставки = ЗначениеИзФайла( док.ИмяФайлаМаршрутДоставки );
	Если ТипЗначенияСтр(тзМаршрутДоставки) <> "ТаблицаЗначений" Тогда
		Возврат "";
	КонецЕсли;

	запрос = "";
	//|<vd:shipmentRoute>
	//|";


	тзМаршрутДоставки.ВыбратьСтроки();
	Пока тзМаршрутДоставки.ПолучитьСтроку() = 1 Цикл
		НомерСтроки=НомерСтроки+1;

		запрос=запрос+"
		|  <vd:routePoint>
		|    <vd:sqnId>"+ НомерСтроки +"</vd:sqnId>
		|";
		Если ПустоеЗначение( тзМаршрутДоставки.ВыбПлощадка.GUID )=0 Тогда
			запрос=запрос+"
			|    <vd:enterprise>
			|      <bs:guid>"+ тзМаршрутДоставки.ВыбПлощадка.GUID +"</bs:guid>
			|    </vd:enterprise>
			|";
		Иначе
			запрос=запрос+"
			|    <vd:location>
			|      <dt:name>"+тзМаршрутДоставки.Название+"</dt:name>
			|      <dt:address>";
			Если ПустоеЗначение(тзМаршрутДоставки.Страна) = 0 тогда
				Запрос=Запрос+"
				|        <dt:country>
				|          <bs:guid>"+СокрЛП(тзМаршрутДоставки.Страна.guid)+"</bs:guid>
				|        </dt:country>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Регион) = 0 тогда
				Запрос=Запрос+"
				|        <dt:region>
				|          <bs:guid>"+СокрЛП(тзМаршрутДоставки.Регион.guid)+"</bs:guid>
				|        </dt:region>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Район) = 0 тогда
				Запрос=Запрос+"
				|        <dt:district>
				|          <bs:guid>"+СокрЛП(тзМаршрутДоставки.Район.guid)+"</bs:guid>
				|        </dt:district>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Город) = 0 тогда
				Запрос=Запрос+"
				|        <dt:locality>
				|          <bs:guid>"+СокрЛП(тзМаршрутДоставки.Город.guid)+"</bs:guid>
				|        </dt:locality>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Улица) = 0 тогда
				Запрос=Запрос+"
				|        <dt:street>
				|          <bs:guid>"+СокрЛП(тзМаршрутДоставки.Улица.guid)+"</bs:guid>
				|        </dt:street>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Дом) = 0 тогда
				Запрос=Запрос+"
				|        <dt:house>"+СокрЛП(тзМаршрутДоставки.Дом)+"</dt:house>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Строение) = 0 тогда
				Запрос=Запрос+"
				|        <dt:building>"+СокрЛП(тзМаршрутДоставки.Строение)+"</dt:building>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Помещение) = 0 тогда
				Запрос=Запрос+"
				|        <dt:room>"+СокрЛП(тзМаршрутДоставки.Помещение)+"</dt:room>";
			КонецЕсли;

			Запрос=Запрос+"
			|      </dt:address>
			|    </vd:location>
			|";
		КонецЕсли;
		запрос=запрос+"
		//|    <vd:transshipment>"+?(тзМаршрутДоставки.Перегрузка = 1,"true","false")+"</vd:transshipment>
		//отражать будем только пункты перегрузки
		|    <vd:transshipment>true</vd:transshipment>
		|    <vd:nextTransport>
		|      <vd:transportType>"+ тзМаршрутДоставки.ТипТранспорта +"</vd:transportType>
		|        <vd:transportNumber>";

		Если ПустоеЗначение(тзМаршрутДоставки.номерКонтейнера) = 0 тогда
			Запрос=Запрос+"
           	|          <vd:containerNumber>"+СокрЛП(тзМаршрутДоставки.номерКонтейнера)+"</vd:containerNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.НомерАвто) = 0 тогда
			Запрос=Запрос+"
           	|          <vd:vehicleNumber>"+СокрЛП(тзМаршрутДоставки.НомерАвто)+"</vd:vehicleNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.номерприцепа) = 0 тогда
			Запрос=Запрос+"
           	|          <vd:trailerNumber>"+СокрЛП(тзМаршрутДоставки.номерприцепа)+"</vd:trailerNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.номерВагона) = 0 тогда
			Запрос=Запрос+"
           	|          <vd:wagonNumber>"+СокрЛП(тзМаршрутДоставки.номерВагона)+"</vd:wagonNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.НазваниеСудна) = 0 тогда
			Запрос=Запрос+"
           	|          <vd:shipName>"+СокрЛП(тзМаршрутДоставки.НазваниеСудна)+"</vd:shipName>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.НомерАвиарейса) = 0 тогда
			Запрос=Запрос+"
           	|          <vd:flightNumber>"+СокрЛП(тзМаршрутДоставки.НомерАвиарейса)+"</vd:flightNumber>";
		КонецЕсли;

		Запрос=Запрос+"
  	    |        </vd:transportNumber>";


		запрос=запрос+"
		|    </vd:nextTransport>
		|  </vd:routePoint>
		|";
	КонецЦикла;
	//запрос=запрос+"
	//|</vd:shipmentRoute> ";

	Возврат запрос;
КонецФункции

//{ ========================== ВСД2_транзакция ==========================
// http://help.vetrf.ru/wiki/PrepareOutgoingConsignmentOperation_v2.0
Функция ВСД2_транзакция_ЗапросXML(док, тзУсловияПеревозки)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_транзакция_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_транзакция_ЗапросXML(док, тзУсловияПеревозки);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_транзакция");

	Запрос_Шапка = "<SOAP-ENV:Envelope
	| xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
    |<apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00", 1 ) + "</apl:issueDate>
	|        <apl:data>
	|          <merc:prepareOutgoingConsignmentRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";

//************************
    delivery = "
    |       <merc:delivery>";

	Если ПустоеЗначение(док.ТтнДата) = 0 Тогда   // Есть ТТН
    	delivery = delivery + "
    	|          <vd:deliveryDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>";
	Иначе
    	delivery = delivery + "
    	|          <vd:deliveryDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") + "</vd:deliveryDate>";
	КонецЕсли;

    delivery = delivery + "
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>";

	//<dt:globalID>4607009526782</dt:globalID> 	dt:GLNType 	[0..*]  [ ... ] Global Location Number - уникальный номер площадки
	delivery = delivery+"
    |          </vd:consignee>";

	consignment="";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
//        |      <vd:consignment id='id1'>
		consignment = consignment+ "
		|      <vd:consignment id='_" + Док.НомерСтроки + "'>";

		//Указание согласованного наименования и фасовки (указание записи журнала и productItem с наименованием/артикулом/GTIN получателя в запросе).
			consignment = consignment+ "
    	    |        <vd:productItem>";
			Если Док.Продукция_Элемент.ВидПродукции <> Док.Партия.ВидПродукции Тогда
	    	    // При изменении Вида продукции у ProductItem ошибка при списании ранее полученной партии
				// Указанное наименование продукции относится к другому виду продукции.				
				Сообщить("изменен Вида продукции ВСД_Продукция_Элемент, ВСД_Продукция_Элемент относится к другому виду продукции => отправляем с пустым GUID","!");
			ИначеЕсли СокрЛП(Док.Продукция_Элемент.Артикул) <> СокрЛП(Док.КодПродукции) Тогда
				Сообщить("в документе изменен [КодПродукции] => ВСД_Продукция_Элемент отправляем с пустым GUID","!");
			ИначеЕсли ( Док.Продукция_Элемент.ПометкаУдаления() = 1 ) Тогда
				//удаленные ProductItem отправляем без GUID
				Сообщить("в строке №"+ Док.НомерСтроки +" ВСД_Продукция_Элемент ["+ СокрЛП(Док.Продукция_Элемент.Наименование) +"] удален => отправляем с пустым GUID","!");
			Иначе
				consignment = consignment+?(ПустоеЗначение(док.Продукция_Элемент.GUID)= 0,	"          <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>","");				
    	    КонецЕсли;
    	    consignment = consignment+?(ПустоеЗначение(док.GTIN)= 0, " <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>","");
        	consignment = consignment +	" <dt:name>"+ ЗаменитьСпецСимволы( док.НаименованиеПродукции )+"</dt:name>";
	        consignment = consignment+?(ПустоеЗначение(док.КодПродукции)= 0, " <dt:code>"+ СокрЛП(док.КодПродукции) +"</dt:code>","");			
			
			Если ПустоеЗначение(док.ТипФасовки)=0 Тогда
				consignment = consignment+ "
    	    	|          <dt:packaging>
	        	|            <dt:packagingType>
		        |              <bs:guid>"+ СокрЛП(док.ТипФасовки.GUID) +"</bs:guid>
		//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки.
    		    |            </dt:packagingType>
        		|            <dt:quantity>"+ док.КолВоЕдиницФасовки +"</dt:quantity>
		        |            <dt:volume>"+ док.ОбъемЕдиницыФасовки +"</dt:volume>
    		    |            <dt:unit>
        		|              <bs:guid>"+ СокрЛП(док.ЕдИзмОбъемаФасовки.GUID) +"</bs:guid>
		        |            </dt:unit>
    		    |          </dt:packaging>";
			КонецЕсли;

			consignment = consignment+ "
    	    |        </vd:productItem>";

//		КонецЕсли;

		consignment = consignment+ "
		|        <vd:volume>"+ Док.Количество +"</vd:volume>
        |        <vd:unit>
        |          <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
        |        </vd:unit>
        |";


	    // нужно по реквизитам строки пробежать и проверить наличие упаковок
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те

		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			consignment = consignment+ "
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				//НомУровня = Док.ПолучитьАтрибут("НомерУровняУпак"+кк);
				//Если НомУровня=0 Тогда
				//    Продолжить;
				//КонецЕсли;
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				consignment = consignment+ "
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";

				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					consignment = consignment+ "
					|                    <dt:productMarks class='"+КлассМарк+"'>"+ ЗаменитьСпецСимволы( знМарк ) +"</dt:productMarks>";

				КонецЦикла;
				consignment = consignment+ "
    	   		|                  </dt:package>";
		    КонецЦикла;
			consignment = consignment+ "
			|                </vd:packageList>";
		КонецЕсли;

		Если ПустоеЗначение(док.ВидПроисхожденияНепищевойПродукции)=0 Тогда
			consignment = consignment+ "
			|<vd:applicableClassifications>
			|   <vd:nonFoodSource>"+ док.ВидПроисхожденияНепищевойПродукции.Идентификатор() +"</vd:nonFoodSource>
			|</vd:applicableClassifications>";
		КонецЕсли;


		consignment = consignment+ "
		|        <vd:sourceStockEntry>
        |          <bs:guid>"+ СокрЛП(док.Партия.GUID) +"</bs:guid>
        |        </vd:sourceStockEntry>
        |      </vd:consignment>
		|";
	КонецЦикла; //по строкам документа
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5
	ЗапросПодвал = "";
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
	ЗапросПодвал = "
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>";
	КонецЕсли;

	//ТермическоеСостояние="";
	//ГМ.ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние, ТермическоеСостояние );
	//Если ПустоеЗначение(ТермическоеСостояние)=1 Тогда
	//	Предупреждение("Не указано ТермическоеСостояние");
	//	Возврат "";
	//КонецЕсли;
	//
	ЗапросПодвал = ЗапросПодвал+"
    |      <vd:transportInfo>
    |        <vd:transportType>1</vd:transportType>
    |        <vd:transportNumber>";
	
	Если ПустоеЗначение(док.номерКонтейнера) = 0 Тогда
		ЗапросПодвал = ЗапросПодвал+"
    	|          <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>";
	КонецЕсли;
	Если ПустоеЗначение(док.номерАвто) = 0 Тогда
		ЗапросПодвал = ЗапросПодвал+"
    	|          <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>";
	КонецЕсли;
	Если ПустоеЗначение(док.номерПолуприцепа) = 0 Тогда
		ЗапросПодвал = ЗапросПодвал+"
    	|          <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>";
	КонецЕсли;
	
	ЗапросПодвал = ЗапросПодвал+"
    |        </vd:transportNumber>
    |      </vd:transportInfo>
    |      <vd:transportStorageType>"+ док.ТермическоеСостояние.Идентификатор() +"</vd:transportStorageType>";

	ЗапросПодвал=ЗапросПодвал + "
	|<vd:shipmentRoute>
	|"+ Запрос_МаршрутДоставки( док )+"
	|</vd:shipmentRoute> ";

	ЗапросПодвал = ЗапросПодвал+"
		|      <vd:accompanyingForms>";

	Если ПустоеЗначение(док.ТтнДата) = 0 Тогда	// Без ТТН
		ЗапросПодвал = ЗапросПодвал+"
        |        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
        |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
        |          <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата) +"</vd:issueDate>
        |          <vd:type>1</vd:type>
        |        </vd:waybill>";
	КонецЕсли;

	//!!! Цели в ТЧ документа
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		ЗапросПодвал = ЗапросПодвал+"
	        |        <vd:vetCertificate for='_"+ док.НомерСтроки +"'>
	        |          <vd:authentication>
	        |            <vd:purpose>
	        |              <bs:guid>"+ СокрЛП( док.Цель.Guid ) +"</bs:guid>
	        |            </vd:purpose>
	        |            <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>
			|            <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
			|";

			Если ПустоеЗначение(тзУсловияПеревозки)=0 Тогда
				тзУсловияПеревозки.ВыбратьСтроки();
				Пока тзУсловияПеревозки.ПолучитьСтроку() = 1 Цикл
					Если ((тзУсловияПеревозки.Пометка = 2) и (тзУсловияПеревозки.ВидПродукции = док.ВидПродукции)) Тогда
						ЗапросПодвал=ЗапросПодвал+"
						|<vd:r13nClause>
						|<vd:condition>
						|<bs:guid>" + тзУсловияПеревозки.GUID + "</bs:guid>
						|</vd:condition>
						|</vd:r13nClause>
						|";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОсобыеОтметки="";
			Если ГМ.ПолучитьКонстанту("ОсобыеОтметкиЗагружатьИзПараметров")=1 Тогда 
				//из параметров
				ОсобыеОтметки = СокрЛП(ГМ.ПолучитьКонстанту("ВСД_ОсобыеОтметки"));
			КонецЕсли;
			// + добавим из документа
			ОсобыеОтметки = ОсобыеОтметки +" "+ СокрЛП(док.особыеотметки);
			ЗапросПодвал = ЗапросПодвал+ ?(Пустоезначение(особыеотметки) = 0, "            <vd:specialMarks>"+ ОсобыеОтметки +"</vd:specialMarks>","");
			
		ЗапросПодвал = ЗапросПодвал+ "
        |          </vd:authentication>
        |        </vd:vetCertificate>";
	КонецЦикла;

		// Связанные документы
		// тип 16 = Заказ, 6 = ТОРГ12,  1 = ТрН
//        |          <vd:issueSeries>А</vd:issueSeries>
//        |          <vd:issueDate>2017-09-26</vd:issueDate>

		СвязанныеДокументы = "";
		Если ПустоеЗначение(Док.НомерЗаказаПокупателя) = 0 Тогда
			СвязанныеДокументы = "
			|        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.НомерЗаказаПокупателя)+"</vd:issueNumber>
			|          <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаЗаказаПокупателя) +"</vd:issueDate>
    	    |          <vd:type>16</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |	     </vd:relatedDocument>";
		КонецЕсли;

		Если ПустоеЗначение(Док.ТОРГ12Номер) = 0 Тогда
	        СвязанныеДокументы = СвязанныеДокументы+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.ТОРГ12Номер)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ТОРГ12Дата) +"</vd:issueDate>
    	    |          <vd:type>6</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |        </vd:relatedDocument>";
        КонецЕсли;

		Если ПустоеЗначение(СвязанныеДокументы) = 0 Тогда
			ЗапросПодвал = ЗапросПодвал+СвязанныеДокументы;
		КонецЕсли;

	ЗапросПодвал = ЗапросПодвал+ "
		|      </vd:accompanyingForms>
        |    </merc:delivery>
		|          </merc:prepareOutgoingConsignmentRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>
		|";






	Запрос = Запрос_Шапка+
		delivery+
		consignment+
//		accompanyingForms_Шапка+
//		vetCertificate+
		ЗапросПодвал;

	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_транзакция(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД2_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД2_транзакция(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = 1; //все в порядке

	Если ( ПустоеЗначение( док.applicationID ) = 0 ) и ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда
		Предупреждение("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда
		Предупреждение("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ( док.Отправитель_ХозСубъект.GUID = док.Получатель_ХозСубъект.GUID ) и 
		 ( док.Отправитель_Площадка.GUID = док.Получатель_Площадка.GUID) Тогда
		Предупреждение("Отправитель и Получатель совпадают, они должны отличаться!","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.РезультатыИсследований)=1 Тогда
		Предупреждение("Не указаны Результаты Исследований","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.номерАвто)=1 Тогда
		Предупреждение("Не указан Госномер Автомобиля","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.НомерЗаказаПокупателя)=0 Тогда
		Если ПустоеЗначение(док.ДатаЗаказаПокупателя)=1 Тогда
			Предупреждение("Не указан ДатаЗаказаПокупателя","!");
			Результат = 0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(док.ТОРГ12Номер)=0 Тогда
		Если ПустоеЗначение(док.ТОРГ12Дата)=1 Тогда
			Предупреждение("Не указан ТОРГ12Дата","!");
			Результат = 0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(док.ТтнНомер)=1 Тогда
		Предупреждение("Не указан ТТН Номер","!");
		Результат = 0;
		Если ПустоеЗначение(док.ТТНДата)=1 Тогда
			Предупреждение("Не указан ТТН Дата","!");
			Результат = 0;
		КонецЕсли;
	КонецЕсли;
	
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		Если ПустоеЗначение(док.Цель)=1 Тогда
			Предупреждение("Не указана Цель перевозки в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;

		Если ПустоеЗначение(док.Партия.GUID)=1 Тогда
			Предупреждение("Не указан Партия.GUID Выполните синхронизацию справочников","!");
			Результат = 0;
		КонецЕсли;
		//Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда
		//	Сообщить("Не указан Партия.ВсдДата","!");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда
		//	Сообщить("Не указан Партия.ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда
		//	Сообщить("Не указан ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		Если  док.Количество=0 Тогда
			Предупреждение("не указано Количество в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;
		//Если док.КоличествоМест =0 Тогда
		//	Сообщить("не указано Количество коробов"+док,"!");
		//	Результат = 0;
		//КонецЕсли;

		Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда
			Предупреждение("Не указан Партия.Продукция.Тип","!");
			Результат = 0;
		КонецЕсли;

		Если ГМ.ПолучитьКонстанту("ПроверятьМаркировку")=1 Тогда 
			//проверка маркировки
			ФормаУпак=0; КолвоУпак=0; ЗначениеМаркировки=0;
			Для а=1 По 6 Цикл
				ФормаУпак = ФормаУпак + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "ФормаУпак"+а ) ) );
				КолвоУпак = КолвоУпак + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "КолвоУпак"+а ) ) );
				Для б=1 По 2 Цикл
					//КлассМаркировки = КлассМаркировки + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "КлассМаркировки"+б+"_"+а ) ) );
					ЗначениеМаркировки = ЗначениеМаркировки + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "ЗначениеМаркировки"+б+"_"+а ) ) );
				КонецЦикла;
			КонецЦикла;		
			Если ( ФормаУпак = 0 ) Тогда
				Сообщить("Не заполнена Форма Упаковки ( 6 уровеней упаковки)","!");
				Результат = 0;
			КонецЕсли;
			Если ( КолвоУпак = 0 ) Тогда
				Сообщить("Не заполнено Количество Упаковки ( 6 уровеней упаковки)","!");
				Результат = 0;
			КонецЕсли;
			Если ( ЗначениеМаркировки = 0 ) Тогда
				Сообщить("Не заполнена Маркировка Упаковки ( 6 уровеней упаковки)","!");
				Результат = 0;
			КонецЕсли;
		КонецЕсли;		
		
		Если ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодности")=1 Тогда
			
			Если ПустоеЗначение( док.Партия.ДатаСрокГодности1 )=1 Тогда 
				Сообщить("Не указан Срок годности в строке "+док.НомерСтроки ,"!");
				Результат = 0;
			КонецЕсли;
			
			СрокГодности1 = ГМ.Преобразовать_СтрокаДата_в_Дата( док.Партия.ДатаСрокГодности1 );
			СрокГодностиКоличествоДней = ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодностиКоличествоДней");
			Если ( СрокГодности1 + СрокГодностиКоличествоДней)<= ТекущаяДата() Тогда
				Сообщить("Выбранна просроченная партия по срокам годности (менее "+ СрокГодностиКоличествоДней +" дней до окончания срока) в строке "+док.НомерСтроки,"!");
				Результат = 0;
			КонецЕсли;		
				
			// ДатаСрокГодности2 всегда > ДатаСрокГодности1
			//Если ПустоеЗначение( док.Партия.ДатаСрокГодности2 )=0 Тогда 
			//	СрокГодности2 = ГМ.Преобразовать_СтрокаДата_в_Дата( док.Партия.ДатаСрокГодности2 );
			//	Если СрокГодности2 + СрокГодностиКоличествоДней<= ТекущаяДата() Тогда
			//		Сообщить("Запрещено отгружать просроченную продукцию в строке "+док.НомерСтроки , "!");
			//		Результат = 0;
			//	КонецЕсли;
			//КонецЕсли;			

			если док.Партия.ДатаИзготовления1=док.Партия.ДатаСрокГодности1 Тогда
				Сообщить("указаны неверные даты изготовления и срока годности в строке "+док.НомерСтроки,"!");
				Результат = 0;
			КонецЕсли;			

		КонецЕсли;	
		
	КонецЦикла;

	Если ПустоеЗначение(док.ТермическоеСостояние)=1 Тогда
		Предупреждение("В "+док+" не указано ТермическоеСостояние","!");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции


Функция Отправить_ВСД2_транзакция(док, тзУсловияПеревозки="")  Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_транзакция(док, тзУсловияПеревозки);
	КонецЕсли;
	//}

	t1 = ГМ.Старт();
	
	//стандартное поведение функции
	Если Проверка_ВСД2_транзакция(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Отправитель_Площадка);

	Попытка
		Если ПустоеЗначение(тзУсловияПеревозки) = 1 Тогда  // не переданы в параметре, посмотрим в документе
			ИмяФайла = СокрЛП(док.ИмяФайлаРегионализация);
			Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
				ТзУсловияПеревозки = ЗначениеИзФайла(ИмяФайла);
			КонецЕсли;
		КонецЕсли;
	Исключение	КонецПопытки;

	ЗапросXML = ВСД2_транзакция_ЗапросXML(док,тзУсловияПеревозки);

	метод = ГМ.Компонента.GetMethod();
	//метод.Service = "platform/services/2.0/ApplicationManagementService";
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе(док);

	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_транзакция", док);
	
	Возврат appID;

КонецФункции


Функция ОтправитьВсе_ВСД2_Транзакция(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД2_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД2_Транзакция(СписокВСД,НачДата, КонДата);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Состояние("Меркурий: отправка ВСД2 исходящие");
	Сообщить("Начало отправки документов","i");

	Если ПустоеЗначение(СписокВСД)=1 тогда
		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД2_Транзакция");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл

			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());

		КонецЦикла;
	КонецЕсли;


	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ГМ.СтатусЗакрыт( ВСД.Статус )=1 Тогда
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);

		Отправить_ВСД2_транзакция( ВСД );

	КонецЦикла;

	Сообщить("Отправка документов завершена","i");
КонецФункции


Функция ОформитьВСД2(РеализацияТоваров) Экспорт
	КонтФормы = "";
	ОткрытьФорму("Документ.ВСД2_транзакция",КонтФормы, РеализацияТоваров);
КонецФункции


Функция ВСД2_транзакция_ПолучитьОтветВЕТИС( док ) Экспорт

	Если (Док.Вид() = "Реализация") или (Док.Вид() = "ПеремещениеТМЦ") или (Док.Вид() = ГМ.СписокКонстант.Получить("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = ГМ.Выбрать_ВСД_транзакция(Док);
		тзВСД = ГМ.Выбрать_ВСД(Док_ВСД_транзакция);

	Иначе
		Док_ВСД_транзакция = док;
	КонецЕсли;

	ПолучитьРезультат_ВСД_2(Док_ВСД_транзакция.applicationID);

КонецФункции
//}

//{ ========================== ВСД2_производство ==========================
Функция ВСД2_производство_ЗапросXML(док)
	//док = СоздатьОбъект("Документ.ВСД_производство");
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_производство_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_производство_ЗапросXML(док);
	КонецЕсли;
	//}

	Запрос ="<SOAP-ENV:Envelope
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:registerProductionOperationRequest>
		|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:productionOperation> ";

// НЗП
		Если (ПустоеЗначение(Док.operationId) = 0) Тогда
			Запрос=Запрос+"
			|        <vd:operationId>"+ СокрЛП(Док.operationId) +"</vd:operationId>
			|";
		КонецЕсли;

		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			//порядок добавления имеет значение -
			// 1. rawBatch = списание
			// Уровни упаковки можно использовать, пока без упаковки
			Если док.ВидДвижения=2 Тогда
				Запрос=Запрос+"
				| <vd:rawBatch>
				|    <vd:sourceStockEntry>
				|       <bs:guid>" + СокрЛП(док.Партия.guid) + "</bs:guid>
				|    </vd:sourceStockEntry>
				|    <vd:volume>"+ док.Количество +"</vd:volume>
				|    <vd:unit>
				|       <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.Guid) +"</bs:guid>
				|    </vd:unit>
				| </vd:rawBatch>
				|";
			КонецЕсли;
		КонецЦикла;



	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
	Если док.ВидДвижения=1 Тогда // Выпуск

	Запрос=Запрос+"
		|              <vd:productiveBatch>
		|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
		|                <vd:product>
		|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
		|                </vd:product>
		|                <vd:subProduct>
		|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
		|                </vd:subProduct>
		|                <vd:productItem>
		// Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
		|                  <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
		|                </vd:productItem>
		|                <vd:volume>"+ Док.Количество +"</vd:volume>
		|                <vd:unit>
		|                  <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|                </vd:unit>";
//		|                <vd:dateOfProduction> ";
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).

		Запрос = Запрос + ГМ.Изготовление_СрокГодности_в_XML(док, "vd");

		//Уникальный идентификатор производственной партии продукции.
		Запрос=Запрос+"
		|                <vd:batchID>"+ СокрЛП( док.НомерПартии ) +"</vd:batchID>
		|                <vd:perishable>"+ ГМ.булево(док.Скоропортящийся)+"</vd:perishable>
		|                <vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo>
		|";

//   Уровни <dt:level>

    Тест1 = 0;  // 1 - Запрос с исп длинной строки УровниУпаковки, 0 - в реквизитах Документа
	Если Тест1=1 Тогда  // Запрос из Длинной строки
		стрУровни = "";
		СЗУпаковки = ЗначениеИзСтроки(Док.УровниУпаковки);
		Если ТипЗначенияСтр(СЗУпаковки) = "СписокЗначений" Тогда
			стрУровни = СЗУпаковки.Получить(Док.НомерСтроки);
			Если ПустоеЗначение(СтрУровни) = 0 Тогда
				ЕстьСведенияПоСтроке = 1;
			Иначе
				стрУровни = "";
			КонецЕсли;
		КонецЕсли;

	    ТЗУровни = ЗначениеИзСтроки(стрУровни);
		Если ТипЗначенияСтр(ТЗУровни) = "ТаблицаЗначений" Тогда
			Запрос=Запрос+"
			|                <vd:packageList>";
			ТЗУровни.ВыбратьСтроки();
			Пока ТЗУровни.ПолучитьСтроку()=1 Цикл
				Запрос=Запрос+"
				|                  <dt:package>
				|                    <dt:level>"+ТЗУровни.НомерУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(ТЗУровни.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ ТЗУровни.Колво +"</dt:quantity>";
				СзМарк = ЗначениеИзСтроки(ТЗУровни.Маркировки);
				Если ТипЗначенияСтр(СзМарк) = "СписокЗначений" Тогда
			    	кк=0;
					Для кк=1 по СзМарк.РазмерСписка() Цикл
						стрМарк="";
						ЗнМарк = СзМарк.ПолучитьЗначение(кк,стрМарк);
						Запрос=Запрос+"
						|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
					КонецЦикла;
				КонецЕсли;
				Запрос=Запрос+"
    	   		|                  </dt:package>";
			КонецЦикла;
			Запрос=Запрос+"
			|                </vd:packageList>";
		КонецЕсли;
	Иначе //ЖД Тест1=0  - сведения об уровнях упаковки в реквизитах Документа Производство
	    // нужно по реквизитам строки пробежать и проверить наличие упаковок
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те

		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			Запрос=Запрос+"
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				//НомУровня = Док.ПолучитьАтрибут("НомерУровняУпак"+кк);
				//Если НомУровня=0 Тогда
				//    Продолжить;
				//КонецЕсли;
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";

				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+КлассМарк+"'>"+ ЗаменитьСпецСимволы( знМарк ) +"</dt:productMarks>";

				КонецЦикла;
				Запрос=Запрос+"
    	   		|                  </dt:package>";
		    КонецЦикла;
			Запрос=Запрос+"
			|                </vd:packageList>";
		КонецЕсли;

	КонецЕсли;//ЖД Варианты запроса УровнейУпаковки по разным реквизитам

		Запрос=Запрос+"
		|              </vd:productiveBatch>";
	КонецЕсли; // производство


	КонецЦикла;
    // завершение операции
		Запрос=Запрос+"
		|          <vd:finalizeOperation>"+ГМ.булево(док.ЗавершитьОперацию)+"</vd:finalizeOperation>";


	Запрос=Запрос+"
	|            </merc:productionOperation>
	|            <merc:vetDocument>
	|              <vd:authentication>
	|              <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED
	Запрос=Запрос+"
	|                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>";
	Запрос = Запрос+ ?(Пустоезначение(док.особыеотметки) = 0, "              <vd:specialMarks>"+ СокрЛП(док.особыеотметки) +"</vd:specialMarks>","");
	Запрос=Запрос+"
	|              </vd:authentication>
	|            </merc:vetDocument>
	|          </merc:registerProductionOperationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД_производство(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_производство(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = 1; //все в порядке

	Если ( ПустоеЗначение( док.applicationID ) = 0 ) и ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Если ПустоеЗначение(док.Производитель_ХозСубъект.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Производитель_площадка.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.РезультатыИсследований)=1 Тогда
		Предупреждение("Не указаны Результаты Исследований","!");
		Результат = 0;
	КонецЕсли;

	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		Если ПустоеЗначение(док.Продукция_Элемент.GUID)=1 Тогда
			Предупреждение("Не указан Продукция_Элемент.GUID Выполните синхронизацию справочников","!");
			Результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда
			Сообщить("Не указана ЕдиницаИзмерения в строке "+Док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;
		Если  док.Количество=0 Тогда
			Предупреждение("не указано Количество в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;
КонецФункции


Функция Отправить_ВСД2_Производство(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_производство(док);
	КонецЕсли;
	//}

	t1 = ГМ.Старт();
	
	//стандартное поведение функции
	Если Проверка_ВСД_производство(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Производитель_площадка);


	ЗапросXML = ВСД2_производство_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе(док);

	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_Производство", док);	
	
	Возврат appID;

КонецФункции

Функция ОтправитьВсе_ВСД2_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД2_Производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД2_Производство(СписокВСД,НачДата, КонДата);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Состояние("Меркурий: отправка ВСД Производство");
	Сообщить("Начало отправки документов","i");

	Если ПустоеЗначение(СписокВСД)=1 тогда
		Сообщить("отправляются ВСД производство за период "+ПериодСтр(НачДата, КонДата));

		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД2_Производство");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл

			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());

		КонецЦикла;
	Иначе
		Сообщить("отправляются ВСД производство "+СписокВСД.РазмерСписка()+" документов");
	КонецЕсли;

	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ГМ.СтатусЗакрыт( ВСД.Статус )=1 Тогда			
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(ВСД.applicationID)=0 Тогда
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);

		Отправить_ВСД2_производство( ВСД );

	КонецЦикла;

	Сообщить("Отправка документов завершена","i");
КонецФункции

//}

//{ =========================  Проверка условий Регионализации
Функция РегионализацияМаршрута_2_ЗапросXML(док)

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("РегионализацияМаршрута_2_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.РегионализацияМаршрута_2_ЗапросXML(док);
	КонецЕсли;
	//}

	//СокрЛП(док.Партия.Продукция.GUID)
	//СокрЛП(док.Партия.ВидПродукции.GUID)
	//СокрЛП(док.Партия.Продукция_Элемент.GUID)
	//? что подставлять - написано 3 уровень
Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:checkShipmentRegionalizationRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	Если Док.Вид() = "ВСД2_входящий" Тогда
		Запрос = Запрос+"
		|            <dt:cargoType>
		|              <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
		|            </dt:cargoType>";
	Иначе
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку()=1 Цикл
			Если ПустоеЗначение(док.Партия.ВидПродукции.GUID)=0 Тогда
				Запрос = Запрос+"
				|            <dt:cargoType>
				|              <bs:guid>"+ СокрЛП(док.Партия.ВидПродукции.GUID) +"</bs:guid>
				|            </dt:cargoType>";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//<vd:sqnId>1</vd:sqnId>
	//Порядовый номер точки маршрута.
    //Не обязателен для заполнения, будет сгенерирован автоматически в ответе

	// <vd:enterprise>
	//Сведения о предприятии, которое является точкой маршрута.
    //Указывается в случае, если не указано значение location

	НомерСтроки=1;

	Если док.Вид()="ВСД2_входящий" Тогда
		Отправитель_Площадка = СокрЛП(док.Получатель_Площадка.GUID);
		Получатель_Площадка = СокрЛП(док.Отправитель_Площадка.GUID);
	Иначе
		Отправитель_Площадка = СокрЛП(док.Отправитель_Площадка.GUID);
		Получатель_Площадка = СокрЛП(док.Получатель_Площадка.GUID);
	КонецЕсли;

	Запрос = Запрос+"
	|            <vd:shipmentRoute>
	|              <vd:routePoint>
	|                <vd:sqnId>1</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ Отправитель_Площадка +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|";
	ЗапросМаршрут = Запрос_МаршрутДоставки( док, НомерСтроки );
	Запрос=Запрос+ЗапросМаршрут+"
	|              <vd:routePoint>
	|                <vd:sqnId>"+ (НомерСтроки+1) +"</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ Получатель_Площадка +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|            </vd:shipmentRoute>
	|          </merc:checkShipmentRegionalizationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ПеревозкаРазрешена_2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла);
	КонецЕсли;
	//}

	//<dt:decision> 	dt:RegionalizationDecision
	//1 	Перемещение разрешено.
	//2 	Перемещение разрешено при обязательном соблюдении условий.
	//3 	Перемещение запрещено.
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);


//                  <vd:r13nRouteSection>
//                     <vd:sqnId>1</vd:sqnId>
//                     <vd:appliedR13nRule>
//                        <dt:cargoType>
//                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
//                        </dt:cargoType>
//                        <dt:decision>1</dt:decision>
//                     </vd:appliedR13nRule>
//                  </vd:r13nRouteSection>


    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );


	Попытка
		applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

		RouteSectionList = objDom.selectNodes("//*[local-name() = 'r13nRouteSection']") ;
	Исключение
		Сообщить("Не удалось прочитать ответ о разрешении");
		Возврат "";
		//Пример на ветисе корявый...
		applicationId = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectSingleNode("applicationId").text ;

		RouteSectionList = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectNodes("r13nRouteSection") ;
	КонецПопытки;

	УсловияПеревозки = СоздатьОбъект("ТаблицаЗначений");
	УсловияПеревозки.НоваяКолонка("Пометка", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("ВидПродукции", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("Решение", , , , ,1,);
	УсловияПеревозки.НоваяКолонка("Название", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("UUID", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("GUID", , , , ,3,);

	Сообщить("Получено "+RouteSectionList.length+" записей по отрезкам маршрута","i");
    Для i1 = 0 По RouteSectionList.length - 1 Цикл
        RouteSection = RouteSectionList.item(i1);
		RuleList = RouteSection.SelectNodes("vd:appliedR13nRule");
		Сообщить("Получено "+RuleList.length+" записей правил перемещения","i");
		Для k1 = 0 По RuleList.length - 1 Цикл
			appliedR13nRule = RuleList.item(k1);
			Решение = Число(appliedR13nRule.selectSingleNode("dt:decision").text);
			ВидПродукции = ГМ.НайтиВидПродукции( appliedR13nRule.selectSingleNode("dt:cargoType").selectSingleNode("bs:guid").text);

			requirements = appliedR13nRule.selectNodes("dt:requirement");
			Сообщить("Получено "+requirements.length+" записей по правилам для "+ВидПродукции,"i");
			Для i2 = 0 По requirements.length - 1 Цикл
				conditionGroup = requirements.item(i2).selectNodes("dt:conditionGroup");
				Для i3=0 По conditionGroup.length - 1 Цикл
					conditionList = conditionGroup.item(i3).selectNodes("dt:condition");
					Для i4=0 По conditionList.length - 1 Цикл
						condition = conditionList.item(i4);
						УсловияПеревозки.НоваяСтрока();
						УсловияПеревозки.Пометка = 2;
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						УсловияПеревозки.Название = condition.selectSingleNode("dt:text").text;
						УсловияПеревозки.UUID = condition.selectSingleNode("bs:uuid").text;
						УсловияПеревозки.GUID = condition.selectSingleNode("bs:guid").text;
						Если Решение = 1 Тогда
							Сообщить(Строка(i4+1)+". Перемещение разрешено.","i");
						ИначеЕсли Решение = 2 Тогда
							Сообщить(Лев(Строка(i4+1)+". Перемещение при условии: "+ РазделительСтрок + СокрЛП(УсловияПеревозки.Название),499));
						Иначе
							Сообщить(Строка(i4+1)+". Перемещение запрещено." +УсловияПеревозки.Название,"!");
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат УсловияПеревозки;

КонецФункции



Функция ПолучитьРезультат_Регион_2(applicationID, докСсылка ) Экспорт

	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	ГМ.Пауза( );

	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	//Результат = ГМ.Компонента.SendRequestResult( applicationID );
	Результат = ГМ.ПолучитьРезультатСервер( applicationID );

	Если ПустоеЗначение(докСсылка)=0 Тогда
	//	ГМ.СохранитьСтатусЗапроса(докСсылка);
	//	ЗагрузитьXML_ПеревозкаРазрешена_2( ГМ.Компонента.LogFilename, докСсылка);
	КонецЕсли;

    МожноВезти = ЗагрузитьXML_ПеревозкаРазрешена_2( ГМ.Компонента.LogFilename );

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Возврат МожноВезти;
КонецФункции


Функция ПроверитьВозможностьПеремещения(док) Экспорт

	//ГМ.Инициализация(док); //лишняя инициализация

	Если ПустоеЗначение(док)=1 Тогда
		Сообщить("Нет документа ВСД","!");
		Возврат "";
	КонецЕсли;

	ЗапросXML = РегионализацияМаршрута_2_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
    Результат = "";
	Если ПустоеЗначение(appID)=0 Тогда

		Результат = ПолучитьРезультат_Регион_2(appID,док);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_Регион_2(appID,док);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции


Функция ПолучитьИмяФайлаРегионализация(Док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИмяФайлаРегионализация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИмяФайлаРегионализация(Док);
	КонецЕсли;
	//}

	КаталогРегионализации = ГМ.КаталогМодуля+"Region\";
	Если ФС.СуществуетФайл(КаталогРегионализации) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(КаталогРегионализации);
		Исключение
			Предупреждение("Не создан каталог регионализации!"); Возврат "";
		КонецПопытки;
	КонецЕсли;

	Рез = КаталогРегионализации+"УсловияПеревозки "+СтрЗаменить(Док.ДатаДок,".","")+СокрЛП(Док.НомерДок)+".mrk";

	Возврат Рез;
КонецФункции

//} Конец Регионализация


//{ =====================   Продукция 2.0

Функция ПолучитьРезультат_Список_Продукции(ФайлОтвета,продукцияЭлемент="") Экспорт

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ФайлОтвета);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

    objDom.setProperty("SelectionNamespaces", "
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:v2='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|" );

	//applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

	productItemList = objDom.selectNodes("//*[local-name() = 'productItem']") ;

    Для i1 = 0 По productItemList.length - 1 Цикл
        productItem = productItemList.item(i1);

		active 	 = НРЕГ(productItem.selectSingleNode("bs:active").text);
		last 	 = НРЕГ(productItem.selectSingleNode("bs:last").text);

		//st  	 = productItem.selectSingleNode("bs:status").text;
		//prodType = productItem.selectSingleNode("dt:productType").text;

		СпрОбъект = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
		Если ПустоеЗначение(продукцияЭлемент)=0 Тогда
			СпрОбъект.НайтиЭлемент(продукцияЭлемент);
		Иначе

			Если СпрОбъект.НайтиПоРеквизиту("GUID", productItem.selectSingleNode("bs:guid").text,1)=0 Тогда
				Если СпрОбъект.НайтиПоНаименованию( productItem.selectSingleNode("dt:name").text)=0 Тогда
					СпрОбъект.Новый();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		//Если active="false" Тогда
		//	Продолжить;
		//КонецЕсли;

		СпрОбъект.Наименование = productItem.selectSingleNode("dt:name").text;
		СпрОбъект.Продукция = ГМ.НайтиПродукцию(productItem.selectSingleNode("dt:product").selectSingleNode("bs:guid").text);
		СпрОбъект.ВидПродукции = ГМ.НайтиВидПродукции(productItem.selectSingleNode("dt:subProduct").selectSingleNode("bs:guid").text);
		СпрОбъект.UUID = productItem.selectSingleNode("bs:uuid").text;
		СпрОбъект.GUID = productItem.selectSingleNode("bs:guid").text;
		Попытка СпрОбъект.СоответствуетГОСТу = ?(productItem.selectSingleNode("dt:correspondsToGost").text = "true",1,0); Исключение	КонецПопытки;
		Попытка СпрОбъект.Гост = productItem.selectSingleNode("dt:gost").text; Исключение	КонецПопытки;
		Попытка СпрОбъект.GTIN = productItem.selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
		Попытка СпрОбъект.Артикул	 = productItem.selectSingleNode("dt:code").text; Исключение КонецПопытки;
		СпрОбъект.ТермическоеСостояние = ?( ПустоеЗначение(СпрОбъект.ТермическоеСостояние) = 1, ГМ.СписокКонстант.Получить("ТермУсловияПеревозки"), СпрОбъект.ТермическоеСостояние );
		// Фасовка
		Попытка packaging = productItem.selectSingleNode("*[local-name()='packaging']"); Исключение packaging=""	КонецПопытки;
		Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение ФасовкаНаименование=""	КонецПопытки;
		Попытка СпрОбъект.ТипФасовки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
		Попытка	СпрОбъект.КолВоЕдиницФасовки = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
		Попытка	СпрОбъект.ОбъемЕдиницыФасовки = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
		Попытка	СпрОбъект.ЕдИзмОбъемаФасовки = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;

		//Площадка(и) производитель(и) - Пока в 1 экземпляре
		Попытка СпрОбъект.Площадка = ГМ.НайтиПлощадку(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
			//ГМ.ЗагрузитьПлощадкуПоGUID(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
			
		//Попытка СпрОбъект.Площадка = ГМ.НайтиПлощадку(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
		Попытка СпрОбъект.Производитель_ХозСубъект = ГМ.НайтиХСпоGUID(productItem.selectSingleNode("dt:producer").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
		Попытка СпрОбъект.Собственник_ХозСубъект = ГМ.НайтиХСпоGUID(productItem.selectSingleNode("dt:tmOwner").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
		Попытка	СпрОбъект.Производитель_Площадка = СпрОбъект.Площадка; Исключение КонецПопытки;
			
		Попытка СпрОбъект.active = ?( active="true",1,0) Исключение	КонецПопытки;
		Попытка СпрОбъект.last = ?( last="true",1,0) Исключение	КонецПопытки;
			
		СпрОбъект.Записать();

		Сообщить("Записан ["+СпрОбъект.ТекущийЭлемент()+"] uuid =["+СпрОбъект.uuid+"]");
		
		//Если ((last="true") и (active="false")) Тогда
		Если (active="false") Тогда
			//СпрОбъект.GUID = "";
			//СпрОбъект.Записать();
			СпрОбъект.Удалить(0);
			Сообщить("Удален ["+СпрОбъект.ТекущийЭлемент()+"] uuid =["+СпрОбъект.uuid+"]");
		Иначе
			СпрОбъект.СнятьПометкуУдаления();
		КонецЕсли;		
	КонецЦикла;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Возврат "";
КонецФункции


Функция Продукция_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<soapenv:Envelope
	|xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getProductItemByGuidRequest>
	|         <bs:guid>"+ СокрЛП(продукция.GUID) +"</bs:guid>
	|      </ws:getProductItemByGuidRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";

	Возврат запрос;
КонецФункции

Процедура Получить_Инфо_Продукции( Продукция ) Экспорт
	Если ПустоеЗначение(Продукция) = 1 Тогда
	    Сообщить("Не указана Продукция для получения инфо");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(Продукция.GUID) = 1 Тогда
	    Сообщить("У Продукции "+Продукция+" отсутствует GUID, запрос невозможен");
		Возврат;
	КонецЕсли;

	ЗапросXML = Продукция_Инфо_ЗапросXML( Продукция );

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.0/ProductService";
    метод.Action = "GetProductItemByGuid";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Результат = ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename,Продукция);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

КонецПроцедуры

Функция  ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID) Экспорт

	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	ГМ.Пауза( );

	Сообщить("Отправляем запрос ["+продукцияЭлемент+"]" );
	//Результат = ГМ.Компонента.SendRequestResult( appID );
	Результат = ГМ.ПолучитьРезультатСервер( appID );

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename,продукцияЭлемент);
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Возврат Результат;
КонецФункции

// документация - http://help.vetrf.ru/wiki/ModifyProducerStockListOperation_v2.0
Функция Изменить_Продукцию_ЗапросXML(продукцияЭлемент,RegisterModificationType)

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Изменить_Продукцию_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Изменить_Продукцию_ЗапросXML(продукцияЭлемент,RegisterModificationType);
	КонецЕсли;
	//}

	Запрос ="<SOAP-ENV:Envelope
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:modifyProducerStockListRequest>
		|            <merc:localTransactionId>" + "[GUID]" + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:modificationOperation>
	    |          <vd:type>"+RegisterModificationType+"</vd:type>
		|";

		Если RegisterModificationType = "DELETE" Тогда
			Запрос = Запрос + "
		    |          <vd:affectedList>
		    |            <dt:productItem>";
		    Если ПустоеЗначение(продукцияЭлемент.uuid) = 0 Тогда
				Запрос = Запрос + "
	    		|              <bs:uuid>"+СокрЛП(продукцияЭлемент.uuid)+"</bs:uuid>";
			КонецЕсли;

			Запрос = Запрос + "
			|            </dt:productItem>
		    |          </vd:affectedList>";

		Иначе
			Запрос = Запрос + "
		    |          <vd:resultingList>
		    |            <dt:productItem>";

			//При Модификации
	//	    Если ПустоеЗначение(продукцияЭлемент.guid) = 0 Тогда
	//			Запрос = Запрос + "
	//    		|              <dt:guid>"+СокрЛП(продукцияЭлемент.guid)+"</dt:guid>";
	//		КонецЕсли;

		    Если ПустоеЗначение(продукцияЭлемент.uuid) = 0 Тогда
				Запрос = Запрос + "
	    		|              <bs:uuid>"+СокрЛП(продукцияЭлемент.uuid)+"</bs:uuid>";
			КонецЕсли;


			Попытка //Нет пока такого реквизита в справочнике
			    Если ПустоеЗначение(продукцияЭлемент.GTIN) = 0 Тогда
					Запрос = Запрос + "
	    			|              <dt:globalID>"+ продукцияЭлемент.GTIN +"</dt:globalID>";
				КонецЕсли;
			Исключение КонецПопытки;

			Название = ЗаменитьСпецСимволы( продукцияЭлемент.Наименование );
			Запрос = Запрос + "
		    |              <dt:name>"+СокрЛП( Название )+"</dt:name>";
		    Если ПустоеЗначение(продукцияЭлемент.Артикул) = 0 Тогда
				Запрос = Запрос + "
	    		|              <dt:code>"+СокрЛП(продукцияЭлемент.Артикул)+"</dt:code>";
			КонецЕсли;
			Запрос = Запрос + "
		    |              <dt:productType>"+продукцияЭлемент.Продукция.Тип+"</dt:productType>
	    	|              <dt:product>
		    |                <bs:guid>"+Сокрлп(продукцияЭлемент.Продукция.GUID)+"</bs:guid>
	    	|              </dt:product>
		    |              <dt:subProduct>
	    	|                <bs:guid>"+Сокрлп(продукцияЭлемент.ВидПродукции.GUID)+"</bs:guid>
		    |              </dt:subProduct>
			|              <dt:correspondsToGost>"+ГМ.Булево(продукцияЭлемент.СоответствуетГОСТу)+"</dt:correspondsToGost>";
		    Если продукцияЭлемент.СоответствуетГОСТу = 1 Тогда
				Запрос = Запрос + "
		    	|              <dt:gost>"+СокрЛП(продукцияЭлемент.Гост)+"</dt:gost>";
			КонецЕсли;
			// ХС Производитель и владелец ТМ
			Запрос = Запрос + "
		    |              <dt:producer>
	    	|                <bs:guid>"+Сокрлп(ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
		    |              </dt:producer>
		    |              <dt:tmOwner>
	    	|                <bs:guid>"+Сокрлп(ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
		    |              </dt:tmOwner>";


	//45 	·········<dt:producing> 	dt:ProductItemProducing 	[0..*] 	Список площадок, на которых выпускается данная продукция.
	//46 	············<dt:location> 	dt:Enterprise 	[1..1] 	Площадка, осуществляющая выпуск продукции.
	//47 	···············<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии предприятия. 	<bs:uuid>9c706614-b995-4bdd-bda3-8fa9de70803a</bs:uuid>
	//48 	···············<bs:guid> 	bs:UUID 	[1..1] 	Глобальный идентификатор предприятия. 	<bs:guid>12f04ea3-e236-4b71-b427-e04d41b26de4</bs:guid>
	//49 	············</dt:location>
	//50 	·········</dt:producing>
			Запрос = Запрос + "
		    |              <dt:producing>
			|                <dt:location>
	    	|                   <bs:guid>"+Сокрлп(продукцияЭлемент.Площадка.GUID)+"</bs:guid>
		    |                </dt:location>
		    |              </dt:producing>";

	// ЖД ФАСОВКА
			Если ПустоеЗначение(продукцияЭлемент.ТипФасовки)= 0 Тогда
			Запрос = Запрос + "
			|              <dt:packaging>
		    |                <dt:packagingType>
	    	|                  <bs:guid>"+Сокрлп(продукцияЭлемент.ТипФасовки.GUID)+"</bs:guid>
		    |                </dt:packagingType>
	    	|                <dt:quantity>"+продукцияЭлемент.КолвоЕдиницФасовки+"</dt:quantity>
		    |                <dt:volume>"+продукцияЭлемент.ОбъемЕдиницыФасовки+"</dt:volume>
	    	|                <dt:unit>
		    |                  <bs:guid>"+ СокрЛП(продукцияЭлемент.ЕдИзмОбъемаФасовки.Guid) +"</bs:guid>
	    	|                </dt:unit>
		    |              </dt:packaging>";

			КонецЕсли;
			Запрос = Запрос + "
			|            </dt:productItem>
		    |          </vd:resultingList>";

		КонецЕсли;

		Запрос = Запрос + "
	    |        </merc:modificationOperation>
	    |      </merc:modifyProducerStockListRequest>
	    |    </apl:data>
	    |  </apl:application>
	    |</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";


	Возврат Запрос;
КонецФункции


Функция  Изменить_Продукцию( продукцияЭлемент , RegisterModificationType) Экспорт

	Если ПустоеЗначение(продукцияЭлемент.Площадка.GUID)=1 Тогда
		Сообщить("В продукцияЭлемент.Площадка пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	ЗапросXML = Изменить_Продукцию_ЗапросXML(продукцияЭлемент, RegisterModificationType);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	Результат = "";
	Если ПустоеЗначение(appID) = 0 Тогда
		Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Возврат Результат;

КонецФункции

Функция Получить_Список_Продукции_ЗапросXML(Площадка)

	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |   <ws:getProductItemListRequest>
    |      <bs:listOptions>
    |         <bs:count>1000</bs:count>
    |         <bs:offset>0</bs:offset>
    |      </bs:listOptions>
    |      <dt:enterprise>
    |         <bs:guid>"+ СокрЛП(Площадка.GUID) +"</bs:guid>
    |      </dt:enterprise>
    |   </ws:getProductItemListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция Получить_Список_Продукции( Площадка ) Экспорт

	ЗапросXML = Получить_Список_Продукции_ЗапросXML( Площадка );

	метод = ГМ.Компонента.GetMethod();

	метод.Service = "platform/services/2.0/ProductService";
    метод.Action = "GetProductItemList";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;
	ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename);
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	Возврат appID;

КонецФункции

//} =======================  Продукция окончание 

//{ ====================== Аннулирование ВСД Транспортного v2 ===========================

Функция ВСД2_Аннулирование_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_Аннулирование_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_Аннулирование_ЗапросXML(док);
	КонецЕсли;
	//}

	Запрос = "
	|<SOAP-ENV:Envelope
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:withdrawVetDocumentRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|            </merc:initiator>
	|            <merc:vetDocumentId>"+ СокрЛП(док.UUID) +"</merc:vetDocumentId>
	|            <merc:withdrawReason>"+ГМ.СписокКонстант.Получить("ПарамПричинаАннулирования")+"</merc:withdrawReason>
	|            <merc:withdrawDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T23:59:59") +"</merc:withdrawDate>
	|            <merc:specifiedPerson>
	|              <vd:login>"+ ГМ.СписокКонстант.Получить("param_vetdoctor_login")+"</vd:login>
	|            </merc:specifiedPerson>
	|          </merc:withdrawVetDocumentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции


Функция Отправить_ВСД2_Аннулирование( док ) Экспорт
	
	t1 = ГМ.Старт();

	//Аннулирование док-та ВСД2
	Если ПустоеЗначение(док)=1 Тогда
		Возврат 0;
	КонецЕсли;

	Если СокрЛП(док.ТипВСД) = "PRODUCTIVE" Тогда
		Сообщить("Производственный ВСД не аннулируем " + Док);
		Возврат "";
	КонецЕсли;

	Если ПустоеЗначение(док.uuid) = 1 Тогда
		Сообщить("В документе "+док+" не указан uuid, аннулирование невозможно");
		Возврат "";
	КонецЕсли;

	Если СокрЛП(док.Статус) = "Аннулирова" Тогда
		Сообщить("Документ "+док+" уже аннулирован");
		Возврат "";
	КонецЕсли;

	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Отправитель_Площадка);

	ЗапросXML = ВСД2_Аннулирование_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе(док);
	
	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = ПолучитьРезультат_ВСД_2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2( appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Результат = "COMPLETED" Тогда //условие на ответ - вдруг покупатель уже погасил, либо ошибка аннулирования
		докОбъект = СоздатьОбъект("Документ");
		докОбъект.НайтиДокумент( док );		
		//докОбъект.Статус = "WITHDRAWN";//"Аннулирован";
		докОбъект.Записать();
		докОбъект.Удалить(0);
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_Аннулирование", док);
	
	Возврат Результат;
КонецФункции


Процедура Аннулировать_ВСД2_транзакция( док ) Экспорт
	
	Если ПустоеЗначение(док) = 1 Тогда
		Возврат;
	КонецЕсли;

	ОшибкаАннулирования = 0; // Если не удалось аннулировать ВСЕ ВСД2, связанные с Транзакцией, не помечаем ее как Аннулирован

	тзВСД = ГМ.Выбрать_ВСД(док);

	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку()=1 Цикл
		//Если НЕ(СокрЛП(тзВСД.Док.статус) = "CONFIRMED") Тогда // такие не Аннулируются
		//    Продолжить;  //ошибка #2239
		//КонецЕсли;
		Результат = Отправить_ВСД2_Аннулирование(тзВСД.Док);
		Если НЕ ( Результат = "COMPLETED" ) Тогда  
			ОшибкаАннулирования = 1;
			Сообщить("Не удалось Аннулировать "+тзВСД.Док+" для "+док);
		КонецЕсли;
	КонецЦикла;

	докОбъект = СоздатьОбъект("Документ");
	докОбъект.НайтиДокумент( док );
	докОбъект.Статус = Результат; //"WITHDRAWN"; //"Аннулирован";
	Если ( ОшибкаАннулирования = 0 ) Тогда		
		докОбъект.СтатусВСД = Перечисление.ВСД_СтатусВСД.WITHDRAWN;		
	КонецЕсли;
	докОбъект.Записать();
	докОбъект.Удалить(0);

КонецПроцедуры

//} **************** Аннулирование ВСД Транспортного окончание v2

//{ ====================== Инвентаризация v2

// http://help.vetrf.ru/wiki/ResolveDiscrepancyOperation_v2.0
Функция ВСД2_инвентаризация_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_инвентаризация_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_инвентаризация_ЗапросXML(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_инвентаризация");

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:resolveDiscrepancyRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <merc:inventoryDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") + "</merc:inventoryDate>
	|            <merc:responsible>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:responsible>
	|";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		Запрос = Запрос + "
		|            <merc:stockDiscrepancy id='_"+ док.НомерСтроки +"'>
		|              <vd:resultingList>
		|                <vd:stockEntry>";
	    Если ПустоеЗначение(Док.Партия)=0 Тогда // изменяем конкретную партию
			Запрос = Запрос + "
			|                <bs:uuid>" + СокрЛП(док.Партия.uuid) + "</bs:uuid>";
			//На случай, когда ПродукцияЭлемент в Партии устаревший, возьмем данные из Партии
		    Если док.Партия.Продукция_Элемент.ВидПродукции <> док.Партия.ВидПродукции Тогда
				Запрос = Запрос + "
				|                 <vd:batch>
				|                    <vd:productType>"+ Док.Партия.Продукция.Тип +"</vd:productType>
				|                    <vd:product>
				|                      <bs:guid>"+ СокрЛП(Док.Партия.Продукция.GUID) +"</bs:guid>
				|                    </vd:product>
				|                    <vd:subProduct>
				|                      <bs:guid>"+ СокрЛП(Док.Партия.ВидПродукции.GUID) +"</bs:guid>
				|                    </vd:subProduct>
				|                    <vd:productItem>";
			Иначе
				Запрос = Запрос + "
				|                 <vd:batch>
				|                    <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
				|                    <vd:product>
				|                      <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
				|                    </vd:product>
				|                    <vd:subProduct>
				|                      <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
				|                    </vd:subProduct>
				|                    <vd:productItem>";
				Если ( Док.Продукция_Элемент.ПометкаУдаления() = 1 ) Тогда
					//удаленные ProductItem отправляем без GUID
					Сообщить("в строке №"+ Док.НомерСтроки +" ВСД_Продукция_Элемент ["+ СокрЛП(Док.Продукция_Элемент.Наименование) +"] удален => отправляем с пустым GUID","!");
				ИначеЕсли ПустоеЗначение(док.Продукция_Элемент.GUID) = 0 Тогда
					Запрос = Запрос+ "
					|                      <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
				КонецЕсли;
				
				НазваниеПродукции = ЗаменитьСпецСимволы( док.НаименованиеПродукции );
				Если ПустоеЗначение( НазваниеПродукции )= 0 Тогда 
   			    	Запрос = Запрос + " <dt:name>"+ НазваниеПродукции +"</dt:name>";
   				КонецЕсли;
		    КонецЕсли;
		Иначе
			Запрос = Запрос + "
			|                 <vd:batch>
			|                    <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
			|                    <vd:product>
			|                      <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
			|                    </vd:product>
			|                    <vd:subProduct>
			|                      <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
			|                    </vd:subProduct>
			|                    <vd:productItem>";
			Если ПустоеЗначение(док.Продукция_Элемент.GUID) = 0 Тогда
				Запрос = Запрос+ "
				|                      <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
			КонецЕсли;
			
			НазваниеПродукции = ЗаменитьСпецСимволы( док.НаименованиеПродукции );
			Если ПустоеЗначение( НазваниеПродукции )= 0 Тогда 
			   	Запрос = Запрос + " <dt:name>"+ НазваниеПродукции +"</dt:name>";
   			КонецЕсли;
   		КонецЕсли;

   		Если ПустоеЗначение(док.ТипФасовки)=0 Тогда
			Запрос = Запрос+ "
   	    	|          <dt:packaging>
        	|            <dt:packagingType>
	        |              <bs:guid>"+ СокрЛП(док.ТипФасовки.GUID) +"</bs:guid>
   		    |            </dt:packagingType>
       		|            <dt:quantity>"+ док.КолВоЕдиницФасовки +"</dt:quantity>
	        |            <dt:volume>"+ док.ОбъемЕдиницыФасовки +"</dt:volume>
   		    |            <dt:unit>
       		|              <bs:guid>"+ СокрЛП(док.ЕдИзмОбъемаФасовки.GUID) +"</bs:guid>
	        |            </dt:unit>
   		    |          </dt:packaging>";
		КонецЕсли;

        Запрос = Запрос +"
		|                   </vd:productItem>
		|                    <vd:volume>"+ Док.Количество +"</vd:volume>
		|                    <vd:unit>
		|                      <bs:uuid>"+ СокрЛП(док.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                    </vd:unit>";


		Запрос = Запрос + ГМ.Изготовление_СрокГодности_в_XML(док, "vd");

		Запрос=Запрос+"
		|                    <vd:perishable>"+ ГМ.булево(док.Скоропортящийся)+"</vd:perishable>";
        // Добавляем Партию
		Запрос=Запрос+"
		|                    <vd:origin>";
		Если (ПустоеЗначение(док.Производитель_Страна) = 0)Тогда
			Запрос=Запрос+"
			|                    <vd:country>
			|                        <bs:uuid>"+СокрЛП(док.Производитель_Страна.uuid)+"</bs:uuid>
			|                      </vd:country>";
		КонецЕсли;
		Если (ПустоеЗначение(док.Производитель_Площадка.GUID) = 0)Тогда
			Запрос=Запрос+"
			|                       <vd:producer>
			|                      	<dt:enterprise>
			|                      	  <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
			|                      	</dt:enterprise>
			|                       <dt:role>PRODUCER</dt:role>
			|                      </vd:producer>";
		КонецЕсли;
		Запрос=Запрос+"
		|                    </vd:origin>";

		Запрос=Запрос+"
		|                    <vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo>";

		//УРОВНИ УПАКОВКИ
		УровнейВдок = 6; // макс кол-во уровней в документе
		МаркировокВдок = 2; // макс маркировок на уровне в док-те

		кк=0; ЕстьСведенияОбУпаковках = 0;
		Для кк=1 по УровнейВдок Цикл
			Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк));
			Если ПустоеЗначение(Упак)=0 Тогда
				ЕстьСведенияОбУпаковках = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	    Если ЕстьСведенияОбУпаковках = 1 Тогда
			Запрос=Запрос+"
			|                <vd:packageList>";
	        Для кк=1 по УровнейВдок Цикл
				НомУровня = кк;
				Попытка
					ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+кк).GUID);
				Исключение
					Сообщить("Не указана форма упаковки на уровне "+НомУровня);
					Продолжить;
				КонецПопытки;
				Если ПустоеЗначение(ГУИДУпак)=1 Тогда
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                  <dt:package>
				|                    <dt:level>"+НомУровня+"</dt:level>
				|                    <dt:packingType>
				|                      <bs:guid>"+ ГУИДУпак +"</bs:guid>
				|                    </dt:packingType>
				|                    <dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+кк) +"</dt:quantity>";

				// Маркировки
				мм=0;
				Для мм=1 по МаркировокВДок Цикл
					КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+кк));
					Если ПустоеЗначение(КлассМарк) = 1 Тогда
					    Продолжить;
					КонецЕсли;
					знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+кк));
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+КлассМарк+"'>"+ ЗаменитьСпецСимволы( знМарк ) +"</dt:productMarks>";

				КонецЦикла;
				Запрос=Запрос+"
    	   		|                  </dt:package>";
		    КонецЦикла;
			Запрос=Запрос+"
			|                </vd:packageList>";
		КонецЕсли;

		Запрос=Запрос+"
		|                    <vd:owner>
		|                      <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|                    </vd:owner>
		|                  </vd:batch>
		|                </vd:stockEntry>
		|              </vd:resultingList>
		|            </merc:stockDiscrepancy>
		|";
	КонецЦикла;
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		Запрос = Запрос + "

		|            <merc:discrepancyReport for='_"+ док.НомерСтроки +"'>
		|              <vd:issueNumber>"+ Док.НомерДок +"</vd:issueNumber>
		|              <vd:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок) + "</vd:issueDate>
		|              <vd:reason>
		|                <vd:name>"+СокрЛП(док.ПричинаРасхождения)+"</vd:name>
		|              </vd:reason>
		|              <vd:description>"+СокрЛП(док.ОписаниеНесоответствия)+"</vd:description>
		|            </merc:discrepancyReport>
		|";
	КонецЦикла;
	Запрос = Запрос + "
	|          </merc:resolveDiscrepancyRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_Инвентаризация(док)
	// дата изготовления и срок годности обязательны
	// при добавлении партии обязательны Страна и Производитель_Площадка
	Рез = 1;
	
	Если ( ПустоеЗначение( док.applicationID ) = 0 ) и ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Если ПустоеЗначение(док.Владелец_ХозСубъект) = 1 Тогда
	    Сообщить("Не указан владелец ХС");
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Владелец_Площадка) = 1 Тогда
	    Сообщить("Не указана Площадка владельца");
		Возврат 0;
	КонецЕсли;

	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку()=1 Цикл
		Если док.количество>0 тогда
	        Если (ПустоеЗначение(док.Продукция)=1) или (ПустоеЗначение(док.ВидПродукции)=1) или (ПустоеЗначение(док.Продукция_Элемент)=1) Тогда
	        	Сообщить("Не указаны Продукция, Вид Продукции или Продукция_Элемент"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	
			Если (ПустоеЗначение(док.ЕдиницаИзмерения)=1) Тогда
	        	Сообщить("Не указана Единица измерения"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	
	        Если (ПустоеЗначение(док.ДатаИзготовления1)=1) и (ПустоеЗначение(док.ДатаИзготовления2)=1) Тогда
	        	Сообщить("Не указана Дата изготовления"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	        Если (ПустоеЗначение(док.ДатаСрокГодности1)=1) и (ПустоеЗначение(док.ДатаСрокГодности2)=1) Тогда
	        	Сообщить("Не указан срок годности"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	        Если (док.ДатаИзготовления1 = док.ДатаИзготовления2 ) Тогда
	        	Сообщить("Дата Изготовления совпадают "+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	        Если (док.ДатаСрокГодности1 = док.ДатаСрокГодности2 ) Тогда
	        	Сообщить("Дата Срок годности совпадают "+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
		    Если ПустоеЗначение(док.Партия) = 1 Тогда
		        Если (ПустоеЗначение(док.Производитель_Страна)=1) или (ПустоеЗначение(док.Производитель_Площадка)=1) Тогда
	    	    	Сообщить("Не указана Страна производителя или его Площадка"+" в строке "+док.НомерСтроки,"!");
					Возврат 0;
		        КонецЕсли;
			КонецЕсли;
			Если (ПустоеЗначение(док.ТипФасовки)=0) и (ПустоеЗначение(док.ЕдИзмОбъемаФасовки)=1) Тогда
	        	Сообщить("Не указана Единица измерения Фасовки"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
    Возврат Рез;
КонецФункции

Функция Отправить_ВСД2_Инвентаризация(док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_Инвентаризация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_Инвентаризация(док);
	КонецЕсли;
	//}

	t1 = ГМ.Старт();
	
	//стандартное поведение функции

	Если Проверка_ВСД2_инвентаризация(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	//ГМ.ИнициализацияКомпоненты(док.Фирма);

	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Владелец_Площадка);

	ЗапросXML = ВСД2_инвентаризация_ЗапросXML(док);
    //Текст = СоздатьОбъект("Текст");
	//Текст.ДобавитьСтроку(ЗапросXML);
	//Текст.Показать();
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе(док);

	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	//докПартии = СоздатьОбъект("Документ.ВСД_АктуальныеПартии");
	//докПартии.Новый();
	////докПартии.НомерДок = ;
	//докПартии.ДатаДок = Текущаядата();
	//докПартии.Отправитель_ХозСубъект = док.Владелец_ХозСубъект;
	//докПартии.Отправитель_Площадка = Док.Владелец_площадка;
	//докПартии.applicationID = док.applicationID;
	////докПартии.Статус = ;
	////докПартии.НачДата = ;
	////докПартии.КонДата = ;
	////докПартии.rcvDate = ;
	////докПартии.ЗагружатьТолькоНеПустыеПартии = ;
	//докПартии.Автор = ГМ.ПолучитьАвтора();
	////докПартии.Проект = ;
	//докПартии.Фирма = ГМ.ВыбФирма;
	//докПартии.ДокОснование = док.ТекущийДокумент();
	////докПартии.ЮрЛицо = ;
	////докПартии.Комментарий = ;
	//// Цикл по строкам
	//	//докПартии.НоваяСтрока();
	//	//докПартии.Партия = ;
	//	//докПартии.Количество = ;
	////КонецЦикла;
	//докПартии.Записать();
	

	Если ПустоеЗначение(appID)=0 Тогда
	// по идее партии нужно получить
		Результат = ПолучитьРезультат_ВСД_2(appID, док); //док
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2( appID, док);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	докОбъект = СоздатьОбъект("Документ");
	докОбъект.НайтиДокумент( док );
	Если СокрЛП(докОбъект.Статус) = "COMPLETED" Тогда
		докОбъект.Записать();
		докОбъект.Провести();
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_Инвентаризация", док);

	Возврат appID;

КонецФункции

Функция ВСД2_Инвентаризация_ЗаполнитьТЧ(Док)  Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_Инвентаризация_ЗаполнитьТЧ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_Инвентаризация_ЗаполнитьТЧ(Док);
	КонецЕсли;
	//}

	ПараПараметров = СоздатьОбъект("СписокЗначений");
   	ПараПараметров.Установить("ВладелецХС", Док.Владелец_ХозСубъект);
   	ПараПараметров.Установить("ВладелецПлощадка", Док.Владелец_площадка);

   	ОткрытьФормуМодально("Отчет", ПараПараметров,    ГМ.КаталогМодуля+"ВСД_ПараметрыИнвентаризации.ert");
   	
   	Если ПараПараметров.Получить("СтатусВозврата") <> 1 Тогда
   		Возврат 0;
   	КонецЕсли;
   	
	КолвоМакс = ПараПараметров.Получить("МаксКоличество");
	ДатаМакс = ПараПараметров.Получить("МинСрок");
	ДатаИзг = ПараПараметров.Получить("МинДата");
	Производитель_площадка = ПараПараметров.Получить("Производитель_площадка");
	ВыбНоменклатура = ПараПараметров.Получить("Номенклатура");

	Док.УдалитьСтроки();
	
	СпрПартии = СоздатьОбъект("Справочник.ВСД_Партия");
	СпрПартии.ВыбратьЭлементы();
	колво=0;
	Пока СпрПартии.ПолучитьЭлемент()=1 Цикл
		Если (СпрПартии.ПометкаУдаления()=1) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_Площадка <>  Док.Владелец_площадка) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_ХозСубъект <>  Док.Владелец_ХозСубъект) Тогда
			Продолжить;
		КонецЕсли;

		Если ПустоеЗначение(ДатаМакс)=0 Тогда
			Если ПустоеЗначение(СпрПартии.ДатаСрокГодности1)=0 Тогда
				Если ГМ.Преобразовать_СтрокаДата_в_Дата(СпрПартии.ДатаСрокГодности1) > ДатаМакс Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПустоеЗначение(ДатаИзг)=0 Тогда
			Если ПустоеЗначение(СпрПартии.ДатаИзготовления1)=0 Тогда
				Если ГМ.Преобразовать_СтрокаДата_в_Дата(СпрПартии.ДатаИзготовления1) > ДатаИзг Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(Производитель_площадка) = 0 Тогда
			Если СпрПартии.Производитель_Площадка <> Производитель_площадка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(ВыбНоменклатура) = 0 Тогда
			ТЗНоменклатуры = ГМ.ПолучитьСписок_Номенклатура_По_ВСД_Продукция_Элемент(СпрПартии.Продукция_Элемент);
			ТЗНоменклатуры.ВыбратьСтроки();
			Нашли = 0;
			Пока ТЗНоменклатуры.ПолучитьСтроку() = 1 Цикл
				Если ТЗНоменклатуры.Номенклатура.ПринадлежитГруппе(ВыбНоменклатура) = 1 Тогда
					Нашли = 1; Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Нашли = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		колво =колво+1;
		Док.НоваяСтрока();
		Док.Партия = СпрПартии.ТекущийЭлемент();
		//Док.ПриВыбореПартии();
		Док.Продукция = Док.Партия.Продукция;
		Док.ВидПродукции = Док.Партия.ВидПродукции;
		Док.ЕдиницаИзмерения = Док.Партия.ЕдиницаИзмерения;
		//Док.ФормаУпаковки = Партия.ФормаУпаковки;
		Док.НаименованиеПродукции = Док.Партия.НаименованиеПродукции;
		Док.ДатаИзготовления1 = Док.Партия.ДатаИзготовления1;
		Док.ДатаИзготовления2 = Док.Партия.ДатаИзготовления2;
		Док.ДатаСрокГодности1 = Док.Партия.ДатаСрокГодности1;
		Док.ДатаСрокГодности2 = Док.Партия.ДатаСрокГодности2;
		Док.Производитель_площадка = Док.Партия.Производитель_Площадка;
		Док.Продукция_Элемент = Док.Партия.Продукция_Элемент;

		если колво >= КолвоМакс Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции

//} =========================== Инвентаризация

Функция GetRussianEnterpriseList(Регион, Название, Смещение = 0)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getRussianEnterpriseListRequest>
	|     	<bs:listOptions>
	|            <bs:count>"+Смещение+"</bs:count>
	|            <bs:offset>0</bs:offset>
	|        </bs:listOptions>
	|     	<dt:enterprise>";
//	|            <bs:guid>"+СокрЛП(ХС.GUID)+"</bs:guid>";
	Если ПустоеЗначение(Название) = 0 Тогда
	    Запрос = Запрос + "
		|            <dt:name>"+СокрЛП(Название)+"</dt:name>";
	КонецЕсли;
	Запрос = Запрос + "
	|            <dt:address>
	|               <dt:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|               </dt:region>
	|            </dt:address>
	|        </dt:enterprise>
	|      </ws:getRussianEnterpriseListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
	Возврат Запрос;
КонецФункции



//======================================================================
Функция ПоискПлощадок(НаименованиеПлощадки, Регион, ХС = "") Экспорт
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+НаименованиеПлощадки+" ]","i");

	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");

	ПолученоЗаписей = 1000; Смещение = 0;

	Пока ПолученоЗаписей >= 1000 Цикл
    	ПолученоЗаписей = 0;
		ЗапросXML = GetRussianEnterpriseList( Регион, НаименованиеПлощадки, Смещение);

		метод = ГМ.Компонента.GetMethod();
		метод.Service = "platform/services/2.0/EnterpriseService";
	    метод.Action = "GetRussianEnterpriseList";

		appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

		Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);


	    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
		objDom.load(ГМ.Компонента.LogFilename);

		Если ГМ.НайтиОшибки()>0 Тогда
			Возврат appID;
		КонецЕсли;

		objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:v2='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );

        Попытка
			enterpriseList =  objDom.selectNodes("//*[local-name() = 'enterprise']");

			ПолученоЗаписей = enterpriseList.length;

			Для i1 = 0 По enterpriseList.length - 1 Цикл
				enterprise=enterpriseList.item(i1);

				guid = enterprise.selectSingleNode("bs:guid").text;
				uuid = enterprise.selectSingleNode("bs:uuid").text;
				name = enterprise.selectSingleNode("dt:name").text;
				active = enterprise.selectSingleNode("bs:active").text;

				address = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:addressView").text;

				тзПлощадки.НоваяСтрока();
				тзПлощадки.Наименование = name;
				тзПлощадки.адрес = address;
				тзПлощадки.guid = guid;
				тзПлощадки.uuid = uuid;
				тзПлощадки.активна = active;
				тзПлощадки.ХозСубъект = ХС;
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
	    КонецПопытки;
        Смещение = Смещение + 1000;
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	КонецЦикла;

	Сообщить("Загружено "+тзПлощадки.КоличествоСтрок()+" элементов","i");

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Возврат тзПлощадки;
КонецФункции // ПоискПлощадки

Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкиПоНазванию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкиПоНазванию2_0( Регион, УточнитьНазвание);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		ГМ.ХС_ПолучитьGuid(ХС);
	КонецЕсли;

	Стр = ГМ.ПолучитьНаименованиеКлиента(ХС.Контрагент);

	ИНН = ГМ.ПолучитьИНН(ХС.Контрагент);
	Если СтрДлина( СокрЛП(ИНН) )=12 Тогда
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;

	Если УточнитьНазвание=1 Тогда
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;

	тзПлощадки = ПоискПлощадок(стр, Регион, ХС);

	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");

	КаталогОбработки = ГМ.СписокКонстант.Получить("КаталогМодуля");
	ОткрытьФорму("Отчет",СписокПараметров,КаталогОбработки+"Меркурий_ЗагрузкаПлощадок.ert");

	Возврат 1;
КонецФункции

//Функция Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции) Экспорт
//
//	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("Найти_Продукция_Элемент2");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Попытка
//		productItemName = productItem.selectSingleNode("*[local-name()='name']").text;
//	Исключение
//		//Сообщить("Не удалось получить элемент [productItem]","!");
//		productItemName = "";
//	КонецПопытки;
//
//	Попытка
//		productItemGuid = productItem.selectSingleNode("bs:guid").text;
//	Исключение
//		productItemGuid="";
//	КонецПопытки;
//
//	Попытка
//		productItemUuid = productItem.selectSingleNode("bs:uuid").text;
//	Исключение
//		productItemUuid="";
//	КонецПопытки;
//
//
//	Рез = "";
//	//Uuid = СокрЛП(Uuid);
//	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
//	если ПустоеЗначение(productItemGuid)=0 Тогда
//
//		Если Спр.НайтиПоРеквизиту("Guid",productItemGuid,1)=0 Тогда
//			Сообщить("ВСД_Продукция_Элемент GUID ["+productItemGuid+"] не найдена. Создан новый элемент. ");
//			//создать
//			Спр.Новый();
//			//Спр.Код = ;
//			Спр.Наименование = productItemGuid;
//			Спр.GUID = productItemGuid;
//			Спр.Uuid = productItemUuid;
//			Спр.Продукция = ВСД_Продукция;
//			Спр.ВидПродукции = ВСД_ВидПродукции;
//			Спр.ТермическоеСостояние = ГМ.СписокКонстант.Получить("ТермУсловияПеревозки");//1;
//			Спр.Записать();
//
//			//получим наименование и все остальные реквизиты
//			Получить_Инфо_Продукции(Спр.ТекущийЭлемент())
//		КонецЕсли;
//	Иначе
//		Если Спр.НайтиПоНаименованию(productItemName,0,0)=0 Тогда
//			Сообщить("ВСД_Продукция_Элемент название ["+productItemName+"] не найдена. Создан новый элемент.");
//			//создать
//			Спр.Новый();
//			//Спр.Код = ;
//			Спр.Наименование = productItemName;
//			Спр.Продукция = ВСД_Продукция;
//			Спр.ВидПродукции = ВСД_ВидПродукции;
//			Спр.ТермическоеСостояние  = ГМ.СписокКонстант.Получить("ТермУсловияПеревозки");//1;
//			//Спр.Uuid = Uuid;
//			Спр.Записать();
//		КонецЕсли;
//	КонецЕсли;
//	рез = Спр.ТекущийЭлемент();
//
//	Возврат рез;
//КонецФункции


//{ ===================== Мультимодальные перевозки
// **************** UpdateTransportMovementDetailsOperation

Функция ПолучитьИмяФайла_МаршрутДоставки(Док) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИмяФайла_МаршрутДоставки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИмяФайла_МаршрутДоставки(Док);
	КонецЕсли;
	//}

	КаталогПеревозки = ГМ.КаталогМодуля+"MultiModal\";
	Если ФС.СуществуетФайл(КаталогПеревозки) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(КаталогПеревозки);
		Исключение
			Предупреждение("Не создан каталог перевозок!"); Возврат "";
		КонецПопытки;
	КонецЕсли;

	Рез = КаталогПеревозки+док.Вид()+"_МаршрутДоставки_"+СокрЛП(Док.НомерДок)+".mrk";

	Возврат Рез;
КонецФункции

Функция ПолучитьОтвет_ОбновитьТранспорт( applicationID, докСсылка )
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	ГМ.Пауза( );

	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	//Результат = ГМ.Компонента.SendRequestResult( applicationID );
	Результат = ГМ.ПолучитьРезультатСервер( applicationID );
    Файл_Ответа_XML = ГМ.Компонента.LogFilename;
	Если ПустоеЗначение(докСсылка)=0 Тогда
		ГМ.СохранитьСтатусЗапроса(докСсылка);
		//ЗагрузитьXML_ВСД2( Файл_Ответа_XML, докСсылка);
	КонецЕсли;

	Если ГМ.НайтиОшибки( докСсылка )>0 Тогда
		//Возврат "";
	КонецЕсли;

	ЗагрузитьXML_ВСД2( Файл_Ответа_XML );
    //ЗагрузитьXML_Партии2( Файл_Ответа_XML, докСсылка, Смещение, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые );

	ГМ.СохранитьОтветВДокументе( докСсылка );

	ГМ.УдалитьXML( Файл_Ответа_XML );

	Если (ПустоеЗначение(докСсылка)=0) И
	 	((СокрЛП(докСсылка.Статус)="COMPLETED") ИЛИ (СокрЛП(докСсылка.Статус)="CONFIRMED") ) Тогда
		Попытка
		// проведем только успешно выполненный запрос
			докОснованиеОбъект = СоздатьОбъект("Документ");
			докОснованиеОбъект.НайтиДокумент(докСсылка);
			докОснованиеОбъект.Провести();
		Исключение
		КонецПопытки;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ОбновитьТранспорт_ЗапросXML( док )

	//Если док.ДокОснование.Вид() = "ВСД2" Тогда
	//	докОснование = док;
	//Иначе
	//	тз_ВСД = ГМ.Выбрать_ВСД( док.ДокОснование );
	//КонецЕсли;

	Запрос = "
	|<SOAP-ENV:Envelope
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:updateTransportMovementDetailsRequest>
	|            <merc:localTransactionId>"+ СокрЛП(док.НомерДок) +"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|
	|            <vd:deliveryParticipant>
	|              <dt:businessEntity>
	|                 <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|              </dt:businessEntity>
	|              <dt:enterprise>
	|                <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|              </dt:enterprise>
	|            </vd:deliveryParticipant>
	|";

	Запрос=Запрос+"
		|            <vd:vetDocumentUuid>"+ док.ДокОснование.UUID +"</vd:vetDocumentUuid>
		|";

	//док.ВыбратьСтроки();
	//Пока док.ПолучитьСтроку() = 1 Цикл
	//Запрос=Запрос+"
	//	|            <vd:vetDocumentUuid>"+ док.ВсдUUID +"</vd:vetDocumentUuid>
	//	|";
	//КонецЦикла;

	Запрос=Запрос+"
	|            <vd:shipmentRoute>
	|";
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
		Запрос=Запрос+"
		|              <vd:routePoint>
		|                <bs:uuid>"+ СокрЛП( док.ТочкаМаршрутаUUID ) +"</bs:uuid>
		|                <vd:sqnId>"+ СокрЛП(док.SequenceNumber) +"</vd:sqnId>
		|                <vd:nextTransport>
		|                  <vd:transportType>"+ док.transportType +"</vd:transportType>
		|                  <vd:transportNumber>";
		Попытка
			Если док.transportType = 1 Тогда
				 // Контейнер при наличии всегда первый
				Если ПустоеЗначение(док.containerNumber) = 0 Тогда
					Запрос=Запрос+"
       				|          <vd:containerNumber>"+СокрЛП(док.containerNumber)+"</vd:containerNumber>";
				КонецЕсли;
				Запрос=Запрос+"
				|                    <vd:vehicleNumber>"+ СокрЛП(док.vehicleNumber) +"</vd:vehicleNumber>";

				Если ПустоеЗначение(док.trailerNumber) = 0 Тогда
					Запрос=Запрос+"
       				|          <vd:trailerNumber>"+СокрЛП(док.trailerNumber)+"</vd:trailerNumber>";
				КонецЕсли;
			ИначеЕсли док.transportType = 2 Тогда
				Запрос=Запрос+"
				|                    <vd:wagonNumber>"+ СокрЛП(док.wagonNumber) +"</vd:wagonNumber>";
			ИначеЕсли док.transportType = 3 Тогда
				Запрос=Запрос+"
				|                    <vd:flightNumber>"+ СокрЛП(док.flightNumber) +"</vd:flightNumber>";
			ИначеЕсли (док.transportType = 4) или (док.transportType = 5) или (док.transportType = 6) Тогда
				Запрос=Запрос+"
				|                    <vd:shipName>"+ СокрЛП(док.shipName) +"</vd:shipName>";
			КонецЕсли;
		Исключение
			Сообщить("Обновите конфигурацию - отсутствуют ревизиты тч в документе ВСД2_ОбновитьТранспорт");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

		Запрос=Запрос+"
		|                  </vd:transportNumber>
		|                </vd:nextTransport>
		|              </vd:routePoint>
		|";
	КонецЦикла;
	Запрос=Запрос+"
	|            </vd:shipmentRoute>
	|          </merc:updateTransportMovementDetailsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

// док = ВСД2_ОбновитьТранспорт
// http://help.vetrf.ru/wiki/UpdateTransportMovementDetailsOperation_v2.0
Функция Отправить_ОбновитьТранспортВМаршуртеДоставки( док ) Экспорт
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ОбновитьТранспортВМаршуртеДоставки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ОбновитьТранспортВМаршуртеДоставки( док );
	КонецЕсли;
	//}

	t1 = ГМ.Старт();

	ЗапросXML = ОбновитьТранспорт_ЗапросXML( док );

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе( док );

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = ПолучитьОтвет_ОбновитьТранспорт( appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьОтвет_ОбновитьТранспорт( appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "Отправить_ОбновитьТранспортВМаршуртеДоставки", док);	
	
	Возврат appID;

КонецФункции
//}

//{ ===================== Объединение Партий
Функция ПроверитьВСД2_ОбъединениеПартий(ВСДСсылка)
	
	Если ПустоеЗначение(ВСДСсылка.applicationID) = 0 Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Если ПустоеЗначение(ВСДСсылка) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(ВСДСсылка.Фирма) = 1 Тогда
		Сообщить("Не указана Организация в документе "+ВСДСсылка);
		Возврат 0;
	КонецЕсли;
	Если (СокрЛП(ВСДСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ВСДСсылка+" статус "+ВСДСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	//Проверить Отправителя ХС
//	Если НЕ(ВСДСсылка.Владелец_ХозСубъект = Отправитель_Хозсубъект) Тогда
//		Сообщить("Другой ХС Производитель - Выберите в Параметрах организацию для  "+ВСДСсылка.Владелец_ХозСубъект);
//		Возврат 0;
//	КонецЕсли;
	Если ВСДСсылка.ОперацияПрисоединения = 0 Тогда
		Если ПустоеЗначение(ВСДСсылка.ВСД_ПродукцияЭлемент) = 1 Тогда
			Сообщить("При объединении Партий значение Продукция_Элемент Обязательно для Заполнения !!!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	ЕстьОшибки = 0;
	ВСДСсылка.ВыбратьСтроки();
	Пока ВСДСсылка.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ВСДСсылка.Партия) = 1 Тогда
			Сообщить("Не указана Партия в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = 1;
			Прервать;
		КонецЕсли;
		Если (ПустоеЗначение(ВСДСсылка.ДатаИзготовления1) = 1) или (ПустоеЗначение(ВСДСсылка.ДатаСрокГодности1) = 1) Тогда
			ЕстьОшибки = 1;
			Сообщить("Не указаны Дата Изготовления и/или Срок годности  "+ВСДСсылка.Партия+" в документе "+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;

	КонецЦикла;
	Если ЕстьОшибки = 1 Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция ВСД2_ОбъединениеПартий_ЗапросXML(док)
	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_ОбъединениеПартий_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_ОбъединениеПартий_ЗапросXML( док );
	КонецЕсли;
	//}

	Запрос ="<SOAP-ENV:Envelope
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.Датадок, "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:mergeStockEntriesRequest>
		|            <merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:mergeOperation>
		|              <vd:type>"+?(Док.ОперацияПрисоединения = 1,"ATTACH","MERGE")+"</vd:type>";
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Запрос=Запрос+"
			|    <vd:sourceStockEntry>
			|       <bs:uuid>" + СокрЛП(Док.Партия.uuid) + "</bs:uuid>
			|    </vd:sourceStockEntry>";
		КонецЦикла;
		Если Док.ОперацияПрисоединения=0 Тогда
			Запрос=Запрос+"
			|      <vd:resultStockEntry>
        	|        <vd:batch>
        	|          <vd:subProduct>
//        	|            <bs:uuid>a3cecd19-98ca-46f9-ecd5-90c41fd95e13</bs:uuid>
        	|            <bs:guid>"+ СокрЛП(Док.ВСД_ПродукцияЭлемент.ВидПродукции.GUID) +"</bs:guid>
        	|          </vd:subProduct>";
			Запрос = Запрос + "
        	|          <vd:productItem>";
			Если ПустоеЗначение(Док.ВСД_ПродукцияЭлемент.guid) = 0 тогда
				Запрос = Запрос + "
        		|            <bs:guid>" + СокрЛП(Док.ВСД_ПродукцияЭлемент.guid) + "</bs:guid>";
			КонецЕсли;
			Если ПустоеЗначение(Док.ВСД_ПродукцияЭлемент.GTIN) = 0 тогда
				Запрос = Запрос + "
        		|            <dt:globalID>" + СокрЛП(Док.ВСД_ПродукцияЭлемент.GTIN) + "</dt:globalID>";
			КонецЕсли;
			Запрос = Запрос + "
        	|            <dt:name>" + ЗаменитьСпецСимволы(Док.ВСД_ПродукцияЭлемент.Наименование) + "</dt:name>";
			Если ПустоеЗначение(Док.ВСД_ПродукцияЭлемент.Артикул) = 0 тогда
				Запрос = Запрос + "
        		|            <dt:code>" + СокрЛП(Док.ВСД_ПродукцияЭлемент.Артикул) + "</dt:code>";
			КонецЕсли;
        	Запрос = Запрос + "
        	|          </vd:productItem>";
			Запрос=Запрос+"
        	|        </vd:batch>
        	|      </vd:resultStockEntry>";
		КонецЕсли;
		Запрос=Запрос+"
		|            </merc:mergeOperation>
		|          </merc:mergeStockEntriesRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_ОбъединениеПартий(док) Экспорт

	t1 = ГМ.Старт();
	
	Если ПроверитьВСД2_ОбъединениеПартий(док) = 0 Тогда
		Возврат 0;
	КонецЕсли;

//	Организация = док.Организация;//док.ДокументОснование.Организация;
//	Инициализация();

	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Владелец_Площадка);

	ЗапросXML = ВСД2_ОбъединениеПартий_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    //метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	ГМ.СохранитьЗапросВДокументе(док);

	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID) = 0 Тогда
		Результат = ПолучитьРезультат_ВСД_2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	докОбъект = СоздатьОбъект("Документ");
	докОбъект.НайтиДокумент( док );
	Если СокрЛП(докОбъект.Статус) = "COMPLETED" Тогда
		докОбъект.Записать();
		докОбъект.Провести();
	КонецЕсли;
	
	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_ОбъединениеПартий", док);
	
	Возврат appID;
КонецФункции

//}*************** Объединение Партий v2 Окончание

//*************** ХС **************************

Функция ЗагрузитьХС(GUID) Экспорт

	//{Проверим на переопределение функции, если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьХС(guid);
	КонецЕсли;
	//}

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	|<soapenv:Header/>
	|<soapenv:Body>
	|   <ws:getBusinessEntityByGuidRequest>
	|      <bs:guid>"+GUID+"</bs:guid>
	|   </ws:getBusinessEntityByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";


	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/EnterpriseService";
	метод.Action = "GetBusinessEntityByGUID";

	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции

//*************** Заполнение документов **********************

Функция ЗаполнитьВСД2_Транзакция( КонтДокумента, ДокОснование, тзТабличнаяЧасть="", ЗаполнитьПартии=0) Экспорт
	
	// заполнение кастомного ВСД  - ЖД Доработать в этом случае отменить Ввод на основании и открыть Созданный док
	Если ФС.СуществуетФайл(ГМ.КаталогМодуля+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД2_транзакция.ert")=1 Тогда
		//{ переопределение функции создания ВСД 
		// интеграция переопределяется в Меркурий_Подключаемый_Создание_ВСД_Производство.ert
		Сообщить("ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД2_транзакция.ert отключено.
		|Используйте модуль Меркурий_Интеграция.ert для переопределения функций","!");

		//}
	КонецЕсли;
	
	// стандартное создание ВСД
	Если ПустоеЗначение(ДокОснование)=0 Тогда		
		Если ГМ._ВводНаОсновании( КонтДокумента, ДокОснование) = 0 Тогда
		    //Возврат "";
		КонецЕсли;
		
		ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(ДокОснование);
	Иначе 
		ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(КонтДокумента);
	КонецЕсли;

	Если ПустоеЗначение(КонтДокумента.Отправитель_Площадка)=1 Тогда
		Сообщить("Не указан Отправитель_Площадка!","!!");
	КонецЕсли;
	Если ПустоеЗначение(КонтДокумента.Отправитель_ХозСубъект)=1 Тогда
		Сообщить("Не указан Отправитель_ХозСубъект!","!!");
	КонецЕсли;
	

	
	Попытка КонтДокумента.Автор = ГМ.ПолучитьАвтора(); Исключение КонецПопытки;
	
	ФирмаИмяРеквизита = "";
	ГМ.ПолучитьИмяРеквизитаФирма(КонтДокумента.Вид(), ФирмаИмяРеквизита);
	Если ФирмаИмяРеквизита <> "" Тогда
		КонтДокумента.УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);
	КонецЕсли;	
	
	Если ПустоеЗначение(ДокОснование)=0 Тогда 
		КонтДокумента.ДатаДок = ДокОснование.ДатаДок;			
		КонтДокумента.ТтнСерия = "";
		КонтДокумента.ТтнНомер = ДокОснование.НомерДок; 
		КонтДокумента.ТтнДата = ДокОснование.ДатаДок;
		КонтДокумента.номерАвто = ГМ.ПолучитьНомерАвто( ДокОснование );
	Иначе
		КонтДокумента.ДатаДок = ТекущаяДата();			
		КонтДокумента.ТтнСерия = "";
		КонтДокумента.ТтнНомер = КонтДокумента.НомерДок; 
		КонтДокумента.ТтнДата = КонтДокумента.ДатаДок;
		КонтДокумента.номерАвто = "Не используется";
	КонецЕсли;
	
	КонтДокумента.cargoExpertized = 1;
	КонтДокумента.cargoInspected  = 1;		
	КонтДокумента.Местность 		= ГМ.ПолучитьКонстанту("ВСД_Местность");
	Если ГМ.ПолучитьКонстанту("ОсобыеОтметкиЗагружатьИзПараметров")<>1 Тогда 
		КонтДокумента.ОсобыеОтметки 	= ГМ.ПолучитьКонстанту("ВСД_ОсобыеОтметки");
	КонецЕсли;
	КонтДокумента.РезультатыИсследований = ГМ.ПолучитьКонстанту("ВСД_РезультатыИсследований");
				
	Если ПустоеЗначение(тзТабличнаяЧасть)=1 Тогда
		тчДокумента = ГМ.ЗаполнитьТчДокументаПоАктуальнымПартиям( ДокОснование, КонтДокумента.Отправитель_Площадка, КонтДокумента.Отправитель_ХозСубъект);
		КонтДокумента.ЗагрузитьТабличнуюЧасть(тчДокумента);
	Иначе
		тзПартий = тзТабличнаяЧасть;
		
		тзПартий.ВыбратьСтроки();
		Пока тзПартий.ПолучитьСтроку() = 1 Цикл
			КонтДокумента.НоваяСтрока();
			КонтДокумента.Партия = тзПартий.Партия;
			КонтДокумента.Количество = тзПартий.Количество; 
			
			Попытка КонтДокумента.ДатаПартии = тзПартий.ДатаИзготовления;  Исключение КонецПопытки;   //!! для выбора партии по Дате Изготовления
			
			ГМ.ЗаполнитьСтрокуДокумента( КонтДокумента, тзПартий, ДокОснование );		
		КонецЦикла;		
		
		//Для внутренних перемещений - перезаполняем партии по другому ХС/Площадке
		Если ЗаполнитьПартии=1 Тогда 
			тчДокумента = ГМ.ЗаполнитьТчДокументаПоАктуальнымПартиям( КонтДокумента, КонтДокумента.Отправитель_Площадка, КонтДокумента.Отправитель_ХозСубъект);
			КонтДокумента.ЗагрузитьТабличнуюЧасть(тчДокумента);
		КонецЕсли;
	КонецЕсли;

	КонтДокумента.ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние( КонтДокумента );
	
	Попытка
		СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТТН");
		КонтДокумента.ТтнСерия = СзРеквДокумента.Получить("ДокСерия");
		КонтДокумента.ТтнНомер = СзРеквДокумента.Получить("ДокНомер");
		КонтДокумента.ТтнДата = СзРеквДокумента.Получить("ДокДата");
	Исключение 	КонецПопытки;
	
	Попытка
		СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"Заказ");  
		КонтДокумента.НомерЗаказаПокупателя = СзРеквДокумента.Получить("ДокНомер");
		КонтДокумента.ДатаЗаказаПокупателя = СзРеквДокумента.Получить("ДокДата");
	Исключение 	КонецПопытки;
	
	Попытка
		СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТОРГ12");  
		КонтДокумента.ТОРГ12Номер = СзРеквДокумента.Получить("ДокНомер");
		КонтДокумента.ТОРГ12Дата = СзРеквДокумента.Получить("ДокДата");
	Исключение 	КонецПопытки;

    ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьВСД2_Транзакция_После");
    Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
           Возврат ОбъектВыполнения.ЗаполнитьВСД2_Транзакция_После(КонтДокумента, ДокОснование, тзТабличнаяЧасть, ЗаполнитьПартии);
    КонецЕсли;	
КонецФункции
