
Перем ГМ;  // Глобальный модуль
Перем ГМ2; // Глобальный модуль для Ветис 2.0
Перем ВыбРеквизит; //для выбора площадки

Процедура  ПриИзмененииПлощадки()
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);
КонецПроцедуры

Процедура ПриИзмененииФирмы()
	Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
		ГМ.Инициализация(Контекст);
		ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	КонецЕсли;
КонецПроцедуры

//======= ФУНКЦИИ ИНТЕРФЕЙСА ==============



Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения)

	Если (ЭлементДиалога = "ФайлОтвета") Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		ФайлОтвета = ик+иф;
		ФлагПродолжения = 0;
	ИначеЕсли ( ЭлементДиалога = "ФайлНомераМашин" ) Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		ФайлНомераМашин = ик+иф;
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "ВыбПлощадка" Тогда
		ВремЭлем = ВыбХС;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагПродолжения = 0;
	КонецЕсли;

КонецПроцедуры


 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)

 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
 	ИначеЕсли ЗначениеЗакладки="ВСД_2" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД_версия_2");
 	ИначеЕсли ЗначениеЗакладки="УсловияПеревозки" Тогда
		Форма.ИспользоватьСлой("Основной,УсловияПеревозки");
 	ИначеЕсли ЗначениеЗакладки="Продукция" Тогда
		Форма.ИспользоватьСлой("Основной,Продукция");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда

		Отправитель_Площадка = Элемент;
		//Если ПустоеЗначение(GUID_ОтправительПлощадка)=1 Тогда
		//	GUID_ОтправительПлощадка = Элемент.GUID;
		//Иначе
		//	Если НЕ(СокрЛП(GUID_ОтправительПлощадка) = СокрЛП(Элемент.GUID)) Тогда
		//		Сообщить("Ошибка в GUID_ОтправительПлощадка, должно быть "+Элемент.GUID,"!");
		//	Иначе
		//		Сообщить("GUID_ОтправительПлощадка - правильно "+Элемент.Адрес,"i");
		//	КонецЕсли;
		//КонецЕсли;

		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	ПриИзмененииПлощадки();
КонецПроцедуры

Процедура ОткрытьПлощадкиПоХС( ВыбХС)

		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);

		СписокОтбора = СоздатьОбъект("СписокЗначений");

		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;

		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Процедура Клик_условия()
	текСтр = тзУсловияПеревозки.ТекущаяСтрока();
	текКол = тзУсловияПеревозки.ТекущаяКолонка();

	Если текКол="Пометка" Тогда
		Пометка = тзУсловияПеревозки.ПолучитьЗначение(ТекСтр,"Пометка");
		Если Пометка = 2 Тогда
			тзУсловияПеревозки.Пометка=1;
		Иначе
			тзУсловияПеревозки.Пометка=2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//=========================== Площадки =================================

Процедура СоздатьНовуюПлощадку(ВыбХС)
	Если ПустоеЗначение(ВыбХС)=1 Тогда
		Предупреждение("Выберите Хоз субъект");
	КонецЕсли;
	ВидСтравочникаХС = Метаданные.Справочник("ВСД_ХозСубъект").Реквизит("Контрагент").Вид;
	ВидСтравочникаПЛ = Метаданные.Справочник("ВСД_Площадка").Реквизит("Контрагент").Вид;

	Если ВидСтравочникаХС = ВидСтравочникаПЛ Тогда
		СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");

		СпрПл.Новый();
		СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
		СпрПл.Контрагент = ВыбХС.Контрагент;
		СпрПл.Адрес = ГМ.ПолучитьФактАдрес(ВыбХС.Контрагент);
		СпрПл.GuidХозСубъекта = ВыбХС.GUID;
		СпрПл.Записать();
		Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());

		ВыбПлощадка = СпрПл.ТекущийЭлемент();
	Иначе
		Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Выбран() = 1 Тогда
			Спр = СоздатьОбъект("Справочник."+ВидСтравочникаПЛ);
			Спр.ИспользоватьВладельца(ВыбХС.Контрагент);
			Если Спр.Выбрать("Выберите грузополучателя",) = 1 Тогда
				СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");

				СпрПл.Новый();
				СпрПл.Наименование = Спр.Наименование;
				СпрПл.Контрагент = Спр.ТекущийЭлемент();
				СпрПл.Адрес = ГМ.ПолучитьФактАдрес(СпрПл.Контрагент);
				СпрПл.GuidХозСубъекта = ВыбХС.GUID;
				СпрПл.Записать();
				Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());

				ВыбПлощадка = СпрПл.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )

	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;

	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]","i");
	Результат = ГМ.Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	//Отладка();

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат;
	КонецЕсли;

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);

    businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = businessEntity.selectSingleNode("bs:guid").text;
	uuid = businessEntity.selectSingleNode("bs:uuid").text;
	active = businessEntity.selectSingleNode("bs:active").text;
	enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
	Сообщить("Успешно установлена связь ВСД_Площадка ["+enterprise+"] ВСД_ХозСубъект ["+guid+"]","i");

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка)
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Площадка.GUID)=1 Тогда
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;

	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]","i");
	Результат = ГМ.Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID)
	);

	//Отладка();
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Если Результат="ACCEPTED" Тогда
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( ГМ.Компонента.ApplicationId)
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка)

	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;

	ГМ.Пауза();

	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]","i");
	Результат = ГМ.Компонента.SendRequestResult(СокрЛП(appID));

   	Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат;
	КонецЕсли;

    enterprise=objDom.selectSingleNode("//merc:enterprise") ;
	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;
	name = enterprise.selectSingleNode("ent:name").text;
	active = enterprise.selectSingleNode("bs:active").text;

	если ПустоеЗначение(GUID)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Спр.НайтиЭлемент(Площадка);
		спр.GUID = GUID;
		спр.uuid = uuid;
		спр.Записать();
		Сообщить("Успешно записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");

		Площадка = Спр.ТекущийЭлемент();
	Иначе
		Сообщить("Пустой GUID Площадки");
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	ГМ.Пауза();

	СоздатьСвязьХозсубъектПлощадка(Площадка);

КонецПроцедуры

Функция  СоздатьПлощадку_ЗапросXML(Площадка)
	ЗапросXML = "<modifyEnterpriseRequest xmlns:sch='http://www.w3.org/2001/XMLSchema'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common'
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production'
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП(param_intiator_login)+"</co:login>
	|        </initiator>
	|        <modificationOperation>
	|          <ent:type>CREATE</ent:type>
	|          <ent:affectedList count='0' total='0' offset='0' />
	|          <ent:resultingList count='1' total='1' offset='0'>
	|            <ent:enterprise>
	|              <ent:name>"+СокрЛП(Площадка.Наименование)+"</ent:name>
	|              <ent:type>1</ent:type>
	|              <ent:address>
	|                <ik:country>
	|                  <bs:guid>"+СокрЛП(Страна.GUID)+"</bs:guid>
	|                </ik:country>
	|                <ik:federalDistrict />
	|                <ik:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|                </ik:region>
	|";

	Если ПустоеЗначение(Район.GUID)=0 Тогда
		ЗапросXML=ЗапросXML+"
		|                <ik:district>
		|                  <bs:guid>"+СокрЛП(Район.GUID)+"</bs:guid>
		|                </ik:district>
		|";
	Иначе
		ЗапросXML=ЗапросXML+"
		|<ik:district />
		|";
	КонецЕсли;
	Если ПустоеЗначение(Город)=0 Тогда
		ЗапросXML=ЗапросXML+"
		|                <ik:locality>
		|                  <bs:guid>"+СокрЛП(Город.GUID)+"</bs:guid>
		|                </ik:locality>
		|";
	Иначе
		ЗапросXML=ЗапросXML+"
		|                <ik:locality />
		|";
	КонецЕсли;
	ЗапросXML=ЗапросXML+"
	|                <ik:subLocality />
	|                <ik:street />
	|                <ik:addressView>"+СокрЛП(Площадка.Адрес)+"</ik:addressView>
	|              </ent:address>
	|              <ent:activityList count='1' total='1' offset='0'>
	|                <ent:activity>
	|                  <ent:name>Продажа продуктов питания</ent:name>
	|                </ent:activity>
	|              </ent:activityList>
	|              <ent:owner>
	|                <bs:guid>"+СокрЛП(Площадка.GuidХозСубъекта)+"</bs:guid>
	|              </ent:owner>
	|            </ent:enterprise>
	|          </ent:resultingList>
	|          <ent:reason>Причина добавления субъекта в реестр.</ent:reason>
	|        </modificationOperation>
	|      </modifyEnterpriseRequest>
	|";

	Возврат ЗапросXML;
КонецФункции

Процедура СоздатьПлощадку(Площадка)

	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	//Если ПустоеЗначение(Город.GUID)=1 Тогда
	//	Сообщить("Не указан Город.GUID");
	//	Возврат;
	//КонецЕсли;

	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]","i");
	ЗапросXML = СоздатьПлощадку_ЗапросXML(Площадка);

	appID = ГМ.ОтправитьЗапросXML(ЗапросXML);

	Если ПустоеЗначение(appID)=0 Тогда

		ПолучитьОтветПлощадка( appID, Площадка )

	КонецЕсли;

КонецПроцедуры

//=========================== ХозСубъекты =================================

Процедура ХС_Создать_Ответ( applicationID, ХС)

	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;

	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");
	Результат = ГМ.Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();

    Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат;
	КонецЕсли;

    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;
	active = enterprise.selectSingleNode("bs:active").text;

	если ПустоеЗначение(GUID)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура ХС_Создать(ХС)

	ИНН = ГМ.ПолучитьИНН(ХС.Контрагент);
	КПП = ГМ.ПолучитьКПП(ХС.Контрагент);
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ГМ.ПолучитьОГРН(ХС);

	Если ПустоеЗначение(ИНН)=1 Тогда
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;

	Адрес = ГМ.ПолучитьЮрАдрес(ХС.Контрагент);
	ПолноеНаименование = ГМ.ПолучитьНаименованиеКлиента(ХС.Контрагент);

	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]","i");
	Результат = ГМ.Компонента.CreateBusinessEntity(
			СокрЛП(хс.Наименование),  							// название
			СокрЛП(ПолноеНаименование), 	// полное название
			ИНН,
			КПП,
			ОГРН,
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID),
			Адрес
	);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		ГМ.Пауза();

		ХС_Создать_Ответ( ГМ.Компонента.ApplicationId, ХС )

	КонецЕсли;

КонецПроцедуры

Процедура СинхронизацияСпрХС()

	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;

	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);

	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;

		ГМ.ХС_ПолучитьGuid(тз.id);

		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ГМ.НайтиПлощадкиПоНазванию(тз.id, 0 );
			ГМ.ЗагрузитьПлощадки( тз.id );
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//======================= Тестирование \ Проверка ==========================


//_____________________________________________________________________________
//ТЕСТ  ЖД читаем из файла ответа
Процедура ПрочестьХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_ВСД2(Сокрлп(ФайлОтвета), докссылка)
КонецПроцедуры


Процедура ПрочестьПартииХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_Партии2(Сокрлп(ФайлОтвета), докссылка)
КонецПроцедуры

//=========================================================================


Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла) Экспорт
	//<dt:decision> 	dt:RegionalizationDecision
	//1 	Перемещение разрешено.
	//2 	Перемещение разрешено при обязательном соблюдении условий.
	//3 	Перемещение запрещено.
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);


//                  <vd:r13nRouteSection>
//                     <vd:sqnId>1</vd:sqnId>
//                     <vd:appliedR13nRule>
//                        <dt:cargoType>
//                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
//                        </dt:cargoType>
//                        <dt:decision>1</dt:decision>
//                     </vd:appliedR13nRule>
//                  </vd:r13nRouteSection>


    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );


	Попытка
		applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

		RouteSectionList = objDom.selectNodes("//*[local-name() = 'r13nRouteSection']") ;
	Исключение
		Сообщить("Не удалось прочитать ответ о разрешении");
		Возврат "";
		//Пример на ветисе корявый...
		applicationId = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectSingleNode("applicationId").text ;

		RouteSectionList = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectNodes("r13nRouteSection") ;
	КонецПопытки;

	УсловияПеревозки = СоздатьОбъект("ТаблицаЗначений");
	УсловияПеревозки.НоваяКолонка("Пометка", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("ВидПродукции", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("Решение", , , , ,1,);
	УсловияПеревозки.НоваяКолонка("Название", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("UUID", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("GUID", , , , ,3,);

	Сообщить("Получено "+RouteSectionList.length+" записей по отрезкам маршрута","i");
    Для i1 = 0 По RouteSectionList.length - 1 Цикл
        RouteSection = RouteSectionList.item(i1);
		RuleList = RouteSection.SelectNodes("vd:appliedR13nRule");
		Сообщить("Получено "+RuleList.length+" записей правил перемещения","i");
		Для k1 = 0 По RuleList.length - 1 Цикл
			appliedR13nRule = RuleList.item(k1);
			Решение = Число(appliedR13nRule.selectSingleNode("dt:decision").text);
			ВидПродукции = ГМ.НайтиВидПродукции( appliedR13nRule.selectSingleNode("dt:cargoType").selectSingleNode("bs:guid").text);

			requirements = appliedR13nRule.selectNodes("dt:requirement");
			Сообщить("Получено "+requirements.length+" записей по правилам для "+ВидПродукции,"i");
			Для i2 = 0 По requirements.length - 1 Цикл
				conditionGroup = requirements.item(i2).selectNodes("dt:conditionGroup");
				Для i3=0 По conditionGroup.length - 1 Цикл
					conditionList = conditionGroup.item(i3).selectNodes("dt:condition");
					Для i4=0 По conditionList.length - 1 Цикл
						condition = conditionList.item(i4);
						УсловияПеревозки.НоваяСтрока();
						УсловияПеревозки.Пометка = 2;
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						УсловияПеревозки.Название = condition.selectSingleNode("dt:text").text;
						УсловияПеревозки.UUID = condition.selectSingleNode("bs:uuid").text;
						УсловияПеревозки.GUID = condition.selectSingleNode("bs:guid").text;
						Если Решение = 1 Тогда
							Сообщить("Перемещение разрешено.");
						ИначеЕсли Решение = 2 Тогда
							Сообщить("Перемещение разрешено при обязательном соблюдении условий." + УсловияПеревозки.Название);
						Иначе
							Сообщить("Перемещение запрещено." +УсловияПеревозки.Название);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат УсловияПеревозки;

КонецФункции

//Регионализация
//тест с формы Чтение ответа
Процедура ПрочестьХМЛРегион()
	//ГМ2.ЗагрузитьXML_ПеревозкаРазрешена_2(ФайлОтвета);
	тз = ЗагрузитьXML_ПеревозкаРазрешена_2(ФайлОтвета);
	тзУсловияПеревозки.Загрузить(тз);
	тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");
	тзУсловияПеревозки.ТекущаяСтрока(1);
КонецПроцедуры

Процедура Регионализация()
	ТзУсловияПеревозки.УдалитьСтроки();
	Рез = ГМ2.ПроверитьВозможностьПеремещения( ВСД_транзакция_2 );
	Если ТипЗначенияСтр(Рез) = "ТаблицаЗначений" Тогда
	    тзУсловияПеревозки.Загрузить(Рез);
		тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");
		тзУсловияПеревозки.ТекущаяСтрока(1);
	КонецЕсли;
//	ФайлОтвета = ГМ.Компонента.LogFilename;
//	ПрочестьХМЛРегион();
КонецПроцедуры

Процедура ПриВыбореВСДТранзакция()
	тзУсловияПеревозки.УдалитьСтроки();
КонецПроцедуры

//Регионализация Конец

// *** Классификатор Форм Упаковки
Процедура  ЗаполнитьФормыУпаковки()

	ГМ.ЗаполнитьФормыУпаковки();

КонецПроцедуры


// ========================================================================
Процедура ПриОткрытии()

	ИмяФайла="";
	КаталогОбработки="";

	РасположениеФайла(КаталогОбработки, ИмяФайла);

   //{ Глобальный модуль + Интеграционный модуль для переопределения функций, плюс несколько базовых функций
    глМеркурийИнтеграция 		= СоздатьОбъект("МеркурийИнтеграция");

    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
    ГМ.Инициализация(Контекст);
	//ГМ.ЗагрузитьПараметры();
    ГМ.ЗагрузитьПараметрыВФорму(Контекст);

    //Переопределение функций, если они определены в модуле
    глМеркурийИнтеграция.Инициализация(ГМ);

	// Глобавльный модуль Ветис.2.0
	ГМ2 = СоздатьОбъект("Меркурий_ГлобальныйМодуль2");
	ГМ2.Инициализация(ГМ);
	//}

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Партии");
	Форма.Закладки.ДобавитьЗначение("Справочники");
	Форма.Закладки.ДобавитьЗначение("Продукция");
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты");
	//Форма.Закладки.ДобавитьЗначение("ВСД");
	Форма.Закладки.ДобавитьЗначение("ВСД_2");
	Форма.Закладки.ДобавитьЗначение("УсловияПеревозки");
	
	Форма.Закладки.ДобавитьЗначение("Параметры");

	Форма.ИспользоватьСлой("Основной, Партии");

	//{ оставлено для совместимости с предыдущими версиями, в дальнейшем - удалим
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда

		Команда = Парам.Получить("Команда");

		Если Команда="ОтправитьВсдИсходящие" Тогда

			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД исходящие за период "+ПериодСтр(НачДата, КонДата));

			СписокВСД = Парам.Получить("СписокВСД");
			ГМ.ОтправитьВсе_ВСД_Исходящий(СписокВСД, НачДата, КонДата);

			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдТранзакции" Тогда

			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД транзакции за период "+ПериодСтр(НачДата, КонДата));

			СписокВСД = Парам.Получить("СписокВСД");
			ГМ.ОтправитьВсе_ВСД_Транзакция(СписокВСД, НачДата, КонДата);

			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдПроизводство" Тогда

			СписокВСД = Парам.Получить("СписокВСД");
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда
				КонДата = ТекущаяДата();
			КонецЕсли;

			ГМ.ОтправитьВсе_ВСД_Производство(СписокВСД, НачДата, КонДата);

			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ПолучитьПартии" Тогда
			Состояние("Меркурий: получение партий...");
			ГМ.ПолучитьПартии();
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ЗагрузитьПлощадки" Тогда

			выбХС = Парам.Получить("ХозСубъект");
			Сообщить("загрузка площадок "+ выбХС);

			ГМ.ХС_ПолучитьGuid(ВыбХС);

			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ВыбХС);

			ГМ.ЗагрузитьПлощадки(Спр.ТекущийЭлемент());

			СтатусВозврата(0);
			Возврат;

		КонецЕсли;
	Иначе
		//Открыта без параметров
		попытка
		стр = "";
		к = ГМ.ПараметрыФирм.ПолучитьЗначение(1,стр);
		Если Пустоезначение(стр) = 0 Тогда
			ВыбФирма = ЗначениеИзСтрокиВнутр(стр);
		КонецЕсли;
		Исключение	КонецПопытки;
	КонецЕсли;
	//}

КонецПроцедуры

Функция МаршрутСледования_из_XML(Routelist) Экспорт
    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
	//ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТЗточкиМаршрута = ГМ2.СоздатьТзМаршрутСледования();

	//Попытка
	    Для l1 = 0 По Routelist.length - 1 Цикл
			Узел = Routelist.item(l1);
			ТЗточкиМаршрута.НоваяСтрока();
            //Попытка ТЗточкиМаршрута.UUID					 = 		Узел.selectSingleNode("uuid").text; Исключение КонецПопытки;
            ТЗточкиМаршрута.НомерТочки	= Узел.selectSingleNode("sqnId").text;
			//Площадка_GUID = Узел.selectSingleNode("enterprise").selectSingleNode("GUID").text;
			Площадка_GUID = Узел.selectSingleNode("enterprise").selectSingleNode("GUIDtest").text;
			Попытка ТЗточкиМаршрута.ВыбПлощадка	= ГМ.НайтиПлощадку( Площадка_GUID ); Исключение КонецПопытки;
			//Попытка ТЗточкиМаршрута.ПредприятиеНаименование	 =  	Узел.selectSingleNode("vd:enterprise").selectSingleNode("dt:name").text; Исключение КонецПопытки;
            ТЗточкиМаршрута.Перегрузка	= ?(Узел.selectSingleNode("transshipment").text = "true",1,0);
            ТЗточкиМаршрута.ТипТранспорта			 = 		Число(Узел.selectSingleNode("nextTransport").selectSingleNode("transportType").text);

			Если ТЗточкиМаршрута.ТипТранспорта = 1 Тогда
				Попытка ТЗточкиМаршрута.номеравто 		= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("vehicleNumber").text; Исключение КонецПопытки;
				Попытка ТЗточкиМаршрута.номерПрицепа 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("trailerNumber").text; Исключение КонецПопытки;;
				Попытка ТЗточкиМаршрута.номерКонтейнера = Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("containerNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 2 Тогда
				Попытка ТЗточкиМаршрута.номерВагона 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("wagonNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 3 Тогда
				Попытка ТЗточкиМаршрута.НомерАвиарейса 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("flightNumber").text; Исключение КонецПопытки;
			Иначеесли (ТЗточкиМаршрута.ТипТранспорта = 4) или (ТЗточкиМаршрута.ТипТранспорта = 5) или (ТЗточкиМаршрута.ТипТранспорта = 6) Тогда
				Попытка ТЗточкиМаршрута.НазваниеСудна 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("shipName").text; Исключение КонецПопытки;
//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;

			КонецЕсли;
            ТЗточкиМаршрута.НомерТС = СокрЛП(ТЗточкиМаршрута.номеравто) + СокрЛП(ТЗточкиМаршрута.номерВагона) + СокрЛП(ТЗточкиМаршрута.НомерАвиарейса)+ СокрЛП(ТЗточкиМаршрута.НазваниеСудна);; //Что-то тут не так
		КонецЦикла;
	//Исключение КонецПопытки;

	ТЗточкиМаршрута.Сортировать("+НомерТочки");

	Если ТЗточкиМаршрута.КоличествоСтрок()>0 Тогда
	    Возврат (ТЗточкиМаршрута);
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

//<issueDate>2018-08-09T00:00:00</issueDate>
Функция ДатаСтрока( ДатаСтр )
	год = лев(ДатаСтр,4);
	мес = сред(ДатаСтр,6,2);
	дат = сред(ДатаСтр,9,2);

	Возврат Дата(год, мес, дат);

КонецФункции

Процедура ЗагрузитьНомераАвто( ИмяФайла )
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);
	//objDom.setProperty("SelectionNamespaces", "
	//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	//	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	//	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	//	|xmlns:default='http://www.w3.org/2001/XMLSchema'
	//	|" );

	List = objDom.selectSingleNode("waybills").selectNodes("waybill");
	Для i1 = 0 По List.length - 1 Цикл
        waybill=List.item(i1);
		НомерДок = waybill.selectSingleNode("issueNumber").text;
		ДатаДок = ДатаСтрока( waybill.selectSingleNode("issueDate").text );
		Сообщить("№ "+НомерДок+" от "+ДатаДок);
		МаршрутСледования = МаршрутСледования_из_XML( waybill.selectSingleNode("shipmentRoute").selectNodes("routePoint"));
		МаршрутСледования.ВыбратьСтроку();
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьНомерАвто()

	рез = ГМ.Компонента.GetAvtoNumber("123", ТекущаяДата());
	Сообщить("1"+рез);

	//рез = ГМ.Компонента.GetAvtoNumber( "",  );
	//Сообщить("2 "+рез);

КонецПроцедуры

Процедура ПолучитьСписокВСД()
	ТипДок = VetDocumentType.ПолучитьЗначение( VetDocumentType.ТекущаяСтрока() ); 
	СтатусДок = VetDocumentStatus.ПолучитьЗначение( VetDocumentStatus.ТекущаяСтрока() );  
	
	спУсловия= СоздатьОбъект("СписокЗначений");
	спУсловия.ДобавитьЗначение(ТипДок, "vetDocumentType" );
	спУсловия.ДобавитьЗначение(СтатусДок, "vetDocumentStatus" );
	спУсловия.ДобавитьЗначение(НачДата, "НачДата");
	спУсловия.ДобавитьЗначение(КонДата, "КонДата");
	спУсловия.ДобавитьЗначение(Смещение, "Смещение");
	спУсловия.ДобавитьЗначение(Отправитель_Площадка, "Площадка");
	
	ГМ2.ПолучитьСписокВСД(спУсловия);
	
	ГМ2.ЗагрузитьXML_ВСД2(ГМ.Компонента.LogFilenameResponse);
КонецПроцедуры

Процедура УдалитьПартии()
	
	СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
	НачатьТранзакцию(); // Ускоримся
	Попытка		
		СпрПартия.ВыбратьЭлементы();
		Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
			Если СпрПартия.Получатель_Площадка = Отправитель_Площадка Тогда			
				СпрПартия.Удалить(0);
				Сообщить("["+СпрПартия.Код+"] помечена на удаление ");
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();	
КонецПроцедуры

Процедура ЗагрузитьУлицы()
	Если ПустоеЗначение(Город)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Город, 0 );
	ИначеЕсли ПустоеЗначение(Район)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Район, 0 );
	ИначеЕсли ПустоеЗначение(Регион)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Регион, 0 );
	Иначе
		Сообщить("Выберите город");
	КонецЕсли;

КонецПроцедуры


//{========================= Список изменений =================

Процедура ПриНажатииЛевойКнопки(Сост, х, у)
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
	Если ТипЗначенияСтр(Атр) = "АтрибутФормы" Тогда
		Если Атр.Идентификатор = "Версия" Тогда
			ЗапуститьПриложение(ГМ.ВерсияСсылка());
		КонецЕсли;  
	КонецЕсли;	
	
КонецПроцедуры

//}===========================================================

НачДата = ТекущаяДата();
КонДата = НачДата;

productType = 1; //мясо

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;

тзУсловияПеревозки.НоваяКолонка("Пометка");
тзУсловияПеревозки.НоваяКолонка("ВидПродукции");
тзУсловияПеревозки.НоваяКолонка("Решение");
тзУсловияПеревозки.НоваяКолонка("Название");
тзУсловияПеревозки.НоваяКолонка("UUID");
тзУсловияПеревозки.НоваяКолонка("GUID");
тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");


 //{ VetDocumentType
    //    TRANSPORT, = 1	= Транспортный ВСД.
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}

	VetDocumentType.ДобавитьЗначение("TRANSPORT", "Транспортный ВСД");
	VetDocumentType.ДобавитьЗначение("PRODUCTIVE", "Производственный ВСД");
	VetDocumentType.ДобавитьЗначение("RETURNABLE", "Возвратный ВСД");
	VetDocumentType.ДобавитьЗначение("INCOMING", "Входящий ВСД");
	VetDocumentType.ДобавитьЗначение("OUTGOING", "Исходящий ВСД");

    //{ VetDocumentStatus
    //
    //    /// <remarks/>
    //    CREATED, = 1
    //
    //    /// <remarks/>
    //    CONFIRMED, = 2
    //
    //    /// <remarks/>
    //    WITHDRAWN, = 3
    //
    //    /// <remarks/>
    //    UTILIZED, = 4
    //}

VetDocumentStatus.ДобавитьЗначение("CREATED", "Созданные / CREATED");
VetDocumentStatus.ДобавитьЗначение("CONFIRMED", "Подтвержденные / CONFIRMED");
VetDocumentStatus.ДобавитьЗначение("WITHDRAWN", "Аннулированные / WITHDRAWN");
VetDocumentStatus.ДобавитьЗначение("UTILIZED", "Погашенные / UTILIZED");