
Перем ГМ;  // Глобальный модуль
Перем ГМ2; // Глобальный модуль для Ветис 2.0
Перем ВыбРеквизит; //для выбора площадки

Функция ПриИзмененииПлощадки()
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);
КонецФункции

Процедура ПриИзмененииФирмы()
	Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
		ГМ.Инициализация(Контекст);
		ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	КонецЕсли;
КонецПроцедуры

//======= ФУНКЦИИ ИНТЕРФЕЙСА ==============



Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения)

	Если (ЭлементДиалога = "ФайлОтвета") Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		ФайлОтвета = ик+иф;
		ФлагПродолжения = 0;
	ИначеЕсли ( ЭлементДиалога = "ФайлНомераМашин" ) Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		ФайлНомераМашин = ик+иф;
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "ВыбПлощадка" Тогда
		ВремЭлем = ВыбХС;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагПродолжения = 0;
	КонецЕсли;

КонецПроцедуры


 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)

 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
 	ИначеЕсли ЗначениеЗакладки="ВСД_2" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД_версия_2");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда

		Отправитель_Площадка = Элемент;
		//Если ПустоеЗначение(GUID_ОтправительПлощадка)=1 Тогда
		//	GUID_ОтправительПлощадка = Элемент.GUID;
		//Иначе
		//	Если НЕ(СокрЛП(GUID_ОтправительПлощадка) = СокрЛП(Элемент.GUID)) Тогда
		//		Сообщить("Ошибка в GUID_ОтправительПлощадка, должно быть "+Элемент.GUID,"!");
		//	Иначе
		//		Сообщить("GUID_ОтправительПлощадка - правильно "+Элемент.Адрес,"i");
		//	КонецЕсли;
		//КонецЕсли;

		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;
	ПриИзмененииПлощадки();
КонецПроцедуры

Процедура ОткрытьПлощадкиПоХС( ВыбХС)

		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);

		СписокОтбора = СоздатьОбъект("СписокЗначений");

		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;

		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Процедура Клик_условия()
	текСтр = тзУсловияПеревозки.ТекущаяСтрока();
	текКол = тзУсловияПеревозки.ТекущаяКолонка();

	Если текКол="Пометка" Тогда
		Пометка = тзУсловияПеревозки.ПолучитьЗначение(ТекСтр,"Пометка");
		Если Пометка = 2 Тогда
			тзУсловияПеревозки.Пометка=1;
		Иначе
			тзУсловияПеревозки.Пометка=2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//=========================== Площадки =================================

Процедура СоздатьНовуюПлощадку(ВыбХС)
	Если ПустоеЗначение(ВыбХС)=1 Тогда
		Предупреждение("Выберите Хоз субъект");
	КонецЕсли;
	ВидСтравочникаХС = Метаданные.Справочник("ВСД_ХозСубъект").Реквизит("Контрагент").Вид;
	ВидСтравочникаПЛ = Метаданные.Справочник("ВСД_Площадка").Реквизит("Контрагент").Вид;

	Если ВидСтравочникаХС = ВидСтравочникаПЛ Тогда
		СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");

		СпрПл.Новый();
		СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
		СпрПл.Контрагент = ВыбХС.Контрагент;
		СпрПл.Адрес = ГМ.ПолучитьФактАдрес(ВыбХС.Контрагент);
		СпрПл.GuidХозСубъекта = ВыбХС.GUID;
		СпрПл.Записать();
		Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());

		ВыбПлощадка = СпрПл.ТекущийЭлемент();
	Иначе
		Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Выбран() = 1 Тогда
			Спр = СоздатьОбъект("Справочник."+ВидСтравочникаПЛ);
			Спр.ИспользоватьВладельца(ВыбХС.Контрагент);
			Если Спр.Выбрать("Выберите грузополучателя",) = 1 Тогда
				СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");

				СпрПл.Новый();
				СпрПл.Наименование = Спр.Наименование;
				СпрПл.Контрагент = Спр.ТекущийЭлемент();
				СпрПл.Адрес = ГМ.ПолучитьФактАдрес(СпрПл.Контрагент);
				СпрПл.GuidХозСубъекта = ВыбХС.GUID;
				СпрПл.Записать();
				Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());

				ВыбПлощадка = СпрПл.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )

	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;

	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]","i");
	Результат = ГМ.Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	//Отладка();

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат;
	КонецЕсли;

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);

    businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = businessEntity.selectSingleNode("bs:guid").text;
	uuid = businessEntity.selectSingleNode("bs:uuid").text;
	active = businessEntity.selectSingleNode("bs:active").text;
	enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
	Сообщить("Успешно установлена связь ВСД_Площадка ["+enterprise+"] ВСД_ХозСубъект ["+guid+"]","i");

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка)
	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Площадка.GUID)=1 Тогда
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;

	ГМ.Пауза();
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]","i");
	Результат = ГМ.Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID)
	);

	//Отладка();
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Если Результат="ACCEPTED" Тогда
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( ГМ.Компонента.ApplicationId)
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка)

	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;

	ГМ.Пауза();

	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]","i");
	Результат = ГМ.Компонента.SendRequestResult(СокрЛП(appID));

   	Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат;
	КонецЕсли;

    enterprise=objDom.selectSingleNode("//merc:enterprise") ;
	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;
	name = enterprise.selectSingleNode("ent:name").text;
	active = enterprise.selectSingleNode("bs:active").text;

	если ПустоеЗначение(GUID)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		Спр.НайтиЭлемент(Площадка);
		спр.GUID = GUID;
		спр.uuid = uuid;
		спр.Записать();
		Сообщить("Успешно записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");

		Площадка = Спр.ТекущийЭлемент();
	Иначе
		Сообщить("Пустой GUID Площадки");
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	ГМ.Пауза();

	СоздатьСвязьХозсубъектПлощадка(Площадка);

КонецПроцедуры

Функция  СоздатьПлощадку_ЗапросXML(Площадка)
	ЗапросXML = "<modifyEnterpriseRequest xmlns:sch='http://www.w3.org/2001/XMLSchema'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common'
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production'
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП(param_intiator_login)+"</co:login>
	|        </initiator>
	|        <modificationOperation>
	|          <ent:type>CREATE</ent:type>
	|          <ent:affectedList count='0' total='0' offset='0' />
	|          <ent:resultingList count='1' total='1' offset='0'>
	|            <ent:enterprise>
	|              <ent:name>"+СокрЛП(Площадка.Наименование)+"</ent:name>
	|              <ent:type>1</ent:type>
	|              <ent:address>
	|                <ik:country>
	|                  <bs:guid>"+СокрЛП(Страна.GUID)+"</bs:guid>
	|                </ik:country>
	|                <ik:federalDistrict />
	|                <ik:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|                </ik:region>
	|";

	Если ПустоеЗначение(Район.GUID)=0 Тогда
		ЗапросXML=ЗапросXML+"
		|                <ik:district>
		|                  <bs:guid>"+СокрЛП(Район.GUID)+"</bs:guid>
		|                </ik:district>
		|";
	Иначе
		ЗапросXML=ЗапросXML+"
		|<ik:district />
		|";
	КонецЕсли;
	Если ПустоеЗначение(Город)=0 Тогда
		ЗапросXML=ЗапросXML+"
		|                <ik:locality>
		|                  <bs:guid>"+СокрЛП(Город.GUID)+"</bs:guid>
		|                </ik:locality>
		|";
	Иначе
		ЗапросXML=ЗапросXML+"
		|                <ik:locality />
		|";
	КонецЕсли;
	ЗапросXML=ЗапросXML+"
	|                <ik:subLocality />
	|                <ik:street />
	|                <ik:addressView>"+СокрЛП(Площадка.Адрес)+"</ik:addressView>
	|              </ent:address>
	|              <ent:activityList count='1' total='1' offset='0'>
	|                <ent:activity>
	|                  <ent:name>Продажа продуктов питания</ent:name>
	|                </ent:activity>
	|              </ent:activityList>
	|              <ent:owner>
	|                <bs:guid>"+СокрЛП(Площадка.GuidХозСубъекта)+"</bs:guid>
	|              </ent:owner>
	|            </ent:enterprise>
	|          </ent:resultingList>
	|          <ent:reason>Причина добавления субъекта в реестр.</ent:reason>
	|        </modificationOperation>
	|      </modifyEnterpriseRequest>
	|";

	Возврат ЗапросXML;
КонецФункции

Процедура СоздатьПлощадку(Площадка)

	Если ПустоеЗначение(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	//Если ПустоеЗначение(Город.GUID)=1 Тогда
	//	Сообщить("Не указан Город.GUID");
	//	Возврат;
	//КонецЕсли;

	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]","i");
	ЗапросXML = СоздатьПлощадку_ЗапросXML(Площадка);

	appID = ГМ.ОтправитьЗапросXML(ЗапросXML);

	Если ПустоеЗначение(appID)=0 Тогда

		ПолучитьОтветПлощадка( appID, Площадка )

	КонецЕсли;

КонецПроцедуры

//=========================== ХозСубъекты =================================

Процедура ХС_Создать_Ответ( applicationID, ХС)

	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;

	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]","i");
	Результат = ГМ.Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();

    Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат;
	КонецЕсли;

    enterprise=objDom.selectSingleNode("//merc:businessEntity") ;
	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;
	active = enterprise.selectSingleNode("bs:active").text;

	если ПустоеЗначение(GUID)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр.НайтиЭлемент(ХС);
		спр.GUID = GUID;
		спр.Записать();
		Сообщить("Успешно записан ВСД_ХозСубъект ["+Спр.ТекущийЭлемент()+"] GUID = "+GUID,"i");
	Иначе
		Сообщить("Пустой GUID ХозСубъекта");
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
КонецПроцедуры

Процедура ХС_Создать(ХС)

	ИНН = ГМ.ПолучитьИНН(ХС.Контрагент);
	КПП = ГМ.ПолучитьКПП(ХС.Контрагент);
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ГМ.ПолучитьОГРН(ХС);

	Если ПустоеЗначение(ИНН)=1 Тогда
		Сообщить("Неправильно указан ИНН","!");
		Возврат;
	КонецЕсли;
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если ПустоеЗначение(ОГРН)=1 Тогда
		Сообщить("Не указан ОГРН","!");
		Возврат;
	КонецЕсли;

	Адрес = ГМ.ПолучитьЮрАдрес(ХС.Контрагент);
	ПолноеНаименование = ГМ.ПолучитьНаименованиеКлиента(ХС.Контрагент);

	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]","i");
	Результат = ГМ.Компонента.CreateBusinessEntity(
			СокрЛП(хс.Наименование),  							// название
			СокрЛП(ПолноеНаименование), 	// полное название
			ИНН,
			КПП,
			ОГРН,
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID),
			Адрес
	);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		ГМ.Пауза();

		ХС_Создать_Ответ( ГМ.Компонента.ApplicationId, ХС )

	КонецЕсли;

КонецПроцедуры

Процедура СинхронизацияСпрХС()

	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;

	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);

	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;

		ГМ.ХС_ПолучитьGuid(тз.id);

		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ГМ.НайтиПлощадкиПоНазванию(тз.id, 0 );
			ГМ.ЗагрузитьПлощадки( тз.id );
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//======================= Тестирование \ Проверка ==========================


//_____________________________________________________________________________
//ТЕСТ  ЖД читаем из файла ответа
Процедура ПрочестьХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_ВСД2(Сокрлп(ФайлОтвета), докссылка)
КонецПроцедуры


Процедура ПрочестьПартииХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_Партии2(Сокрлп(ФайлОтвета), докссылка)
КонецПроцедуры

//=========================================================================


Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла) Экспорт
	//<dt:decision> 	dt:RegionalizationDecision
	//1 	Перемещение разрешено.
	//2 	Перемещение разрешено при обязательном соблюдении условий.
	//3 	Перемещение запрещено.
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);


//                  <vd:r13nRouteSection>
//                     <vd:sqnId>1</vd:sqnId>
//                     <vd:appliedR13nRule>
//                        <dt:cargoType>
//                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
//                        </dt:cargoType>
//                        <dt:decision>1</dt:decision>
//                     </vd:appliedR13nRule>
//                  </vd:r13nRouteSection>


    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );


	Попытка
		applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

		RouteSectionList = objDom.selectNodes("//*[local-name() = 'r13nRouteSection']") ;
	Исключение
		Сообщить("Не удалось прочитать ответ о разрешении");
		Возврат "";
		//Пример на ветисе корявый...
		applicationId = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectSingleNode("applicationId").text ;

		RouteSectionList = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectNodes("r13nRouteSection") ;
	КонецПопытки;

	УсловияПеревозки = СоздатьОбъект("ТаблицаЗначений");
	УсловияПеревозки.НоваяКолонка("Пометка", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("ВидПродукции", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("Решение", , , , ,1,);
	УсловияПеревозки.НоваяКолонка("Название", , , , ,5,);
	УсловияПеревозки.НоваяКолонка("UUID", , , , ,3,);
	УсловияПеревозки.НоваяКолонка("GUID", , , , ,3,);

	Сообщить("Получено "+RouteSectionList.length+" записей по отрезкам маршрута","i");
    Для i1 = 0 По RouteSectionList.length - 1 Цикл
        RouteSection = RouteSectionList.item(i1);
		RuleList = RouteSection.SelectNodes("vd:appliedR13nRule");
		Сообщить("Получено "+RuleList.length+" записей правил перемещения","i");
		Для k1 = 0 По RuleList.length - 1 Цикл
			appliedR13nRule = RuleList.item(k1);
			Решение = Число(appliedR13nRule.selectSingleNode("dt:decision").text);
			ВидПродукции = ГМ.НайтиВидПродукции( appliedR13nRule.selectSingleNode("dt:cargoType").selectSingleNode("bs:guid").text);

			requirements = appliedR13nRule.selectNodes("dt:requirement");
			Сообщить("Получено "+requirements.length+" записей по правилам для "+ВидПродукции,"i");
			Для i2 = 0 По requirements.length - 1 Цикл
				conditionGroup = requirements.item(i2).selectNodes("dt:conditionGroup");
				Для i3=0 По conditionGroup.length - 1 Цикл
					conditionList = conditionGroup.item(i3).selectNodes("dt:condition");
					Для i4=0 По conditionList.length - 1 Цикл
						condition = conditionList.item(i4);
						УсловияПеревозки.НоваяСтрока();
						УсловияПеревозки.Пометка = 2;
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						УсловияПеревозки.Название = condition.selectSingleNode("dt:text").text;
						УсловияПеревозки.UUID = condition.selectSingleNode("bs:uuid").text;
						УсловияПеревозки.GUID = condition.selectSingleNode("bs:guid").text;
						Если Решение = 1 Тогда
							Сообщить("Перемещение разрешено.");
						ИначеЕсли Решение = 2 Тогда
							Сообщить("Перемещение разрешено при обязательном соблюдении условий." + УсловияПеревозки.Название);
						Иначе
							Сообщить("Перемещение запрещено." +УсловияПеревозки.Название);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат УсловияПеревозки;

КонецФункции

//Регионализация
//тест с формы Чтение ответа
Функция ПрочестьХМЛРегион()
	//ГМ2.ЗагрузитьXML_ПеревозкаРазрешена_2(ФайлОтвета);
	тз = ЗагрузитьXML_ПеревозкаРазрешена_2(ФайлОтвета);
	тзУсловияПеревозки.Загрузить(тз);
	тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");
	тзУсловияПеревозки.ТекущаяСтрока(1);
КонецФункции

Процедура Регионализация()
	ТзУсловияПеревозки.УдалитьСтроки();
	Рез = ГМ2.ПроверитьВозможностьПеремещения( ВСД_транзакция_2 );
	Если ТипЗначенияСтр(Рез) = "ТаблицаЗначений" Тогда
	    тзУсловияПеревозки.Загрузить(Рез);
		тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");
		тзУсловияПеревозки.ТекущаяСтрока(1);
	КонецЕсли;
//	ФайлОтвета = ГМ.Компонента.LogFilename;
//	ПрочестьХМЛРегион();
КонецПроцедуры

Процедура ПриВыбореВСДТранзакция()
	тзУсловияПеревозки.УдалитьСтроки();
КонецПроцедуры

//Регионализация Конец

// *** Классификатор Форм Упаковки
Функция ЗаполнитьФормыУпаковки()
	//http://help.vetrf.ru/wiki/PackingForm
// Соответствие между старым справочником упаковок и новым классификатором.
 ГМ.НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
 ГМ.НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
 ГМ.НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
 ГМ.НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
 ГМ.НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
 ГМ.НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
 ГМ.НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок из полимерной ткани");
 ГМ.НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный или нерасфасованный");
 ГМ.НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
 ГМ.НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
 ГМ.НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 ГМ.НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
 ГМ.НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
 ГМ.НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
 ГМ.НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
 ГМ.НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
 ГМ.НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности для массовых грузов");
 ГМ.НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 ГМ.НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
 ГМ.НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660","Упаковка не определена");
 ГМ.НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");

//Новый классификатор упаковок

 ГМ.НайтиФормуУпаковки("5ad138ef-2493-4117-bf83-b76e4e5f609d","Ампула, защищенная");
 ГМ.НайтиФормуУпаковки("1f9a9273-be63-4e4b-b29b-dfee1f0da370","Ампула, незащищенная");
 ГМ.НайтиФормуУпаковки("975160ee-6cb0-4501-a821-9e3574f09446","Аэрозольная упаковка");
 ГМ.НайтиФормуУпаковки("ec29a5a8-17fa-480c-a1d5-333a4411e393","Багаж");
 ГМ.НайтиФормуУпаковки("0f4cc0b5-af48-4571-a06b-96504ec89012","Бадья");
 ГМ.НайтиФормуУпаковки("93bdc740-0f32-4019-a3fd-ed661f2bc3b9","Бак");
 ГМ.НайтиФормуУпаковки("bc29f22a-6086-4438-acd2-1f40a3b00a66","Балка");
 ГМ.НайтиФормуУпаковки("491e8863-7850-4b06-8abc-52c09dd05d0d","Балка в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("6a10e7ae-b8ff-4249-a23d-1dec8128c4a1","Баллон, газовый");
 ГМ.НайтиФормуУпаковки("0fdf7f98-6595-480b-8988-5544d8ff40b3","Баллон, защищенный");
 ГМ.НайтиФормуУпаковки("49e8e70e-e539-4ce1-8d20-5a49ae276f77","Баллон, незащищенный");
 ГМ.НайтиФормуУпаковки("8a9c1190-aeeb-498d-8e80-5ddfbc3f7df2","Бандероль");
 ГМ.НайтиФормуУпаковки("0cc66f67-3111-4e77-9dcc-c9a9df725bed","Банка (емкостью менее 5 л) жестяная прямоугольная");
 ГМ.НайтиФормуУпаковки("18a67ab0-21a3-4e8c-9058-d8f42820938d","Банка (емкостью менее 5 л) жестяная с ручкой и выпускным отверстием");
 ГМ.НайтиФормуУпаковки("54ed0793-c32e-41c1-9321-608c1a224edc","Банка (емкостью менее 5 л) жестяная цилиндрическая");
 ГМ.НайтиФормуУпаковки("91f360ff-5731-4c1c-bf11-7ea3d6d1a3ca","Банка жестяная для сухих продуктов (массой до 2,2 кг)");
 ГМ.НайтиФормуУпаковки("c1f40234-bff1-42c8-8e19-d6cad7f00fce","Банка широкогорлая (емкостью около 4,5 литров)");
 ГМ.НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
 ГМ.НайтиФормуУпаковки("13f13e66-adf4-431a-9cff-22cfd839047b","Барабан");
 ГМ.НайтиФормуУпаковки("2e53354c-4023-434b-926f-bbdd1af00a37","Барабан алюминиевый с несъемным днищем");
 ГМ.НайтиФормуУпаковки("970e40fd-3436-48ed-ac99-e78802f57119","Барабан алюминиевый со съемным днищем");
 ГМ.НайтиФормуУпаковки("eec09740-2c4c-460b-94ed-c4d4ef437f1b","Барабан пластмассовый с несъемным днищем");
 ГМ.НайтиФормуУпаковки("d565dd82-5fc1-4303-a55d-495c35ac22ec","Барабан пластмассовый со съемным днищем");
 ГМ.НайтиФормуУпаковки("02f1c682-8f53-47f8-b8dc-72404d986e66","Барабан стальной");
 ГМ.НайтиФормуУпаковки("c113fb0c-23eb-4ce5-ad44-8250598f173e","Барабан стальной с несъемным днищем");
 ГМ.НайтиФормуУпаковки("1852b14d-39a0-4712-9e55-90a7005d5469","Барабан стальной со съемным днищем");
 ГМ.НайтиФормуУпаковки("e5f7f98d-6a9c-4866-8cac-4819f71e41b3","Барабан фанерный");
 ГМ.НайтиФормуУпаковки("6bf25be3-0cf7-4dd8-a383-049a02862968","Барабан фибровый");
 ГМ.НайтиФормуУпаковки("ed90911b-d130-4d3b-ae0b-2f0754d23fd4","Барабан, алюминиевый");
 ГМ.НайтиФормуУпаковки("0ef53349-5258-4efc-ac2a-23d1e33f387b","Барабан, деревянный");
 ГМ.НайтиФормуУпаковки("bbe136bd-0da4-42fd-800a-79435f4dd2c0","Барабан, железный");
 ГМ.НайтиФормуУпаковки("dd7c7ba0-dbc3-435d-94f7-5b758ca36898","Барабан, пластмассовый");
 ГМ.НайтиФормуУпаковки("ae0b5e58-8771-48f7-8c3c-11dfdb17ebad","Без клети");
 ГМ.НайтиФормуУпаковки("34e245a7-cd7c-4d8b-a436-482dcbcf1f38","Бидон");
 ГМ.НайтиФормуУпаковки("41e9ff79-b6c4-46e7-a2d4-6f5bf3ee1002","Бобина");
 ГМ.НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
 ГМ.НайтиФормуУпаковки("3630beae-fe03-49ff-9264-93925ca7ce80","Бочка (емкостью около 164 л)");
 ГМ.НайтиФормуУпаковки("5623e14a-903b-48e4-8afa-07db65991173","Бочка (емкостью около 164 л) деревянная");
 ГМ.НайтиФормуУпаковки("3c78e2e1-d19a-40d3-b970-4fe6d2b722d0","Бочка (емкостью около 164 л) деревянная со съемным днищем");
 ГМ.НайтиФормуУпаковки("021bc2d9-f514-4491-b21a-ffe63023236f","Бочка (емкостью около 164 л) деревянная шпунтованная");
 ГМ.НайтиФормуУпаковки("37495e99-e19f-4221-97e8-39565c0192b8","Бочка деревянная (емкостью около 200 л)");
 ГМ.НайтиФормуУпаковки("c8066a6e-5f19-4429-85e1-9b2df548afa1","Бочка для вина или пива");
 ГМ.НайтиФормуУпаковки("f1d48fb7-8536-4b99-8668-bd6a55167306","Бочка для вина или пива большая (емкостью около 1146 л) (тан)");
 ГМ.НайтиФормуУпаковки("6583f8bf-8317-4ba4-bf4b-fafcd1d13bc1","Бочка емкостью 238 л (хогсхед)");
 ГМ.НайтиФормуУпаковки("8915e7eb-4f39-48aa-8171-7a629c95b69e","Бочонок (емкостью около 41 л)");
 ГМ.НайтиФормуУпаковки("8fe0727a-b2ed-4040-9df5-a14e4ad7f6a8","Бочонок (емкостью около 46 л)");
 ГМ.НайтиФормуУпаковки("07f35ce7-6d5a-49e7-a7e2-659b6cf74def","Бревно");
 ГМ.НайтиФормуУпаковки("0e0ccdf4-8779-4d65-84e2-d9e689314630","Бревно в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("d9afec35-b224-404f-a3ff-74a0496c128d","Брезент");
 ГМ.НайтиФормуУпаковки("0ed01082-9c8e-49fa-8ba4-a91879d4b192","Брус (брусок)");
 ГМ.НайтиФормуУпаковки("086a3064-ab16-4d38-a7fa-3a28ee66b58b","Брус (брусок) в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("d2ed24d1-c72a-4dc6-b3a8-ff8ca179c5c4","Бункер");
 ГМ.НайтиФормуУпаковки("a23634f3-9e71-4c80-abc5-e4c77ac70c88","Бутылка оплетенная");
 ГМ.НайтиФормуУпаковки("f7183d0a-5cee-4de8-9d08-bd5c7512ea7c","Бутылка с выпуклыми стенками защищенная");
 ГМ.НайтиФормуУпаковки("883a32f4-984e-43c1-8e03-ad02929cbfe4","Бутылка с выпуклыми стенками незащищенная");
 ГМ.НайтиФормуУпаковки("9adfe441-f411-4fcc-9568-8274ec2a0697","Бутылка цилиндрическая защищенная");
 ГМ.НайтиФормуУпаковки("1b986c7e-dcff-452f-b9c5-bc47afa6ccdc","Бутылка цилиндрическая незащищенная");
 ГМ.НайтиФормуУпаковки("3e311a74-00dd-4554-b656-748aa45cc069","Бутыль оплетенная большая (емкостью от 9 до 54 л) защищенная");
 ГМ.НайтиФормуУпаковки("b654b00e-7601-408e-b059-783ab0371b35","Бутыль оплетенная большая (емкостью от 9 до 54 л) незащищенная");
 ГМ.НайтиФормуУпаковки("fc881dea-5868-43ea-8b84-768aad44bc39","Бутыль оплетенная защищенная");
 ГМ.НайтиФормуУпаковки("f8552b0c-1de2-4509-8de9-06284d01bdff","Бутыль оплетенная незащищенная");
 ГМ.НайтиФормуУпаковки("87cff419-7bd1-4a2a-b52e-3f6c358138c8","Бухта");
 ГМ.НайтиФормуУпаковки("04735711-516d-4331-92c6-b55e5f8e3710","В вакуумной упаковке");
 ГМ.НайтиФормуУпаковки("b49dbb7b-56b9-48e3-9fd3-74a328dbcea3","В термоусадочной пленке");
 ГМ.НайтиФормуУпаковки("165fd412-0bfa-4bb5-8993-bcfaa5d82e1b","Ведро");
 ГМ.НайтиФормуУпаковки("657fad4d-71a4-4939-90a4-3fb0c9aea7f7","Гильза");
 ГМ.НайтиФормуУпаковки("a423d25a-2a14-40b8-bf13-f6a85b8fc887","Гнездо (ячейка)");
 ГМ.НайтиФормуУпаковки("4a7ea673-c3ac-40b5-836f-cfdd066b8020","Горшок");
 ГМ.НайтиФормуУпаковки("668e236b-70b0-4afc-8ab3-3fb9335f909e","Грейферный ковш");
 ГМ.НайтиФормуУпаковки("17f78e53-8978-4b58-9be5-d919c049a239","Гроб");
 ГМ.НайтиФормуУпаковки("d2612f44-ca2a-4146-986d-6650e6fe9194","Грузовая партия (лот)");
 ГМ.НайтиФормуУпаковки("af4d4677-3ea7-46ba-9fe0-504ba81ebea7","Дозатор");
 ГМ.НайтиФормуУпаковки("b8d3ee58-c120-4c4e-bd31-0e1d3451f5de","Доска");
 ГМ.НайтиФормуУпаковки("c84cb473-a0cc-4433-8b56-c7beb88fc59b","Доска в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("3dca7c38-3a10-4fb6-9c1f-0c64ab79d63b","Доска толстая в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("4d5772a0-9fa4-47ab-8c32-9a07729740ad","Доска, толстая");
 ГМ.НайтиФормуУпаковки("5e5f4afb-d5f8-483a-999e-cb985af7580b","Единица");
 ГМ.НайтиФормуУпаковки("207dccd8-7a12-44c3-a77b-7dd945a7b0bd","Кадка");
 ГМ.НайтиФормуУпаковки("6046383e-9e59-40bc-a70b-a0538ef536ca","Кадка с крышкой");
 ГМ.НайтиФормуУпаковки("4d9bd778-5ce4-411c-8d78-a1959ac55590","Канистра пластмассовая с несъемным днищем");
 ГМ.НайтиФормуУпаковки("ba61904f-f946-448a-958b-518655d8f567","Канистра пластмассовая со съемным днищем");
 ГМ.НайтиФормуУпаковки("a2110164-70b4-49f6-afaa-f3abde1be0f1","Канистра стальная с несъемным днищем");
 ГМ.НайтиФормуУпаковки("72896fbf-b156-4c7b-868d-ac13c5a85c7e","Канистра стальная со съемным днищем");
 ГМ.НайтиФормуУпаковки("12829e8e-7983-4745-8d01-5425d0244df6","Канистра, пластмассовая");
 ГМ.НайтиФормуУпаковки("a17e05ea-2fd6-485f-8db6-5aed1606f851","Канистра, прямоугольная");
 ГМ.НайтиФормуУпаковки("315646b0-01b2-4728-ab20-39911b080c26","Канистра, стальная");
 ГМ.НайтиФормуУпаковки("a7eb10cf-5a71-4cd2-97eb-c7369a407ccf","Канистра, цилиндрическая");
 ГМ.НайтиФормуУпаковки("8bcdee71-cca5-4536-ae2e-8a423d7dab60","Капсула");
 ГМ.НайтиФормуУпаковки("0f402761-1d53-45dc-9566-d709cd1ccb4d","Кардная лента");
 ГМ.НайтиФормуУпаковки("8211a6d5-11ea-4a5e-96dd-b52c3fe0a801","Кассета");
 ГМ.НайтиФормуУпаковки("c7ee807d-56a9-47c5-95d7-72021f303167","Кассета с пленкой (фильмпак)");
 ГМ.НайтиФормуУпаковки("4b3478b2-bd43-4fe1-85bd-77a457a1cd72","Катушка");
 ГМ.НайтиФормуУпаковки("31ff0ebc-8b93-4ab4-9e6f-04dcab641eb2","Кипа, неспрессованная");
 ГМ.НайтиФормуУпаковки("90ae449d-76c3-47a2-a0ec-39febdc0c965","Кипа, спрессованная");
 ГМ.НайтиФормуУпаковки("6da6c216-abc1-4534-825c-821a41b2dbc2","Клеть");
 ГМ.НайтиФормуУпаковки("09f4ec10-6101-4c3d-b57a-251aa11e7752","Клеть (многооборотная) Общего фонда транспортировочного оборудования EC");
 ГМ.НайтиФормуУпаковки("4770cd27-c22b-4da6-bba5-c69dcd601b74","Клеть, роликовая");
 ГМ.НайтиФормуУпаковки("538f0705-e05d-4154-bfb5-0e63ab30122b","Кольцо");
 ГМ.НайтиФормуУпаковки("d0416c04-368d-48bf-b5fb-d3fe21f3977c","Комбинированная упаковка: пластмассовый сосуд");
 ГМ.НайтиФормуУпаковки("858efe47-f7d6-4f6e-9408-79b8e3d9ae83","Комбинированная упаковка: пластмассовый сосуд в барабане алюминиевом");
 ГМ.НайтиФормуУпаковки("b95eb3b6-d08a-441e-9a3a-6d3f9501cc99","Комбинированная упаковка: пластмассовый сосуд в барабане пластмассовом");
 ГМ.НайтиФормуУпаковки("6b8efc02-9611-451c-b215-503bc29301cd","Комбинированная упаковка: пластмассовый сосуд в барабане стальном");
 ГМ.НайтиФормуУпаковки("21246938-dd6f-49aa-8e2a-d1cb13b0be17","Комбинированная упаковка: пластмассовый сосуд в барабане фибровом");
 ГМ.НайтиФормуУпаковки("05e4976b-9504-44ac-8645-06bf6a24ad59","Комбинированная упаковка: пластмассовый сосуд в деревянной коробке");
 ГМ.НайтиФормуУпаковки("5e8755cb-a874-499d-bb4d-34e465df0978","Комбинированная упаковка: пластмассовый сосуд в коробке из твердой пластмассы");
 ГМ.НайтиФормуУпаковки("eb55f088-06cc-4bab-9f84-49f2f999f428","Комбинированная упаковка: пластмассовый сосуд в коробке из фибрового картона");
 ГМ.НайтиФормуУпаковки("ab579955-759f-4de1-b8b9-460ad80facfb","Комбинированная упаковка: пластмассовый сосуд в коробке фанерной");
 ГМ.НайтиФормуУпаковки("95307257-321c-4dd1-9a30-e30cbcffcfb1","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (или обрешетке) из алюминия");
 ГМ.НайтиФормуУпаковки("43c6ad00-832f-42c6-8e2a-fe2273814b66","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (или обрешетке) из стали");
 ГМ.НайтиФормуУпаковки("380c561e-749a-4408-88de-ad5399c8a53f","Комбинированная упаковка: стеклянный сосуд");
 ГМ.НайтиФормуУпаковки("2e460cc7-7c38-4bf4-aa19-7768cb14d234","Комбинированная упаковка: стеклянный сосуд в барабане алюминиевом");
 ГМ.НайтиФормуУпаковки("fa1d17e8-e12d-4544-9461-db80f49cfe4b","Комбинированная упаковка: стеклянный сосуд в барабане фанерном");
 ГМ.НайтиФормуУпаковки("40c8a0db-74c9-4190-9449-6f3f8ac2eaa7","Комбинированная упаковка: стеклянный сосуд в барабане фибровом");
 ГМ.НайтиФормуУпаковки("32936c38-e9fa-439b-8108-5b7e3c482f6c","Комбинированная упаковка: стеклянный сосуд в корзине плетеной с крышкой");
 ГМ.НайтиФормуУпаковки("4195a944-7c45-44e9-9cf9-d366386ad86e","Комбинированная упаковка: стеклянный сосуд в коробке деревянной");
 ГМ.НайтиФормуУпаковки("eabbfb7f-b3ea-4858-981a-201a18be8a0a","Комбинированная упаковка: стеклянный сосуд в коробке из фибрового картона");
 ГМ.НайтиФормуУпаковки("5a349e4c-ce4c-485e-81db-beec4aa09fa4","Комбинированная упаковка: стеклянный сосуд в пакете из твердой пластмассы");
 ГМ.НайтиФормуУпаковки("ce9f36bf-2f90-424c-b34f-e8715dd15e02","Комбинированная упаковка: стеклянный сосуд в пакете пенопластовом");
 ГМ.НайтиФормуУпаковки("57eeeadf-7c4b-4614-9731-6e47d4b273a9","Комбинированная упаковка: стеклянный сосуд в стальном барабане");
 ГМ.НайтиФормуУпаковки("6355c3ee-6d1c-4bc5-a6ff-2a808274f222","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (или обрешетке) из алюминия");
 ГМ.НайтиФормуУпаковки("5893d315-48c8-49f7-9dc4-2dde43e090b9","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (или обрешетке) из стали");
 ГМ.НайтиФормуУпаковки("b5cd2c76-152f-4d8f-a5c2-d196dd920426","Комплект");
 ГМ.НайтиФормуУпаковки("3cb38979-51da-44a5-8bdc-8f549bb0aa68","Конверт");
 ГМ.НайтиФормуУпаковки("dddd429e-0376-4030-bb9e-2ad9cba0f3c4","Конверт, стальной");
 ГМ.НайтиФормуУпаковки("d90e17f4-8bed-46be-a1d1-9bb7f0f4d736","Консоль для оборудования, помещающаяся в минифургон");
 ГМ.НайтиФормуУпаковки("5d753d93-c512-4f55-8fc8-0c0f1461d6a0","Контейнер для пищевых продуктов");
 ГМ.НайтиФормуУпаковки("9ef6b142-22e7-4a1c-bc5f-7945dc5a654f","Контейнер металлический");
 ГМ.НайтиФормуУпаковки("d273dbfd-c8ed-4637-9ad2-5e40d7ecbf3a","Контейнер наружный");
 ГМ.НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности для массовых грузов");
 ГМ.НайтиФормуУпаковки("b86afba4-7492-4910-b266-6ab67235095c","Контейнер средней грузоподъемности для массовых грузов алюминиевый");
 ГМ.НайтиФормуУпаковки("6505c314-3e58-496e-becc-9ee71c08eacc","Контейнер средней грузоподъемности для массовых грузов алюминиевый герметизированный свыше 10 КПа");
 ГМ.НайтиФормуУпаковки("caeda84d-f591-4ca8-888f-2b0857d6d66a","Контейнер средней грузоподъемности для массовых грузов бумажный многослойный");
 ГМ.НайтиФормуУпаковки("566c12fc-5fc1-4189-8fc4-f4ff072c4897","Контейнер средней грузоподъемности для массовых грузов бумажный многослойный влагонепроницаемый");
 ГМ.НайтиФормуУпаковки("800fc586-864c-4c29-ae15-d0d405e5d82a","Контейнер средней грузоподъемности для массовых грузов герметизированный 10 Кпа");
 ГМ.НайтиФормуУпаковки("3a762c62-7b9e-4ccc-95e7-50fed26da877","Контейнер средней грузоподъемности для массовых грузов герметизированный свыше 10 КПа");
 ГМ.НайтиФормуУпаковки("1061b465-9f46-48ba-8939-e4e14afd6270","Контейнер средней грузоподъемности для массовых грузов гибкий");
 ГМ.НайтиФормуУпаковки("e143c99a-f5c3-4e66-a50b-52a5cabc6325","Контейнер средней грузоподъемности для массовых грузов из древесного материала");
 ГМ.НайтиФормуУпаковки("828064d7-80be-4ba4-a13c-7a17476e763e","Контейнер средней грузоподъемности для массовых грузов из древесного материала с внутренним вкладышем");
 ГМ.НайтиФормуУпаковки("057ea6ec-aab1-4e2c-be58-f976fd3bbb37","Контейнер средней грузоподъемности для массовых грузов из естественной древесины");
 ГМ.НайтиФормуУпаковки("c5f0a52e-2496-45f0-9c5d-0cca7c1643a1","Контейнер средней грузоподъемности для массовых грузов из естественной древесины с внутренним вкладышем");
 ГМ.НайтиФормуУпаковки("5cea30bc-bd13-4c2a-af79-90a2e1804b07","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы");
 ГМ.НайтиФормуУпаковки("e729238b-88ff-4991-a67e-8ec66cded23c","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы автономный герметизированный");
 ГМ.НайтиФормуУпаковки("2b58bc8f-b007-4ef4-808b-a4eedc9df54c","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы с конструкционным оснащением герметизированный");
 ГМ.НайтиФормуУпаковки("c159513f-dcf5-4402-ab16-8a1970e7b9d4","Контейнер средней грузоподъемности для массовых грузов из пластикового волокна с покрытием и вкладышем");
 ГМ.НайтиФормуУпаковки("92765566-620c-4877-a58f-4107c3c6d468","Контейнер средней грузоподъемности для массовых грузов из полимерной пленки");
 ГМ.НайтиФормуУпаковки("9c415e68-6f34-4e5c-81c2-696e994a77cc","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани без покрытия/вкладыша");
 ГМ.НайтиФормуУпаковки("fed6b6cb-60b7-4df5-b81e-37b7a2b2a24e","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани с вкладышем");
 ГМ.НайтиФормуУпаковки("3d3bf9e3-12bb-4f0c-82ab-c79df71fcfdf","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани с покрытием");
 ГМ.НайтиФормуУпаковки("778afe34-03a9-4255-89ce-78229c9d233c","Контейнер средней грузоподъемности для массовых грузов из прочего металла, кроме стали");
 ГМ.НайтиФормуУпаковки("5a86d172-8b82-4992-b88c-8b1f80765ff5","Контейнер средней грузоподъемности для массовых грузов из фибрового картона");
 ГМ.НайтиФормуУпаковки("769f3e00-3bc6-4b59-b201-8972cd649ccc","Контейнер средней грузоподъемности для массовых грузов металлический");
 ГМ.НайтиФормуУпаковки("fab06db6-977d-48df-8822-fb5ef954434c","Контейнер средней грузоподъемности для массовых грузов составной");
 ГМ.НайтиФормуУпаковки("a3ee4967-a24f-4815-8f07-9d49ffe1de53","Контейнер средней грузоподъемности для массовых грузов составной из гибкой пластмассы герметизированный");
 ГМ.НайтиФормуУпаковки("fee9277d-adb9-4af6-aae9-3117412de104","Контейнер средней грузоподъемности для массовых грузов составной из жесткой пластмассы герметизированный");
 ГМ.НайтиФормуУпаковки("a14e9f47-e745-4fb5-861e-642b8da576d9","Контейнер средней грузоподъемности для массовых грузов стальной");
 ГМ.НайтиФормуУпаковки("cb247727-4eaf-49dd-85cf-6e2dd7f2a3ab","Контейнер средней грузоподъемности для массовых грузов текстильный без покрытия/вкладыша");
 ГМ.НайтиФормуУпаковки("5c416509-50d7-464b-9455-9439604c2479","Контейнер средней грузоподъемности для массовых грузов текстильный с вкладышем");
 ГМ.НайтиФормуУпаковки("111583f5-39e6-4b45-a941-b67d41ef4cae","Контейнер средней грузоподъемности для массовых грузов текстильный с покрытием");
 ГМ.НайтиФормуУпаковки("0d51ebba-b636-4a01-9a3a-e1f10fcc73df","Контейнер средней грузоподъемности для массовых грузов текстильный с покрытием и вкладышем");
 ГМ.НайтиФормуУпаковки("6bc17666-63d7-49fd-9a82-fd98ff408dff","Контейнер средней грузоподъемности для массовых грузов фанерный");
 ГМ.НайтиФормуУпаковки("8015c596-6a81-40bc-bfca-f5961327bca4","Контейнер средней грузоподъемности для массовых грузов фанерный с внутренним вкладышем");
 ГМ.НайтиФормуУпаковки("a41e2a9a-d9f8-43f7-8781-15da3e5713d8","Контейнер средней грузоподъемности для наливных грузов алюминиевый");
 ГМ.НайтиФормуУпаковки("4dfaab91-aacd-4a1b-a052-f40f873e6a46","Контейнер средней грузоподъемности для наливных грузов из жесткой пластмассы автономный");
 ГМ.НайтиФормуУпаковки("5389a88d-8a7d-4fc6-9758-4205df09bd30","Контейнер средней грузоподъемности для наливных грузов из жесткой пластмассы с конструкционным оснащением");
 ГМ.НайтиФормуУпаковки("ceb9b05c-6a68-4663-ae9a-72c1f38e1ef8","Контейнер средней грузоподъемности для наливных грузов металлический");
 ГМ.НайтиФормуУпаковки("dd97947e-4e78-41df-a4ef-1f34346db79e","Контейнер средней грузоподъемности для наливных грузов составной из гибкой пластмассы");
 ГМ.НайтиФормуУпаковки("f9c0a4b5-0576-4aeb-9822-0a85f59b4c7f","Контейнер средней грузоподъемности для наливных грузов составной из жесткой пластмассы");
 ГМ.НайтиФормуУпаковки("517d28bb-afa9-4a66-87e7-b707121a70fb","Контейнер средней грузоподъемности для наливных грузов стальной");
 ГМ.НайтиФормуУпаковки("690e086c-89b8-4c17-8838-4478d4c2e4eb","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов из жесткой пластмассы автономный");
 ГМ.НайтиФормуУпаковки("c979e057-03e8-4dda-8fcd-3dba27e4dfc5","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов из жесткой пластмассы с конструкционным оснащением");
 ГМ.НайтиФормуУпаковки("9eba63f1-0e89-47a1-b75a-8c0cb099af3d","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов составной из гибкой пластмассы");
 ГМ.НайтиФормуУпаковки("3850fb20-746c-4001-827c-5825630f7ce7","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов составной из жесткой пластмассы");
 ГМ.НайтиФормуУпаковки("4258d946-8f37-43ac-90c2-ab29814daaeb","Контейнер, галлон");
 ГМ.НайтиФормуУпаковки("0239b3d5-ec19-498f-9379-013e4df8c882","Контейнер, гибкий");
 ГМ.НайтиФормуУпаковки("8f20bf8f-afd5-4e30-9e6b-b664f3973c16","Контейнер, прочее транспортировочное оборудование, кроме поименованного");
 ГМ.НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
 ГМ.НайтиФормуУпаковки("2bbef079-d872-469a-9a38-37101bba2e07","Корзина из шпона для ягод и фруктов");
 ГМ.НайтиФормуУпаковки("4be2b716-28a4-4d33-8d3e-266ce1e34942","Корзина с крышкой");
 ГМ.НайтиФормуУпаковки("497050a3-b994-4ba4-badd-8b7fd98426ac","Корзина с ручкой из древесины");
 ГМ.НайтиФормуУпаковки("02684a03-6f18-43d0-b79d-3ce05d562435","Корзина с ручкой, картонная");
 ГМ.НайтиФормуУпаковки("ecd94698-e572-4b54-91a8-54bccd9f5644","Корзина с ручкой, пластмассовая");
 ГМ.НайтиФормуУпаковки("e3c233ff-30d4-4ee1-89ac-c19062f1a09d","Корзина, рыбацкая");
 ГМ.НайтиФормуУпаковки("2b91c7f0-2705-40a1-a180-64e20626a2a0","Короб деревянный (лифтван) размером около 220 см (длина) x 115 см (ширина) x 220 см (высота)");
 ГМ.НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
 ГМ.НайтиФормуУпаковки("5a5960a3-121e-4da1-8437-130b3cbc55c6","Коробка (многооборотная) из Общего фонда транспортировочного оборудования ЕС, Еврокоробка");
 ГМ.НайтиФормуУпаковки("ff3bfc50-0b9f-47cc-ada2-ac40a4a18cc0","Коробка деревянная из естественной древесины обыкновенная");
 ГМ.НайтиФормуУпаковки("fddc5698-8738-460f-b603-f49c7053b473","Коробка деревянная из естественной древесины с плотно пригнанными стенками");
 ГМ.НайтиФормуУпаковки("77b8f79a-6a69-4b4f-b0b2-a8a9f0f4ca12","Коробка для жидкостей");
 ГМ.НайтиФормуУпаковки("9f0f9e11-cce0-4484-9a50-bc4fed7ee1e9","Коробка из древесного материала");
 ГМ.НайтиФормуУпаковки("89f4e420-504e-4b2e-9291-ae483d7e9bdd","Коробка из естественной древесины");
 ГМ.НайтиФормуУпаковки("8b1ffe26-1485-477f-8d2d-8050397beab2","Коробка из твердой пластмассы");
 ГМ.НайтиФормуУпаковки("aa308c04-0fe0-4a87-ab8c-7527b3f261f4","Коробка из фибрового картона");
 ГМ.НайтиФормуУпаковки("56e38905-209b-43cc-ac8f-3657f5ec2bdc","Коробка, алюминиевая");
 ГМ.НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
 ГМ.НайтиФормуУпаковки("50c21cb9-3e09-4cc7-a30f-c724d248e996","Коробка, пенопластовая");
 ГМ.НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");
 ГМ.НайтиФормуУпаковки("9c0e3d26-e6c5-4b8e-bb47-0a4ecf8867a3","Коробка, стальная");
 ГМ.НайтиФормуУпаковки("2c76df5b-bdf1-4c36-b136-41240961deb0","Коробка, фанерная");
 ГМ.НайтиФормуУпаковки("890d2d2d-9ed5-40a5-8d6f-bad8546bfee4","Кофр");
 ГМ.НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
 ГМ.НайтиФормуУпаковки("3ae14a0a-3970-45ef-bd53-f278e217bf4f","Кувшин, большой");
 ГМ.НайтиФормуУпаковки("548062b8-8f49-4fe2-8e93-d6c5103a9113","Кувшин, маленький");
 ГМ.НайтиФормуУпаковки("5444b894-aa2b-456f-aa27-e1f470568338","Кулек");
 ГМ.НайтиФормуУпаковки("62120ab7-da8c-46f5-8d06-8cb3f9376a13","Лента");
 ГМ.НайтиФормуУпаковки("b9dec3d6-c0d8-4170-8b57-2f79042b9a8d","Лист");
 ГМ.НайтиФормуУпаковки("b883ff05-483d-4e82-be5f-c1b90d004d1c","Лист в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("a2e60b9e-ee4d-47b5-956b-690bda852392","Лист с пластмассовым покрытием");
 ГМ.НайтиФормуУпаковки("d6831ad1-3dc9-48d0-8c92-402db32c4031","Лист, металлический");
 ГМ.НайтиФормуУпаковки("e49e5e21-09f1-4194-b637-655959ce5510","Лист, прокладной");
 ГМ.НайтиФормуУпаковки("3d72e4ec-f771-4c0d-a9b9-452dd7a08406","Лоток");
 ГМ.НайтиФормуУпаковки("ea504ad8-c159-449f-a752-1ab2eecc8fe1","Лоток");
 ГМ.НайтиФормуУпаковки("a5c9db95-0858-401c-a0f8-f1e17f44c156","Лоток с двумя настилами без покрытия деревянный");
 ГМ.НайтиФормуУпаковки("816aecc8-f89d-4bce-add3-bcea3782ebfa","Лоток с двумя настилами без покрытия картонный");
 ГМ.НайтиФормуУпаковки("2834ba2d-8030-4b5d-8812-186ff267f89c","Лоток с двумя настилами без покрытия пластмассовый");
 ГМ.НайтиФормуУпаковки("d5122def-d46e-4989-b845-9ed0754c2a07","Лоток с одним настилом без покрытия деревянный");
 ГМ.НайтиФормуУпаковки("b6b93b6c-286a-4c49-b646-bef408d4cf8b","Лоток с одним настилом без покрытия картонный");
 ГМ.НайтиФормуУпаковки("3614ce14-9970-453c-81df-9645c4c5fe2c","Лоток с одним настилом без покрытия пластмассовый");
 ГМ.НайтиФормуУпаковки("9c27dc4c-875d-4de5-af1f-d6d066e0d88f","Лоток с одним настилом без покрытия полистироловый");
 ГМ.НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
 ГМ.НайтиФормуУпаковки("c8bc51d4-de57-44ee-9492-85360eada3a5","Мешок");
 ГМ.НайтиФормуУпаковки("803b1dd4-ea8b-464e-9f7e-1bfa573c90bc","Мешок (куль)");
 ГМ.НайтиФормуУпаковки("a71f0123-63c4-440b-bce8-eb46d7a854e2","Мешок (куль) многослойный");
 ГМ.НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
 ГМ.НайтиФормуУпаковки("933312a8-dc11-43ee-9daa-abb240bf9e3f","Мешок большой для крупноразмерных навалочных грузов");
 ГМ.НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
 ГМ.НайтиФормуУпаковки("9f15aaba-d9e1-43ea-8cc7-0f0a29ed7be8","Мешок бумажный многослойный влагонепроницаемый");
 ГМ.НайтиФормуУпаковки("87da1e8c-2d92-4de6-8448-6ab233f3847e","Мешок из мешковины");
 ГМ.НайтиФормуУпаковки("5080bd27-e2b5-4c27-9cb0-7004109f362f","Мешок из полимерной пленки");
 ГМ.НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок из полимерной ткани");
 ГМ.НайтиФормуУпаковки("c088e3b0-4d1f-4079-8ce3-eca7486da24f","Мешок из полимерной ткани без внутреннего покрытия/вкладыша");
 ГМ.НайтиФормуУпаковки("8d2b467f-d19a-49ad-9d4d-9769fc8adb68","Мешок из полимерной ткани влагонепроницаемый");
 ГМ.НайтиФормуУпаковки("c311b4f0-1f83-47ff-b5eb-085aa296a443","Мешок из полимерной ткани, плотный");
 ГМ.НайтиФормуУпаковки("f8296670-1b9b-42fa-9e29-76dc5ba0a8c0","Мешок текстильный");
 ГМ.НайтиФормуУпаковки("e50c3c66-a104-46d2-bf1c-b1fb6f649698","Мешок текстильный без внутреннего покрытия/вкладыша");
 ГМ.НайтиФормуУпаковки("84b62344-fe4f-4585-bdf2-efb3bc68d982","Мешок текстильный влагонепроницаемый");
 ГМ.НайтиФормуУпаковки("c97033bd-2cf6-4029-a570-0a59b238e68b","Мешок текстильный плотный");
 ГМ.НайтиФормуУпаковки("8bb62b02-1b8b-4d1e-8886-93c9484fa5c2","Мешок, большой");
 ГМ.НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
 ГМ.НайтиФормуУпаковки("fdbf9ad8-68d8-49ee-814f-b7d76d806545","Мешок, гибкий контейнер");
 ГМ.НайтиФормуУпаковки("198ddc36-88da-4659-a5a6-d9acb8416d9d","Мешок, джутовый");
 ГМ.НайтиФормуУпаковки("501e2c46-d364-44f5-9f7f-c9697115e4fd","Мешок, пластмассовый");
 ГМ.НайтиФормуУпаковки("e806470b-dcf2-447e-8394-b4144b9138df","Мешок, рогожный");
 ГМ.НайтиФормуУпаковки("577431f6-7f08-4f20-af71-7ede3ac2a564","Мягкий мешок, Гибкая цистерна");
 ГМ.НайтиФормуУпаковки("d2aeda76-b593-42c6-b6b0-dc1c8338dc54","Набор");
 ГМ.НайтиФормуУпаковки("3050ca0a-7e39-4cd4-a762-253b981bad21","Навалом металлолом");
 ГМ.НайтиФормуУпаковки("a521f8b3-eeeb-4027-941c-45928d0ecb16","Наливом газ (при 1031 мБар и 15°C)");
 ГМ.НайтиФормуУпаковки("791bd3df-24eb-466f-b575-57d9dd1f95b7","Наливом газ сжиженный (при температуре/давлении, отличающихся от нормальных)");
 ГМ.НайтиФормуУпаковки("22f90a6e-6872-4bd5-a143-063761da6e1a","Наливом жидкость");
 ГМ.НайтиФормуУпаковки("f8ca4252-9ca3-45bd-9a95-8b6a5b538208","Насыпью твердые гранулированные частицы (гранулы)");
 ГМ.НайтиФормуУпаковки("df053993-cf00-43c9-97ea-4c2fa0d07f96","Насыпью твердые крупные частицы (мелкие куски)");
 ГМ.НайтиФормуУпаковки("efb4b760-611d-4f20-80a8-273c315f4db0","Насыпью твердые мелкие частицы (порошки)");
 ГМ.НайтиФормуУпаковки("0e254eeb-d882-425d-85cf-ae68b8e50980","Нет сведений");
 ГМ.НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный или нерасфасованный");
 ГМ.НайтиФормуУпаковки("3fd40265-127d-4fc6-9999-1cdf62f25faf","Неупакованный или нерасфасованный многоместный груз");
 ГМ.НайтиФормуУпаковки("2def57e9-6280-4d7d-8765-840aa86e45e1","Неупакованный или нерасфасованный одноместный груз");
 ГМ.НайтиФормуУпаковки("ed9473f1-647c-4dfc-8ac2-3cba09217165","Октабин");
 ГМ.НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
 ГМ.НайтиФормуУпаковки("cd449f46-29f4-42af-8d36-046f0954ae63","Пакет (мешочек)");
 ГМ.НайтиФормуУпаковки("f0b0ec9b-8341-4e95-bc0e-80898be598cb","Пакет (пачка/связка)");
 ГМ.НайтиФормуУпаковки("6fddb358-43dd-4030-a1a7-a1a3c8c489ad","Пакет бумажный многослойный");
 ГМ.НайтиФормуУпаковки("cf45058e-1f10-42fa-ae97-b2afefac9489","Пакетик");
 ГМ.НайтиФормуУпаковки("63c5ba04-a314-4d41-9a0f-d328fba0144a","Пачка (пакет/связка)");
 ГМ.НайтиФормуУпаковки("aeba3537-a7ed-4c11-8cfc-a05de5280f73","Пачка деревянная");
 ГМ.НайтиФормуУпаковки("240ef107-fad5-4fca-bad1-ae65ab388ac6","Плита");
 ГМ.НайтиФормуУпаковки("4b2de153-2c3e-499e-91f8-a7ce1926157a","Плиты в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("a8e05c09-1c89-46a8-8362-b2388f820fdb","По взаимному определению");
 ГМ.НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 ГМ.НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 ГМ.НайтиФормуУпаковки("83ee9a1e-5c1c-438b-bb63-48ed654e63ef","Поддон 100 x 110 см");
 ГМ.НайтиФормуУпаковки("280069cf-3cff-4cb3-a96d-5632944e3f9c","Поддон в термоусадочной пленке");
 ГМ.НайтиФормуУпаковки("d520e4b3-dd9b-4f34-9148-ccac220b9c84","Поддон деревянный");
 ГМ.НайтиФормуУпаковки("82286818-b97d-42ef-b5e2-d1a1ac1c18cf","Поддон модульный с обечайкой 80 x 100 см");
 ГМ.НайтиФормуУпаковки("d1d65e12-85c6-4492-8407-de44d792ac1f","Поддон модульный с обечайкой 80 x 60 см");
 ГМ.НайтиФормуУпаковки("d79600b3-7498-4a9b-a873-d58fce2a667d","Поддон модульный с обечайкой 80 х 120 см");
 ГМ.НайтиФормуУпаковки("d9d55e79-0ba6-4c11-9761-0e10dc1c6c8e","Поддон, ящичный");
 ГМ.НайтиФормуУпаковки("81b74091-f9db-436f-b6a9-2438f3fbba32","Прут");
 ГМ.НайтиФормуУпаковки("cfc437d8-9bfe-4d56-8d0e-4f35e5ae3af6","Прут в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("c91b91dc-6dff-49f6-90eb-19824f81b675","Пульверизатор");
 ГМ.НайтиФормуУпаковки("770d2025-1d5e-463a-82bc-ce7bceb3cc90","Рама");
 ГМ.НайтиФормуУпаковки("2d523fde-44a2-4c21-891b-4bccdcb1a33e","Рулон (обивочного или настилочного материала)");
 ГМ.НайтиФормуУпаковки("f65e0788-1ba1-46f5-b677-d7590cc6c745","Рулон (полосового материала)");
 ГМ.НайтиФормуУпаковки("07aa7b0e-2a80-45ba-b3bd-6060eef8376b","Связка");
 ГМ.НайтиФормуУпаковки("ed7372ee-8b55-4e69-aa90-956a68b836ae","Сетка");
 ГМ.НайтиФормуУпаковки("5f3d0b50-196e-498d-8994-7dfd1d9661cc","Сетка типа используемой для овощей или фруктов");
 ГМ.НайтиФормуУпаковки("fe9cc400-101e-4dee-a90f-705c71bb560e","Сетка трубчатая пластмассовая");
 ГМ.НайтиФормуУпаковки("1943c156-b96c-4b64-8935-dfd11e95d495","Сетка трубчатая текстильная");
 ГМ.НайтиФормуУпаковки("29f1456b-e328-4f1b-b855-41eda829a9e1","Слитки в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("c954a839-e145-40f0-8945-de8e4faad748","Слиток");
 ГМ.НайтиФормуУпаковки("000000f8-8e27-4cb0-9e34-6d99fd90d7df","Сляб");
 ГМ.НайтиФормуУпаковки("322566af-9e46-4f63-bf22-041d4d2d9c58","Сосуд с пластмассовым покрытием");
 ГМ.НайтиФормуУпаковки("bc592630-266f-425c-be8b-911425c04ccf","Сосуд, бумажный");
 ГМ.НайтиФормуУпаковки("a7a51764-3c6d-4dec-997d-c5b08d8e2d74","Сосуд, деревянный");
 ГМ.НайтиФормуУпаковки("0509b85d-01ca-4a62-bc40-283eff6ead2d","Сосуд, металлический");
 ГМ.НайтиФормуУпаковки("876203e4-1352-455a-8c97-92c3460acc3a","Сосуд, пластмассовый");
 ГМ.НайтиФормуУпаковки("251a4096-c3d6-4b0c-8534-65b31d41f633","Сосуд, стеклянный");
 ГМ.НайтиФормуУпаковки("ef542239-f46a-4552-a332-db330f73b646","Сосуд, фибровый");
 ГМ.НайтиФормуУпаковки("6bcddbae-2d7b-455c-83b3-6a65731d4e9f","Спичечный коробок");
 ГМ.НайтиФормуУпаковки("2f2ba5e2-c9ab-41af-83d8-592f65c01db4","Стеллаж");
 ГМ.НайтиФормуУпаковки("2d3b2408-d028-42e1-bc72-941b7fa149b5","Стойка");
 ГМ.НайтиФормуУпаковки("28f26068-5294-4c8a-b409-c0a7ae10efd9","Стойка, вешалка для одежды");
 ГМ.НайтиФормуУпаковки("ed6ec9a4-fb93-420a-9e1d-884aa58849c4","Сундук");
 ГМ.НайтиФормуУпаковки("bf12e4f9-56be-4b62-a0d6-22f01585db25","Сундук, дорожный");
 ГМ.НайтиФормуУпаковки("022887ce-8f39-4b81-b26e-785f114c7ac7","Сундук, морской");
 ГМ.НайтиФормуУпаковки("dbff7b51-2571-451e-bf15-66e2ceed2fcb","Сундучок");
 ГМ.НайтиФормуУпаковки("730968d5-30e1-4cc8-b413-d5997e8898a5","Таблетка");
 ГМ.НайтиФормуУпаковки("7c585ad5-34f3-4975-a0aa-a78229e71808","Труба");
 ГМ.НайтиФормуУпаковки("f5144819-a94a-486d-91d7-eb38a074c6c1","Труба в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("06eb9e3a-d6a8-49c3-809a-b4150b90e210","Трубка или туба");
 ГМ.НайтиФормуУпаковки("54d1cc31-f51c-4e2a-9230-009c57aaa517","Трубка или туба в пакете/пачке/связке");
 ГМ.НайтиФормуУпаковки("0c009153-57e0-4dfa-8e5f-ece82ae4dfef","Трубка или туба с насадкой");
 ГМ.НайтиФормуУпаковки("6858e1ff-229f-43e0-9b3b-dd6ac0b41485","Трубка или туба, складывающаяся");
 ГМ.НайтиФормуУпаковки("eb23a947-4fd9-46e6-8a6f-f258433500e7","Упаковка");
 ГМ.НайтиФормуУпаковки("7ca4b4f3-fcac-4c00-8d7a-b258acaa97f0","Упаковка в оберточной бумаге");
 ГМ.НайтиФормуУпаковки("b5dd6d4d-b99e-4245-8a92-abc119e1889f","Упаковка демонстрационная деревянная");
 ГМ.НайтиФормуУпаковки("67129e5f-36d2-4397-8122-0c18747d2344","Упаковка демонстрационная картонная");
 ГМ.НайтиФормуУпаковки("add23067-88c7-4cc0-a251-8c67953d00ce","Упаковка демонстрационная металлическая");
 ГМ.НайтиФормуУпаковки("dfe5cf21-dbc5-4f51-b7fd-ad45259f9677","Упаковка демонстрационная пластмассовая");
 ГМ.НайтиФормуУпаковки("c2645eda-085d-4ae7-bfc2-641fc380ebae","Упаковка картонная с отверстиями для бутылок");
 ГМ.НайтиФормуУпаковки("9b0b180a-7cbb-4d9a-ba41-fd08b0eae3ba","Упаковка, выпрессованная");
 ГМ.НайтиФормуУпаковки("ec874c34-8d51-4e04-bd2c-9ec9642d1e0e","Упаковка, выставочная");
 ГМ.НайтиФормуУпаковки("a283d481-0a41-4d0a-9c38-e386caac0d70","Флакон");
 ГМ.НайтиФормуУпаковки("2ca9172d-edad-4d6f-a4b8-e4fbaae098cb","Фляга");
 ГМ.НайтиФормуУпаковки("07c59e7c-4a8c-4035-8048-2847491c88ea","Цилиндр");
 ГМ.НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
 ГМ.НайтиФормуУпаковки("a5e4fb2f-f40b-40ab-bd2d-f6ddabbd4460","Цистерна, прямоугольная");
 ГМ.НайтиФормуУпаковки("6fd54b8c-d35a-4655-b2f2-2491429b0931","Цистерна, цилиндрическая");
 ГМ.НайтиФормуУпаковки("59eac884-a3ee-4c87-86ef-2508d1328ee6","Чайная коробка");
 ГМ.НайтиФормуУпаковки("6eb46a7f-f1c0-49fd-b38c-47c8177aa9e1","Чан");
 ГМ.НайтиФормуУпаковки("bfbecab2-acff-4791-8f4f-b03d435d00c8","Чаша");
 ГМ.НайтиФормуУпаковки("8f4c7cbd-7d4a-48d6-873f-9f4a37bd576c","Чемодан");
 ГМ.НайтиФормуУпаковки("354aee98-06a3-4780-bc9a-00a57edd8ca7","Чехол");
 ГМ.НайтиФормуУпаковки("62f322c4-ce6d-4584-ba3f-4c771406f54d","Шар");
 ГМ.НайтиФормуУпаковки("0bf57833-4b9d-4d99-96a3-53c7263e01e6","Шина");
 ГМ.НайтиФормуУпаковки("dd7b8b5b-fcf3-46bf-9955-e2c5f9cc25f6","Шпиндель");
 ГМ.НайтиФормуУпаковки("969bfad0-be8f-43fe-84d8-32ebfe32d37d","Шпулька");
 ГМ.НайтиФормуУпаковки("25b9eab3-0f9f-42c1-912b-10f78bc63901","Штабель");
 ГМ.НайтиФормуУпаковки("6090531d-d038-4f6c-a8df-77ba92267ec4","Штука");
 ГМ.НайтиФормуУпаковки("bd8a4719-4595-4e82-a2e6-9ea20afcbf6e","Ящик");
 ГМ.НайтиФормуУпаковки("7c29a864-e469-4c64-89e7-153000939d61","Ящик");
 ГМ.НайтиФормуУпаковки("563fadd5-faa2-4d28-9139-1f23e08ae0af","Ящик автомобильный");
 ГМ.НайтиФормуУпаковки("61079f21-ef62-44bc-97a7-817029f4d251","Ящик деревянный");
 ГМ.НайтиФормуУпаковки("3d01bd9f-6629-4ec1-9ebe-532d82379a14","Ящик деревянный");
 ГМ.НайтиФормуУпаковки("d8f7a02c-5076-41a2-9258-cca3427993b4","Ящик металлический");
 ГМ.НайтиФормуУпаковки("668f1a9f-3b4c-496a-8c01-c6d1bd87d917","Ящик решетчатый (или обрешетка) мелкий");
 ГМ.НайтиФормуУпаковки("aabbf190-ba1f-4611-8a97-6ce660a1dbc3","Ящик решетчатый (или обрешетка) многослойный деревянный");
 ГМ.НайтиФормуУпаковки("f1a52766-b434-4e89-8440-60ba8df518c3","Ящик решетчатый (или обрешетка) многослойный картонный");
 ГМ.НайтиФормуУпаковки("5fc55705-10dd-4071-a5ec-bd2337e98b95","Ящик решетчатый (или обрешетка) многослойный пластмассовый");
 ГМ.НайтиФормуУпаковки("c1444369-7a47-4e53-8e62-c33c290d73c2","Ящик решетчатый (или обрешетка) рамный");
 ГМ.НайтиФормуУпаковки("fe47d256-3d2b-4460-87e3-349ee65f6ac0","Ящик решетчатый для бутылок");
 ГМ.НайтиФормуУпаковки("e879ae24-cac7-4dd1-a0e5-1d433b3493ab","Ящик решетчатый для массовых грузов деревянный");
 ГМ.НайтиФормуУпаковки("ebf8776f-0e3d-4aff-bc64-28fb6e93a6fb","Ящик решетчатый для массовых грузов картонный");
 ГМ.НайтиФормуУпаковки("7c4ea86f-477d-499e-b9b5-281c8d7cb2a5","Ящик решетчатый для массовых грузов пластмассовый");
 ГМ.НайтиФормуУпаковки("dcf6eeb2-a0fd-4f1c-83db-7a85354a7c84","Ящик решетчатый для молока");
 ГМ.НайтиФормуУпаковки("9e2b9bfb-8f54-4a66-ad38-d650ca479e44","Ящик решетчатый для пива");
 ГМ.НайтиФормуУпаковки("3ea227b5-df09-40c2-b802-8abd1427c73e","Ящик решетчатый для фруктов");
 ГМ.НайтиФормуУпаковки("93266aa3-4642-4162-8155-01851a5c0811","Ящик с поддоном");
 ГМ.НайтиФормуУпаковки("a106dd9b-f9ee-45d6-a4f7-d8c18a1c53ea","Ящик с поддоном деревянный");
 ГМ.НайтиФормуУпаковки("dbb7a1d0-aa1f-4141-90e2-1db559dd20f7","Ящик с поддоном картонный");
 ГМ.НайтиФормуУпаковки("4ad07608-39ee-4991-baac-9cd2bdb5b2b0","Ящик с поддоном металлический");
 ГМ.НайтиФормуУпаковки("215592ec-b08d-401b-800d-d36bda9ba0b5","Ящик с поддоном пластмассовый");
 ГМ.НайтиФормуУпаковки("a451a297-b510-48fc-8a31-a41e311a0d82","Ящик, изотермический");
 ГМ.НайтиФормуУпаковки("5bca0d26-c06d-4fbd-a75a-39b098f7a5d8","Ящик, каркасный");
 ГМ.НайтиФормуУпаковки("e2437340-c529-4655-9774-c61054d429a5","Ящик, решетчатый (или обрешетка)");
 ГМ.НайтиФормуУпаковки("a4992438-8d0c-45b2-9ffd-669dff708417","Ящик, стальной");

КонецФункции


// ========================================================================
Процедура ПриОткрытии()

	ИмяФайла="";
	КаталогОбработки="";

	РасположениеФайла(КаталогОбработки, ИмяФайла);

   //{ Глобальный модуль + Интеграционный модуль для переопределения функций, плюс несколько базовых функций
    глМеркурийИнтеграция 		= СоздатьОбъект("МеркурийИнтеграция");

    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
    ГМ.Инициализация(Контекст);
	//ГМ.ЗагрузитьПараметры();
    ГМ.ЗагрузитьПараметрыВФорму(Контекст);

    //Переопределение функций, если они определены в модуле
    глМеркурийИнтеграция.Инициализация(ГМ);

	// Глобавльный модуль Ветис.2.0
	ГМ2 = СоздатьОбъект("Меркурий_ГлобальныйМодуль2");
	ГМ2.Инициализация(ГМ);
	//}

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Партии");
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты");
	Форма.Закладки.ДобавитьЗначение("ВСД");
	Форма.Закладки.ДобавитьЗначение("ВСД_2");
	Форма.Закладки.ДобавитьЗначение("Параметры");

	Форма.ИспользоватьСлой("Основной, Партии");

	//{ оставлено для совместимости с предыдущими версиями, в дальнейшем - удалим
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда

		Команда = Парам.Получить("Команда");

		Если Команда="ОтправитьВсдИсходящие" Тогда

			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД исходящие за период "+ПериодСтр(НачДата, КонДата));

			СписокВСД = Парам.Получить("СписокВСД");
			ГМ.ОтправитьВсе_ВСД_Исходящий(СписокВСД, НачДата, КонДата);

			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдТранзакции" Тогда

			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда
				КонДата = ТекущаяДата();
			КонецЕсли;
			Сообщить("отправляются ВСД транзакции за период "+ПериодСтр(НачДата, КонДата));

			СписокВСД = Парам.Получить("СписокВСД");
			ГМ.ОтправитьВсе_ВСД_Транзакция(СписокВСД, НачДата, КонДата);

			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ОтправитьВсдПроизводство" Тогда

			СписокВСД = Парам.Получить("СписокВСД");
			НачДата = Парам.Получить("НачДата");
			КонДата = Парам.Получить("КонДата");
			Если ПустоеЗначение(НачДата)=1 Тогда
				НачДата = ТекущаяДата();
			КонецЕсли;
			Если ПустоеЗначение(КонДата)=1 Тогда
				КонДата = ТекущаяДата();
			КонецЕсли;

			ГМ.ОтправитьВсе_ВСД_Производство(СписокВСД, НачДата, КонДата);

			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ПолучитьПартии" Тогда
			Состояние("Меркурий: получение партий...");
			ГМ.ПолучитьПартии();
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Команда="ЗагрузитьПлощадки" Тогда

			выбХС = Парам.Получить("ХозСубъект");
			Сообщить("загрузка площадок "+ выбХС);

			ГМ.ХС_ПолучитьGuid(ВыбХС);

			Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
			Спр.НайтиЭлемент(ВыбХС);

			ГМ.ЗагрузитьПлощадки(Спр.ТекущийЭлемент());

			СтатусВозврата(0);
			Возврат;

		КонецЕсли;
	Иначе
		//Открыта без параметров
		попытка
		стр = "";
		к = ГМ.ПараметрыФирм.ПолучитьЗначение(1,стр);
		Если Пустоезначение(стр) = 0 Тогда
			ВыбФирма = ЗначениеИзСтрокиВнутр(стр);
		КонецЕсли;
		Исключение	КонецПопытки;
	КонецЕсли;
	//}

КонецПроцедуры

Функция МаршрутСледования_из_XML(Routelist) Экспорт
    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
	//ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТЗточкиМаршрута = ГМ2.СоздатьТзМаршрутСледования();

	//Попытка
	    Для l1 = 0 По Routelist.length - 1 Цикл
			Узел = Routelist.item(l1);
			ТЗточкиМаршрута.НоваяСтрока();
            //Попытка ТЗточкиМаршрута.UUID					 = 		Узел.selectSingleNode("uuid").text; Исключение КонецПопытки;
            ТЗточкиМаршрута.НомерТочки	= Узел.selectSingleNode("sqnId").text;
			//Площадка_GUID = Узел.selectSingleNode("enterprise").selectSingleNode("GUID").text;
			Площадка_GUID = Узел.selectSingleNode("enterprise").selectSingleNode("GUIDtest").text;
			Попытка ТЗточкиМаршрута.ВыбПлощадка	= ГМ.НайтиПлощадку( Площадка_GUID ); Исключение КонецПопытки;
			//Попытка ТЗточкиМаршрута.ПредприятиеНаименование	 =  	Узел.selectSingleNode("vd:enterprise").selectSingleNode("dt:name").text; Исключение КонецПопытки;
            ТЗточкиМаршрута.Перегрузка	= ?(Узел.selectSingleNode("transshipment").text = "true",1,0);
            ТЗточкиМаршрута.ТипТранспорта			 = 		Число(Узел.selectSingleNode("nextTransport").selectSingleNode("transportType").text);

			Если ТЗточкиМаршрута.ТипТранспорта = 1 Тогда
				Попытка ТЗточкиМаршрута.номеравто 		= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("vehicleNumber").text; Исключение КонецПопытки;
				Попытка ТЗточкиМаршрута.номерПрицепа 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("trailerNumber").text; Исключение КонецПопытки;;
				Попытка ТЗточкиМаршрута.номерКонтейнера = Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("containerNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 2 Тогда
				Попытка ТЗточкиМаршрута.номерВагона 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("wagonNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 3 Тогда
				Попытка ТЗточкиМаршрута.НомерАвиарейса 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("flightNumber").text; Исключение КонецПопытки;
			Иначеесли (ТЗточкиМаршрута.ТипТранспорта = 4) или (ТЗточкиМаршрута.ТипТранспорта = 5) или (ТЗточкиМаршрута.ТипТранспорта = 6) Тогда
				Попытка ТЗточкиМаршрута.НазваниеСудна 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("shipName").text; Исключение КонецПопытки;
//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;

			КонецЕсли;
            ТЗточкиМаршрута.НомерТС = СокрЛП(ТЗточкиМаршрута.номеравто) + СокрЛП(ТЗточкиМаршрута.номерВагона) + СокрЛП(ТЗточкиМаршрута.НомерАвиарейса)+ СокрЛП(ТЗточкиМаршрута.НазваниеСудна);; //Что-то тут не так
		КонецЦикла;
	//Исключение КонецПопытки;

	ТЗточкиМаршрута.Сортировать("+НомерТочки");

	Если ТЗточкиМаршрута.КоличествоСтрок()>0 Тогда
	    Возврат (ТЗточкиМаршрута);
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

//<issueDate>2018-08-09T00:00:00</issueDate>
Функция ДатаСтрока( ДатаСтр )
	год = лев(ДатаСтр,4);
	мес = сред(ДатаСтр,6,2);
	дат = сред(ДатаСтр,9,2);

	Возврат Дата(год, мес, дат);

КонецФункции

Процедура ЗагрузитьНомераАвто( ИмяФайла )
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);
	//objDom.setProperty("SelectionNamespaces", "
	//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	//	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	//	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	//	|xmlns:default='http://www.w3.org/2001/XMLSchema'
	//	|" );

	List = objDom.selectSingleNode("waybills").selectNodes("waybill");
	Для i1 = 0 По List.length - 1 Цикл
        waybill=List.item(i1);
		НомерДок = waybill.selectSingleNode("issueNumber").text;
		ДатаДок = ДатаСтрока( waybill.selectSingleNode("issueDate").text );
		Сообщить("№ "+НомерДок+" от "+ДатаДок);
		МаршрутСледования = МаршрутСледования_из_XML( waybill.selectSingleNode("shipmentRoute").selectNodes("routePoint"));
		МаршрутСледования.ВыбратьСтроку();
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьНомерАвто()

	рез = ГМ.Компонента.GetAvtoNumber("123", ТекущаяДата());
	Сообщить("1"+рез);

	//рез = ГМ.Компонента.GetAvtoNumber( "",  );
	//Сообщить("2 "+рез);

КонецПроцедуры


НачДата = ТекущаяДата();
КонДата = НачДата;

productType = 1; //мясо

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;

тзУсловияПеревозки.НоваяКолонка("Пометка");
тзУсловияПеревозки.НоваяКолонка("ВидПродукции");
тзУсловияПеревозки.НоваяКолонка("Решение");
тзУсловияПеревозки.НоваяКолонка("Название");
тзУсловияПеревозки.НоваяКолонка("UUID");
тзУсловияПеревозки.НоваяКолонка("GUID");
тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");