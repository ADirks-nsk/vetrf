////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем Отправитель_ХозСубъект, Отправитель_Площадка, ДокОснование;
Перем ТаблПоле, ТЗЭлементы, ТаблПодбора, ТЗПодбора;

Перем КонтекстВызывающего; 	// Входной Параметр - Контекст ВСД2_транзакция
Перем ТаблПодобрано, тзРезультирующая; 	// переносимая в тч документа результирующая таблица  
Перем оПривязки; 			//:Меркурий.Привязки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//                          

//******************************************************************************
//  глФРМКоличество(Знач ЧислЗнач,Единица="", РаздТриад=" ") 
//
// Параметры:
//  ЧислЗнач  - число, которое мы хотим форматировать,
//  Единица   - единица измерения,
//	РаздТриад - разделитель триад, по умолчанию - пробел.
//
// Возвращаемое значение: 
//  Отформатированная строка
//
// Описание:
//  Это процедура стандартного для данной конфигурации форматирования количества.
//
Функция глФРМКоличество(Знач ЧислЗнач,Единица="", РаздТриад=" ", Коэфф = 0, Точность = 3) Экспорт

	Если ПустоеЗначение(Единица)=0 Тогда
		Если Коэфф = 0 Тогда
			Если ТипЗначенияСтр(Единица) = "Справочник" Тогда
				ЧислЗнач = ?(Единица.Коэффициент=0,0,ЧислЗнач / Единица.Коэффициент);
			КонецЕсли;
		Иначе
			ЧислЗнач = ЧислЗнач / Коэфф;
		КонецЕсли;
	КонецЕсли;
	Стр=СокрЛ(Формат(ЧислЗнач,"Ч015."+Точность+"." +  РаздТриад));
	Возврат Стр;

КонецФункции //глФРМКоличество() 

//******************************************************************************
Процедура ТПСоздатьКолонкиПоИсточнику(тпСсылка, тзСсылка, фНомерСтроки=0) Экспорт
Перем Заголовок, Ширина, ФорматнаяСтрока, Положение;
	Если фНомерСтроки=1 Тогда
		НоваяКолонка=тпСсылка.Колонки.Добавить("НомерСтроки");
		НоваяКолонка.Заголовок="№ строки";
		НоваяКолонка.Данные="НомерСтроки";
		НоваяКолонка.Ширина=30;
	КонецЕсли;
	Для ъ=1 По тзСсылка.КоличествоКолонок() Цикл
		идКолонки=тзСсылка.ПолучитьПараметрыКолонки(ъ,,,, Заголовок, Ширина, ФорматнаяСтрока, Положение);
		Если тзСсылка.ВидимостьКолонки(идКолонки)=0 Тогда Продолжить; КонецЕсли;
		НоваяКолонка=тпСсылка.Колонки.Добавить(идКолонки);
		НоваяКолонка.Заголовок=Заголовок;
		НоваяКолонка.Данные=идКолонки;
		НоваяКолонка.ГоризонтальноеВыравнивание=Положение;
		НоваяКолонка.Ширина=?(Ширина>0, Ширина, 15)*6.2;
		НоваяКолонка.Формат=ФорматнаяСтрока;
		Если Ширина = 0 Тогда НоваяКолонка.Видимость = 0; КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//******************************************************************************
Функция ТабличноеПолеСоздать(Конт, ЭлементДиалога, ОбъектИсточник, фВидимость=1, фНомерСтроки=0, КонтекстКласса=0) Экспорт
	ОбъектФорма=СоздатьОбъект("Форма");
	ОбъектФорма.УстановитьФорму(Конт.Форма);
	Если ПустоеЗначение(КонтекстКласса)=1 Тогда
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления("ТабличноеПоле", ЭлементДиалога);

		ОбъектТабличноеПоле.РежимВыделенияСтроки =2;
		ОбъектТабличноеПоле.ЦветФонаВыделения=223322;
		ОбъектТабличноеПоле.SetTextMargins(, 0, , 2);
		ОбъектТабличноеПоле.ЧередованиеЦветовСтрок = 1;
	Иначе	
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления(КонтекстКласса, ЭлементДиалога);
	КонецЕсли;

	Конт.Форма.ПолучитьАтрибут(ЭлементДиалога).Видимость(фВидимость);

	Если ТипЗначенияСтр(ОбъектИсточник)="ТаблицаЗначений" Тогда
		Источник=СоздатьОбъект("VTProvider");
		Источник.УстТаблицуЗначений(ОбъектИсточник);
		ТПСоздатьКолонкиПоИсточнику(ОбъектТабличноеПоле, ОбъектИсточник,фНомерСтроки);
		ОбъектТабличноеПоле.ПоставщикДанных=Источник;
	КонецЕсли;
	Возврат ОбъектТабличноеПоле;
КонецФункции

//******************************************************************************
// при другом названии Реквизита Номенклатура в конфигурации
Процедура ИзменитьИдентКолонкиТЗ(ТЗ,Идент,НовыйИдент)
     ЗначениеИзСтрокиВнутр(СтрЗаменить(ЗначениеВСтрокуВнутр(ТЗ),"},"+Симв(10)+"{"""+Идент+"""","},"+Симв(10)+"{"""+НовыйИдент+""""),ТЗ);
КонецПроцедуры

//******************************************************************************
Процедура СкопироватьСтрокуВТЗ(ТзРез, ТзИсточник)
	ТзРез.НоваяСтрока();
	ТзРез.Номенклатура = ТзИсточник.Номенклатура;
	ТзРез.Продукция_Элемент = ТзИсточник.Продукция_Элемент;
	ТзРез.Количество = ТзИсточник.Количество;
	
	Попытка 
		// Расходная накладная
		ТзРез.Партия = ТзИсточник.Партия;
		ТзРез.НомерПартии = СокрЛП(ТзРез.Партия.НомерПартии);
		ТзРез.Изготовлено = ТзРез.Партия.ДатаИзготовления1;
		ТзРез.СрокГодности = ТзРез.Партия.ДатаСрокГодности1;
		ТзРез.ЕдиницаИзмерения = ТзРез.Партия.ЕдиницаИзмерения;
		ТзРез.Остаток = ТзРез.Партия.Количество;
	Исключение КонецПопытки; 
	
	// С местами и упаковками нужно отдельно поразбираться
	//ТзРез.КоличествоМест = ТзИсточник.КоличествоМест; // нужно считать, и возможно по неск уровням
КонецПроцедуры

//******************************************************************************
// Обработка связанных ТЗ
Процедура ДобавитьВыбранноеВРезультат(ВыбПодбор)
	ВыбПодбор.ВыбратьСтроки();
	Пока ВыбПодбор.ПолучитьСтроку() = 1 Цикл
		СкопироватьСтрокуВТЗ(ТЗРезультирующая, ВыбПодбор);
	КонецЦикла;
КонецПроцедуры

//******************************************************************************
Процедура ВыгрузитВПодбор_УбратьИзРезультата_ПоФильтру(ВыбПродукцияЭлемент)
	ТЗПодбора.УдалитьСтроки();
	ТЗРезультирующая.Сортировать("+Продукция_Элемент");
	стр = 0;
	Пока ТЗРезультирующая.НайтиЗначение(ВыбПродукцияЭлемент,стр,"Продукция_Элемент") = 1 Цикл  
		
		ТЗРезультирующая.ПолучитьСтрокуПоНомеру(стр);
		Если ПустоеЗначение(ТЗРезультирующая.Партия) = 0 Тогда
			СкопироватьСтрокуВТЗ(ТЗПодбора, ТЗРезультирующая);
		КонецЕсли;

		ТЗРезультирующая.УдалитьСтроку(стр);
		стр = 0;
	КонецЦикла; 
	Попытка
		ТаблПодбора.ОбновитьСтроки();
	Исключение
	КонецПопытки;
КонецПроцедуры
     
//******************************************************************************
Процедура ОбновитьЭлементыФормы()  
	Форма.ТекстКоличество.Заголовок(глФРМКоличество(ТЗЭлементы.Количество));
	Форма.ТекстПодобрано.Заголовок(глФРМКоличество(ТЗПодбора.Итог("Количество")));
	Форма.ТекстОстаток.Заголовок(глФРМКоличество(ТЗЭлементы.Недостача));

	Попытка ТаблПоле.ОбновитьСтроки(); Исключение КонецПопытки;
	Попытка ТаблПодбора.ОбновитьСтроки(); Исключение КонецПопытки;
	Попытка ТаблПодобрано.ОбновитьСтроки(); Исключение КонецПопытки;
КонецПроцедуры

//******************************************************************************
Процедура ТаблПолеПриАктивизацииСтроки(ТабличноеПоле)
	                           
	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, ТЗЭлементы);
	Если ПустоеЗначение(ТабличноеПоле.ТекущаяСтрока) = 1  Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВыбранноеВРезультат(ТЗПодбора);
	ВыгрузитВПодбор_УбратьИзРезультата_ПоФильтру(ТЗЭлементы.Продукция_Элемент);

	ТЗЭлементы.Недостача = ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество"); // Запишем в 1 таблицу 
	ТЗЭлементы.Остаток = ТЗПодбора.Итог("Остаток"); // Запишем в 1 таблицу 
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

////******************************************************************************
//Процедура ТаблПодбораПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)
//	ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Остаток");
//	ОбъектЯчейка.УстановитьТекст(глФРМКоличество(ДанныеСтроки.Партия.Количество));//Желтый
////	ОбъектЯчейка.ЦветФона=8454143;//Желтый
//КонецПроцедуры

//******************************************************************************
Процедура ТаблПодбораВыбор(ТабличноеПоле, __стр, Колонка, ТипРегиона)
	Если ТипРегиона =3 Тогда
		ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, ТЗПодбора);

		КодКолонки = Колонка.Данные;
		Если КодКолонки = "Количество" Тогда
			_знач = ТЗПодбора.ПолучитьЗначение(__стр, КодКолонки);
			ТабличноеПоле.РедактироватьЗначение(__стр, Колонка, ТипРегиона, _знач,14,3, "ВыбЗнач", "0x100000");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ТаблПодбораПриРедактированииЗначения(ТабличноеПоле, __стр, Колонка, ТипРегиона, __знач)
	Если ТипРегиона = 3 Тогда
		КодКолонки = Колонка.Данные;

		КолВПартии = ТЗПодбора.Партия.Количество;
		Если __знач > КолВПартии Тогда
			Сообщить("В Партии всего "+КолВПартии,"!");
			__знач = КолВПартии;
		КонецЕсли;
		ТЗПодбора.УстановитьЗначение(__стр, КодКолонки, __знач);

		Если (ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество")) < 0 Тогда
			ТЗПодбора.Количество = ТЗПодбора.Количество + ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество");
		КонецЕсли;
		ТЗЭлементы.Недостача = ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество"); // Запишем в 1 таблицу
		
		ОбновитьЭлементыФормы();
	КонецЕсли;	
КонецПроцедуры

//******************************************************************************
Процедура ТаблПолеПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)
	Если ДанныеСтроки.Остаток < ДанныеСтроки.Количество Тогда
		ОформлениеСтроки.ЦветФона= 8454143;		// Желтый   
	Иначе
		Если ДанныеСтроки.Недостача > 0 Тогда
			ОформлениеСтроки.ЦветТекста = 255;		// Красный
		Иначе
			//ОформлениеСтроки.ЦветТекста = 32768;	// Зеленый
		КонецЕсли;   
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьТекСтроку(ТекСтрокаТЗ)
	ГМ.ПриАктивизацииСтрокиТП(ТаблПоле, ТЗЭлементы);
	ГМ.ПриАктивизацииСтрокиТП(ТаблПодбора, ТЗПодбора); 
	
	Если ТЗПодбора.ТекущаяСтрока() = 0 Тогда Возврат;
	КонецЕсли;                    
	
	ТЗПодбора.УдалитьСтроку(ТЗПодбора.ТекущаяСтрока());
	ТЗЭлементы.Недостача = ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество"); // Запишем в 1 таблицу

	ОбновитьЭлементыФормы();
КонецПроцедуры

Процедура ТзПодбораУдалитьСтроки()
	ГМ.ПриАктивизацииСтрокиТП(ТаблПоле, ТЗЭлементы);

	ТЗПодбора.УдалитьСтроки();
	ТЗЭлементы.Недостача = ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество"); // Запишем в 1 таблицу
	ТЗЭлементы.Остаток = ТЗПодбора.Итог("Остаток"); // Запишем в 1 таблицу

	ОбновитьЭлементыФормы();
КонецПроцедуры

//******************************************************************************
Процедура ПодобратьПартии()
	ГМ.ПриАктивизацииСтрокиТП(ТаблПоле, ТЗЭлементы);
	ГМ.ПриАктивизацииСтрокиТП(ТаблПодбора, ТЗПодбора); 

	Если ТЗЭлементы.ТекущаяСтрока() = 0 Тогда Возврат;
	КонецЕсли;           
	
	Если ТЗПодбора.Итог("Количество") > ТЗЭлементы.Остаток Тогда
		ТЗПодбора.ВыбратьСтроки();
		Пока ТЗПодбора.ПолучитьСтроку() = 1 Цикл
			ТЗПодбора.Количество = Мин(ТЗПодбора.Количество, ТЗПодбора.Остаток);
		КонецЦикла;  
		ОбновитьЭлементыФормы();
	КонецЕсли;
	
	ПодобраноКол = ТЗПодбора.Итог("Количество");
	НужноВсего = ТЗЭлементы.Количество;
	ОсталосьПодобрать = НужноВсего - ПодобраноКол;

	Если (ОсталосьПодобрать <= 0) И (ТЗПодбора.Итог("Остаток")>=ТЗЭлементы.Количество) Тогда
	    Предупреждение("Достаточно"); Возврат;
	КонецЕсли;

	// перечитаем таблицы - м.б. сменилась позиция ТЗЭлементы
	ДобавитьВыбранноеВРезультат(ТЗПодбора);
	ВыгрузитВПодбор_УбратьИзРезультата_ПоФильтру(ТЗЭлементы.Продукция_Элемент);

	Парам = СоздатьОбъект("СписокЗначений");
	Парам.Установить("ВСД_Продукция_Элемент",ТЗЭлементы.Продукция_Элемент);
    Парам.Установить("Площадка",Отправитель_Площадка);
	Парам.Установить("ХозСубъект",Отправитель_ХозСубъект);
	
	ОткрытьПодбор("Справочник.ВСД_Партия", "ФормаСписка",Парам,1);
КонецПроцедуры

Процедура ОбработкаПодбора(ВыбЭлемент,КФ)
	Если ПустоеЗначение(Выбэлемент) = 1 Тогда Возврат;
	КонецЕсли;

	стр = 0;
	Если ТЗПодбора.НайтиЗначение(ВыбЭлемент,стр,"Партия")>0 Тогда
		ТЗПодбора.ТекущаяСтрока(стр);
		Предупреждение("Партия уже выбрана !"); Возврат;
	КонецЕсли;                                
	
    //Проконтролируем еще и наличие партии в Результирующей таблицы
	стр = 0;
	Если ТЗРезультирующая.НайтиЗначение(ВыбЭлемент,стр,"Партия")>0 Тогда
		Предупреждение("Партия уже выбрана!"); Возврат;
	КонецЕсли;                                  
	
	ПодобраноКол = ТЗПодбора.Итог("Количество");

	НужноВсего = ТЗЭлементы.Количество;
	ОсталосьПодобрать = НужноВсего - ПодобраноКол;

	Если ОсталосьПодобрать <= 0 Тогда
	    Предупреждение("Достаточно"); Возврат;
	КонецЕсли;

	Если ВыбЭлемент.Количество <= ОсталосьПодобрать Тогда
	    КолКподбору = ВыбЭлемент.Количество;
	Иначе
		КолКподбору = Мин(ВыбЭлемент.Количество,ОсталосьПодобрать);
	КонецЕсли;            
	
	Если ВвестиЧисло(КолКподбору,"Укажите количество",14,3) = 0 Тогда Возврат;
	КонецЕсли;

	КолКподбору = Мин(КолКподбору,ВыбЭлемент.Количество,ОсталосьПодобрать);

	ТЗПодбора.НоваяСтрока();
	ТЗПодбора.Номенклатура = ТЗЭлементы.Номенклатура;
	ТЗПодбора.Продукция_Элемент = ТЗЭлементы.Продукция_Элемент;
	ТЗПодбора.Партия = ВыбЭлемент;
	ТЗПодбора.НомерПартии = СокрЛП(ВыбЭлемент.НомерПартии);
	ТЗПодбора.Изготовлено = ВыбЭлемент.ДатаИзготовления1;
	ТЗПодбора.СрокГодности = ВыбЭлемент.ДатаСрокГодности1;
	ТЗПодбора.Количество = КолКподбору;
	ТЗПодбора.Остаток = ВыбЭлемент.Количество;
	//ТЗПодбора.КоличествоМест = 0;

	ТЗЭлементы.Недостача = ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество"); // Запишем в 1 таблицу
	ТЗЭлементы.Остаток = ТЗПодбора.Итог("Остаток"); // Запишем в 1 таблицу

	ОбновитьЭлементыФормы();
КонецПроцедуры

//******************************************************************************
// Заполняет данными из документа при открытии обработки или интерактивно
Процедура ЗаполнитьТЗЭлементов(Док)    
	
	ТЗЭлементы.УдалитьСтроки();
	ТЗПодбора.УдалитьСтроки();	
	тзРезультирующая.УдалитьСтроки();
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тз);
    
	Если НЕ(Док.Вид() = "ВСД2_транзакция") Тогда
	    Если НЕ(ГМ.НазваниеРеквизитаНоменклатура() = "Номенклатура") Тогда // в нестандартной конфе ->
	    	ИзменитьИдентКолонкиТЗ(тз,ГМ.НазваниеРеквизитаНоменклатура(),"Номенклатура");
		КонецЕсли;         
		ТЗ.НоваяКолонка("Продукция_Элемент","Справочник.ВСД_Продукция_Элемент",  , ,"Продукция_Элемент",20);
	КонецЕсли;
                      
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл                    
		
		Список_ВСДПродукцияЭлемент = ГМ.ПолучитьСписок_ВСДПродукцияЭлемент_По_Номенклатура(тз.Номенклатура); 
		Если Список_ВСДПродукцияЭлемент.КоличествоСтрок() > 0 Тогда
			Продукция_Элемент = Список_ВСДПродукцияЭлемент.ПолучитьЗначение(1,1);
		КонецЕсли;
		Если ПустоеЗначение(Продукция_Элемент) = 1 Тогда Продолжить;
		КонецЕсли;

		ТЗЭлементы.НоваяСтрока();
		ТЗЭлементы.Номенклатура = тз.Номенклатура;
		ТЗЭлементы.Продукция_Элемент = Продукция_Элемент;
		ТЗЭлементы.Количество = тз.Количество;

		ТЗ.Продукция_Элемент = Продукция_Элемент;

		//Сомнительный момент: в Результат нужно всегда писать
		СкопироватьСтрокуВТЗ(ТЗРезультирующая, тз);
	КонецЦикла;

    ТЗЭлементы.Свернуть("Номенклатура,Продукция_Элемент","Количество,Недостача,Остаток");

    // Подсчитаем недостачу
	ТЗЭлементы.ВыбратьСтроки();
	Пока ТЗЭлементы.ПолучитьСтроку() = 1 Цикл
		ДобавитьВыбранноеВРезультат(ТЗПодбора);
		ВыгрузитВПодбор_УбратьИзРезультата_ПоФильтру(ТЗЭлементы.Продукция_Элемент);

		ТЗЭлементы.Недостача = ТЗЭлементы.Количество - ТЗПодбора.Итог("Количество"); // Запишем в 1 таблицу
		ТЗЭлементы.Остаток = ТЗПодбора.Итог("Остаток"); // Запишем в 1 таблицу
	КонецЦикла;   
	
    ДобавитьВыбранноеВРезультат(ТЗПодбора);
	ТЗПодбора.УдалитьСтроки();

	Попытка ТаблПоле.ОбновитьСтроки(); Исключение КонецПопытки;

КонецПроцедуры

//******************************************************************************
Процедура ПриОткрытии()
	тзРезультирующая = ГМ.СоздатьТзПартий();	
	Форма.ИспользоватьЗакладки(0);

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("Подобрано");
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Общий,Основной");
	
	Парам = Форма.Параметр;
	Если ПустоеЗначение(Парам) = 0 Тогда
		Отправитель_ХозСубъект = Парам.Получить("Отправитель_ХозСубъект");
		Отправитель_Площадка = Парам.Получить("Отправитель_Площадка");
		
		Форма.ТекстХозСубъект.Заголовок(Отправитель_ХозСубъект.Наименование);
		Форма.ТекстПлощадка.Заголовок(Строка(Отправитель_Площадка));

		Если ПустоеЗначение(Парам.Получить("Заголовок")) = 0 Тогда
			Форма.Заголовок(Парам.Получить("Заголовок"));
		КонецЕсли;

		КонтекстВызывающего = Парам.Получить("ТекущийДокумент");  
		
		Попытка ГМ = КонтекстВызывающего.ГМ; Исключение ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль"); КонецПопытки;
			
		ДокОснование = КонтекстВызывающего.ДокОснование;
		Форма.ТекстПолучатель.Заголовок(Строка(КонтекстВызывающего.Получатель_Площадка));
		Форма.ТекстДокОснование.Заголовок(ДокОснование.Вид()+" №"+ДокОснование.НомерДок+" от "+ДокОснование.ДатаДок);
		
	    Если КонтекстВызывающего.КоличествоСтрок() > 0 Тогда
	    	ЗаполнитьТЗЭлементов(КонтекстВызывающего);
		КонецЕсли;

		Если (ПустоеЗначение(КонтекстВызывающего.ДокОснование) = 0) и (ТЗЭлементы.КоличествоСтрок()=0) Тогда
			//Транзакция пустая - попробуем по Реализации
			ЗаполнитьТЗЭлементов(КонтекстВызывающего.ДокОснование);
		КонецЕсли;
	КонецЕсли;
	
	оПривязки=СоздатьОбъект("Меркурий.Привязки");
	оПривязки.УстановитьФорму(Форма);

	Если Форма.МодальныйРежим() = 0 Тогда
	    оПривязки.Привязка("кнЗакрыть,кнОК", "T", "Форма");
		оПривязки.Привязка("ТаблПодбора", "TH", "Форма", "W", "Форма");
	    оПривязки.Привязка("кнУдалить,кнУдалитьВсе,кнПодбор,кнВсеПартии", "T", "ТаблПодбора", "L", "Форма");
		оПривязки.Привязка("РамкаКоличество, ТекстКоличество, РамкаПодобрано, ТекстПодобрано, РамкаОстаток, ТекстОстаток", "T", "Форма", "L", "Форма");
		оПривязки.Привязка("ТаблПоле", "H", "ТаблПодбора", "W", "Форма");
		оПривязки.Привязка("ТаблПодобрано", "H", "Форма", "W", "Форма");
		оПривязки.Привязка("Версия","T","Форма", "L", "Форма");
	КонецЕсли;	      
	
	_Форма=СоздатьОбъект("Форма");
	_Форма.УстановитьФорму(Форма);
КонецПроцедуры      

//******************************************************************************
Процедура ЗаполнитьВсеПартии()
	Если Вопрос("Табличная часть будет очищена!"+РазделительСтрок+"Вы уверены?","Да+Нет") = "Нет" Тогда Возврат;
	КонецЕсли;	

	КонтекстВызывающего.УдалитьСтроки();
	ТЗЭлементы.УдалитьСтроки();
	ТЗРезультирующая.УдалитьСтроки();
	ТЗПодбора.УдалитьСтроки();

	КолвоМакс = 500;
	ВвестиЧисло(КолвоМакс, "Введите колво партий", 10, 0, );

	СпрПартии = СоздатьОбъект("Справочник.ВСД_Партия");
	СпрПартии.ВыбратьЭлементы();
	колво=0;
	Пока СпрПартии.ПолучитьЭлемент()=1 Цикл
		Если (СпрПартии.ПометкаУдаления()=1) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_Площадка <>  Отправитель_площадка) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_ХозСубъект <>  Отправитель_ХозСубъект) Тогда
			Продолжить;
		КонецЕсли;

		колво = колво+1;
		КонтекстВызывающего.НоваяСтрока();
		КонтекстВызывающего.Партия = СпрПартии.ТекущийЭлемент();
		КонтекстВызывающего.Продукция = КонтекстВызывающего.Партия.Продукция;
		КонтекстВызывающего.ВидПродукции = КонтекстВызывающего.Партия.ВидПродукции;
		КонтекстВызывающего.ЕдиницаИзмерения = КонтекстВызывающего.Партия.ЕдиницаИзмерения;
		КонтекстВызывающего.Количество = КонтекстВызывающего.Партия.Количество;
		КонтекстВызывающего.НаименованиеПродукции = КонтекстВызывающего.Партия.НаименованиеПродукции;
		КонтекстВызывающего.Продукция_Элемент = КонтекстВызывающего.Партия.Продукция_Элемент;

		Если колво >= КолвоМакс Тогда Прервать;
		КонецЕсли;
	КонецЦикла;
    ПриОткрытии();

КонецПроцедуры
                  
Процедура ВыполнитьЗапись()

	// Перенесем данные из ТЗРезультирующая в документ
	// Предварительно дополнив ее строками из ТЗПодбор
	ДобавитьВыбранноеВРезультат(ТЗПодбора);

	//Добавим в результат строки с недостачей - чтобы сохранить состав документа
	ТЗЭлементы.ВыбратьСтроки();
	Пока ТЗЭлементы.ПолучитьСтроку() = 1 Цикл
	    Если ТЗЭлементы.Недостача = 0 Тогда Продолжить;
		КонецЕсли;
		ТЗРезультирующая.НоваяСтрока();
		ТЗРезультирующая.Номенклатура = ТЗЭлементы.Номенклатура;
		ТЗРезультирующая.Продукция_Элемент = ТЗЭлементы.Продукция_Элемент;
		ТЗРезультирующая.Количество = ТЗЭлементы.Недостача;
	КонецЦикла;

    ТЗРезультирующая.ВыбратьСтроки();
	Пока ТЗРезультирующая.ПолучитьСтроку() = 1 Цикл
		ГМ.ЗаполнитьСтрокуДокумента(ТЗРезультирующая, ТЗРезультирующая);
	КонецЦикла;

	//Толко после всего вышеуказанного переносить в документ!!!!!!!!
	КонтекстВызывающего.УдалитьСтроки();
	КонтекстВызывающего.ЗагрузитьТабличнуюЧасть(ТЗРезультирующая);
	КонтекстВызывающего.Форма.Обновить(1);
	//ОткрытьФорму(ТекДок);
КонецПроцедуры
	
//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Общий,Основной");
	Иначе
		Форма.ИспользоватьСлой("Общий,Подобрано");
		ОбновитьЭлементыФормы();
	КонецЕсли;     
КонецПроцедуры // ПриВыбореЗакладки()   

//******************************************************************************
Процедура ФормаПриСоздании(_Форма)
	ТаблПоле=ТабличноеПолеСоздать(Контекст, "ТаблПоле", ТЗЭлементы, 1, 0);
	ТаблПодбора=ТабличноеПолеСоздать(Контекст, "ТаблПодбора", ТЗПодбора, 1, 0);
	ТаблПодобрано=ТабличноеПолеСоздать(Контекст, "ТаблПодобрано", тзРезультирующая, 0, 0);
КонецПроцедуры      

//{========================= Список изменений =================
//******************************************************************************
Функция ПоказатьИзмененияВерсии()
	
	ЗапуститьПриложение("https://redmine.kb99.pro/issues/1529#note-17");
	
КонецФункции

//******************************************************************************
Процедура ПриНажатииЛевойКнопки(Сост, х, у, ФСО)
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
	Если ТипЗначенияСтр(Атр) = "АтрибутФормы" Тогда
		Если Атр.Идентификатор = "Версия" Тогда
			ПоказатьИзмененияВерсии();
		ИначеЕсли Атр.Идентификатор = "ТекстДокОснование" Тогда
			ОткрытьФормуМодально(ДокОснование,,1);
		КонецЕсли;  
	КонецЕсли;	
	
КонецПроцедуры
//}===========================================================

//{==================== Привязки ================================
//******************************************************************************
Процедура ПослеОткрытия()
	ГМ._ПослеОткрытия(Контекст);
КонецПроцедуры

//******************************************************************************
Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	ГМ._ПриИзмененииРазмераОкна(Контекст, ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры
//}===========================================================

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
ТЗЭлементы = СоздатьОбъект("ТаблицаЗначений");
ТЗЭлементы.НоваяКолонка("Номенклатура","Справочник.Номенклатура",  , ,"Номенклатура",20);
ТЗЭлементы.НоваяКолонка("Продукция_Элемент","Справочник.ВСД_Продукция_Элемент",  , ,"Продукция_Элемент",20);
ТЗЭлементы.НоваяКолонка("Количество", "Число",14,3,"Количество"     ,10,,2);
ТЗЭлементы.НоваяКолонка("Недостача", "Число",14,3,"Недостача"     ,10,,2);
ТЗЭлементы.НоваяКолонка("Остаток", "Число",14,3,"Остаток"     ,10,,2);

ТЗПодбора = СоздатьОбъект("ТаблицаЗначений");
ТЗПодбора.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
ТЗПодбора.НоваяКолонка("Продукция_Элемент","Справочник.ВСД_Продукция_Элемент");
ТЗПодбора.НоваяКолонка("Партия","Справочник.ВСД_Партия");
ТЗПодбора.НоваяКолонка("Количество", "Число",14,3,"Количество"     ,10,,2);
ТЗПодбора.НоваяКолонка("Остаток", "Число",14,3,"Остаток"     ,10,,2);
ТЗПодбора.НоваяКолонка("Изготовлено",,,,,7);
ТЗПодбора.НоваяКолонка("СрокГодности",,,,"Срок годности",7);
ТЗПодбора.НоваяКолонка("НомерПартии",,,,"Номер партии",7);
ТЗПодбора.НоваяКолонка("ЕдиницаИзмерения","Справочник.ВСД_ЕдиницыИзмерения");
