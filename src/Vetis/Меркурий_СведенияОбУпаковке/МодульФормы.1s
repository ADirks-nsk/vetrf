Перем СзКлассы;
//Перем СтрСведенияОбУпаковке, СЗУровниУпаковки; // Временно содержатся на форме 
//******************************************* 

// Передаваемые /возвращаемые данные
// Преобразовынный в строку СписокЗначений - содержащий Значение - номер транспортного уровня
// СтроковоеПредставление Значения - Преобразованная в строку Таблица Значений,
// содержащая 1 - ФормаУпаковки, 2 - Количество, 3 - Преобразованный в строку СписокЗначений Маркировок Упаковки трансп. уровня (Строка - Class, Значение - значение).

Функция ЗначениеМаркировки()
    рез = "";
	поз = СзМаркировки.ТекущаяСтрока();
	Если ПустоеЗначение(поз) = 1 Тогда
	    Возврат "";
	КонецЕсли;
	Стр = ""; 	
	рез = СзМаркировки.ПолучитьЗначение(поз,Стр);
	Возврат ""+Стр+" "+рез;
КонецФункции

Процедура ДобавитьУровень()
	тстр = СЗНомераУровней.ТекущаяСтрока();
	Если ПустоеЗначение(тстр) = 1 Тогда
	    Возврат;
	КонецЕсли; 
	
	НомерУровня = СзНомераУровней.ПолучитьЗначение(СзНомераУровней.ТекущаяСтрока());
	поз = СЗУровниУпаковки.НайтиЗначение(НомерУровня);
	Если ПустоеЗначение(поз) = 0 Тогда
	    СЗУровниУпаковки.УдалитьЗначение(поз);
	КонецЕсли;
	СЗУровниУпаковки.ДобавитьЗначение(НомерУровня,ЗначениеВСтроку(ТЗУровень));
	СтрСведенияОбУпаковке = ЗначениеВСтроку(СЗУровниУпаковки); //Сразу запишем в рез строку		
КонецПроцедуры

Процедура ОчиститьУровень()
	тстр = СЗНомераУровней.ТекущаяСтрока();
	Если ПустоеЗначение(тстр) = 1 Тогда
	    Возврат;
	КонецЕсли; 
	
	НомерУровня = СзНомераУровней.ПолучитьЗначение(СзНомераУровней.ТекущаяСтрока());
	поз = СЗУровниУпаковки.НайтиЗначение(НомерУровня);
	Если ПустоеЗначение(поз) = 0 Тогда
	    СЗУровниУпаковки.УдалитьЗначение(поз); 
		ТЗУровень.УдалитьСтроки();
		СзМаркировки.УдалитьВсе();
		СтрСведенияОбУпаковке = ЗначениеВСтроку(СЗУровниУпаковки);		
	КонецЕсли;
КонецПроцедуры


// выбор сохраненных данных об уровне упаковки из списка значений
Процедура ПриВыбореУровня()
	тстр = СЗУровниУпаковки.ТекущаяСтрока();
	Если ПустоеЗначение(тстр) = 1 Тогда
	    Возврат;
	КонецЕсли;

	ТЗУровень.УдалитьСтроки();
	СзМаркировки.УдалитьВсе();
	
	Стр = "";
	НомерУровня = СЗУровниУпаковки.ПолучитьЗначение(тстр,Стр);
	тстр = СзНомераУровней.НайтиЗначение(НомерУровня);
	СзНомераУровней.ТекущаяСтрока(тстр);
	
	Если ПустоеЗначение(Стр) = 1 Тогда
		Возврат;
	КонецЕсли;
	ТЗ = ЗначениеИзСтроки(Стр);
	Если ПустоеЗначение(ТЗ) = 1 Тогда
	    Возврат;
	КонецЕсли;
	
	ТЗ.Выгрузить(ТЗУровень);
	ТЗ.ПолучитьСтрокуПоНомеру(1);
	Если ПустоеЗначение(ТЗ.Маркировки)=0 Тогда
		СЗ = ЗначениеИзСтроки(ТЗ.Маркировки);
		СЗ.Выгрузить(СзМаркировки);
	КонецЕсли;
КонецПроцедуры

Процедура ПриВыбореНомераУровня()
	тстр = СЗНомераУровней.ТекущаяСтрока();
	Если ПустоеЗначение(тстр) = 1 Тогда
	    Возврат;
	КонецЕсли; 

	ТЗУровень.УдалитьСтроки();
	СзМаркировки.УдалитьВсе();
	
	НомерУровня = СзНомераУровней.ПолучитьЗначение(СзНомераУровней.ТекущаяСтрока());
	поз = СЗУровниУпаковки.НайтиЗначение(НомерУровня);
	Если ПустоеЗначение(поз) = 1 Тогда
	    Возврат;
	КонецЕсли;
	СЗУровниУпаковки.ТекущаяСтрока(поз);
	ПриВыбореУровня();
КонецПроцедуры



Процедура ДобавитьСтрокуУровня()
	// Строка ТЗ для уровня только 1
	Если ТЗУровень.КоличествоСтрок()>0 Тогда
		Возврат;    
	КонецЕсли;

	Упак = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
	Если Упак.Выбрать("Упаковка","ФормаСписка") = 0 Тогда
	    Возврат;
	КонецЕсли;
	Кол = 0;
	ВвестиЧисло(Кол,"Кол-во",9,0);
	ТЗУровень.НоваяСтрока();
	ТЗУровень.Упаковка = Упак.ТекущийЭлемент();
	ТЗУровень.КолВо = Кол;
	ДобавитьУровень(); // добавить или обновить сведения об уровне	
	
КонецПроцедуры 

Процедура УдалитьСтрокуУровня()
	ОчиститьУровень();
	//ТЗУровень.УдалитьСтроки();
КонецПроцедуры

//************ Маркировки
Процедура ДобавитьМаркВУпак()
	Если ТЗУровень.КоличествоСтрок()=0 Тогда
		Возврат;    
	КонецЕсли;
	ТЗУровень.Маркировки = ЗначениеВСтроку(СЗМаркировки);
	ДобавитьУровень(); // добавить или обновить сведения об уровне	
	
КонецПроцедуры 


Процедура ДобавитьМаркировку()
	Если ТЗУровень.КоличествоСтрок()=0 Тогда
		Предупреждение("Нет сведений об упаковке");
		Возврат;    
	КонецЕсли;

	Класс = "";
	Если НЕ(СзКлассы.ВыбратьЗначение(Класс,"Класс")=1) Тогда
    	Возврат;
	КонецЕсли;	
	//Проверить - уже введена такая маркировка?
	Маркзнач = "";
	ВвестиСтроку(МаркЗнач,"Значение",50);
	
	СзМаркировки.ДобавитьЗначение(МаркЗнач,Класс);
	ДобавитьМаркВУпак();
КонецПроцедуры


Процедура УбратьМаркировку()
	тстр = СзМаркировки.ТекущаяСтрока();
	Если ПустоеЗначение(тстр) = 1 Тогда
	    Возврат;
	КонецЕсли;
	СзМаркировки.УдалитьЗначение(тстр); 
	ДобавитьМаркВУпак();
КонецПроцедуры

Процедура КликМаркировка()
	поз = СзМаркировки.ТекущаяСтрока();
	Если ПустоеЗначение(поз) = 1 Тогда
	    Возврат;
	КонецЕсли;
	Стр = ""; 	
	рез = СзМаркировки.ПолучитьЗначение(поз,Стр);
	Если ВвестиСтроку(Рез,"Значение",50) = 1 Тогда
		СзМаркировки.УстановитьЗначение(поз,Рез,Стр);    
	КонецЕсли;
	ДобавитьМаркВУпак();	
КонецПроцедуры


//Конец ********Маркировки


Процедура ОбработкаКлика() // корр сведений об упаковке и кол-ве 
	Если ТЗУровень.ТекущаяСтрока()=0 Тогда
		Возврат;    
	КонецЕсли;
	Если ТЗУровень.ТекущаяКолонка()="КолВо" Тогда
		Кол = ТЗУровень.КолВо;
		Если ВвестиЧисло(Кол,"Кол-во",9,0)=1 Тогда
			ТЗУровень.КолВо = Кол;		
		КонецЕсли;
	ИначеЕсли ТЗУровень.ТекущаяКолонка()="Упаковка" Тогда
		Упак = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Упак.Выбрать("Упаковка","ФормаСписка") = 0 Тогда
	    	Возврат;
		КонецЕсли;
		ТЗУровень.Упаковка = Упак.ТекущийЭлемент();
	Иначе
		Возврат;
	КонецЕсли;
	ДобавитьУровень();
КонецПроцедуры


Процедура ПриОткрытии()
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
	    СтрСведенияОбУпаковке = Форма.Параметр;
		промСЗ = ЗначениеИзСтроки(СтрСведенияОбУпаковке);
		Если ТипЗначенияСтр(ПромСЗ) = "СписокЗначений" Тогда
	    	промСЗ.Выгрузить(СЗУровниУпаковки);
			ПриВыбореУровня();
		Иначе
			Предупреждение("Передан неверный параметр");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТестВосст()   // тестирование
	промСЗ = ЗначениеИзСтроки(СтрСведенияОбУпаковке);
	Если ТипЗначенияСтр(ПромСЗ) = "СписокЗначений" Тогда
	    промСЗ.Выгрузить(СЗУровниУпаковки); 
		ПриВыбореУровня();
	Иначе
		Предупреждение("Передан неверный параметр");
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	// учесть отмену изменений
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
	    Форма.Параметр = СтрСведенияОбУпаковке;
	КонецЕсли;
КонецПроцедуры

ТЗУровень.НоваяКолонка("Упаковка","Справочник.ВСД_ФормыУпаковки");
ТЗУровень.НоваяКолонка("КолВо","Число",9,0);
ТЗУровень.НоваяКолонка("Маркировки");

//СЗУровниУпаковки = СоздатьОбъект("СписокЗначений"); //на форме

СЗНомераУровней.ДобавитьЗначение(1,"Внутренний уровень.");
СЗНомераУровней.ДобавитьЗначение(2,"Потребительский уровень.");
СЗНомераУровней.ДобавитьЗначение(3,"Промежуточный уровень.");
СЗНомераУровней.ДобавитьЗначение(4,"Торговый уровень.");
СЗНомераУровней.ДобавитьЗначение(5,"Дополнительный уровень.");
СЗНомераУровней.ДобавитьЗначение(6,"Транспортный (Логистический) уровень.");


СзКлассы = СоздатьОбъект("СписокЗначений");
СзКлассы.ДобавитьЗначение("UNDEFINED");
СзКлассы.ДобавитьЗначение("BN");
СзКлассы.ДобавитьЗначение("SSCC");
СзКлассы.ДобавитьЗначение("EAN8");
СзКлассы.ДобавитьЗначение("EAN13");
СзКлассы.ДобавитьЗначение("EAN128");
СзКлассы.ДобавитьЗначение("BUNDLE");

//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
