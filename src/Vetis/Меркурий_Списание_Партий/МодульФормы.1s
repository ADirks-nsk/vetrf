Перем ВыбФирма,Отправитель_ХозСубъект Экспорт;
Перем оПривязки; //:Меркурий.Привязки
Перем тпПартий, тзПартий;
Перем СтрокаСортировки;

//======================================================================
Процедура ПоКнопкеОтправить()
	Если Вопрос("Вы уверены?", "Да+Нет", 30) = "Нет" Тогда
		Возврат;
	КонецЕсли;
	
	тзПартий.ВыбратьСтроки();
	Пока тзПартий.ПолучитьСтроку() = 1 Цикл  
		Если тзПартий.Пометка = 1 Тогда  
			Если ПустоеЗначение(тзПартий.Документ) = 0 Тогда
				ГМ2.Отправить_ВСД2_Инвентаризация(тзПартий.Документ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	тпПартий.ОбновитьСтроки();
КонецПроцедуры

//======================================================================
Функция СоздатьИнвентаризацию(Партия)
	Док = СоздатьОбъект("Документ.ВСД2_Инвентаризация");
	
	Док.Новый();
	Док.ДатаДок = ТекущаяДата();
	Док.Владелец_ХозСубъект = Отправитель_ХозСубъект;
	Док.Владелец_Площадка = Отправитель_Площадка;
    Док.ПричинаРасхождения = "Не найдено на складе";
	Док.ОписаниеНесоответствия = "";
	
	Док.НоваяСтрока();
	Док.Партия = Партия;
	Док.Продукция = Партия.Продукция;
	Док.ВидПродукции= Партия.ВидПродукции;

	Док.ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	Док.НаименованиеПродукции = Партия.НаименованиеПродукции;
	Док.ДатаИзготовления1 = Партия.ДатаИзготовления1;
	Док.ДатаИзготовления2 = Партия.ДатаИзготовления2;
	Док.ДатаСрокГодности1 = Партия.ДатаСрокГодности1;
	Док.ДатаСрокГодности2 = Партия.ДатаСрокГодности2;
	Док.Производитель_площадка = Партия.Производитель_Площадка;
	Док.Продукция_Элемент = Партия.Продукция_Элемент;
	
	Док.Записать();
	
	Возврат Док.ТекущийДокумент();
КонецФункции

//======================================================================
Процедура ПоКнопкеСписать()  
	Если Вопрос("Вы уверены?", "Да+Нет", 30) = "Нет" Тогда
		Возврат;
	КонецЕсли;
	
	тзПартий.ВыбратьСтроки();
	Пока тзПартий.ПолучитьСтроку() = 1 Цикл  
		Если тзПартий.Пометка = 1 Тогда  
			Если ПустоеЗначение(тзПартий.Документ) = 1 Тогда
				ВыбДок = СоздатьИнвентаризацию(тзПартий.ВСД_Партия);
				тзПартий.Документ = ВыбДок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	тпПартий.ОбновитьСтроки();
КонецПроцедуры
	
//======================================================================
Процедура Сформировать()
	СтрокаСортировки = "	ВСД_Продукция_Элемент.DESCR";

	Если ГМ.ЭтоSQL = 1 Тогда
		ТекстЗапроса = "
			|SELECT "+СтрокаСортировки+"
			|	, ВСД_Партия.ID as [ВСД_Партия $Справочник.ВСД_Партия]
			|	, $ВСД_Партия.Продукция_Элемент as [Продукция_Элемент $Справочник.ВСД_Продукция_Элемент]
			|	, $ВСД_Партия.Количество as [Количество]
			|	, $ВСД_Партия.ДатаИзготовления1 as [Изготовлено]
			|	, $ВСД_Партия.ДатаСрокГодности1 as [ГоденДо]
			|	, $ВСД_Партия.НомерПартии as [НомерПартии]
			|	, $ВСД_Партия.ЕдиницаИзмерения as [Единица $Справочник.ВСД_ЕдиницыИзмерения]
			|	, $ВСД_Партия.Производитель_Площадка as [Производитель_Площадка $Справочник.ВСД_Площадка]
			|	, $ВСД_Партия.Получатель_Площадка as [Получатель_Площадка $Справочник.ВСД_Площадка]
			|	, $ВСД_Партия.НомерЗаписи as [НомерЗаписи]
			|	, $ВСД_Партия.ВсдДата as [Дата]
			|	, $ВСД_Партия.Статус as [Статус]
			|	, $ВСД_Партия.Продукция as [Продукция $Справочник.ВСД_Продукция] 
			|	, 0 [Пометка] 
			|	, $ПустойИД [Документ $Документ.ВСД2_Инвентаризация] 
			|FROM $Справочник.ВСД_Партия as ВСД_Партия
			|	INNER JOIN $Справочник.ВСД_Продукция_Элемент as ВСД_Продукция_Элемент ON ВСД_Продукция_Элемент.ID = $ВСД_Партия.Продукция_Элемент
			|";
	Иначе
		ТекстЗапроса = "
			|SELECT "+СтрокаСортировки+"
			|	, ВСД_Партия.ID as [ВСД_Партия :Справочник.ВСД_Партия]
			|	, ВСД_Партия.Продукция_Элемент as [Продукция_Элемент :Справочник.ВСД_Продукция_Элемент]
			|	, ВСД_Партия.Количество as [Количество]
			|	, ВСД_Партия.ДатаИзготовления1 as [Изготовлено]
			|	, ВСД_Партия.ДатаСрокГодности1 as [ГоденДо]
			|	, ВСД_Партия.НомерПартии as [НомерПартии]
			|	, ВСД_Партия.ЕдиницаИзмерения as [Единица :Справочник.ВСД_ЕдиницыИзмерения]
			|	, ВСД_Партия.Производитель_Площадка as [Производитель_Площадка :Справочник.ВСД_Площадка]
			|	, ВСД_Партия.Получатель_Площадка as [Получатель_Площадка :Справочник.ВСД_Площадка]
			|	, ВСД_Партия.НомерЗаписи as [НомерЗаписи]
			|	, ВСД_Партия.ВсдДата as [Дата]
			|	, ВСД_Партия.Статус as [Статус]
			|	, ВСД_Партия.Продукция as [Продукция :Справочник.ВСД_Продукция]
			|	, 0 [Пометка] 
			|	, :ПустойИД [Документ :Документ.ВСД2_Инвентаризация] 
			|FROM [Справочник.ВСД_Партия] as ВСД_Партия
			|	INNER JOIN [Справочник.ВСД_Продукция_Элемент] as ВСД_Продукция_Элемент ON ВСД_Продукция_Элемент.ID = ВСД_Партия.Продукция_Элемент
			|	";
	КонецЕсли;
	
	СтрокаУсловий= "( $ВСД_Партия.Количество>0 )";
	
	МД = СоздатьОбъект("MetaDataWork");                                        
	Если ПустоеЗначение(Отправитель_ХозСубъект) = 0 Тогда
		СтрокаУсловий = СтрокаУсловий + " AND $ВСД_Партия.Получатель_ХозСубъект = '"+МД.ЗначениеВСтрокуБД(Отправитель_ХозСубъект)+"' AND "; ЕстьУсловие = 1; 
	//Иначе
	//	СтрокаУсловий = ""; ЕстьУсловие = 0;
	КонецЕсли;     
	Если ПустоеЗначение(Отправитель_Площадка) = 0 Тогда
		СтрокаУсловий = СтрокаУсловий + "$ВСД_Партия.Получатель_Площадка = '"+МД.ЗначениеВСтрокуБД(Отправитель_Площадка)+"' AND "; ЕстьУсловие = 1; 
	КонецЕсли;     	

	СтрокаУсловий=Лев(СтрокаУсловий,(СтрДлина(СтрокаУсловий)-5));
	Если ГМ.ЭтоSQL = 0 Тогда
		СтрокаУсловий = СтрЗаменить(СтрокаУсловий,"$","");
	КонецЕсли;

	Если СтрокаУсловий <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|WHERE "+СтрокаУсловий;
	КонецЕсли;  
	ТекстЗапроса = ТекстЗапроса + "
		|ORDER BY 1,5";  

	ВремТЗ = СоздатьОбъект("ТаблицаЗначений");
	Если ГМ.ЭтоSQL = 1 Тогда
		ГМ.RS.Отладка(0);
		ГМ.RS.ВыполнитьИнструкцию(ТекстЗапроса, ВремТЗ); 
	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();
		ВремТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;               
	
	тзПартий.Загрузить(ВремТЗ);	
	тпПартий.ОбновитьСтроки();
КонецПроцедуры

//======================================================================
Процедура тпПартийПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)
	Если ПустоеЗначение(ДанныеСтроки.Документ)=0 Тогда 
		Если СокрЛП(ДанныеСтроки.Документ.Статус) = "COMPLETED" Тогда 
			ОформлениеСтроки.ЦветФона = ГМ.цвЗеленый;
		ИначеЕсли СокрЛП(ДанныеСтроки.Документ.Статус) = "REJECTED" Тогда 
			ОформлениеСтроки.ЦветФона = ГМ.цвКрасный;
		Иначе
			ОформлениеСтроки.ЦветФона = ГМ.цвЖелтый;
		КонецЕсли;
	КонецЕсли;

	Если ТипРегиона = 3 Тогда
		ГМ.ВывестиФлажок(ОформлениеСтроки, ДанныеСтроки, "Пометка");
		
		ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Изготовлено");
		ОбъектЯчейка.Текст=ГМ.Преобразовать_СтрокаДата_в_ФормализованнаяДата(ДанныеСтроки.Изготовлено); 
		ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("ГоденДо");
		ОбъектЯчейка.Текст=ГМ.Преобразовать_СтрокаДата_в_ФормализованнаяДата(ДанныеСтроки.ГоденДо); 
	КонецЕсли;
	
КонецПроцедуры

//======================================================================
Процедура тпПартийПриВыбореЗаголовка(ТабличноеПоле,Колонка)
	Если тзПартий.КоличествоСтрок()=0 Тогда Возврат;
	КонецЕсли;
	ТабличноеПоле.ТекущаяКолонка=Колонка;
	Колонка.ЗнакУпорядочивания = ?(Колонка.ЗнакУпорядочивания=1,2,1);

	СтрокаСортировки=?(Колонка.ЗнакУпорядочивания=1,"","-")+Колонка.Имя;

	Если Колонка.Имя = "Продукция_Элемент" Тогда
		СтрокаСортировки = СтрокаСортировки+",Изготовлено";
	ИначеЕсли Колонка.Имя = "Количество" Тогда
		СтрокаСортировки = СтрокаСортировки+",Продукция_Элемент";
	КонецЕсли;

	тзПартий.Сортировать(СтрокаСортировки);
	ТабличноеПоле.ОбновитьСтроки();

	КолКлонок=ТабличноеПоле.Колонки.Количество()-1;
	Для Сч = 0 По КолКлонок Цикл
		ВыбКолонка=ТабличноеПоле.Колонки.Получить(Сч);
		Если ВыбКолонка <> Колонка Тогда
			ВыбКолонка.ЗнакУпорядочивания=0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура тпПартийПриВыбореФлажка(ТабличноеПоле,Стр, Колонка, ТипРегиона)
	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, тзПартий);
	тзПартий.Пометка = ?(тзПартий.Пометка = 1,0,1);
	ТабличноеПоле.ОбновитьСтроки();
КонецПроцедуры

Процедура тпПартийВыбор()
	ГМ.ПриАктивизацииСтрокиТП(тпПартий, тзПартий);
	ГМ.ПриАктивизацииКолонкиТП(тпПартий, тзПартий);
	
	текСтр=тзПартий.ТекущаяСтрока();
	Если текСтр=0 Тогда Возврат; КонецЕсли;
	текКол = тзПартий.ТекущаяКолонка();
	
	Эл = тзПартий.ПолучитьЗначение(текСтр, текКол);	
	ОткрытьФорму(Эл);
	
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииФирмы()
	ГМ.Инициализация(Контекст);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);

	тзПартий.УдалитьСтроки();
	//тпПартий.ОбновитьСтроки();
	
	Сформировать();
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
		ПриИзмененииФирмы();
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииПлощадки()

	тзПартий.УдалитьСтроки();
	//тпПартий.ОбновитьСтроки();
	
	Сформировать();
	
КонецПроцедуры

//======================================================================
Процедура ПриОткрытии()
	ВыбФирма = "";
	ГМ._ПриОткрытии(Контекст);

//	оПривязки.УстановитьФорму(Форма);
	оПривязки.Привязка("тпПартий", "H", "Форма", "W", "Форма");
	оПривязки.Привязка("кнСписать,кнОтправить,Версия","T","Форма");
		
КонецПроцедуры

//======================================================================
Процедура ПослеОткрытия()
	оПривязки.ПослеОткрытия();
	
	Сформировать();
КонецПроцедуры

//======================================================================
Процедура ПослеСозданияФормы()
	тпПартий = ГМ.СоздатьТабличноеПоле( Контекст, "тпПартий", тзПартий, 1,1);
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	оПривязки.ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры
    
//======================================================================
Процедура ГрупповаяПометка(Режим)
	тзПартий.ВыбратьСтроки();
	Пока тзПартий.ПолучитьСтроку() = 1 Цикл
		тзПартий.Пометка = Режим;
	КонецЦикла;                  
	тпПартий.ОбновитьСтроки();
КонецПроцедуры
	
//======================================================================
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,ФлагСтандОбр)
	Если ЭлементДиалога = "Отправитель_Площадка" Тогда
		ВремЭлем = Отправитель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//======================================================================
Процедура ПриНажатииЛевойКнопки(Сост, х, у, ФСО)
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
	Если ТипЗначенияСтр(Атр) = "АтрибутФормы" Тогда
		Если Атр.Идентификатор = "Версия" Тогда
			ЗапуститьПриложение("https://redmine.kb99.pro/issues/1529#note-18");
		КонецЕсли;  
	КонецЕсли;	
	
КонецПроцедуры

тзПартий = СоздатьОбъект("ТаблицаЗначений");
тзПартий.НоваяКолонка("Пометка",,,,,5,);
тзПартий.НоваяКолонка("ВСД_Партия",,,,"Партия",20,);
тзПартий.НоваяКолонка("Продукция_Элемент",,,,,20,);
тзПартий.НоваяКолонка("Количество","Число",,,"Масса нетто",10,"Ч15.3.'");
тзПартий.НоваяКолонка("Изготовлено",,,,"Изготовлено",10,);
тзПартий.НоваяКолонка("ГоденДо",,,,"Годен до",10,);
тзПартий.НоваяКолонка("НомерПартии",,,,"Номер партии",10,);
тзПартий.НоваяКолонка("Единица",,,,"Единица",5,); 
тзПартий.НоваяКолонка("Производитель_Площадка",,,,"Производитель Площадка",20,); 
тзПартий.НоваяКолонка("Получатель_Площадка",,,,"Получатель Площадка",20,); 
тзПартий.НоваяКолонка("НомерЗаписи",,,,"Номер записи",8,); 
тзПартий.НоваяКолонка("Дата","Дата",,,"Дата",8,); 
тзПартий.НоваяКолонка("Статус",,,,,8,); 
тзПартий.НоваяКолонка("Продукция",,,,,10,);
тзПартий.НоваяКолонка("Документ",,,,,20,);
