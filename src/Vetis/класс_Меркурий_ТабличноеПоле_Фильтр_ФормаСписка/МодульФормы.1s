
Перем Неопределено;

Перем КонтекстФормы;
Перем ВидСпр;

Перем тзНастройки;

Перем фУстановленОтбор;
//===========================================================

//--------------------------------------------------------------------
/// События, которые нужно транслировать из формы в данный класс
///   - ПриНачалеВыбораЗначения(Имя, ФСО)
///
///
///
//--------------------------------------------------------------------



Функция Сам(Конт)
	Возврат Конт;
КонецФункции

Функция База()
	Возврат Сам(Контекст).ПолучитьБазовыйКласс();
КонецФункции


///******************************** ADirks 26.11.2019 ************
Процедура Конструктор()
	тзНастройки = СоздатьОбъект("ТаблицаЗначений");
	тзНастройки.НоваяКолонка("Имя", "Строка");
	тзНастройки.НоваяКолонка("ИмяКолонки", "Строка");
КонецПроцедуры
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Процедура Инит(Конт, ИмяКонтрола, _ВидСпр) Экспорт
	Сам = Сам(Контекст);
	База = База(); //:Меркурий.ТабличноеПоле.Фильтр
	
	КонтекстФормы = Конт;
	ВидСпр = _ВидСпр;
	ПрефиксНастроек = ВидСпр+"_ФС";
	
	База.Инит(Конт, ИмяКонтрола, ПрефиксНастроек);
КонецПроцедуры
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 28.11.2019 ************
Процедура ДобавитьПоКолонке(Имя, Представление = "") Экспорт
	Сам = Сам(Контекст);
	База = База();
	
	Если Имя = "Наименование" Тогда
		Тип = "Строка";
		Если ПустаяСтрока(Представление) = 1 Тогда
			Представление = Имя;
		КонецЕсли;
		ВыражениеСКЛ = "Спр.DESCR";
	Иначе
		МетаРекв = Метаданные.Справочник(ВидСпр).Реквизит(Имя);
		Тип = МетаРекв.Тип;
		Если ПустоеЗначение(МетаРекв.Вид) = 0 Тогда
			Тип = Тип+"."+МетаРекв.Вид;
		КонецЕсли;
		Если ПустаяСтрока(Представление) = 1 Тогда
			Представление = МетаРекв.Представление();
		КонецЕсли;

		ВыражениеСКЛ = "$Спр."+Имя;
	КонецЕсли;
	
	База.Добавить(Имя, Представление, Тип, ВыражениеСКЛ);
	Если Имя <> "Наименование" Тогда
		Сам.СвязаннаяКолонка(Имя, Имя);
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 28.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Процедура УстановитьОтбор() Экспорт
	Сам = Сам(Контекст);
	
	Состояние("обновляю ...");

	фЕстьФильтр = Сам.фЕстьФильтр();
	Если фЕстьФильтр = 1 Тогда
		ЭтоSQL = ГМ.ЭтоSQL;
		Если ЭтоSQL = 1 Тогда
			ТекстЗапроса = "Set NoCount ON
			|SELECT
			|	Спр.ID [эл $Справочник."+ВидСпр+"]
			|FROM
			|	$Справочник."+ВидСпр+" as Спр
			|	"+Сам.JOIN()+"
			|
			|"+Сам.WHERE()+"
			|
			|GROUP BY
			|	Спр.ID, Спр.DESCR
			|ORDER BY
			|	Спр.DESCR
			|";
		Иначе
			ТекстЗапроса = "
			|SELECT
			|	Спр.ID as [эл :Справочник."+ВидСпр+"]
			|FROM
			|	[Справочник."+ВидСпр+"] as Спр
			|	"+Сам.JOIN()+"
			|
			|"+Сам.WHERE()+"
			|
			|GROUP BY
			|	Спр.ID, Спр.DESCR
			|ORDER BY
			|	Спр.DESCR
			|";
		КонецЕсли;
		
		
		сзЭлементы = СоздатьОбъект("СписокЗначений");
		Если ЭтоSQL = 1 Тогда
			//ГМ.RS.Отладка(1);
			ГМ.RS.ВыполнитьИнструкцию(ТекстЗапроса, сзЭлементы); 
		Иначе
			Запрос = ГМ.базаДанных.НовыйЗапрос();
			тз = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			тз.Выгрузить(сзЭлементы,,,1);
		КонецЕсли;
		
		фУстановленОтбор = 1;

		текЭлемент = КонтекстФормы.ТекущийЭлемент();
		КонтекстФормы.ИспользоватьСписокЭлементов(сзЭлементы);
		КонтекстФормы.Форма.Обновить();
		Попытка
			КонтекстФормы.АктивизироватьОбъект(текЭлемент);
		Исключение
		КонецПопытки;
		
	Иначе
		Если фУстановленОтбор = 1 Тогда 
			текЭлемент = КонтекстФормы.ТекущийЭлемент();
			КонтекстФормы.ИспользоватьСписокЭлементов();
			КонтекстФормы.Форма.Обновить();

			Попытка
				КонтекстФормы.АктивизироватьОбъект(текЭлемент);
			Исключение
			КонецПопытки;
		КонецЕсли;
		УстановленОтбор = 0;
	КонецЕсли;

	Состояние("");
КонецПроцедуры 
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Функция СвязаннаяКолонка(Имя, НовИмяКолонки = -1) Экспорт
	нСтр = 0;
	Если тзНастройки.НайтиЗначение(Имя, нСтр, "Имя") = 0 Тогда
		тзНастройки.НоваяСтрока();
		тзНастройки.Имя = Имя;
	Иначе
		тзНастройки.ПолучитьСтрокуПоНомеру(нСтр);
	КонецЕсли;
	
	Если НовИмяКолонки <> -1 Тогда
		тзНастройки.ИмяКолонки = НовИмяКолонки;
	КонецЕсли;
	
	Возврат тзНастройки.ИмяКолонки;
КонецФункции
///******************************** ADirks 26.11.2019 ************


///******************************** ADirks 26.11.2019 ************
Функция ЗначениеКолонкиФормы(ИмяФильтра) Экспорт
	СвязаннаяКолонка = СвязаннаяКолонка(ИмяФильтра);
	Если ПустоеЗначение(СвязаннаяКолонка) = 1 Тогда
		Возврат Неопределено;
	ИначеЕсли ПустоеЗначение(КонтекстФормы.ТекущийЭлемент()) = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстМодуля = "
	|Функция ЗначениеКол()
	|	Возврат ТекущийЭлемент()."+СвязаннаяКолонка+";
	|КонецФункции
	|";
	
	Модуль = СоздатьОбъект("ВыполняемыйМодуль");
	Модуль.УстановитьМодуль(ТекстМодуля);
	Модуль.НазначитьКонтекст(КонтекстФормы);
	Модуль.КомпилироватьМодуль();
	Модуль.ВыполнитьМодуль();
	
	Возврат Модуль.ЗначениеКол();
КонецФункции
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Процедура ЗаполнитьМеню(сзМеню, ТипРегиона, Колонка, Стр) Экспорт
	Сам = Сам(Контекст); //:Меркурий.ТабличноеПоле.Фильтр
	
	Если ТипРегиона = Сам.ТипРегиона_Заголовок() Тогда
		тзНастройки.ВыбратьСтроки();
		Пока тзНастройки.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(тзНастройки.ИмяКолонки) = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = тзНастройки.Имя;
			Представление = ""+Сам.Представление(Имя);
			Значение = ЗначениеКолонкиФормы(Имя);
			Если Значение <> Неопределено Тогда
				сзМеню.ДобавитьЗначение(Имя, Представление+":  Отбор по <"+Значение+">");
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипРегиона = Сам.ТипРегиона_Строки() Тогда
		Имя = Сам.ТекущиеДанные.Имя;
		Значение = ЗначениеКолонкиФормы(Имя);
		Если Значение <> Неопределено Тогда
			сзМеню.ДобавитьЗначение(Имя, "Отбор по <"+Значение+">");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///******************************** ADirks 26.11.2019 ************
Функция ПриВыбореМеню(Действие) Экспорт
	Сам = Сам(Контекст);
	
	Сам.Значение(Действие, ЗначениеКолонкиФормы(Действие));
	Сам.УстановитьОтбор();
	
	Возврат 1;
КонецФункции
///******************************** ADirks 26.11.2019 ************


Процедура ПриКонтекстномМеню(ТипРегиона, Колонка, Стр) Экспорт
	Сам = Сам(Контекст);
	
	сзМеню = СоздатьОбъект("СписокЗначений");
	
	Сам.ЗаполнитьМеню(сзМеню, ТипРегиона, Колонка, Стр);
	
	Действие = "";
	Если сзМеню.ВыбратьЗначение(Действие,,,, 1) <> 1 Тогда
		Возврат;
	КонецЕсли;
	

	Сам.ПриВыбореМеню(Действие);
КонецПроцедуры
///******************************** ADirks 26.11.2019 ************
